
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00026000 <_vector_table>:
   26000:	f0 29 00 20 71 89 02 00 01 e3 02 00 45 89 02 00     .). q.......E...
   26010:	45 89 02 00 45 89 02 00 45 89 02 00 00 00 00 00     E...E...E.......
	...
   2602c:	0d 86 02 00 45 89 02 00 00 00 00 00 c5 85 02 00     ....E...........
   2603c:	45 89 02 00                                         E...

00026040 <_irq_vector_table>:
   26040:	89 86 02 00 89 86 02 00 89 86 02 00 89 86 02 00     ................
   26050:	89 86 02 00 89 86 02 00 89 86 02 00 89 86 02 00     ................
   26060:	89 86 02 00 89 86 02 00 89 86 02 00 89 86 02 00     ................
   26070:	89 86 02 00 89 86 02 00 89 86 02 00 89 86 02 00     ................
   26080:	89 86 02 00 89 86 02 00 89 86 02 00 89 86 02 00     ................
   26090:	89 86 02 00 89 86 02 00 89 86 02 00 89 86 02 00     ................
   260a0:	89 86 02 00 89 86 02 00 89 86 02 00 89 86 02 00     ................
   260b0:	89 86 02 00 89 86 02 00 89 86 02 00 89 86 02 00     ................
   260c0:	89 86 02 00 89 86 02 00 89 86 02 00 89 86 02 00     ................
   260d0:	89 86 02 00 89 86 02 00 89 86 02 00 89 86 02 00     ................
   260e0:	89 86 02 00 89 86 02 00 89 86 02 00 89 86 02 00     ................
   260f0:	89 86 02 00 89 86 02 00 89 86 02 00 89 86 02 00     ................

Disassembly of section text:

00026100 <__aeabi_uldivmod>:
   26100:	b953      	cbnz	r3, 26118 <__aeabi_uldivmod+0x18>
   26102:	b94a      	cbnz	r2, 26118 <__aeabi_uldivmod+0x18>
   26104:	2900      	cmp	r1, #0
   26106:	bf08      	it	eq
   26108:	2800      	cmpeq	r0, #0
   2610a:	bf1c      	itt	ne
   2610c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   26110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26114:	f000 b80c 	b.w	26130 <__aeabi_idiv0>
   26118:	f1ad 0c08 	sub.w	ip, sp, #8
   2611c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   26120:	f000 f808 	bl	26134 <__udivmoddi4>
   26124:	f8dd e004 	ldr.w	lr, [sp, #4]
   26128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2612c:	b004      	add	sp, #16
   2612e:	4770      	bx	lr

00026130 <__aeabi_idiv0>:
   26130:	4770      	bx	lr
   26132:	bf00      	nop

00026134 <__udivmoddi4>:
   26134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26138:	4686      	mov	lr, r0
   2613a:	468c      	mov	ip, r1
   2613c:	4608      	mov	r0, r1
   2613e:	9e08      	ldr	r6, [sp, #32]
   26140:	4615      	mov	r5, r2
   26142:	4674      	mov	r4, lr
   26144:	4619      	mov	r1, r3
   26146:	2b00      	cmp	r3, #0
   26148:	f040 80c2 	bne.w	262d0 <__udivmoddi4+0x19c>
   2614c:	4285      	cmp	r5, r0
   2614e:	fab2 f282 	clz	r2, r2
   26152:	d945      	bls.n	261e0 <__udivmoddi4+0xac>
   26154:	b14a      	cbz	r2, 2616a <__udivmoddi4+0x36>
   26156:	f1c2 0320 	rsb	r3, r2, #32
   2615a:	fa00 fc02 	lsl.w	ip, r0, r2
   2615e:	fa2e f303 	lsr.w	r3, lr, r3
   26162:	4095      	lsls	r5, r2
   26164:	ea43 0c0c 	orr.w	ip, r3, ip
   26168:	4094      	lsls	r4, r2
   2616a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2616e:	b2a8      	uxth	r0, r5
   26170:	fbbc f8fe 	udiv	r8, ip, lr
   26174:	0c23      	lsrs	r3, r4, #16
   26176:	fb0e cc18 	mls	ip, lr, r8, ip
   2617a:	fb08 f900 	mul.w	r9, r8, r0
   2617e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   26182:	4599      	cmp	r9, r3
   26184:	d928      	bls.n	261d8 <__udivmoddi4+0xa4>
   26186:	18eb      	adds	r3, r5, r3
   26188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   2618c:	d204      	bcs.n	26198 <__udivmoddi4+0x64>
   2618e:	4599      	cmp	r9, r3
   26190:	d902      	bls.n	26198 <__udivmoddi4+0x64>
   26192:	f1a8 0702 	sub.w	r7, r8, #2
   26196:	442b      	add	r3, r5
   26198:	eba3 0309 	sub.w	r3, r3, r9
   2619c:	b2a4      	uxth	r4, r4
   2619e:	fbb3 fcfe 	udiv	ip, r3, lr
   261a2:	fb0e 331c 	mls	r3, lr, ip, r3
   261a6:	fb0c f000 	mul.w	r0, ip, r0
   261aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   261ae:	42a0      	cmp	r0, r4
   261b0:	d914      	bls.n	261dc <__udivmoddi4+0xa8>
   261b2:	192c      	adds	r4, r5, r4
   261b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   261b8:	d204      	bcs.n	261c4 <__udivmoddi4+0x90>
   261ba:	42a0      	cmp	r0, r4
   261bc:	d902      	bls.n	261c4 <__udivmoddi4+0x90>
   261be:	f1ac 0302 	sub.w	r3, ip, #2
   261c2:	442c      	add	r4, r5
   261c4:	1a24      	subs	r4, r4, r0
   261c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   261ca:	b11e      	cbz	r6, 261d4 <__udivmoddi4+0xa0>
   261cc:	40d4      	lsrs	r4, r2
   261ce:	2300      	movs	r3, #0
   261d0:	6034      	str	r4, [r6, #0]
   261d2:	6073      	str	r3, [r6, #4]
   261d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   261d8:	4647      	mov	r7, r8
   261da:	e7dd      	b.n	26198 <__udivmoddi4+0x64>
   261dc:	4663      	mov	r3, ip
   261de:	e7f1      	b.n	261c4 <__udivmoddi4+0x90>
   261e0:	bb92      	cbnz	r2, 26248 <__udivmoddi4+0x114>
   261e2:	1b43      	subs	r3, r0, r5
   261e4:	2101      	movs	r1, #1
   261e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   261ea:	b2af      	uxth	r7, r5
   261ec:	fbb3 fcfe 	udiv	ip, r3, lr
   261f0:	0c20      	lsrs	r0, r4, #16
   261f2:	fb0e 331c 	mls	r3, lr, ip, r3
   261f6:	fb0c f807 	mul.w	r8, ip, r7
   261fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   261fe:	4598      	cmp	r8, r3
   26200:	d962      	bls.n	262c8 <__udivmoddi4+0x194>
   26202:	18eb      	adds	r3, r5, r3
   26204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   26208:	d204      	bcs.n	26214 <__udivmoddi4+0xe0>
   2620a:	4598      	cmp	r8, r3
   2620c:	d902      	bls.n	26214 <__udivmoddi4+0xe0>
   2620e:	f1ac 0002 	sub.w	r0, ip, #2
   26212:	442b      	add	r3, r5
   26214:	eba3 0308 	sub.w	r3, r3, r8
   26218:	b2a4      	uxth	r4, r4
   2621a:	fbb3 fcfe 	udiv	ip, r3, lr
   2621e:	fb0e 331c 	mls	r3, lr, ip, r3
   26222:	fb0c f707 	mul.w	r7, ip, r7
   26226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2622a:	42a7      	cmp	r7, r4
   2622c:	d94e      	bls.n	262cc <__udivmoddi4+0x198>
   2622e:	192c      	adds	r4, r5, r4
   26230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   26234:	d204      	bcs.n	26240 <__udivmoddi4+0x10c>
   26236:	42a7      	cmp	r7, r4
   26238:	d902      	bls.n	26240 <__udivmoddi4+0x10c>
   2623a:	f1ac 0302 	sub.w	r3, ip, #2
   2623e:	442c      	add	r4, r5
   26240:	1be4      	subs	r4, r4, r7
   26242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   26246:	e7c0      	b.n	261ca <__udivmoddi4+0x96>
   26248:	f1c2 0320 	rsb	r3, r2, #32
   2624c:	fa20 f103 	lsr.w	r1, r0, r3
   26250:	4095      	lsls	r5, r2
   26252:	4090      	lsls	r0, r2
   26254:	fa2e f303 	lsr.w	r3, lr, r3
   26258:	4303      	orrs	r3, r0
   2625a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2625e:	b2af      	uxth	r7, r5
   26260:	fbb1 fcfe 	udiv	ip, r1, lr
   26264:	fb0e 101c 	mls	r0, lr, ip, r1
   26268:	0c19      	lsrs	r1, r3, #16
   2626a:	fb0c f807 	mul.w	r8, ip, r7
   2626e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   26272:	4588      	cmp	r8, r1
   26274:	fa04 f402 	lsl.w	r4, r4, r2
   26278:	d922      	bls.n	262c0 <__udivmoddi4+0x18c>
   2627a:	1869      	adds	r1, r5, r1
   2627c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   26280:	d204      	bcs.n	2628c <__udivmoddi4+0x158>
   26282:	4588      	cmp	r8, r1
   26284:	d902      	bls.n	2628c <__udivmoddi4+0x158>
   26286:	f1ac 0002 	sub.w	r0, ip, #2
   2628a:	4429      	add	r1, r5
   2628c:	eba1 0108 	sub.w	r1, r1, r8
   26290:	b29b      	uxth	r3, r3
   26292:	fbb1 fcfe 	udiv	ip, r1, lr
   26296:	fb0e 111c 	mls	r1, lr, ip, r1
   2629a:	fb0c f707 	mul.w	r7, ip, r7
   2629e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   262a2:	429f      	cmp	r7, r3
   262a4:	d90e      	bls.n	262c4 <__udivmoddi4+0x190>
   262a6:	18eb      	adds	r3, r5, r3
   262a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   262ac:	d204      	bcs.n	262b8 <__udivmoddi4+0x184>
   262ae:	429f      	cmp	r7, r3
   262b0:	d902      	bls.n	262b8 <__udivmoddi4+0x184>
   262b2:	f1ac 0102 	sub.w	r1, ip, #2
   262b6:	442b      	add	r3, r5
   262b8:	1bdb      	subs	r3, r3, r7
   262ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   262be:	e792      	b.n	261e6 <__udivmoddi4+0xb2>
   262c0:	4660      	mov	r0, ip
   262c2:	e7e3      	b.n	2628c <__udivmoddi4+0x158>
   262c4:	4661      	mov	r1, ip
   262c6:	e7f7      	b.n	262b8 <__udivmoddi4+0x184>
   262c8:	4660      	mov	r0, ip
   262ca:	e7a3      	b.n	26214 <__udivmoddi4+0xe0>
   262cc:	4663      	mov	r3, ip
   262ce:	e7b7      	b.n	26240 <__udivmoddi4+0x10c>
   262d0:	4283      	cmp	r3, r0
   262d2:	d906      	bls.n	262e2 <__udivmoddi4+0x1ae>
   262d4:	b916      	cbnz	r6, 262dc <__udivmoddi4+0x1a8>
   262d6:	2100      	movs	r1, #0
   262d8:	4608      	mov	r0, r1
   262da:	e77b      	b.n	261d4 <__udivmoddi4+0xa0>
   262dc:	e9c6 e000 	strd	lr, r0, [r6]
   262e0:	e7f9      	b.n	262d6 <__udivmoddi4+0x1a2>
   262e2:	fab3 f783 	clz	r7, r3
   262e6:	b98f      	cbnz	r7, 2630c <__udivmoddi4+0x1d8>
   262e8:	4283      	cmp	r3, r0
   262ea:	d301      	bcc.n	262f0 <__udivmoddi4+0x1bc>
   262ec:	4572      	cmp	r2, lr
   262ee:	d808      	bhi.n	26302 <__udivmoddi4+0x1ce>
   262f0:	ebbe 0402 	subs.w	r4, lr, r2
   262f4:	eb60 0303 	sbc.w	r3, r0, r3
   262f8:	2001      	movs	r0, #1
   262fa:	469c      	mov	ip, r3
   262fc:	b91e      	cbnz	r6, 26306 <__udivmoddi4+0x1d2>
   262fe:	2100      	movs	r1, #0
   26300:	e768      	b.n	261d4 <__udivmoddi4+0xa0>
   26302:	4638      	mov	r0, r7
   26304:	e7fa      	b.n	262fc <__udivmoddi4+0x1c8>
   26306:	e9c6 4c00 	strd	r4, ip, [r6]
   2630a:	e7f8      	b.n	262fe <__udivmoddi4+0x1ca>
   2630c:	f1c7 0c20 	rsb	ip, r7, #32
   26310:	40bb      	lsls	r3, r7
   26312:	fa22 f40c 	lsr.w	r4, r2, ip
   26316:	431c      	orrs	r4, r3
   26318:	fa2e f10c 	lsr.w	r1, lr, ip
   2631c:	fa20 f30c 	lsr.w	r3, r0, ip
   26320:	40b8      	lsls	r0, r7
   26322:	4301      	orrs	r1, r0
   26324:	ea4f 4914 	mov.w	r9, r4, lsr #16
   26328:	fa0e f507 	lsl.w	r5, lr, r7
   2632c:	fbb3 f8f9 	udiv	r8, r3, r9
   26330:	fa1f fe84 	uxth.w	lr, r4
   26334:	fb09 3018 	mls	r0, r9, r8, r3
   26338:	0c0b      	lsrs	r3, r1, #16
   2633a:	fb08 fa0e 	mul.w	sl, r8, lr
   2633e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   26342:	459a      	cmp	sl, r3
   26344:	fa02 f207 	lsl.w	r2, r2, r7
   26348:	d940      	bls.n	263cc <__udivmoddi4+0x298>
   2634a:	18e3      	adds	r3, r4, r3
   2634c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   26350:	d204      	bcs.n	2635c <__udivmoddi4+0x228>
   26352:	459a      	cmp	sl, r3
   26354:	d902      	bls.n	2635c <__udivmoddi4+0x228>
   26356:	f1a8 0002 	sub.w	r0, r8, #2
   2635a:	4423      	add	r3, r4
   2635c:	eba3 030a 	sub.w	r3, r3, sl
   26360:	b289      	uxth	r1, r1
   26362:	fbb3 f8f9 	udiv	r8, r3, r9
   26366:	fb09 3318 	mls	r3, r9, r8, r3
   2636a:	fb08 fe0e 	mul.w	lr, r8, lr
   2636e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   26372:	458e      	cmp	lr, r1
   26374:	d92c      	bls.n	263d0 <__udivmoddi4+0x29c>
   26376:	1861      	adds	r1, r4, r1
   26378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2637c:	d204      	bcs.n	26388 <__udivmoddi4+0x254>
   2637e:	458e      	cmp	lr, r1
   26380:	d902      	bls.n	26388 <__udivmoddi4+0x254>
   26382:	f1a8 0302 	sub.w	r3, r8, #2
   26386:	4421      	add	r1, r4
   26388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   2638c:	fba0 9802 	umull	r9, r8, r0, r2
   26390:	eba1 010e 	sub.w	r1, r1, lr
   26394:	4541      	cmp	r1, r8
   26396:	46ce      	mov	lr, r9
   26398:	4643      	mov	r3, r8
   2639a:	d302      	bcc.n	263a2 <__udivmoddi4+0x26e>
   2639c:	d106      	bne.n	263ac <__udivmoddi4+0x278>
   2639e:	454d      	cmp	r5, r9
   263a0:	d204      	bcs.n	263ac <__udivmoddi4+0x278>
   263a2:	ebb9 0e02 	subs.w	lr, r9, r2
   263a6:	eb68 0304 	sbc.w	r3, r8, r4
   263aa:	3801      	subs	r0, #1
   263ac:	2e00      	cmp	r6, #0
   263ae:	d0a6      	beq.n	262fe <__udivmoddi4+0x1ca>
   263b0:	ebb5 020e 	subs.w	r2, r5, lr
   263b4:	eb61 0103 	sbc.w	r1, r1, r3
   263b8:	fa01 fc0c 	lsl.w	ip, r1, ip
   263bc:	fa22 f307 	lsr.w	r3, r2, r7
   263c0:	ea4c 0303 	orr.w	r3, ip, r3
   263c4:	40f9      	lsrs	r1, r7
   263c6:	e9c6 3100 	strd	r3, r1, [r6]
   263ca:	e798      	b.n	262fe <__udivmoddi4+0x1ca>
   263cc:	4640      	mov	r0, r8
   263ce:	e7c5      	b.n	2635c <__udivmoddi4+0x228>
   263d0:	4643      	mov	r3, r8
   263d2:	e7d9      	b.n	26388 <__udivmoddi4+0x254>

000263d4 <adc_read.constprop.0.isra.0>:


extern int z_impl_adc_read(const struct device * dev, const struct adc_sequence * sequence);

__pinned_func
static inline int adc_read(const struct device * dev, const struct adc_sequence * sequence)
   263d4:	4601      	mov	r1, r0
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   263d6:	4802      	ldr	r0, [pc, #8]	; (263e0 <adc_read.constprop.0.isra.0+0xc>)
   263d8:	6883      	ldr	r3, [r0, #8]
   263da:	685b      	ldr	r3, [r3, #4]
   263dc:	4718      	bx	r3
   263de:	bf00      	nop
   263e0:	0002f498 	.word	0x0002f498

000263e4 <adc_raw_to_millivolts_dt.constprop.0.isra.0>:
 *
 * @return A value from adc_raw_to_millivolts() or -ENOTSUP if information from
 * Devicetree is not valid.
 * @see adc_raw_to_millivolts()
 */
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
   263e4:	b513      	push	{r0, r1, r4, lr}
	const struct adc_driver_api *api =
   263e6:	4b08      	ldr	r3, [pc, #32]	; (26408 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x24>)
	int32_t adc_mv = *valp * ref_mv;
   263e8:	6802      	ldr	r2, [r0, #0]
	return api->ref_internal;
   263ea:	689b      	ldr	r3, [r3, #8]
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
   263ec:	891b      	ldrh	r3, [r3, #8]
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
   263ee:	4604      	mov	r4, r0
	int32_t adc_mv = *valp * ref_mv;
   263f0:	4353      	muls	r3, r2
	int ret = adc_gain_invert(gain, &adc_mv);
   263f2:	a901      	add	r1, sp, #4
   263f4:	2000      	movs	r0, #0
	int32_t adc_mv = *valp * ref_mv;
   263f6:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   263f8:	f003 f962 	bl	296c0 <adc_gain_invert>
	if (ret == 0) {
   263fc:	b910      	cbnz	r0, 26404 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x20>
		*valp = (adc_mv >> resolution);
   263fe:	9b01      	ldr	r3, [sp, #4]
   26400:	129b      	asrs	r3, r3, #10
   26402:	6023      	str	r3, [r4, #0]
		resolution -= 1U;
	}

	return adc_raw_to_millivolts(vref_mv, spec->channel_cfg.gain,
				     resolution, valp);
}
   26404:	b002      	add	sp, #8
   26406:	bd10      	pop	{r4, pc}
   26408:	0002f498 	.word	0x0002f498

0002640c <send_str>:
	.flow_ctrl = UART_CFG_FLOW_CTRL_NONE,
	.data_bits = UART_CFG_DATA_BITS_8,
};

void send_str(const struct device *uart, char *str)
{
   2640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2640e:	4604      	mov	r4, r0
	int msg_len = strlen(str);
   26410:	4608      	mov	r0, r1
{
   26412:	460d      	mov	r5, r1
	int msg_len = strlen(str);
   26414:	f007 ff7b 	bl	2e30e <strlen>

	for (int i = 0; i < msg_len; i++) {
   26418:	2600      	movs	r6, #0
	int msg_len = strlen(str);
   2641a:	4607      	mov	r7, r0
	for (int i = 0; i < msg_len; i++) {
   2641c:	42be      	cmp	r6, r7
   2641e:	db06      	blt.n	2642e <send_str+0x22>
		uart_poll_out(uart, str[i]);
	}

	printk("Device %s sent: \"%s\"\n", uart->name, str);
   26420:	6821      	ldr	r1, [r4, #0]
   26422:	4806      	ldr	r0, [pc, #24]	; (2643c <send_str+0x30>)
   26424:	462a      	mov	r2, r5
}
   26426:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Device %s sent: \"%s\"\n", uart->name, str);
   2642a:	f007 ba4d 	b.w	2d8c8 <printk>
		uart_poll_out(uart, str[i]);
   2642e:	5da9      	ldrb	r1, [r5, r6]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   26430:	68a3      	ldr	r3, [r4, #8]
   26432:	4620      	mov	r0, r4
   26434:	685b      	ldr	r3, [r3, #4]
   26436:	4798      	blx	r3
	for (int i = 0; i < msg_len; i++) {
   26438:	3601      	adds	r6, #1
   2643a:	e7ef      	b.n	2641c <send_str+0x10>
   2643c:	0002f94c 	.word	0x0002f94c

00026440 <main>:

int main(void)
{
   26440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26444:	b09a      	sub	sp, #104	; 0x68
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   26446:	4865      	ldr	r0, [pc, #404]	; (265dc <main+0x19c>)
   26448:	f008 fc1c 	bl	2ec84 <z_device_is_ready>
	if (!gpio_is_ready_dt(&led0) || !gpio_is_ready_dt(&led1) || !gpio_is_ready_dt(&led2)) {
   2644c:	b360      	cbz	r0, 264a8 <main+0x68>
   2644e:	4864      	ldr	r0, [pc, #400]	; (265e0 <main+0x1a0>)
   26450:	f008 fc18 	bl	2ec84 <z_device_is_ready>
   26454:	b340      	cbz	r0, 264a8 <main+0x68>
   26456:	4862      	ldr	r0, [pc, #392]	; (265e0 <main+0x1a0>)
   26458:	f008 fc14 	bl	2ec84 <z_device_is_ready>
   2645c:	b320      	cbz	r0, 264a8 <main+0x68>
		return 0;
	}

	int ret0 = gpio_pin_configure_dt(&led0, GPIO_OUTPUT_ACTIVE);
   2645e:	4861      	ldr	r0, [pc, #388]	; (265e4 <main+0x1a4>)
   26460:	f007 fa09 	bl	2d876 <gpio_pin_configure_dt.constprop.0>
   26464:	4604      	mov	r4, r0
        int ret1 = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_ACTIVE);
   26466:	4860      	ldr	r0, [pc, #384]	; (265e8 <main+0x1a8>)
   26468:	f007 fa05 	bl	2d876 <gpio_pin_configure_dt.constprop.0>
   2646c:	4605      	mov	r5, r0
        int ret2 = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_ACTIVE);
   2646e:	485f      	ldr	r0, [pc, #380]	; (265ec <main+0x1ac>)
   26470:	f007 fa01 	bl	2d876 <gpio_pin_configure_dt.constprop.0>

	if (ret0 || ret1 || ret2 < 0) {
   26474:	432c      	orrs	r4, r5
   26476:	d117      	bne.n	264a8 <main+0x68>
   26478:	2800      	cmp	r0, #0
   2647a:	db15      	blt.n	264a8 <main+0x68>
	}

        int err;
	uint32_t count = 0;
	uint16_t buf;
	struct adc_sequence sequence = {
   2647c:	2214      	movs	r2, #20
   2647e:	4621      	mov	r1, r4
   26480:	eb0d 0002 	add.w	r0, sp, r2
   26484:	f007 ff55 	bl	2e332 <memset>
   26488:	f10d 030e 	add.w	r3, sp, #14
   2648c:	9307      	str	r3, [sp, #28]
   2648e:	4d58      	ldr	r5, [pc, #352]	; (265f0 <main+0x1b0>)
   26490:	2302      	movs	r3, #2
   26492:	9308      	str	r3, [sp, #32]
		.buffer_size = sizeof(buf),
	};

	/* Configure channels individually prior to sampling. */
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
		if (!device_is_ready(adc_channels[i].dev)) {
   26494:	f855 6c06 	ldr.w	r6, [r5, #-6]
   26498:	4630      	mov	r0, r6
   2649a:	f008 fbf3 	bl	2ec84 <z_device_is_ready>
   2649e:	b938      	cbnz	r0, 264b0 <main+0x70>
			printk("ADC controller device %s not ready\n", adc_channels[i].dev->name);
   264a0:	6831      	ldr	r1, [r6, #0]
   264a2:	4854      	ldr	r0, [pc, #336]	; (265f4 <main+0x1b4>)
   264a4:	f007 fa10 	bl	2d8c8 <printk>
		//	}
		//}
		//k_msleep(SLEEP_TIME_MS/2);
	}
	return 0;
}
   264a8:	2000      	movs	r0, #0
   264aa:	b01a      	add	sp, #104	; 0x68
   264ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!spec->channel_cfg_dt_node_exists) {
   264b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   264b4:	b163      	cbz	r3, 264d0 <main+0x90>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
   264b6:	f855 0c06 	ldr.w	r0, [r5, #-6]
	return api->channel_setup(dev, channel_cfg);
   264ba:	6883      	ldr	r3, [r0, #8]
   264bc:	4629      	mov	r1, r5
   264be:	681b      	ldr	r3, [r3, #0]
   264c0:	4798      	blx	r3
		if (err < 0) {
   264c2:	1e02      	subs	r2, r0, #0
   264c4:	da07      	bge.n	264d6 <main+0x96>
			printk("Could not setup channel #%d (%d)\n", i, err);
   264c6:	484c      	ldr	r0, [pc, #304]	; (265f8 <main+0x1b8>)
   264c8:	4621      	mov	r1, r4
   264ca:	f007 f9fd 	bl	2d8c8 <printk>
			return 0;
   264ce:	e7eb      	b.n	264a8 <main+0x68>
		return -ENOTSUP;
   264d0:	f06f 0285 	mvn.w	r2, #133	; 0x85
   264d4:	e7f7      	b.n	264c6 <main+0x86>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
   264d6:	3401      	adds	r4, #1
   264d8:	2c03      	cmp	r4, #3
   264da:	f105 0514 	add.w	r5, r5, #20
   264de:	d1d9      	bne.n	26494 <main+0x54>
			     const struct uart_config *cfg);

static inline int z_impl_uart_configure(const struct device *dev,
					const struct uart_config *cfg)
{
	const struct uart_driver_api *api =
   264e0:	4c46      	ldr	r4, [pc, #280]	; (265fc <main+0x1bc>)
				(const struct uart_driver_api *)dev->api;

	if (api->configure == NULL) {
   264e2:	68a3      	ldr	r3, [r4, #8]
   264e4:	68db      	ldr	r3, [r3, #12]
   264e6:	2b00      	cmp	r3, #0
   264e8:	d172      	bne.n	265d0 <main+0x190>
		printk("Could not configure device %s", uart0->name);
   264ea:	6821      	ldr	r1, [r4, #0]
   264ec:	4844      	ldr	r0, [pc, #272]	; (26600 <main+0x1c0>)
   264ee:	f007 f9eb 	bl	2d8c8 <printk>
                gpio_pin_toggle_dt(&led0);
   264f2:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 265e4 <main+0x1a4>
                printk("%"PRId32, val_mv);
   264f6:	4e43      	ldr	r6, [pc, #268]	; (26604 <main+0x1c4>)
                printk(" = %"PRId32" mV\n", val_mv);
   264f8:	4d43      	ldr	r5, [pc, #268]	; (26608 <main+0x1c8>)
   264fa:	2100      	movs	r1, #0
                printk("ADC reading[%u]:\n", count++);
   264fc:	f101 0901 	add.w	r9, r1, #1
   26500:	4842      	ldr	r0, [pc, #264]	; (2660c <main+0x1cc>)
   26502:	f007 f9e1 	bl	2d8c8 <printk>
                snprintf(send_buf, 64, "Hello from device %s, num %d", uart0->name, count);
   26506:	6823      	ldr	r3, [r4, #0]
   26508:	4a41      	ldr	r2, [pc, #260]	; (26610 <main+0x1d0>)
   2650a:	f8cd 9000 	str.w	r9, [sp]
   2650e:	2140      	movs	r1, #64	; 0x40
   26510:	a80a      	add	r0, sp, #40	; 0x28
   26512:	f002 fb01 	bl	28b18 <snprintf>
                send_str(uart0, send_buf);
   26516:	a90a      	add	r1, sp, #40	; 0x28
   26518:	4838      	ldr	r0, [pc, #224]	; (265fc <main+0x1bc>)
   2651a:	f7ff ff77 	bl	2640c <send_str>
                gpio_pin_toggle_dt(&led0);
   2651e:	4650      	mov	r0, sl
   26520:	f007 f9c3 	bl	2d8aa <gpio_pin_toggle_dt.isra.0>
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
   26524:	f04f 0801 	mov.w	r8, #1
                k_msleep(SLEEP_TIME_MS/2);
   26528:	f007 f9c7 	bl	2d8ba <k_msleep.constprop.0.isra.0>
	seq->resolution = spec->resolution;
   2652c:	270a      	movs	r7, #10
                adc_read(adc_channels[0].dev, &sequence);
   2652e:	a805      	add	r0, sp, #20
	seq->channels = BIT(spec->channel_id);
   26530:	f8cd 8018 	str.w	r8, [sp, #24]
	seq->resolution = spec->resolution;
   26534:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
   26538:	f7ff ff4c 	bl	263d4 <adc_read.constprop.0.isra.0>
                    val_mv = (int32_t)buf;
   2653c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   26540:	9104      	str	r1, [sp, #16]
                printk("%"PRId32, val_mv);
   26542:	4630      	mov	r0, r6
   26544:	f007 f9c0 	bl	2d8c8 <printk>
                err = adc_raw_to_millivolts_dt(&adc_channels[0],
   26548:	a804      	add	r0, sp, #16
   2654a:	f7ff ff4b 	bl	263e4 <adc_raw_to_millivolts_dt.constprop.0.isra.0>
                printk(" = %"PRId32" mV\n", val_mv);
   2654e:	9904      	ldr	r1, [sp, #16]
   26550:	4628      	mov	r0, r5
   26552:	f007 f9b9 	bl	2d8c8 <printk>
                gpio_pin_toggle_dt(&led0);
   26556:	4650      	mov	r0, sl
   26558:	f007 f9a7 	bl	2d8aa <gpio_pin_toggle_dt.isra.0>
                gpio_pin_toggle_dt(&led1);
   2655c:	4822      	ldr	r0, [pc, #136]	; (265e8 <main+0x1a8>)
   2655e:	f007 f9a4 	bl	2d8aa <gpio_pin_toggle_dt.isra.0>
                k_msleep(SLEEP_TIME_MS/2);
   26562:	f007 f9aa 	bl	2d8ba <k_msleep.constprop.0.isra.0>
                adc_read(adc_channels[0].dev, &sequence);
   26566:	a805      	add	r0, sp, #20
	seq->channels = BIT(spec->channel_id);
   26568:	f8cd 8018 	str.w	r8, [sp, #24]
	seq->resolution = spec->resolution;
   2656c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
   26570:	f7ff ff30 	bl	263d4 <adc_read.constprop.0.isra.0>
                    val_mv = (int32_t)buf;
   26574:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   26578:	9104      	str	r1, [sp, #16]
                printk("%"PRId32, val_mv);
   2657a:	4630      	mov	r0, r6
   2657c:	f007 f9a4 	bl	2d8c8 <printk>
                err = adc_raw_to_millivolts_dt(&adc_channels[0],
   26580:	a804      	add	r0, sp, #16
   26582:	f7ff ff2f 	bl	263e4 <adc_raw_to_millivolts_dt.constprop.0.isra.0>
                printk(" = %"PRId32" mV\n", val_mv);
   26586:	9904      	ldr	r1, [sp, #16]
   26588:	4628      	mov	r0, r5
   2658a:	f007 f99d 	bl	2d8c8 <printk>
                gpio_pin_toggle_dt(&led1);
   2658e:	4816      	ldr	r0, [pc, #88]	; (265e8 <main+0x1a8>)
   26590:	f007 f98b 	bl	2d8aa <gpio_pin_toggle_dt.isra.0>
                gpio_pin_toggle_dt(&led2);
   26594:	4815      	ldr	r0, [pc, #84]	; (265ec <main+0x1ac>)
   26596:	f007 f988 	bl	2d8aa <gpio_pin_toggle_dt.isra.0>
                k_msleep(SLEEP_TIME_MS/2);
   2659a:	f007 f98e 	bl	2d8ba <k_msleep.constprop.0.isra.0>
                adc_read(adc_channels[0].dev, &sequence);
   2659e:	a805      	add	r0, sp, #20
	seq->channels = BIT(spec->channel_id);
   265a0:	f8cd 8018 	str.w	r8, [sp, #24]
	seq->resolution = spec->resolution;
   265a4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
   265a8:	f7ff ff14 	bl	263d4 <adc_read.constprop.0.isra.0>
                    val_mv = (int32_t)buf;
   265ac:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   265b0:	9104      	str	r1, [sp, #16]
                printk("%"PRId32, val_mv);
   265b2:	4630      	mov	r0, r6
   265b4:	f007 f988 	bl	2d8c8 <printk>
                err = adc_raw_to_millivolts_dt(&adc_channels[0],
   265b8:	a804      	add	r0, sp, #16
   265ba:	f7ff ff13 	bl	263e4 <adc_raw_to_millivolts_dt.constprop.0.isra.0>
                printk(" = %"PRId32" mV\n", val_mv);
   265be:	9904      	ldr	r1, [sp, #16]
   265c0:	4628      	mov	r0, r5
   265c2:	f007 f981 	bl	2d8c8 <printk>
                gpio_pin_toggle_dt(&led2);
   265c6:	4809      	ldr	r0, [pc, #36]	; (265ec <main+0x1ac>)
   265c8:	f007 f96f 	bl	2d8aa <gpio_pin_toggle_dt.isra.0>
                printk("ADC reading[%u]:\n", count++);
   265cc:	4649      	mov	r1, r9
   265ce:	e795      	b.n	264fc <main+0xbc>
		return -ENOSYS;
	}
	return api->configure(dev, cfg);
   265d0:	4910      	ldr	r1, [pc, #64]	; (26614 <main+0x1d4>)
   265d2:	4620      	mov	r0, r4
   265d4:	4798      	blx	r3
	if (rc) {
   265d6:	2800      	cmp	r0, #0
   265d8:	d08b      	beq.n	264f2 <main+0xb2>
   265da:	e786      	b.n	264ea <main+0xaa>
   265dc:	0002f448 	.word	0x0002f448
   265e0:	0002f45c 	.word	0x0002f45c
   265e4:	0002f724 	.word	0x0002f724
   265e8:	0002f71c 	.word	0x0002f71c
   265ec:	0002f714 	.word	0x0002f714
   265f0:	0002f6de 	.word	0x0002f6de
   265f4:	0002f962 	.word	0x0002f962
   265f8:	0002f986 	.word	0x0002f986
   265fc:	0002f484 	.word	0x0002f484
   26600:	0002f9a8 	.word	0x0002f9a8
   26604:	0002f9f2 	.word	0x0002f9f2
   26608:	0002f9f5 	.word	0x0002f9f5
   2660c:	0002f9c6 	.word	0x0002f9c6
   26610:	0002f9d8 	.word	0x0002f9d8
   26614:	20000150 	.word	0x20000150

00026618 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   26618:	4b01      	ldr	r3, [pc, #4]	; (26620 <char_out+0x8>)
   2661a:	681b      	ldr	r3, [r3, #0]
   2661c:	4718      	bx	r3
   2661e:	bf00      	nop
   26620:	20000158 	.word	0x20000158

00026624 <__printk_hook_install>:
	_char_out = fn;
   26624:	4b01      	ldr	r3, [pc, #4]	; (2662c <__printk_hook_install+0x8>)
   26626:	6018      	str	r0, [r3, #0]
}
   26628:	4770      	bx	lr
   2662a:	bf00      	nop
   2662c:	20000158 	.word	0x20000158

00026630 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   26630:	b507      	push	{r0, r1, r2, lr}
   26632:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   26634:	2100      	movs	r1, #0
   26636:	4602      	mov	r2, r0
   26638:	9100      	str	r1, [sp, #0]
   2663a:	4803      	ldr	r0, [pc, #12]	; (26648 <vprintk+0x18>)
   2663c:	f000 f914 	bl	26868 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   26640:	b003      	add	sp, #12
   26642:	f85d fb04 	ldr.w	pc, [sp], #4
   26646:	bf00      	nop
   26648:	00026619 	.word	0x00026619

0002664c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   2664c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26650:	8b05      	ldrh	r5, [r0, #24]
{
   26652:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   26654:	0728      	lsls	r0, r5, #28
{
   26656:	4690      	mov	r8, r2
	if (processing) {
   26658:	d411      	bmi.n	2667e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   2665a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2665c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   26660:	f040 80cd 	bne.w	267fe <process_event+0x1b2>
			evt = process_recheck(mgr);
   26664:	4620      	mov	r0, r4
   26666:	f007 fb26 	bl	2dcb6 <process_recheck>
		}

		if (evt == EVT_NOP) {
   2666a:	b178      	cbz	r0, 2668c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   2666c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2666e:	8b21      	ldrh	r1, [r4, #24]
   26670:	2804      	cmp	r0, #4
   26672:	d811      	bhi.n	26698 <process_event+0x4c>
   26674:	e8df f000 	tbb	[pc, r0]
   26678:	856d10c3 	.word	0x856d10c3
   2667c:	95          	.byte	0x95
   2667d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   2667e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   26680:	bf0c      	ite	eq
   26682:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   26686:	f045 0520 	orrne.w	r5, r5, #32
   2668a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   2668c:	f388 8811 	msr	BASEPRI, r8
   26690:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   26694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   26698:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2669c:	45aa      	cmp	sl, r5
   2669e:	f000 80a6 	beq.w	267ee <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   266a2:	2700      	movs	r7, #0
   266a4:	46b9      	mov	r9, r7
   266a6:	463e      	mov	r6, r7
   266a8:	68a3      	ldr	r3, [r4, #8]
   266aa:	2b00      	cmp	r3, #0
   266ac:	f000 80bd 	beq.w	2682a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   266b0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   266b4:	8321      	strh	r1, [r4, #24]
   266b6:	f388 8811 	msr	BASEPRI, r8
   266ba:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   266be:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   266c0:	2900      	cmp	r1, #0
   266c2:	f000 80bb 	beq.w	2683c <process_event+0x1f0>
	return node->next;
   266c6:	680d      	ldr	r5, [r1, #0]
   266c8:	2900      	cmp	r1, #0
   266ca:	f000 80b7 	beq.w	2683c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   266ce:	f8d1 8004 	ldr.w	r8, [r1, #4]
   266d2:	4633      	mov	r3, r6
   266d4:	4652      	mov	r2, sl
   266d6:	4620      	mov	r0, r4
   266d8:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   266da:	2d00      	cmp	r5, #0
   266dc:	d076      	beq.n	267cc <process_event+0x180>
   266de:	682b      	ldr	r3, [r5, #0]
   266e0:	4629      	mov	r1, r5
   266e2:	461d      	mov	r5, r3
   266e4:	e7f0      	b.n	266c8 <process_event+0x7c>
   266e6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   266ea:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   266ec:	2a01      	cmp	r2, #1
   266ee:	d81b      	bhi.n	26728 <process_event+0xdc>
	list->head = NULL;
   266f0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   266f2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   266f6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   266f8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   266fa:	b289      	uxth	r1, r1
	list->tail = NULL;
   266fc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   26700:	d109      	bne.n	26716 <process_event+0xca>
   26702:	463b      	mov	r3, r7
   26704:	e003      	b.n	2670e <process_event+0xc2>
				mgr->refs += 1U;
   26706:	8b62      	ldrh	r2, [r4, #26]
   26708:	3201      	adds	r2, #1
   2670a:	8362      	strh	r2, [r4, #26]
	return node->next;
   2670c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2670e:	2b00      	cmp	r3, #0
   26710:	d1f9      	bne.n	26706 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26712:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   26716:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   26718:	4620      	mov	r0, r4
   2671a:	f007 facc 	bl	2dcb6 <process_recheck>
   2671e:	2800      	cmp	r0, #0
   26720:	d07b      	beq.n	2681a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   26722:	f041 0120 	orr.w	r1, r1, #32
   26726:	e077      	b.n	26818 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   26728:	2b04      	cmp	r3, #4
   2672a:	d10a      	bne.n	26742 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2672c:	f021 0107 	bic.w	r1, r1, #7
   26730:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   26732:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   26734:	4620      	mov	r0, r4
   26736:	f007 fabe 	bl	2dcb6 <process_recheck>
   2673a:	b110      	cbz	r0, 26742 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2673c:	f041 0120 	orr.w	r1, r1, #32
   26740:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   26742:	8b21      	ldrh	r1, [r4, #24]
   26744:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   26748:	45aa      	cmp	sl, r5
   2674a:	d050      	beq.n	267ee <process_event+0x1a2>
   2674c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   2674e:	46b9      	mov	r9, r7
   26750:	e7aa      	b.n	266a8 <process_event+0x5c>
			transit = mgr->transitions->start;
   26752:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26754:	f021 0107 	bic.w	r1, r1, #7
   26758:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   2675c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   2675e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   26762:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   26764:	d12d      	bne.n	267c2 <process_event+0x176>
		    || (transit != NULL)) {
   26766:	f1b9 0f00 	cmp.w	r9, #0
   2676a:	d040      	beq.n	267ee <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2676c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   26770:	8321      	strh	r1, [r4, #24]
   26772:	f388 8811 	msr	BASEPRI, r8
   26776:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   2677a:	493a      	ldr	r1, [pc, #232]	; (26864 <process_event+0x218>)
   2677c:	4620      	mov	r0, r4
   2677e:	47c8      	blx	r9
   26780:	e029      	b.n	267d6 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26782:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   26786:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26788:	f041 0104 	orr.w	r1, r1, #4
   2678c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   2678e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   26790:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   26794:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   26796:	d0e6      	beq.n	26766 <process_event+0x11a>
   26798:	2700      	movs	r7, #0
		res = 0;
   2679a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2679c:	f04f 0a04 	mov.w	sl, #4
   267a0:	e782      	b.n	266a8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   267a2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   267a6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   267a8:	f041 0105 	orr.w	r1, r1, #5
   267ac:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   267ae:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   267b0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   267b4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   267b6:	d0d6      	beq.n	26766 <process_event+0x11a>
   267b8:	2700      	movs	r7, #0
		res = 0;
   267ba:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   267bc:	f04f 0a05 	mov.w	sl, #5
   267c0:	e772      	b.n	266a8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   267c2:	2700      	movs	r7, #0
		res = 0;
   267c4:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   267c6:	f04f 0a06 	mov.w	sl, #6
   267ca:	e76d      	b.n	266a8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   267cc:	462b      	mov	r3, r5
   267ce:	e787      	b.n	266e0 <process_event+0x94>
			if (transit != NULL) {
   267d0:	f1b9 0f00 	cmp.w	r9, #0
   267d4:	d1d1      	bne.n	2677a <process_event+0x12e>
	__asm__ volatile(
   267d6:	f04f 0320 	mov.w	r3, #32
   267da:	f3ef 8811 	mrs	r8, BASEPRI
   267de:	f383 8812 	msr	BASEPRI_MAX, r3
   267e2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   267e6:	8b23      	ldrh	r3, [r4, #24]
   267e8:	f023 0308 	bic.w	r3, r3, #8
   267ec:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   267ee:	8b25      	ldrh	r5, [r4, #24]
   267f0:	06ea      	lsls	r2, r5, #27
   267f2:	d52e      	bpl.n	26852 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   267f4:	f025 0310 	bic.w	r3, r5, #16
   267f8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   267fa:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   267fe:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26800:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   26802:	2e00      	cmp	r6, #0
   26804:	f6bf af6f 	bge.w	266e6 <process_event+0x9a>
	list->head = NULL;
   26808:	2300      	movs	r3, #0
		*clients = mgr->clients;
   2680a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   2680c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26810:	f021 0107 	bic.w	r1, r1, #7
   26814:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   26818:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2681a:	8b21      	ldrh	r1, [r4, #24]
   2681c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   26820:	45aa      	cmp	sl, r5
   26822:	f04f 0900 	mov.w	r9, #0
   26826:	f47f af3f 	bne.w	266a8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   2682a:	2f00      	cmp	r7, #0
   2682c:	d09b      	beq.n	26766 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2682e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   26832:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   26834:	f388 8811 	msr	BASEPRI, r8
   26838:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   2683c:	2f00      	cmp	r7, #0
   2683e:	d0c7      	beq.n	267d0 <process_event+0x184>
	return node->next;
   26840:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   26842:	4639      	mov	r1, r7
   26844:	4633      	mov	r3, r6
   26846:	4652      	mov	r2, sl
   26848:	4620      	mov	r0, r4
   2684a:	f007 fa60 	bl	2dd0e <notify_one>
	list->head = node;
   2684e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   26850:	e7f4      	b.n	2683c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   26852:	06ab      	lsls	r3, r5, #26
   26854:	f57f af1a 	bpl.w	2668c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   26858:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2685c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   2685e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   26862:	e6ff      	b.n	26664 <process_event+0x18>
   26864:	0002dd3b 	.word	0x0002dd3b

00026868 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   26868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2686c:	4681      	mov	r9, r0
   2686e:	b095      	sub	sp, #84	; 0x54
   26870:	468b      	mov	fp, r1
   26872:	4617      	mov	r7, r2
   26874:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   26876:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   26878:	7838      	ldrb	r0, [r7, #0]
   2687a:	b908      	cbnz	r0, 26880 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   2687c:	4628      	mov	r0, r5
   2687e:	e358      	b.n	26f32 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   26880:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   26882:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   26884:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   26886:	d006      	beq.n	26896 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   26888:	4659      	mov	r1, fp
   2688a:	47c8      	blx	r9
   2688c:	2800      	cmp	r0, #0
   2688e:	f2c0 8350 	blt.w	26f32 <z_cbvprintf_impl+0x6ca>
   26892:	3501      	adds	r5, #1
		if (bps == NULL) {
   26894:	e1fb      	b.n	26c8e <z_cbvprintf_impl+0x426>
		} state = {
   26896:	2218      	movs	r2, #24
   26898:	2100      	movs	r1, #0
   2689a:	a80e      	add	r0, sp, #56	; 0x38
   2689c:	f007 fd49 	bl	2e332 <memset>
	if (*sp == '%') {
   268a0:	787b      	ldrb	r3, [r7, #1]
   268a2:	2b25      	cmp	r3, #37	; 0x25
   268a4:	d07d      	beq.n	269a2 <z_cbvprintf_impl+0x13a>
   268a6:	2300      	movs	r3, #0
   268a8:	1c78      	adds	r0, r7, #1
   268aa:	4698      	mov	r8, r3
   268ac:	469e      	mov	lr, r3
   268ae:	469c      	mov	ip, r3
   268b0:	461e      	mov	r6, r3
   268b2:	4601      	mov	r1, r0
		switch (*sp) {
   268b4:	f810 2b01 	ldrb.w	r2, [r0], #1
   268b8:	2a2b      	cmp	r2, #43	; 0x2b
   268ba:	f000 80a1 	beq.w	26a00 <z_cbvprintf_impl+0x198>
   268be:	f200 8098 	bhi.w	269f2 <z_cbvprintf_impl+0x18a>
   268c2:	2a20      	cmp	r2, #32
   268c4:	f000 809f 	beq.w	26a06 <z_cbvprintf_impl+0x19e>
   268c8:	2a23      	cmp	r2, #35	; 0x23
   268ca:	f000 809f 	beq.w	26a0c <z_cbvprintf_impl+0x1a4>
   268ce:	b12b      	cbz	r3, 268dc <z_cbvprintf_impl+0x74>
   268d0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   268d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   268d8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   268dc:	f1b8 0f00 	cmp.w	r8, #0
   268e0:	d005      	beq.n	268ee <z_cbvprintf_impl+0x86>
   268e2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   268e6:	f043 0320 	orr.w	r3, r3, #32
   268ea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   268ee:	f1be 0f00 	cmp.w	lr, #0
   268f2:	d005      	beq.n	26900 <z_cbvprintf_impl+0x98>
   268f4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   268f8:	f043 0310 	orr.w	r3, r3, #16
   268fc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   26900:	f1bc 0f00 	cmp.w	ip, #0
   26904:	d005      	beq.n	26912 <z_cbvprintf_impl+0xaa>
   26906:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   2690a:	f043 0308 	orr.w	r3, r3, #8
   2690e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   26912:	b12e      	cbz	r6, 26920 <z_cbvprintf_impl+0xb8>
   26914:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   26918:	f043 0304 	orr.w	r3, r3, #4
   2691c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   26920:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   26924:	f003 0044 	and.w	r0, r3, #68	; 0x44
   26928:	2844      	cmp	r0, #68	; 0x44
   2692a:	d103      	bne.n	26934 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   2692c:	f36f 1386 	bfc	r3, #6, #1
   26930:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   26934:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   26938:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   2693a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2693e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   26942:	d17f      	bne.n	26a44 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   26944:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   26948:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   2694c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   2694e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   26952:	781a      	ldrb	r2, [r3, #0]
   26954:	2a2e      	cmp	r2, #46	; 0x2e
   26956:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   2695a:	bf0c      	ite	eq
   2695c:	2101      	moveq	r1, #1
   2695e:	2100      	movne	r1, #0
   26960:	f361 0241 	bfi	r2, r1, #1, #1
   26964:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   26968:	d178      	bne.n	26a5c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   2696a:	785a      	ldrb	r2, [r3, #1]
   2696c:	2a2a      	cmp	r2, #42	; 0x2a
   2696e:	d06e      	beq.n	26a4e <z_cbvprintf_impl+0x1e6>
	++sp;
   26970:	3301      	adds	r3, #1
	size_t val = 0;
   26972:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   26974:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   26978:	4619      	mov	r1, r3
   2697a:	f811 0b01 	ldrb.w	r0, [r1], #1
   2697e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   26982:	2e09      	cmp	r6, #9
   26984:	f240 8095 	bls.w	26ab2 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   26988:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   2698c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   2698e:	f3c1 0040 	ubfx	r0, r1, #1, #1
   26992:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   26996:	460a      	mov	r2, r1
   26998:	f360 0241 	bfi	r2, r0, #1, #1
   2699c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   269a0:	e05c      	b.n	26a5c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   269a2:	1cba      	adds	r2, r7, #2
   269a4:	9203      	str	r2, [sp, #12]
   269a6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   269aa:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   269ae:	07da      	lsls	r2, r3, #31
   269b0:	f140 812e 	bpl.w	26c10 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   269b4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   269b8:	f1b8 0f00 	cmp.w	r8, #0
   269bc:	da07      	bge.n	269ce <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   269be:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   269c2:	f042 0204 	orr.w	r2, r2, #4
   269c6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   269ca:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   269ce:	075e      	lsls	r6, r3, #29
   269d0:	f140 8127 	bpl.w	26c22 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   269d4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   269d8:	f1ba 0f00 	cmp.w	sl, #0
   269dc:	f280 8126 	bge.w	26c2c <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   269e0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   269e4:	f36f 0341 	bfc	r3, #1, #1
   269e8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   269ec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   269f0:	e11c      	b.n	26c2c <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   269f2:	2a2d      	cmp	r2, #45	; 0x2d
   269f4:	d00d      	beq.n	26a12 <z_cbvprintf_impl+0x1aa>
   269f6:	2a30      	cmp	r2, #48	; 0x30
   269f8:	f47f af69 	bne.w	268ce <z_cbvprintf_impl+0x66>
   269fc:	2301      	movs	r3, #1
	} while (loop);
   269fe:	e758      	b.n	268b2 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   26a00:	f04f 0c01 	mov.w	ip, #1
   26a04:	e755      	b.n	268b2 <z_cbvprintf_impl+0x4a>
   26a06:	f04f 0e01 	mov.w	lr, #1
   26a0a:	e752      	b.n	268b2 <z_cbvprintf_impl+0x4a>
   26a0c:	f04f 0801 	mov.w	r8, #1
   26a10:	e74f      	b.n	268b2 <z_cbvprintf_impl+0x4a>
   26a12:	2601      	movs	r6, #1
   26a14:	e74d      	b.n	268b2 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   26a16:	fb0e 6202 	mla	r2, lr, r2, r6
   26a1a:	3a30      	subs	r2, #48	; 0x30
   26a1c:	4603      	mov	r3, r0
   26a1e:	4618      	mov	r0, r3
   26a20:	f810 6b01 	ldrb.w	r6, [r0], #1
   26a24:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   26a28:	f1bc 0f09 	cmp.w	ip, #9
   26a2c:	d9f3      	bls.n	26a16 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   26a2e:	4299      	cmp	r1, r3
   26a30:	d08f      	beq.n	26952 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   26a32:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   26a36:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   26a38:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   26a3a:	f362 0141 	bfi	r1, r2, #1, #1
   26a3e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   26a42:	e786      	b.n	26952 <z_cbvprintf_impl+0xea>
   26a44:	460b      	mov	r3, r1
	size_t val = 0;
   26a46:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   26a48:	f04f 0e0a 	mov.w	lr, #10
   26a4c:	e7e7      	b.n	26a1e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   26a4e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   26a52:	f042 0204 	orr.w	r2, r2, #4
   26a56:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   26a5a:	3302      	adds	r3, #2
	switch (*sp) {
   26a5c:	781a      	ldrb	r2, [r3, #0]
   26a5e:	2a6c      	cmp	r2, #108	; 0x6c
   26a60:	d047      	beq.n	26af2 <z_cbvprintf_impl+0x28a>
   26a62:	d82b      	bhi.n	26abc <z_cbvprintf_impl+0x254>
   26a64:	2a68      	cmp	r2, #104	; 0x68
   26a66:	d031      	beq.n	26acc <z_cbvprintf_impl+0x264>
   26a68:	2a6a      	cmp	r2, #106	; 0x6a
   26a6a:	d04b      	beq.n	26b04 <z_cbvprintf_impl+0x29c>
   26a6c:	2a4c      	cmp	r2, #76	; 0x4c
   26a6e:	d051      	beq.n	26b14 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   26a70:	461a      	mov	r2, r3
   26a72:	f812 3b01 	ldrb.w	r3, [r2], #1
   26a76:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   26a78:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   26a7a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   26a7e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   26a82:	f200 80be 	bhi.w	26c02 <z_cbvprintf_impl+0x39a>
   26a86:	2b6d      	cmp	r3, #109	; 0x6d
   26a88:	d851      	bhi.n	26b2e <z_cbvprintf_impl+0x2c6>
   26a8a:	2b69      	cmp	r3, #105	; 0x69
   26a8c:	f200 80b9 	bhi.w	26c02 <z_cbvprintf_impl+0x39a>
   26a90:	2b57      	cmp	r3, #87	; 0x57
   26a92:	d867      	bhi.n	26b64 <z_cbvprintf_impl+0x2fc>
   26a94:	2b41      	cmp	r3, #65	; 0x41
   26a96:	d003      	beq.n	26aa0 <z_cbvprintf_impl+0x238>
   26a98:	3b45      	subs	r3, #69	; 0x45
   26a9a:	2b02      	cmp	r3, #2
   26a9c:	f200 80b1 	bhi.w	26c02 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   26aa0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   26aa4:	2204      	movs	r2, #4
   26aa6:	f362 0302 	bfi	r3, r2, #0, #3
   26aaa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   26aae:	2301      	movs	r3, #1
			break;
   26ab0:	e073      	b.n	26b9a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   26ab2:	fb0c 0202 	mla	r2, ip, r2, r0
   26ab6:	3a30      	subs	r2, #48	; 0x30
   26ab8:	460b      	mov	r3, r1
   26aba:	e75d      	b.n	26978 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   26abc:	2a74      	cmp	r2, #116	; 0x74
   26abe:	d025      	beq.n	26b0c <z_cbvprintf_impl+0x2a4>
   26ac0:	2a7a      	cmp	r2, #122	; 0x7a
   26ac2:	d1d5      	bne.n	26a70 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   26ac4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   26ac8:	2106      	movs	r1, #6
   26aca:	e00c      	b.n	26ae6 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   26acc:	785a      	ldrb	r2, [r3, #1]
   26ace:	2a68      	cmp	r2, #104	; 0x68
   26ad0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   26ad4:	d106      	bne.n	26ae4 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   26ad6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   26ad8:	f361 02c6 	bfi	r2, r1, #3, #4
   26adc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   26ae0:	3302      	adds	r3, #2
   26ae2:	e7c5      	b.n	26a70 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   26ae4:	2102      	movs	r1, #2
   26ae6:	f361 02c6 	bfi	r2, r1, #3, #4
   26aea:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   26aee:	3301      	adds	r3, #1
   26af0:	e7be      	b.n	26a70 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   26af2:	785a      	ldrb	r2, [r3, #1]
   26af4:	2a6c      	cmp	r2, #108	; 0x6c
   26af6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   26afa:	d101      	bne.n	26b00 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   26afc:	2104      	movs	r1, #4
   26afe:	e7eb      	b.n	26ad8 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   26b00:	2103      	movs	r1, #3
   26b02:	e7f0      	b.n	26ae6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   26b04:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   26b08:	2105      	movs	r1, #5
   26b0a:	e7ec      	b.n	26ae6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   26b0c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   26b10:	2107      	movs	r1, #7
   26b12:	e7e8      	b.n	26ae6 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   26b14:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   26b18:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   26b1c:	f022 0202 	bic.w	r2, r2, #2
   26b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   26b24:	f042 0202 	orr.w	r2, r2, #2
   26b28:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   26b2c:	e7df      	b.n	26aee <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   26b2e:	3b6e      	subs	r3, #110	; 0x6e
   26b30:	b2d9      	uxtb	r1, r3
   26b32:	2301      	movs	r3, #1
   26b34:	408b      	lsls	r3, r1
   26b36:	f240 4182 	movw	r1, #1154	; 0x482
   26b3a:	420b      	tst	r3, r1
   26b3c:	d137      	bne.n	26bae <z_cbvprintf_impl+0x346>
   26b3e:	f013 0f24 	tst.w	r3, #36	; 0x24
   26b42:	d151      	bne.n	26be8 <z_cbvprintf_impl+0x380>
   26b44:	07d8      	lsls	r0, r3, #31
   26b46:	d55c      	bpl.n	26c02 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   26b48:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   26b4c:	2103      	movs	r1, #3
   26b4e:	f361 0302 	bfi	r3, r1, #0, #3
   26b52:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   26b56:	f002 0378 	and.w	r3, r2, #120	; 0x78
   26b5a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   26b5e:	424b      	negs	r3, r1
   26b60:	414b      	adcs	r3, r1
   26b62:	e01a      	b.n	26b9a <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   26b64:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   26b68:	b2c9      	uxtb	r1, r1
   26b6a:	2001      	movs	r0, #1
   26b6c:	fa00 f101 	lsl.w	r1, r0, r1
   26b70:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   26b74:	d194      	bne.n	26aa0 <z_cbvprintf_impl+0x238>
   26b76:	f640 0601 	movw	r6, #2049	; 0x801
   26b7a:	4231      	tst	r1, r6
   26b7c:	d11d      	bne.n	26bba <z_cbvprintf_impl+0x352>
   26b7e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   26b82:	d03e      	beq.n	26c02 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   26b84:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   26b88:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   26b8c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   26b90:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   26b92:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   26b96:	d034      	beq.n	26c02 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   26b98:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   26b9a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   26b9e:	f3c2 0140 	ubfx	r1, r2, #1, #1
   26ba2:	430b      	orrs	r3, r1
   26ba4:	f363 0241 	bfi	r2, r3, #1, #1
   26ba8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   26bac:	e6fd      	b.n	269aa <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   26bae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   26bb2:	2102      	movs	r1, #2
   26bb4:	f361 0302 	bfi	r3, r1, #0, #3
   26bb8:	e7e8      	b.n	26b8c <z_cbvprintf_impl+0x324>
   26bba:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   26bbe:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   26bc0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   26bc4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   26bc8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   26bca:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   26bce:	bf02      	ittt	eq
   26bd0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   26bd4:	f041 0101 	orreq.w	r1, r1, #1
   26bd8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   26bdc:	2b63      	cmp	r3, #99	; 0x63
   26bde:	d1db      	bne.n	26b98 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   26be0:	1e13      	subs	r3, r2, #0
   26be2:	bf18      	it	ne
   26be4:	2301      	movne	r3, #1
   26be6:	e7d8      	b.n	26b9a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   26be8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   26bec:	2103      	movs	r1, #3
   26bee:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   26bf2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   26bf6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   26bfa:	bf14      	ite	ne
   26bfc:	2301      	movne	r3, #1
   26bfe:	2300      	moveq	r3, #0
   26c00:	e7cb      	b.n	26b9a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   26c02:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   26c06:	f043 0301 	orr.w	r3, r3, #1
   26c0a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   26c0e:	e7c3      	b.n	26b98 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   26c10:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   26c14:	2a00      	cmp	r2, #0
			width = conv->width_value;
   26c16:	bfb4      	ite	lt
   26c18:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   26c1c:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
   26c20:	e6d5      	b.n	269ce <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   26c22:	0798      	lsls	r0, r3, #30
   26c24:	f57f aee2 	bpl.w	269ec <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   26c28:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   26c2c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   26c30:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   26c32:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   26c36:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   26c3a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   26c3e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   26c40:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   26c44:	d133      	bne.n	26cae <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   26c46:	1ecb      	subs	r3, r1, #3
   26c48:	2b04      	cmp	r3, #4
   26c4a:	d804      	bhi.n	26c56 <z_cbvprintf_impl+0x3ee>
   26c4c:	e8df f003 	tbb	[pc, r3]
   26c50:	21464621 	.word	0x21464621
   26c54:	21          	.byte	0x21
   26c55:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   26c56:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   26c58:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   26c5a:	ea4f 72e3 	mov.w	r2, r3, asr #31
   26c5e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   26c62:	d11c      	bne.n	26c9e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   26c64:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   26c68:	17da      	asrs	r2, r3, #31
   26c6a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   26c6e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   26c70:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   26c74:	f013 0603 	ands.w	r6, r3, #3
   26c78:	d050      	beq.n	26d1c <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   26c7a:	9b03      	ldr	r3, [sp, #12]
   26c7c:	463a      	mov	r2, r7
   26c7e:	4659      	mov	r1, fp
   26c80:	4648      	mov	r0, r9
   26c82:	f007 f978 	bl	2df76 <outs>
   26c86:	2800      	cmp	r0, #0
   26c88:	f2c0 8153 	blt.w	26f32 <z_cbvprintf_impl+0x6ca>
   26c8c:	4405      	add	r5, r0
			continue;
   26c8e:	9f03      	ldr	r7, [sp, #12]
   26c90:	e5f2      	b.n	26878 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   26c92:	f854 3b04 	ldr.w	r3, [r4], #4
   26c96:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   26c98:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   26c9c:	e7e8      	b.n	26c70 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   26c9e:	2902      	cmp	r1, #2
   26ca0:	d1e5      	bne.n	26c6e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   26ca2:	b21a      	sxth	r2, r3
   26ca4:	f343 33c0 	sbfx	r3, r3, #15, #1
   26ca8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   26cac:	e7df      	b.n	26c6e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   26cae:	2b02      	cmp	r3, #2
   26cb0:	d124      	bne.n	26cfc <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   26cb2:	1ecb      	subs	r3, r1, #3
   26cb4:	2b04      	cmp	r3, #4
   26cb6:	d804      	bhi.n	26cc2 <z_cbvprintf_impl+0x45a>
   26cb8:	e8df f003 	tbb	[pc, r3]
   26cbc:	18101018 	.word	0x18101018
   26cc0:	18          	.byte	0x18
   26cc1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   26cc2:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   26cc4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   26cc8:	f04f 0200 	mov.w	r2, #0
   26ccc:	d014      	beq.n	26cf8 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   26cce:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   26cd0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   26cd4:	d1cc      	bne.n	26c70 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   26cd6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   26cd8:	930e      	str	r3, [sp, #56]	; 0x38
   26cda:	e7c9      	b.n	26c70 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   26cdc:	3407      	adds	r4, #7
   26cde:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   26ce2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   26ce6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   26cea:	e7c1      	b.n	26c70 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   26cec:	f854 3b04 	ldr.w	r3, [r4], #4
   26cf0:	930e      	str	r3, [sp, #56]	; 0x38
   26cf2:	2300      	movs	r3, #0
   26cf4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   26cf6:	e7bb      	b.n	26c70 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   26cf8:	b2db      	uxtb	r3, r3
   26cfa:	e7cd      	b.n	26c98 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   26cfc:	2b04      	cmp	r3, #4
   26cfe:	d108      	bne.n	26d12 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   26d00:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   26d02:	f024 0407 	bic.w	r4, r4, #7
   26d06:	e9d4 2300 	ldrd	r2, r3, [r4]
   26d0a:	3408      	adds	r4, #8
   26d0c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   26d10:	e7ae      	b.n	26c70 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   26d12:	2b03      	cmp	r3, #3
   26d14:	d1ac      	bne.n	26c70 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   26d16:	f854 3b04 	ldr.w	r3, [r4], #4
   26d1a:	e7dd      	b.n	26cd8 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   26d1c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   26d20:	2878      	cmp	r0, #120	; 0x78
   26d22:	d8b4      	bhi.n	26c8e <z_cbvprintf_impl+0x426>
   26d24:	2862      	cmp	r0, #98	; 0x62
   26d26:	d81c      	bhi.n	26d62 <z_cbvprintf_impl+0x4fa>
   26d28:	2825      	cmp	r0, #37	; 0x25
   26d2a:	f43f adad 	beq.w	26888 <z_cbvprintf_impl+0x20>
   26d2e:	2858      	cmp	r0, #88	; 0x58
   26d30:	d1ad      	bne.n	26c8e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   26d32:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   26d36:	9300      	str	r3, [sp, #0]
   26d38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   26d3c:	ab08      	add	r3, sp, #32
   26d3e:	aa10      	add	r2, sp, #64	; 0x40
   26d40:	f007 f8d3 	bl	2deea <encode_uint>
			if (precision >= 0) {
   26d44:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   26d48:	4607      	mov	r7, r0
			if (precision >= 0) {
   26d4a:	f280 809a 	bge.w	26e82 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   26d4e:	2f00      	cmp	r7, #0
   26d50:	d09d      	beq.n	26c8e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   26d52:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   26d56:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   26d58:	2e00      	cmp	r6, #0
   26d5a:	f000 80c1 	beq.w	26ee0 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   26d5e:	3001      	adds	r0, #1
   26d60:	e0be      	b.n	26ee0 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   26d62:	3863      	subs	r0, #99	; 0x63
   26d64:	2815      	cmp	r0, #21
   26d66:	d892      	bhi.n	26c8e <z_cbvprintf_impl+0x426>
   26d68:	a201      	add	r2, pc, #4	; (adr r2, 26d70 <z_cbvprintf_impl+0x508>)
   26d6a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   26d6e:	bf00      	nop
   26d70:	00026e45 	.word	0x00026e45
   26d74:	00026e57 	.word	0x00026e57
   26d78:	00026c8f 	.word	0x00026c8f
   26d7c:	00026c8f 	.word	0x00026c8f
   26d80:	00026c8f 	.word	0x00026c8f
   26d84:	00026c8f 	.word	0x00026c8f
   26d88:	00026e57 	.word	0x00026e57
   26d8c:	00026c8f 	.word	0x00026c8f
   26d90:	00026c8f 	.word	0x00026c8f
   26d94:	00026c8f 	.word	0x00026c8f
   26d98:	00026c8f 	.word	0x00026c8f
   26d9c:	00026ee5 	.word	0x00026ee5
   26da0:	00026e7d 	.word	0x00026e7d
   26da4:	00026ea3 	.word	0x00026ea3
   26da8:	00026c8f 	.word	0x00026c8f
   26dac:	00026c8f 	.word	0x00026c8f
   26db0:	00026dc9 	.word	0x00026dc9
   26db4:	00026c8f 	.word	0x00026c8f
   26db8:	00026e7d 	.word	0x00026e7d
   26dbc:	00026c8f 	.word	0x00026c8f
   26dc0:	00026c8f 	.word	0x00026c8f
   26dc4:	00026e7d 	.word	0x00026e7d
			if (precision >= 0) {
   26dc8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   26dcc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   26dce:	db35      	blt.n	26e3c <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   26dd0:	4651      	mov	r1, sl
   26dd2:	4638      	mov	r0, r7
   26dd4:	f007 fac6 	bl	2e364 <strnlen>
			bpe = bps + len;
   26dd8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   26ddc:	2f00      	cmp	r7, #0
   26dde:	f43f af56 	beq.w	26c8e <z_cbvprintf_impl+0x426>
		char sign = 0;
   26de2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   26de4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   26de8:	f013 0210 	ands.w	r2, r3, #16
   26dec:	9205      	str	r2, [sp, #20]
   26dee:	f000 8093 	beq.w	26f18 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   26df2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   26df4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   26df6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   26df8:	bf48      	it	mi
   26dfa:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   26dfc:	9204      	str	r2, [sp, #16]
   26dfe:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   26e00:	bf48      	it	mi
   26e02:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   26e04:	f1b8 0f00 	cmp.w	r8, #0
   26e08:	f340 80a0 	ble.w	26f4c <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   26e0c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   26e10:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   26e14:	f3c2 0380 	ubfx	r3, r2, #2, #1
   26e18:	0750      	lsls	r0, r2, #29
   26e1a:	9306      	str	r3, [sp, #24]
   26e1c:	f100 8096 	bmi.w	26f4c <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   26e20:	0651      	lsls	r1, r2, #25
   26e22:	f140 8089 	bpl.w	26f38 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   26e26:	b13e      	cbz	r6, 26e38 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   26e28:	4659      	mov	r1, fp
   26e2a:	4630      	mov	r0, r6
   26e2c:	47c8      	blx	r9
   26e2e:	2800      	cmp	r0, #0
   26e30:	db7f      	blt.n	26f32 <z_cbvprintf_impl+0x6ca>
   26e32:	9b06      	ldr	r3, [sp, #24]
   26e34:	3501      	adds	r5, #1
   26e36:	461e      	mov	r6, r3
					pad = '0';
   26e38:	2230      	movs	r2, #48	; 0x30
   26e3a:	e07e      	b.n	26f3a <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   26e3c:	4638      	mov	r0, r7
   26e3e:	f007 fa66 	bl	2e30e <strlen>
   26e42:	e7c9      	b.n	26dd8 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   26e44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26e46:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   26e4a:	2600      	movs	r6, #0
			bps = buf;
   26e4c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   26e4e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   26e52:	2001      	movs	r0, #1
   26e54:	e7c6      	b.n	26de4 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   26e56:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   26e58:	bf5c      	itt	pl
   26e5a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   26e5e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   26e60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   26e64:	bf48      	it	mi
   26e66:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   26e68:	2b00      	cmp	r3, #0
   26e6a:	f6bf af62 	bge.w	26d32 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   26e6e:	4252      	negs	r2, r2
   26e70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   26e74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   26e78:	262d      	movs	r6, #45	; 0x2d
   26e7a:	e75a      	b.n	26d32 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   26e7c:	2600      	movs	r6, #0
   26e7e:	e758      	b.n	26d32 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   26e80:	2600      	movs	r6, #0
				conv->flag_zero = false;
   26e82:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   26e86:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   26e8a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   26e8c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   26e90:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   26e92:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   26e96:	f67f af5a 	bls.w	26d4e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   26e9a:	ebaa 0303 	sub.w	r3, sl, r3
   26e9e:	9311      	str	r3, [sp, #68]	; 0x44
   26ea0:	e755      	b.n	26d4e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   26ea2:	980e      	ldr	r0, [sp, #56]	; 0x38
   26ea4:	b390      	cbz	r0, 26f0c <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   26ea6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   26eaa:	9300      	str	r3, [sp, #0]
   26eac:	aa10      	add	r2, sp, #64	; 0x40
   26eae:	ab08      	add	r3, sp, #32
   26eb0:	2100      	movs	r1, #0
   26eb2:	f007 f81a 	bl	2deea <encode_uint>
				conv->altform_0c = true;
   26eb6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   26eba:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   26ebe:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   26ec2:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   26ec6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   26eca:	4607      	mov	r7, r0
				conv->altform_0c = true;
   26ecc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   26ed0:	dad6      	bge.n	26e80 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   26ed2:	2800      	cmp	r0, #0
   26ed4:	f43f aedb 	beq.w	26c8e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   26ed8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   26edc:	1a18      	subs	r0, r3, r0
		char sign = 0;
   26ede:	2600      	movs	r6, #0
   26ee0:	469a      	mov	sl, r3
   26ee2:	e77f      	b.n	26de4 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   26ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   26ee6:	2907      	cmp	r1, #7
   26ee8:	f63f aed1 	bhi.w	26c8e <z_cbvprintf_impl+0x426>
   26eec:	e8df f001 	tbb	[pc, r1]
   26ef0:	0c06040c 	.word	0x0c06040c
   26ef4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   26ef8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   26efa:	e6c8      	b.n	26c8e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   26efc:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   26efe:	e6c6      	b.n	26c8e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   26f00:	17ea      	asrs	r2, r5, #31
   26f02:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   26f06:	e6c2      	b.n	26c8e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   26f08:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   26f0a:	e6c0      	b.n	26c8e <z_cbvprintf_impl+0x426>
   26f0c:	4f2e      	ldr	r7, [pc, #184]	; (26fc8 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   26f0e:	4606      	mov	r6, r0
			bpe = bps + 5;
   26f10:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   26f14:	2005      	movs	r0, #5
   26f16:	e765      	b.n	26de4 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   26f18:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   26f1a:	bf48      	it	mi
   26f1c:	3001      	addmi	r0, #1
   26f1e:	e769      	b.n	26df4 <z_cbvprintf_impl+0x58c>
   26f20:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   26f22:	4610      	mov	r0, r2
   26f24:	9206      	str	r2, [sp, #24]
   26f26:	4659      	mov	r1, fp
   26f28:	47c8      	blx	r9
   26f2a:	2800      	cmp	r0, #0
   26f2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   26f30:	da04      	bge.n	26f3c <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   26f32:	b015      	add	sp, #84	; 0x54
   26f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   26f38:	2220      	movs	r2, #32
					pad = '0';
   26f3a:	4643      	mov	r3, r8
				while (width-- > 0) {
   26f3c:	4619      	mov	r1, r3
   26f3e:	2900      	cmp	r1, #0
   26f40:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   26f44:	dcec      	bgt.n	26f20 <z_cbvprintf_impl+0x6b8>
   26f46:	4445      	add	r5, r8
   26f48:	1a6d      	subs	r5, r5, r1
   26f4a:	4698      	mov	r8, r3
		if (sign != 0) {
   26f4c:	b12e      	cbz	r6, 26f5a <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   26f4e:	4659      	mov	r1, fp
   26f50:	4630      	mov	r0, r6
   26f52:	47c8      	blx	r9
   26f54:	2800      	cmp	r0, #0
   26f56:	dbec      	blt.n	26f32 <z_cbvprintf_impl+0x6ca>
   26f58:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   26f5a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   26f5e:	06da      	lsls	r2, r3, #27
   26f60:	d401      	bmi.n	26f66 <z_cbvprintf_impl+0x6fe>
   26f62:	071b      	lsls	r3, r3, #28
   26f64:	d505      	bpl.n	26f72 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   26f66:	4659      	mov	r1, fp
   26f68:	2030      	movs	r0, #48	; 0x30
   26f6a:	47c8      	blx	r9
   26f6c:	2800      	cmp	r0, #0
   26f6e:	dbe0      	blt.n	26f32 <z_cbvprintf_impl+0x6ca>
   26f70:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   26f72:	9b05      	ldr	r3, [sp, #20]
   26f74:	b133      	cbz	r3, 26f84 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   26f76:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   26f7a:	4659      	mov	r1, fp
   26f7c:	47c8      	blx	r9
   26f7e:	2800      	cmp	r0, #0
   26f80:	dbd7      	blt.n	26f32 <z_cbvprintf_impl+0x6ca>
   26f82:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   26f84:	9e04      	ldr	r6, [sp, #16]
   26f86:	442e      	add	r6, r5
   26f88:	e005      	b.n	26f96 <z_cbvprintf_impl+0x72e>
				OUTC('0');
   26f8a:	4659      	mov	r1, fp
   26f8c:	2030      	movs	r0, #48	; 0x30
   26f8e:	47c8      	blx	r9
   26f90:	2800      	cmp	r0, #0
   26f92:	dbce      	blt.n	26f32 <z_cbvprintf_impl+0x6ca>
   26f94:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   26f96:	1b73      	subs	r3, r6, r5
   26f98:	2b00      	cmp	r3, #0
   26f9a:	dcf6      	bgt.n	26f8a <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   26f9c:	4653      	mov	r3, sl
   26f9e:	463a      	mov	r2, r7
   26fa0:	4659      	mov	r1, fp
   26fa2:	4648      	mov	r0, r9
   26fa4:	f006 ffe7 	bl	2df76 <outs>
   26fa8:	2800      	cmp	r0, #0
   26faa:	dbc2      	blt.n	26f32 <z_cbvprintf_impl+0x6ca>
   26fac:	4405      	add	r5, r0
		while (width > 0) {
   26fae:	44a8      	add	r8, r5
   26fb0:	eba8 0305 	sub.w	r3, r8, r5
   26fb4:	2b00      	cmp	r3, #0
   26fb6:	f77f ae6a 	ble.w	26c8e <z_cbvprintf_impl+0x426>
			OUTC(' ');
   26fba:	4659      	mov	r1, fp
   26fbc:	2020      	movs	r0, #32
   26fbe:	47c8      	blx	r9
   26fc0:	2800      	cmp	r0, #0
   26fc2:	dbb6      	blt.n	26f32 <z_cbvprintf_impl+0x6ca>
   26fc4:	3501      	adds	r5, #1
			--width;
   26fc6:	e7f3      	b.n	26fb0 <z_cbvprintf_impl+0x748>
   26fc8:	0002fa10 	.word	0x0002fa10

00026fcc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   26fcc:	f003 bcaa 	b.w	2a924 <SystemInit>

00026fd0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   26fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26fd4:	4605      	mov	r5, r0
	__asm__ volatile(
   26fd6:	f04f 0320 	mov.w	r3, #32
   26fda:	f3ef 8611 	mrs	r6, BASEPRI
   26fde:	f383 8812 	msr	BASEPRI_MAX, r3
   26fe2:	f3bf 8f6f 	isb	sy
	return list->head;
   26fe6:	4b0e      	ldr	r3, [pc, #56]	; (27020 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   26fe8:	4f0e      	ldr	r7, [pc, #56]	; (27024 <pm_state_notify+0x54>)
   26fea:	681c      	ldr	r4, [r3, #0]
   26fec:	f8df 8038 	ldr.w	r8, [pc, #56]	; 27028 <pm_state_notify+0x58>
   26ff0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   26ff4:	b92c      	cbnz	r4, 27002 <pm_state_notify+0x32>
	__asm__ volatile(
   26ff6:	f386 8811 	msr	BASEPRI, r6
   26ffa:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   26ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   27002:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   27006:	2d00      	cmp	r5, #0
   27008:	bf18      	it	ne
   2700a:	4613      	movne	r3, r2
		if (callback) {
   2700c:	b12b      	cbz	r3, 2701a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2700e:	f898 2010 	ldrb.w	r2, [r8, #16]
   27012:	fb09 f202 	mul.w	r2, r9, r2
   27016:	5cb8      	ldrb	r0, [r7, r2]
   27018:	4798      	blx	r3
	return node->next;
   2701a:	6824      	ldr	r4, [r4, #0]
   2701c:	e7ea      	b.n	26ff4 <pm_state_notify+0x24>
   2701e:	bf00      	nop
   27020:	200006d8 	.word	0x200006d8
   27024:	200006cc 	.word	0x200006cc
   27028:	20001430 	.word	0x20001430

0002702c <pm_system_resume>:

void pm_system_resume(void)
{
   2702c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   2702e:	4b19      	ldr	r3, [pc, #100]	; (27094 <pm_system_resume+0x68>)
   27030:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27032:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   27036:	f004 031f 	and.w	r3, r4, #31
   2703a:	2201      	movs	r2, #1
   2703c:	409a      	lsls	r2, r3
   2703e:	4b16      	ldr	r3, [pc, #88]	; (27098 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27040:	0961      	lsrs	r1, r4, #5
   27042:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   27046:	43d0      	mvns	r0, r2
   27048:	e853 1f00 	ldrex	r1, [r3]
   2704c:	ea01 0500 	and.w	r5, r1, r0
   27050:	e843 5600 	strex	r6, r5, [r3]
   27054:	2e00      	cmp	r6, #0
   27056:	d1f7      	bne.n	27048 <pm_system_resume+0x1c>
   27058:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   2705c:	420a      	tst	r2, r1
   2705e:	d013      	beq.n	27088 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   27060:	4b0e      	ldr	r3, [pc, #56]	; (2709c <pm_system_resume+0x70>)
   27062:	4d0f      	ldr	r5, [pc, #60]	; (270a0 <pm_system_resume+0x74>)
   27064:	b18b      	cbz	r3, 2708a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   27066:	230c      	movs	r3, #12
   27068:	4363      	muls	r3, r4
   2706a:	18ea      	adds	r2, r5, r3
   2706c:	5ce8      	ldrb	r0, [r5, r3]
   2706e:	7851      	ldrb	r1, [r2, #1]
   27070:	f007 f98d 	bl	2e38e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   27074:	2000      	movs	r0, #0
   27076:	f7ff ffab 	bl	26fd0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   2707a:	230c      	movs	r3, #12
   2707c:	435c      	muls	r4, r3
   2707e:	192a      	adds	r2, r5, r4
   27080:	2300      	movs	r3, #0
   27082:	512b      	str	r3, [r5, r4]
   27084:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   27088:	bd70      	pop	{r4, r5, r6, pc}
   2708a:	f383 8811 	msr	BASEPRI, r3
   2708e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   27092:	e7ef      	b.n	27074 <pm_system_resume+0x48>
   27094:	20001430 	.word	0x20001430
   27098:	200006e0 	.word	0x200006e0
   2709c:	0002e38f 	.word	0x0002e38f
   270a0:	200006cc 	.word	0x200006cc

000270a4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   270a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   270a8:	4b35      	ldr	r3, [pc, #212]	; (27180 <pm_system_suspend+0xdc>)
{
   270aa:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   270ac:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   270ae:	f04f 0320 	mov.w	r3, #32
   270b2:	f3ef 8811 	mrs	r8, BASEPRI
   270b6:	f383 8812 	msr	BASEPRI_MAX, r3
   270ba:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   270be:	240c      	movs	r4, #12
   270c0:	4b30      	ldr	r3, [pc, #192]	; (27184 <pm_system_suspend+0xe0>)
   270c2:	4e31      	ldr	r6, [pc, #196]	; (27188 <pm_system_suspend+0xe4>)
   270c4:	436c      	muls	r4, r5
   270c6:	191a      	adds	r2, r3, r4
   270c8:	5d19      	ldrb	r1, [r3, r4]
   270ca:	2900      	cmp	r1, #0
   270cc:	d04c      	beq.n	27168 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   270ce:	ca07      	ldmia	r2, {r0, r1, r2}
   270d0:	eb06 0c04 	add.w	ip, r6, r4
   270d4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   270d8:	2200      	movs	r2, #0
   270da:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   270dc:	f388 8811 	msr	BASEPRI, r8
   270e0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   270e4:	230c      	movs	r3, #12
   270e6:	436b      	muls	r3, r5
   270e8:	18f2      	adds	r2, r6, r3
   270ea:	5cf0      	ldrb	r0, [r6, r3]
   270ec:	2800      	cmp	r0, #0
   270ee:	d039      	beq.n	27164 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   270f0:	1c7b      	adds	r3, r7, #1
   270f2:	d010      	beq.n	27116 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   270f4:	f8d2 c008 	ldr.w	ip, [r2, #8]
   270f8:	4c24      	ldr	r4, [pc, #144]	; (2718c <pm_system_suspend+0xe8>)
   270fa:	4a25      	ldr	r2, [pc, #148]	; (27190 <pm_system_suspend+0xec>)
   270fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   27100:	2100      	movs	r1, #0
   27102:	fbec 4100 	umlal	r4, r1, ip, r0
   27106:	2300      	movs	r3, #0
   27108:	4620      	mov	r0, r4
   2710a:	f7fe fff9 	bl	26100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   2710e:	2101      	movs	r1, #1
   27110:	1a38      	subs	r0, r7, r0
   27112:	f003 fbaf 	bl	2a874 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   27116:	f005 fffb 	bl	2d110 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   2711a:	2001      	movs	r0, #1
   2711c:	f7ff ff58 	bl	26fd0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27120:	f3bf 8f5b 	dmb	ish
   27124:	4b1b      	ldr	r3, [pc, #108]	; (27194 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   27126:	096a      	lsrs	r2, r5, #5
   27128:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   2712c:	f005 011f 	and.w	r1, r5, #31
   27130:	2201      	movs	r2, #1
   27132:	408a      	lsls	r2, r1
   27134:	e853 0f00 	ldrex	r0, [r3]
   27138:	4310      	orrs	r0, r2
   2713a:	e843 0100 	strex	r1, r0, [r3]
   2713e:	2900      	cmp	r1, #0
   27140:	d1f8      	bne.n	27134 <pm_system_suspend+0x90>
   27142:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   27146:	4b14      	ldr	r3, [pc, #80]	; (27198 <pm_system_suspend+0xf4>)
   27148:	b13b      	cbz	r3, 2715a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   2714a:	230c      	movs	r3, #12
   2714c:	fb03 f005 	mul.w	r0, r3, r5
   27150:	1833      	adds	r3, r6, r0
   27152:	5c30      	ldrb	r0, [r6, r0]
   27154:	7859      	ldrb	r1, [r3, #1]
   27156:	f007 f90e 	bl	2e376 <pm_state_set>
	if (atomic_add(&_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   2715a:	f7ff ff67 	bl	2702c <pm_system_resume>
	k_sched_unlock();
   2715e:	f005 ffeb 	bl	2d138 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   27162:	2001      	movs	r0, #1
}
   27164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   27168:	4601      	mov	r1, r0
   2716a:	4628      	mov	r0, r5
   2716c:	f000 f816 	bl	2719c <pm_policy_next_state>
		if (info != NULL) {
   27170:	2800      	cmp	r0, #0
   27172:	d0b3      	beq.n	270dc <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   27174:	c807      	ldmia	r0, {r0, r1, r2}
   27176:	4434      	add	r4, r6
   27178:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   2717c:	e7ae      	b.n	270dc <pm_system_suspend+0x38>
   2717e:	bf00      	nop
   27180:	20001430 	.word	0x20001430
   27184:	200006c0 	.word	0x200006c0
   27188:	200006cc 	.word	0x200006cc
   2718c:	000f423f 	.word	0x000f423f
   27190:	000f4240 	.word	0x000f4240
   27194:	200006e0 	.word	0x200006e0
   27198:	0002e377 	.word	0x0002e377

0002719c <pm_policy_next_state>:
	next_event_cyc = new_next_event_cyc;
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   2719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		cyc = k_ticks_to_cyc_ceil32(ticks);
	}

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);

	if (next_event_cyc >= 0) {
   271a0:	4c38      	ldr	r4, [pc, #224]	; (27284 <pm_policy_next_state+0xe8>)
{
   271a2:	b085      	sub	sp, #20
		cyc = k_ticks_to_cyc_ceil32(ticks);
   271a4:	1c4b      	adds	r3, r1, #1
{
   271a6:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   271a8:	a903      	add	r1, sp, #12
		cyc = k_ticks_to_cyc_ceil32(ticks);
   271aa:	bf0c      	ite	eq
   271ac:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
   271b0:	f04f 0800 	movne.w	r8, #0
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   271b4:	f000 f86e 	bl	27294 <pm_state_cpu_get_all>
	if (next_event_cyc >= 0) {
   271b8:	6863      	ldr	r3, [r4, #4]
   271ba:	2b00      	cmp	r3, #0
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   271bc:	4605      	mov	r5, r0
	if (next_event_cyc >= 0) {
   271be:	db12      	blt.n	271e6 <pm_policy_next_state+0x4a>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   271c0:	f007 fbee 	bl	2e9a0 <sys_clock_cycle_get_32>
		uint32_t cyc_curr = k_cycle_get_32();
		int64_t cyc_evt = next_event_cyc - cyc_curr;
   271c4:	e9d4 3200 	ldrd	r3, r2, [r4]
   271c8:	1a1c      	subs	r4, r3, r0
   271ca:	f162 0600 	sbc.w	r6, r2, #0

		/* event happening after cycle counter max value, pad */
		if (next_event_cyc <= cyc_curr) {
   271ce:	4298      	cmp	r0, r3
   271d0:	f04f 0300 	mov.w	r3, #0
   271d4:	4193      	sbcs	r3, r2
   271d6:	db02      	blt.n	271de <pm_policy_next_state+0x42>
			cyc_evt += UINT32_MAX;
   271d8:	3c01      	subs	r4, #1
   271da:	f146 0600 	adc.w	r6, r6, #0
		}

		if (cyc_evt > 0) {
   271de:	2c01      	cmp	r4, #1
   271e0:	f176 0300 	sbcs.w	r3, r6, #0
   271e4:	da02      	bge.n	271ec <pm_policy_next_state+0x50>
			 * otherwise, who comes earlier wins
			 */
			if (cyc < 0) {
				cyc = cyc_evt;
			} else {
				cyc = MIN(cyc, cyc_evt);
   271e6:	463c      	mov	r4, r7
   271e8:	4646      	mov	r6, r8
   271ea:	e009      	b.n	27200 <pm_policy_next_state+0x64>
			if (cyc < 0) {
   271ec:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   271f0:	bf08      	it	eq
   271f2:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   271f6:	d003      	beq.n	27200 <pm_policy_next_state+0x64>
				cyc = MIN(cyc, cyc_evt);
   271f8:	42a7      	cmp	r7, r4
   271fa:	eb78 0306 	sbcs.w	r3, r8, r6
   271fe:	dbf2      	blt.n	271e6 <pm_policy_next_state+0x4a>

		min_residency_cyc = k_us_to_cyc_ceil32(state->min_residency_us);
		exit_latency_cyc = k_us_to_cyc_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_cyc >= 0) &&
   27200:	4b21      	ldr	r3, [pc, #132]	; (27288 <pm_policy_next_state+0xec>)
   27202:	9f03      	ldr	r7, [sp, #12]
   27204:	681b      	ldr	r3, [r3, #0]
   27206:	9300      	str	r3, [sp, #0]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   27208:	1e6b      	subs	r3, r5, #1
   2720a:	b21b      	sxth	r3, r3
   2720c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27210:	f8df 9078 	ldr.w	r9, [pc, #120]	; 2728c <pm_policy_next_state+0xf0>
   27214:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   27218:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   2721c:	f04f 0b00 	mov.w	fp, #0
   27220:	b925      	cbnz	r5, 2722c <pm_policy_next_state+0x90>
		    (cyc >= (min_residency_cyc + exit_latency_cyc))) {
			return state;
		}
	}

	return NULL;
   27222:	46aa      	mov	sl, r5
}
   27224:	4650      	mov	r0, sl
   27226:	b005      	add	sp, #20
   27228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2722c:	6878      	ldr	r0, [r7, #4]
   2722e:	4a18      	ldr	r2, [pc, #96]	; (27290 <pm_policy_next_state+0xf4>)
   27230:	46cc      	mov	ip, r9
   27232:	4659      	mov	r1, fp
   27234:	fbe0 c108 	umlal	ip, r1, r0, r8
   27238:	2300      	movs	r3, #0
   2723a:	4660      	mov	r0, ip
   2723c:	f7fe ff60 	bl	26100 <__aeabi_uldivmod>
   27240:	9001      	str	r0, [sp, #4]
   27242:	68b8      	ldr	r0, [r7, #8]
   27244:	4a12      	ldr	r2, [pc, #72]	; (27290 <pm_policy_next_state+0xf4>)
   27246:	46cc      	mov	ip, r9
   27248:	4659      	mov	r1, fp
   2724a:	fbe0 c108 	umlal	ip, r1, r0, r8
   2724e:	2300      	movs	r3, #0
   27250:	4660      	mov	r0, ip
   27252:	f7fe ff55 	bl	26100 <__aeabi_uldivmod>
		if ((max_latency_cyc >= 0) &&
   27256:	9b00      	ldr	r3, [sp, #0]
   27258:	2b00      	cmp	r3, #0
		const struct pm_state_info *state = &cpu_states[i];
   2725a:	46ba      	mov	sl, r7
		if ((max_latency_cyc >= 0) &&
   2725c:	db01      	blt.n	27262 <pm_policy_next_state+0xc6>
   2725e:	4283      	cmp	r3, r0
   27260:	d90b      	bls.n	2727a <pm_policy_next_state+0xde>
		if ((cyc < 0) ||
   27262:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   27266:	bf08      	it	eq
   27268:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   2726c:	d0da      	beq.n	27224 <pm_policy_next_state+0x88>
		    (cyc >= (min_residency_cyc + exit_latency_cyc))) {
   2726e:	9b01      	ldr	r3, [sp, #4]
   27270:	4418      	add	r0, r3
		if ((cyc < 0) ||
   27272:	4284      	cmp	r4, r0
   27274:	f176 0300 	sbcs.w	r3, r6, #0
   27278:	dad4      	bge.n	27224 <pm_policy_next_state+0x88>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2727a:	3d01      	subs	r5, #1
   2727c:	b2ad      	uxth	r5, r5
   2727e:	3f0c      	subs	r7, #12
   27280:	e7ce      	b.n	27220 <pm_policy_next_state+0x84>
   27282:	bf00      	nop
   27284:	20000000 	.word	0x20000000
   27288:	2000015c 	.word	0x2000015c
   2728c:	000f423f 	.word	0x000f423f
   27290:	000f4240 	.word	0x000f4240

00027294 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   27294:	b908      	cbnz	r0, 2729a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   27296:	4b02      	ldr	r3, [pc, #8]	; (272a0 <pm_state_cpu_get_all+0xc>)
   27298:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   2729a:	2000      	movs	r0, #0
   2729c:	4770      	bx	lr
   2729e:	bf00      	nop
   272a0:	0002f72c 	.word	0x0002f72c

000272a4 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
   272a4:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   272a6:	4b0c      	ldr	r3, [pc, #48]	; (272d8 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   272a8:	4e0c      	ldr	r6, [pc, #48]	; (272dc <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   272aa:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   272ac:	4b0c      	ldr	r3, [pc, #48]	; (272e0 <class_handler+0x3c>)
   272ae:	42b3      	cmp	r3, r6
   272b0:	d303      	bcc.n	272ba <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   272b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   272b6:	bcf0      	pop	{r4, r5, r6, r7}
   272b8:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   272ba:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   272bc:	42bd      	cmp	r5, r7
   272be:	d309      	bcc.n	272d4 <class_handler+0x30>
		if (iface->class_handler &&
   272c0:	691c      	ldr	r4, [r3, #16]
   272c2:	b13c      	cbz	r4, 272d4 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   272c4:	f895 c002 	ldrb.w	ip, [r5, #2]
   272c8:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   272ca:	45ac      	cmp	ip, r5
   272cc:	d102      	bne.n	272d4 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   272ce:	4623      	mov	r3, r4
}
   272d0:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   272d2:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   272d4:	3324      	adds	r3, #36	; 0x24
   272d6:	e7ea      	b.n	272ae <class_handler+0xa>
   272d8:	200006e4 	.word	0x200006e4
   272dc:	200003a0 	.word	0x200003a0
   272e0:	2000037c 	.word	0x2000037c

000272e4 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   272e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   272e8:	4c13      	ldr	r4, [pc, #76]	; (27338 <custom_handler+0x54>)
   272ea:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2733c <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   272ee:	f8df 9050 	ldr.w	r9, [pc, #80]	; 27340 <custom_handler+0x5c>
{
   272f2:	4605      	mov	r5, r0
   272f4:	460e      	mov	r6, r1
   272f6:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   272f8:	4544      	cmp	r4, r8
   272fa:	d303      	bcc.n	27304 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   272fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   27304:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   27306:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   2730a:	429a      	cmp	r2, r3
   2730c:	d312      	bcc.n	27334 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   2730e:	69a3      	ldr	r3, [r4, #24]
   27310:	b183      	cbz	r3, 27334 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   27312:	7890      	ldrb	r0, [r2, #2]
   27314:	7929      	ldrb	r1, [r5, #4]
   27316:	4288      	cmp	r0, r1
   27318:	d105      	bne.n	27326 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   2731a:	463a      	mov	r2, r7
   2731c:	4631      	mov	r1, r6
   2731e:	4628      	mov	r0, r5
}
   27320:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   27324:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   27326:	7952      	ldrb	r2, [r2, #5]
   27328:	2a01      	cmp	r2, #1
   2732a:	d103      	bne.n	27334 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   2732c:	463a      	mov	r2, r7
   2732e:	4631      	mov	r1, r6
   27330:	4628      	mov	r0, r5
   27332:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   27334:	3424      	adds	r4, #36	; 0x24
   27336:	e7df      	b.n	272f8 <custom_handler+0x14>
   27338:	2000037c 	.word	0x2000037c
   2733c:	200003a0 	.word	0x200003a0
   27340:	200006e4 	.word	0x200006e4

00027344 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   27344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   27348:	4c0b      	ldr	r4, [pc, #44]	; (27378 <vendor_handler+0x34>)
   2734a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2737c <vendor_handler+0x38>
{
   2734e:	4605      	mov	r5, r0
   27350:	460e      	mov	r6, r1
   27352:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   27354:	4544      	cmp	r4, r8
   27356:	d302      	bcc.n	2735e <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   27358:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2735c:	e009      	b.n	27372 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   2735e:	6963      	ldr	r3, [r4, #20]
   27360:	b90b      	cbnz	r3, 27366 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   27362:	3424      	adds	r4, #36	; 0x24
   27364:	e7f6      	b.n	27354 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   27366:	463a      	mov	r2, r7
   27368:	4631      	mov	r1, r6
   2736a:	4628      	mov	r0, r5
   2736c:	4798      	blx	r3
   2736e:	2800      	cmp	r0, #0
   27370:	d1f7      	bne.n	27362 <vendor_handler+0x1e>
}
   27372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27376:	bf00      	nop
   27378:	2000037c 	.word	0x2000037c
   2737c:	200003a0 	.word	0x200003a0

00027380 <disable_endpoint>:
{
   27380:	b510      	push	{r4, lr}
   27382:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_addr);
   27384:	f007 f838 	bl	2e3f8 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   27388:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2738c:	d000      	beq.n	27390 <disable_endpoint+0x10>
	} else if (ret) {
   2738e:	b950      	cbnz	r0, 273a6 <disable_endpoint+0x26>
	usb_dev.ep_bm &= ~ep_bm;
   27390:	4a05      	ldr	r2, [pc, #20]	; (273a8 <disable_endpoint+0x28>)
	ep_bm = get_ep_bm_from_addr(ep_addr);
   27392:	4620      	mov	r0, r4
   27394:	f006 feaf 	bl	2e0f6 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
   27398:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   2739c:	ea23 0300 	bic.w	r3, r3, r0
   273a0:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
   273a4:	2000      	movs	r0, #0
}
   273a6:	bd10      	pop	{r4, pc}
   273a8:	200006e4 	.word	0x200006e4

000273ac <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   273ac:	4802      	ldr	r0, [pc, #8]	; (273b8 <usb_reset_alt_setting+0xc>)
   273ae:	2208      	movs	r2, #8
   273b0:	2100      	movs	r1, #0
   273b2:	f006 bfbe 	b.w	2e332 <memset>
   273b6:	bf00      	nop
   273b8:	2000079f 	.word	0x2000079f

000273bc <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   273bc:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   273be:	4b0b      	ldr	r3, [pc, #44]	; (273ec <is_ep_valid.part.0+0x30>)
   273c0:	4c0b      	ldr	r4, [pc, #44]	; (273f0 <is_ep_valid.part.0+0x34>)
   273c2:	42a3      	cmp	r3, r4
   273c4:	d301      	bcc.n	273ca <is_ep_valid.part.0+0xe>
	return false;
   273c6:	2000      	movs	r0, #0
}
   273c8:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   273ca:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   273cc:	7f1e      	ldrb	r6, [r3, #28]
   273ce:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   273d0:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   273d2:	b2d5      	uxtb	r5, r2
   273d4:	42ae      	cmp	r6, r5
   273d6:	d801      	bhi.n	273dc <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   273d8:	3324      	adds	r3, #36	; 0x24
   273da:	e7f2      	b.n	273c2 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   273dc:	3201      	adds	r2, #1
   273de:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   273e2:	4285      	cmp	r5, r0
   273e4:	d1f5      	bne.n	273d2 <is_ep_valid.part.0+0x16>
		return true;
   273e6:	2001      	movs	r0, #1
   273e8:	e7ee      	b.n	273c8 <is_ep_valid.part.0+0xc>
   273ea:	bf00      	nop
   273ec:	2000037c 	.word	0x2000037c
   273f0:	200003a0 	.word	0x200003a0

000273f4 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
   273f4:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
   273f6:	4809      	ldr	r0, [pc, #36]	; (2741c <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
   273f8:	7803      	ldrb	r3, [r0, #0]
   273fa:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   273fe:	330a      	adds	r3, #10
   27400:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   27404:	b13b      	cbz	r3, 27416 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   27406:	f100 0208 	add.w	r2, r0, #8
   2740a:	f100 0110 	add.w	r1, r0, #16
   2740e:	4798      	blx	r3
   27410:	43c0      	mvns	r0, r0
   27412:	0fc0      	lsrs	r0, r0, #31
}
   27414:	bd08      	pop	{r3, pc}
		return false;
   27416:	4618      	mov	r0, r3
   27418:	e7fc      	b.n	27414 <usb_handle_request.constprop.0+0x20>
   2741a:	bf00      	nop
   2741c:	200006e4 	.word	0x200006e4

00027420 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   27420:	2804      	cmp	r0, #4
{
   27422:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27426:	f8df 9098 	ldr.w	r9, [pc, #152]	; 274c0 <forward_status_cb+0xa0>
   2742a:	4604      	mov	r4, r0
   2742c:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
   2742e:	d016      	beq.n	2745e <forward_status_cb+0x3e>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   27430:	2801      	cmp	r0, #1
   27432:	d12d      	bne.n	27490 <forward_status_cb+0x70>
		if (usb_dev.configured) {
   27434:	f8df 808c 	ldr.w	r8, [pc, #140]	; 274c4 <forward_status_cb+0xa4>
   27438:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
   2743c:	b343      	cbz	r3, 27490 <forward_status_cb+0x70>
			usb_cancel_transfers();
   2743e:	f000 fe0d 	bl	2805c <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   27442:	4d21      	ldr	r5, [pc, #132]	; (274c8 <forward_status_cb+0xa8>)
   27444:	454d      	cmp	r5, r9
   27446:	d220      	bcs.n	2748a <forward_status_cb+0x6a>
		ep_data = cfg_data->endpoint;
   27448:	f8d5 b020 	ldr.w	fp, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2744c:	f04f 0a00 	mov.w	sl, #0
   27450:	7f2b      	ldrb	r3, [r5, #28]
   27452:	fa5f f68a 	uxtb.w	r6, sl
   27456:	42b3      	cmp	r3, r6
   27458:	d804      	bhi.n	27464 <forward_status_cb+0x44>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2745a:	3524      	adds	r5, #36	; 0x24
   2745c:	e7f2      	b.n	27444 <forward_status_cb+0x24>
		usb_reset_alt_setting();
   2745e:	f7ff ffa5 	bl	273ac <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   27462:	e7e7      	b.n	27434 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
   27464:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
			if (ret < 0) {
   27468:	f10a 0a01 	add.w	sl, sl, #1
	ret = usb_dc_ep_disable(ep_data->ep_addr);
   2746c:	7930      	ldrb	r0, [r6, #4]
   2746e:	f006 ffc3 	bl	2e3f8 <usb_dc_ep_disable>
   27472:	4602      	mov	r2, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
   27474:	7930      	ldrb	r0, [r6, #4]
   27476:	f006 fe3e 	bl	2e0f6 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
   2747a:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
   2747e:	2a00      	cmp	r2, #0
	usb_dev.ep_bm &= ~ep_bm;
   27480:	ea23 0300 	bic.w	r3, r3, r0
   27484:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
   27488:	dae2      	bge.n	27450 <forward_status_cb+0x30>
			usb_dev.configured = false;
   2748a:	2300      	movs	r3, #0
   2748c:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   27490:	4d0d      	ldr	r5, [pc, #52]	; (274c8 <forward_status_cb+0xa8>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   27492:	454d      	cmp	r5, r9
   27494:	d308      	bcc.n	274a8 <forward_status_cb+0x88>
	if (usb_dev.user_status_callback) {
   27496:	4b0b      	ldr	r3, [pc, #44]	; (274c4 <forward_status_cb+0xa4>)
   27498:	6a1b      	ldr	r3, [r3, #32]
   2749a:	b16b      	cbz	r3, 274b8 <forward_status_cb+0x98>
		usb_dev.user_status_callback(status, param);
   2749c:	4639      	mov	r1, r7
   2749e:	4620      	mov	r0, r4
}
   274a0:	b001      	add	sp, #4
   274a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
   274a6:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
   274a8:	68eb      	ldr	r3, [r5, #12]
   274aa:	b11b      	cbz	r3, 274b4 <forward_status_cb+0x94>
			cfg_data->cb_usb_status(cfg_data, status, param);
   274ac:	463a      	mov	r2, r7
   274ae:	4621      	mov	r1, r4
   274b0:	4628      	mov	r0, r5
   274b2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   274b4:	3524      	adds	r5, #36	; 0x24
   274b6:	e7ec      	b.n	27492 <forward_status_cb+0x72>
}
   274b8:	b001      	add	sp, #4
   274ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   274be:	bf00      	nop
   274c0:	200003a0 	.word	0x200003a0
   274c4:	200006e4 	.word	0x200006e4
   274c8:	2000037c 	.word	0x2000037c

000274cc <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   274cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   274ce:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   274d0:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   274d2:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   274d4:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   274d8:	d007      	beq.n	274ea <usb_halt_endpoint_req.isra.0+0x1e>
   274da:	4620      	mov	r0, r4
   274dc:	f7ff ff6e 	bl	273bc <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   274e0:	b178      	cbz	r0, 27502 <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
   274e2:	4b0d      	ldr	r3, [pc, #52]	; (27518 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   274e4:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   274e8:	b158      	cbz	r0, 27502 <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
   274ea:	4e0b      	ldr	r6, [pc, #44]	; (27518 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
   274ec:	4620      	mov	r0, r4
		if (halt) {
   274ee:	b155      	cbz	r5, 27506 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
   274f0:	f001 ff26 	bl	29340 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   274f4:	69f3      	ldr	r3, [r6, #28]
   274f6:	b11b      	cbz	r3, 27500 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   274f8:	f10d 0107 	add.w	r1, sp, #7
   274fc:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   274fe:	4798      	blx	r3
		return true;
   27500:	2001      	movs	r0, #1
}
   27502:	b002      	add	sp, #8
   27504:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   27506:	f001 ff43 	bl	29390 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   2750a:	69f3      	ldr	r3, [r6, #28]
   2750c:	2b00      	cmp	r3, #0
   2750e:	d0f7      	beq.n	27500 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   27510:	f10d 0107 	add.w	r1, sp, #7
   27514:	2009      	movs	r0, #9
   27516:	e7f2      	b.n	274fe <usb_halt_endpoint_req.isra.0+0x32>
   27518:	200006e4 	.word	0x200006e4

0002751c <set_endpoint>:
{
   2751c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   2751e:	7886      	ldrb	r6, [r0, #2]
   27520:	f88d 6000 	strb.w	r6, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   27524:	7903      	ldrb	r3, [r0, #4]
   27526:	7942      	ldrb	r2, [r0, #5]
	if (ep_bm & usb_dev.ep_bm) {
   27528:	4c1c      	ldr	r4, [pc, #112]	; (2759c <set_endpoint+0x80>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   2752a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2752e:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   27532:	78c3      	ldrb	r3, [r0, #3]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   27534:	4630      	mov	r0, r6
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   27536:	f003 0303 	and.w	r3, r3, #3
   2753a:	f88d 3004 	strb.w	r3, [sp, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   2753e:	f006 fdda 	bl	2e0f6 <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
   27542:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   27546:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   27548:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
   2754a:	d00b      	beq.n	27564 <set_endpoint+0x48>
	usb_cancel_transfer(ep_cfg.ep_addr);
   2754c:	4630      	mov	r0, r6
   2754e:	f000 fd67 	bl	28020 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
   27552:	4630      	mov	r0, r6
   27554:	f7ff ff14 	bl	27380 <disable_endpoint>
		if (!k_is_in_isr()) {
   27558:	f007 fc09 	bl	2ed6e <k_is_in_isr>
   2755c:	b910      	cbnz	r0, 27564 <set_endpoint+0x48>
		union { uintptr_t x; int32_t val; } parm0 = { .val = us };
		return (int32_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
   2755e:	2096      	movs	r0, #150	; 0x96
   27560:	f005 feaa 	bl	2d2b8 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
   27564:	4668      	mov	r0, sp
   27566:	f001 fec7 	bl	292f8 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   2756a:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2756e:	d003      	beq.n	27578 <set_endpoint+0x5c>
	} else if (ret) {
   27570:	b110      	cbz	r0, 27578 <set_endpoint+0x5c>
		return false;
   27572:	2000      	movs	r0, #0
}
   27574:	b002      	add	sp, #8
   27576:	bd70      	pop	{r4, r5, r6, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   27578:	f89d 0000 	ldrb.w	r0, [sp]
   2757c:	f001 ff44 	bl	29408 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   27580:	f110 0f78 	cmn.w	r0, #120	; 0x78
   27584:	d001      	beq.n	2758a <set_endpoint+0x6e>
	} else if (ret) {
   27586:	2800      	cmp	r0, #0
   27588:	d1f3      	bne.n	27572 <set_endpoint+0x56>
	usb_dev.ep_bm |= ep_bm;
   2758a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	usb_dev.configured = true;
   2758e:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
   27590:	432b      	orrs	r3, r5
	usb_dev.configured = true;
   27592:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
   27596:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	return true;
   2759a:	e7eb      	b.n	27574 <set_endpoint+0x58>
   2759c:	200006e4 	.word	0x200006e4

000275a0 <usb_handle_standard_request>:
{
   275a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   275a4:	4ea3      	ldr	r6, [pc, #652]	; (27834 <usb_handle_standard_request+0x294>)
   275a6:	69b3      	ldr	r3, [r6, #24]
{
   275a8:	4604      	mov	r4, r0
   275aa:	460f      	mov	r7, r1
   275ac:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
   275ae:	b9fb      	cbnz	r3, 275f0 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
   275b0:	7823      	ldrb	r3, [r4, #0]
   275b2:	f003 031f 	and.w	r3, r3, #31
   275b6:	2b01      	cmp	r3, #1
   275b8:	f000 809d 	beq.w	276f6 <usb_handle_standard_request+0x156>
   275bc:	2b02      	cmp	r3, #2
   275be:	f000 8104 	beq.w	277ca <usb_handle_standard_request+0x22a>
   275c2:	bb33      	cbnz	r3, 27612 <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
   275c4:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
   275c8:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
   275ca:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   275cc:	2800      	cmp	r0, #0
   275ce:	da34      	bge.n	2763a <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
   275d0:	2906      	cmp	r1, #6
   275d2:	d012      	beq.n	275fa <usb_handle_standard_request+0x5a>
   275d4:	2908      	cmp	r1, #8
   275d6:	d02b      	beq.n	27630 <usb_handle_standard_request+0x90>
   275d8:	b9d9      	cbnz	r1, 27612 <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   275da:	2301      	movs	r3, #1
   275dc:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
   275de:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
   275e0:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
   275e4:	005b      	lsls	r3, r3, #1
   275e6:	f043 0301 	orr.w	r3, r3, #1
   275ea:	7013      	strb	r3, [r2, #0]
		*len = 2;
   275ec:	2302      	movs	r3, #2
   275ee:	e12a      	b.n	27846 <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   275f0:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   275f2:	2800      	cmp	r0, #0
   275f4:	d1dc      	bne.n	275b0 <usb_handle_standard_request+0x10>
		return 0;
   275f6:	2000      	movs	r0, #0
   275f8:	e00d      	b.n	27616 <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
   275fa:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   275fc:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   275fe:	1f01      	subs	r1, r0, #4
   27600:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   27602:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   27604:	d905      	bls.n	27612 <usb_handle_standard_request+0x72>
   27606:	2807      	cmp	r0, #7
   27608:	d803      	bhi.n	27612 <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
   2760a:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   2760c:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
   2760e:	780c      	ldrb	r4, [r1, #0]
   27610:	b91c      	cbnz	r4, 2761a <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
   27612:	f06f 0015 	mvn.w	r0, #21
}
   27616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
   2761a:	784e      	ldrb	r6, [r1, #1]
   2761c:	4566      	cmp	r6, ip
   2761e:	d103      	bne.n	27628 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
   27620:	429a      	cmp	r2, r3
   27622:	f000 810b 	beq.w	2783c <usb_handle_standard_request+0x29c>
			cur_index++;
   27626:	3301      	adds	r3, #1
		p += p[DESC_bLength];
   27628:	4421      	add	r1, r4
   2762a:	e7f0      	b.n	2760e <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
   2762c:	780b      	ldrb	r3, [r1, #0]
   2762e:	e10a      	b.n	27846 <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
   27630:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   27634:	7013      	strb	r3, [r2, #0]
				*len = 1;
   27636:	2301      	movs	r3, #1
   27638:	e105      	b.n	27846 <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
   2763a:	3901      	subs	r1, #1
   2763c:	2908      	cmp	r1, #8
   2763e:	d8e8      	bhi.n	27612 <usb_handle_standard_request+0x72>
   27640:	a301      	add	r3, pc, #4	; (adr r3, 27648 <usb_handle_standard_request+0xa8>)
   27642:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   27646:	bf00      	nop
   27648:	000276e1 	.word	0x000276e1
   2764c:	00027613 	.word	0x00027613
   27650:	000276ef 	.word	0x000276ef
   27654:	00027613 	.word	0x00027613
   27658:	0002766d 	.word	0x0002766d
   2765c:	00027613 	.word	0x00027613
   27660:	00027613 	.word	0x00027613
   27664:	00027613 	.word	0x00027613
   27668:	00027679 	.word	0x00027679
			return !usb_dc_set_address(setup->wValue);
   2766c:	78a0      	ldrb	r0, [r4, #2]
   2766e:	f001 fe31 	bl	292d4 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   27672:	2800      	cmp	r0, #0
   27674:	d0bf      	beq.n	275f6 <usb_handle_standard_request+0x56>
   27676:	e7cc      	b.n	27612 <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
   27678:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2767a:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
   2767c:	bb63      	cbnz	r3, 276d8 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
   2767e:	f7ff fe95 	bl	273ac <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   27682:	8863      	ldrh	r3, [r4, #2]
   27684:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   27688:	69f3      	ldr	r3, [r6, #28]
   2768a:	2b00      	cmp	r3, #0
   2768c:	d0b3      	beq.n	275f6 <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   2768e:	496a      	ldr	r1, [pc, #424]	; (27838 <usb_handle_standard_request+0x298>)
   27690:	2003      	movs	r0, #3
   27692:	4798      	blx	r3
   27694:	e7af      	b.n	275f6 <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
   27696:	786b      	ldrb	r3, [r5, #1]
   27698:	2b04      	cmp	r3, #4
   2769a:	d010      	beq.n	276be <usb_handle_standard_request+0x11e>
   2769c:	2b05      	cmp	r3, #5
   2769e:	d011      	beq.n	276c4 <usb_handle_standard_request+0x124>
   276a0:	2b02      	cmp	r3, #2
   276a2:	d104      	bne.n	276ae <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
   276a4:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
   276a6:	8863      	ldrh	r3, [r4, #2]
				found = true;
   276a8:	42bb      	cmp	r3, r7
   276aa:	bf08      	it	eq
   276ac:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   276ae:	782b      	ldrb	r3, [r5, #0]
   276b0:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   276b2:	782b      	ldrb	r3, [r5, #0]
   276b4:	2b00      	cmp	r3, #0
   276b6:	d1ee      	bne.n	27696 <usb_handle_standard_request+0xf6>
	if (found) {
   276b8:	2800      	cmp	r0, #0
   276ba:	d0aa      	beq.n	27612 <usb_handle_standard_request+0x72>
   276bc:	e7df      	b.n	2767e <usb_handle_standard_request+0xde>
			cur_alt_setting =
   276be:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
   276c2:	e7f4      	b.n	276ae <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
   276c4:	8863      	ldrh	r3, [r4, #2]
   276c6:	42bb      	cmp	r3, r7
   276c8:	d1f1      	bne.n	276ae <usb_handle_standard_request+0x10e>
   276ca:	f1b8 0f00 	cmp.w	r8, #0
   276ce:	d1ee      	bne.n	276ae <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   276d0:	4628      	mov	r0, r5
   276d2:	f7ff ff23 	bl	2751c <set_endpoint>
			break;
   276d6:	e7ea      	b.n	276ae <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
   276d8:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
   276da:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   276dc:	46b8      	mov	r8, r7
   276de:	e7e8      	b.n	276b2 <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   276e0:	8863      	ldrh	r3, [r4, #2]
   276e2:	2b01      	cmp	r3, #1
   276e4:	d195      	bne.n	27612 <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
   276e6:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
   276e8:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   276ec:	e783      	b.n	275f6 <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   276ee:	8863      	ldrh	r3, [r4, #2]
   276f0:	2b01      	cmp	r3, #1
   276f2:	d18e      	bne.n	27612 <usb_handle_standard_request+0x72>
   276f4:	e7f8      	b.n	276e8 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
   276f6:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   276fa:	f8d5 c000 	ldr.w	ip, [r5]
   276fe:	2b00      	cmp	r3, #0
   27700:	d087      	beq.n	27612 <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   27702:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   27704:	88a3      	ldrh	r3, [r4, #4]
   27706:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2770a:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
   2770c:	7810      	ldrb	r0, [r2, #0]
   2770e:	2800      	cmp	r0, #0
   27710:	f43f af7f 	beq.w	27612 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   27714:	7851      	ldrb	r1, [r2, #1]
   27716:	2902      	cmp	r1, #2
   27718:	d104      	bne.n	27724 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
   2771a:	f892 8004 	ldrb.w	r8, [r2, #4]
   2771e:	45f0      	cmp	r8, lr
   27720:	f200 8093 	bhi.w	2784a <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
   27724:	4402      	add	r2, r0
   27726:	e7f1      	b.n	2770c <usb_handle_standard_request+0x16c>
			data[0] = 0U;
   27728:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
   2772c:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
   27730:	6039      	str	r1, [r7, #0]
			return true;
   27732:	e760      	b.n	275f6 <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
   27734:	4415      	add	r5, r2
   27736:	e094      	b.n	27862 <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   27738:	2a0b      	cmp	r2, #11
   2773a:	f47f af6a 	bne.w	27612 <usb_handle_standard_request+0x72>
	bool ret = false;
   2773e:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   27740:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   27744:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
   27746:	46ba      	mov	sl, r7
   27748:	e006      	b.n	27758 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
   2774a:	786b      	ldrb	r3, [r5, #1]
   2774c:	2b04      	cmp	r3, #4
   2774e:	d00f      	beq.n	27770 <usb_handle_standard_request+0x1d0>
   27750:	2b05      	cmp	r3, #5
   27752:	d021      	beq.n	27798 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
   27754:	782b      	ldrb	r3, [r5, #0]
   27756:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   27758:	782b      	ldrb	r3, [r5, #0]
   2775a:	2b00      	cmp	r3, #0
   2775c:	d1f5      	bne.n	2774a <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
   2775e:	69f3      	ldr	r3, [r6, #28]
   27760:	b113      	cbz	r3, 27768 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   27762:	4651      	mov	r1, sl
   27764:	2007      	movs	r0, #7
   27766:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   27768:	2f00      	cmp	r7, #0
   2776a:	f47f af44 	bne.w	275f6 <usb_handle_standard_request+0x56>
   2776e:	e750      	b.n	27612 <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   27770:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
   27774:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   27776:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
   2777a:	4598      	cmp	r8, r3
   2777c:	d1ea      	bne.n	27754 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
   2777e:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
   27780:	4599      	cmp	r9, r3
   27782:	d1e7      	bne.n	27754 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   27784:	f1b8 0f07 	cmp.w	r8, #7
   27788:	d81c      	bhi.n	277c4 <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
   2778a:	eb06 0308 	add.w	r3, r6, r8
		return true;
   2778e:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
   27790:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
   27794:	2701      	movs	r7, #1
   27796:	e7dd      	b.n	27754 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
   27798:	88a3      	ldrh	r3, [r4, #4]
   2779a:	4543      	cmp	r3, r8
   2779c:	d1da      	bne.n	27754 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
   2779e:	78a3      	ldrb	r3, [r4, #2]
   277a0:	454b      	cmp	r3, r9
   277a2:	d00a      	beq.n	277ba <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
   277a4:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   277a6:	4638      	mov	r0, r7
   277a8:	f000 fc3a 	bl	28020 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
   277ac:	4638      	mov	r0, r7
   277ae:	f7ff fde7 	bl	27380 <disable_endpoint>
   277b2:	fab0 f780 	clz	r7, r0
   277b6:	097f      	lsrs	r7, r7, #5
   277b8:	e7cc      	b.n	27754 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
   277ba:	4628      	mov	r0, r5
   277bc:	f7ff feae 	bl	2751c <set_endpoint>
   277c0:	4607      	mov	r7, r0
   277c2:	e7c7      	b.n	27754 <usb_handle_standard_request+0x1b4>
   277c4:	46aa      	mov	sl, r5
	return false;
   277c6:	2700      	movs	r7, #0
   277c8:	e7c4      	b.n	27754 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
   277ca:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
   277ce:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   277d0:	2a00      	cmp	r2, #0
   277d2:	da18      	bge.n	27806 <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   277d4:	2b00      	cmp	r3, #0
   277d6:	f47f af1c 	bne.w	27612 <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
   277da:	7924      	ldrb	r4, [r4, #4]
   277dc:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
   277de:	0663      	lsls	r3, r4, #25
   277e0:	d00a      	beq.n	277f8 <usb_handle_standard_request+0x258>
   277e2:	4620      	mov	r0, r4
   277e4:	f7ff fdea 	bl	273bc <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   277e8:	2800      	cmp	r0, #0
   277ea:	f43f af12 	beq.w	27612 <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   277ee:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   277f2:	2b00      	cmp	r3, #0
   277f4:	f43f af0d 	beq.w	27612 <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
   277f8:	4629      	mov	r1, r5
   277fa:	4620      	mov	r0, r4
   277fc:	f001 fde8 	bl	293d0 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   27800:	2300      	movs	r3, #0
   27802:	706b      	strb	r3, [r5, #1]
   27804:	e6f2      	b.n	275ec <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
   27806:	2b01      	cmp	r3, #1
   27808:	d008      	beq.n	2781c <usb_handle_standard_request+0x27c>
   2780a:	2b03      	cmp	r3, #3
   2780c:	f47f af01 	bne.w	27612 <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   27810:	8863      	ldrh	r3, [r4, #2]
   27812:	2b00      	cmp	r3, #0
   27814:	f47f aefd 	bne.w	27612 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   27818:	2101      	movs	r1, #1
   2781a:	e003      	b.n	27824 <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2781c:	8861      	ldrh	r1, [r4, #2]
   2781e:	2900      	cmp	r1, #0
   27820:	f47f aef7 	bne.w	27612 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   27824:	88a0      	ldrh	r0, [r4, #4]
   27826:	f7ff fe51 	bl	274cc <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   2782a:	2800      	cmp	r0, #0
   2782c:	f47f aee3 	bne.w	275f6 <usb_handle_standard_request+0x56>
   27830:	e6ef      	b.n	27612 <usb_handle_standard_request+0x72>
   27832:	bf00      	nop
   27834:	200006e4 	.word	0x200006e4
   27838:	2000079e 	.word	0x2000079e
		if (type == USB_DESC_CONFIGURATION) {
   2783c:	2802      	cmp	r0, #2
		*data = p;
   2783e:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
   27840:	f47f aef4 	bne.w	2762c <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
   27844:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
   27846:	603b      	str	r3, [r7, #0]
		return true;
   27848:	e6d5      	b.n	275f6 <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
   2784a:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
   2784e:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   27850:	2800      	cmp	r0, #0
   27852:	f6bf af71 	bge.w	27738 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
   27856:	2a00      	cmp	r2, #0
   27858:	f43f af66 	beq.w	27728 <usb_handle_standard_request+0x188>
   2785c:	2a0a      	cmp	r2, #10
   2785e:	f47f aed8 	bne.w	27612 <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
   27862:	782a      	ldrb	r2, [r5, #0]
   27864:	2a00      	cmp	r2, #0
   27866:	f43f aed4 	beq.w	27612 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   2786a:	7869      	ldrb	r1, [r5, #1]
   2786c:	2904      	cmp	r1, #4
   2786e:	f47f af61 	bne.w	27734 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   27872:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
   27874:	428b      	cmp	r3, r1
   27876:	f47f af5d 	bne.w	27734 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2787a:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   2787c:	bf96      	itet	ls
   2787e:	199b      	addls	r3, r3, r6
	return 0;
   27880:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   27882:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   27886:	f88c 3000 	strb.w	r3, [ip]
   2788a:	e6d4      	b.n	27636 <usb_handle_standard_request+0x96>

0002788c <usb_data_to_host>:
{
   2788c:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   2788e:	4c16      	ldr	r4, [pc, #88]	; (278e8 <usb_data_to_host+0x5c>)
   27890:	7d23      	ldrb	r3, [r4, #20]
   27892:	b9f3      	cbnz	r3, 278d2 <usb_data_to_host+0x46>
		uint32_t chunk = usb_dev.data_buf_residue;
   27894:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   27896:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   27898:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2789a:	ab01      	add	r3, sp, #4
   2789c:	2080      	movs	r0, #128	; 0x80
   2789e:	f006 fc38 	bl	2e112 <usb_write>
		usb_dev.data_buf += chunk;
   278a2:	9a01      	ldr	r2, [sp, #4]
   278a4:	68a3      	ldr	r3, [r4, #8]
   278a6:	4413      	add	r3, r2
   278a8:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   278aa:	68e3      	ldr	r3, [r4, #12]
   278ac:	1a9b      	subs	r3, r3, r2
   278ae:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   278b0:	b96b      	cbnz	r3, 278ce <usb_data_to_host+0x42>
   278b2:	b162      	cbz	r2, 278ce <usb_data_to_host+0x42>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   278b4:	6923      	ldr	r3, [r4, #16]
   278b6:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   278b8:	429a      	cmp	r2, r3
   278ba:	dd08      	ble.n	278ce <usb_data_to_host+0x42>
			if (!(usb_dev.data_buf_len % usb_dev.mps0)) {
   278bc:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   278c0:	fb93 f1f2 	sdiv	r1, r3, r2
   278c4:	fb02 3311 	mls	r3, r2, r1, r3
   278c8:	b90b      	cbnz	r3, 278ce <usb_data_to_host+0x42>
				usb_dev.zlp_flag = true;
   278ca:	2301      	movs	r3, #1
   278cc:	7523      	strb	r3, [r4, #20]
}
   278ce:	b002      	add	sp, #8
   278d0:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   278d2:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   278d4:	461a      	mov	r2, r3
   278d6:	4619      	mov	r1, r3
   278d8:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   278da:	7523      	strb	r3, [r4, #20]
}
   278dc:	b002      	add	sp, #8
   278de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   278e2:	f001 bdbb 	b.w	2945c <usb_dc_ep_write>
   278e6:	bf00      	nop
   278e8:	200006e4 	.word	0x200006e4

000278ec <usb_handle_control_transfer>:
{
   278ec:	b530      	push	{r4, r5, lr}
   278ee:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   278f0:	2300      	movs	r3, #0
{
   278f2:	4602      	mov	r2, r0
   278f4:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   278f6:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   278f8:	2800      	cmp	r0, #0
   278fa:	d158      	bne.n	279ae <usb_handle_control_transfer+0xc2>
   278fc:	2900      	cmp	r1, #0
   278fe:	d135      	bne.n	2796c <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   27900:	2208      	movs	r2, #8
   27902:	460b      	mov	r3, r1
   27904:	eb0d 0102 	add.w	r1, sp, r2
   27908:	f006 fd8f 	bl	2e42a <usb_dc_ep_read>
   2790c:	2800      	cmp	r0, #0
   2790e:	da04      	bge.n	2791a <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   27910:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   27912:	f001 fd15 	bl	29340 <usb_dc_ep_set_stall>
}
   27916:	b005      	add	sp, #20
   27918:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   2791a:	4c2a      	ldr	r4, [pc, #168]	; (279c4 <usb_handle_control_transfer+0xd8>)
   2791c:	9a02      	ldr	r2, [sp, #8]
   2791e:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   27920:	9a03      	ldr	r2, [sp, #12]
   27922:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   27924:	f104 0238 	add.w	r2, r4, #56	; 0x38
   27928:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
   2792a:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   2792e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
   27932:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   27934:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
   27936:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
   2793a:	db0a      	blt.n	27952 <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   2793c:	2b80      	cmp	r3, #128	; 0x80
   2793e:	d904      	bls.n	2794a <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   27940:	2080      	movs	r0, #128	; 0x80
   27942:	f001 fcfd 	bl	29340 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   27946:	2000      	movs	r0, #0
   27948:	e7e3      	b.n	27912 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   2794a:	b113      	cbz	r3, 27952 <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
   2794c:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   27950:	e7e1      	b.n	27916 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   27952:	f7ff fd4f 	bl	273f4 <usb_handle_request.constprop.0>
   27956:	2800      	cmp	r0, #0
   27958:	d0da      	beq.n	27910 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   2795a:	88e2      	ldrh	r2, [r4, #6]
   2795c:	6923      	ldr	r3, [r4, #16]
   2795e:	429a      	cmp	r2, r3
   27960:	bfd4      	ite	le
   27962:	60e2      	strle	r2, [r4, #12]
   27964:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   27966:	f7ff ff91 	bl	2788c <usb_data_to_host>
   2796a:	e7d4      	b.n	27916 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   2796c:	4c15      	ldr	r4, [pc, #84]	; (279c4 <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2796e:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   27972:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   27974:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   27976:	dc04      	bgt.n	27982 <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   27978:	f006 fd57 	bl	2e42a <usb_dc_ep_read>
   2797c:	2800      	cmp	r0, #0
   2797e:	daca      	bge.n	27916 <usb_handle_control_transfer+0x2a>
   27980:	e7c6      	b.n	27910 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   27982:	462a      	mov	r2, r5
   27984:	f006 fd51 	bl	2e42a <usb_dc_ep_read>
   27988:	2800      	cmp	r0, #0
   2798a:	dbd9      	blt.n	27940 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
   2798c:	9a01      	ldr	r2, [sp, #4]
   2798e:	68a3      	ldr	r3, [r4, #8]
   27990:	4413      	add	r3, r2
   27992:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   27994:	68e3      	ldr	r3, [r4, #12]
   27996:	1a9b      	subs	r3, r3, r2
   27998:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   2799a:	2b00      	cmp	r3, #0
   2799c:	d1bb      	bne.n	27916 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   2799e:	f104 0338 	add.w	r3, r4, #56	; 0x38
   279a2:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   279a4:	f7ff fd26 	bl	273f4 <usb_handle_request.constprop.0>
   279a8:	2800      	cmp	r0, #0
   279aa:	d1dc      	bne.n	27966 <usb_handle_control_transfer+0x7a>
   279ac:	e7b0      	b.n	27910 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   279ae:	2880      	cmp	r0, #128	; 0x80
   279b0:	d1b1      	bne.n	27916 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   279b2:	4b04      	ldr	r3, [pc, #16]	; (279c4 <usb_handle_control_transfer+0xd8>)
   279b4:	68da      	ldr	r2, [r3, #12]
   279b6:	2a00      	cmp	r2, #0
   279b8:	d1d5      	bne.n	27966 <usb_handle_control_transfer+0x7a>
   279ba:	7d1b      	ldrb	r3, [r3, #20]
   279bc:	2b00      	cmp	r3, #0
   279be:	d1d2      	bne.n	27966 <usb_handle_control_transfer+0x7a>
   279c0:	e7a9      	b.n	27916 <usb_handle_control_transfer+0x2a>
   279c2:	bf00      	nop
   279c4:	200006e4 	.word	0x200006e4

000279c8 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   279c8:	4b05      	ldr	r3, [pc, #20]	; (279e0 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   279ca:	4a06      	ldr	r2, [pc, #24]	; (279e4 <usb_set_config+0x1c>)
   279cc:	629a      	str	r2, [r3, #40]	; 0x28
   279ce:	4a06      	ldr	r2, [pc, #24]	; (279e8 <usb_set_config+0x20>)
   279d0:	62da      	str	r2, [r3, #44]	; 0x2c
   279d2:	4a06      	ldr	r2, [pc, #24]	; (279ec <usb_set_config+0x24>)
   279d4:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   279d6:	4a06      	ldr	r2, [pc, #24]	; (279f0 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   279d8:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   279da:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   279dc:	2000      	movs	r0, #0
   279de:	4770      	bx	lr
   279e0:	200006e4 	.word	0x200006e4
   279e4:	000275a1 	.word	0x000275a1
   279e8:	000272a5 	.word	0x000272a5
   279ec:	00027345 	.word	0x00027345
   279f0:	000272e5 	.word	0x000272e5

000279f4 <usb_enable>:

int usb_enable(usb_dc_status_callback status_cb)
{
   279f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int ret;
	struct usb_dc_ep_cfg_data ep0_cfg;
	struct usb_device_descriptor *dev_desc = (void *)usb_dev.descriptors;
   279f8:	4d41      	ldr	r5, [pc, #260]	; (27b00 <usb_enable+0x10c>)
{
   279fa:	4604      	mov	r4, r0
	struct usb_device_descriptor *dev_desc = (void *)usb_dev.descriptors;
   279fc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   279fe:	4841      	ldr	r0, [pc, #260]	; (27b04 <usb_enable+0x110>)
   27a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27a08:	f004 feec 	bl	2c7e4 <z_impl_k_mutex_lock>
	 * This should only be called once.
	 */
	LOG_DBG("lock usb_enable_lock mutex");
	k_mutex_lock(&usb_enable_lock, K_FOREVER);

	if (usb_dev.enabled == true) {
   27a0c:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   27a10:	2e00      	cmp	r6, #0
   27a12:	d16e      	bne.n	27af2 <usb_enable+0xfe>
	usb_dev.status_callback = cb;
   27a14:	483c      	ldr	r0, [pc, #240]	; (27b08 <usb_enable+0x114>)
	ret = usb_vbus_set(true);
	if (ret < 0) {
		goto out;
	}

	usb_dev.user_status_callback = status_cb;
   27a16:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   27a18:	61e8      	str	r0, [r5, #28]
	usb_register_status_callback(forward_status_cb);
	usb_dc_set_status_callback(forward_status_cb);
   27a1a:	f001 fe39 	bl	29690 <usb_dc_set_status_callback>

	ret = usb_dc_attach();
   27a1e:	f001 fc27 	bl	29270 <usb_dc_attach>
	if (ret < 0) {
   27a22:	1e04      	subs	r4, r0, #0
   27a24:	db49      	blt.n	27aba <usb_enable+0xc6>
		goto out;
	}

	ret = usb_transfer_init();
   27a26:	f000 fb3d 	bl	280a4 <usb_transfer_init>
	if (ret < 0) {
   27a2a:	1e04      	subs	r4, r0, #0
   27a2c:	db45      	blt.n	27aba <usb_enable+0xc6>
		goto out;
	}

	if (dev_desc->bDescriptorType != USB_DESC_DEVICE ||
   27a2e:	787b      	ldrb	r3, [r7, #1]
   27a30:	2b01      	cmp	r3, #1
   27a32:	d161      	bne.n	27af8 <usb_enable+0x104>
	    dev_desc->bMaxPacketSize0 == 0) {
   27a34:	79fb      	ldrb	r3, [r7, #7]
	if (dev_desc->bDescriptorType != USB_DESC_DEVICE ||
   27a36:	2b00      	cmp	r3, #0
   27a38:	d05e      	beq.n	27af8 <usb_enable+0x104>
	usb_dev.mps0 = dev_desc->bMaxPacketSize0;
	ep0_cfg.ep_mps = usb_dev.mps0;
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;

	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
	ret = usb_dc_ep_configure(&ep0_cfg);
   27a3a:	4668      	mov	r0, sp
	usb_dev.mps0 = dev_desc->bMaxPacketSize0;
   27a3c:	f885 30c8 	strb.w	r3, [r5, #200]	; 0xc8
	ep0_cfg.ep_mps = usb_dev.mps0;
   27a40:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   27a44:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   27a48:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   27a4c:	f001 fc54 	bl	292f8 <usb_dc_ep_configure>
	if (ret < 0) {
   27a50:	1e04      	subs	r4, r0, #0
   27a52:	db32      	blt.n	27aba <usb_enable+0xc6>
		goto out;
	}

	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   27a54:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   27a56:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   27a58:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   27a5c:	f001 fc4c 	bl	292f8 <usb_dc_ep_configure>
	if (ret < 0) {
   27a60:	1e04      	subs	r4, r0, #0
   27a62:	db2a      	blt.n	27aba <usb_enable+0xc6>
		goto out;
	}

	/* Register endpoint 0 handlers*/
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   27a64:	4929      	ldr	r1, [pc, #164]	; (27b0c <usb_enable+0x118>)
   27a66:	4630      	mov	r0, r6
   27a68:	f001 fdfe 	bl	29668 <usb_dc_ep_set_callback>
				     usb_handle_control_transfer);
	if (ret < 0) {
   27a6c:	1e04      	subs	r4, r0, #0
   27a6e:	db24      	blt.n	27aba <usb_enable+0xc6>
		goto out;
	}

	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   27a70:	4926      	ldr	r1, [pc, #152]	; (27b0c <usb_enable+0x118>)
   27a72:	4638      	mov	r0, r7
   27a74:	f001 fdf8 	bl	29668 <usb_dc_ep_set_callback>
				     usb_handle_control_transfer);
	if (ret < 0) {
   27a78:	1e04      	subs	r4, r0, #0
   27a7a:	db1e      	blt.n	27aba <usb_enable+0xc6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   27a7c:	4c24      	ldr	r4, [pc, #144]	; (27b10 <usb_enable+0x11c>)
   27a7e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 27b14 <usb_enable+0x120>
   27a82:	4544      	cmp	r4, r8
   27a84:	d320      	bcc.n	27ac8 <usb_enable+0xd4>
	if (ret < 0) {
		goto out;
	}

	/* Enable control EP */
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   27a86:	2000      	movs	r0, #0
   27a88:	f001 fcbe 	bl	29408 <usb_dc_ep_enable>
	if (ret < 0) {
   27a8c:	1e04      	subs	r4, r0, #0
   27a8e:	db14      	blt.n	27aba <usb_enable+0xc6>
		goto out;
	}
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
   27a90:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4

	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   27a94:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
   27a96:	f043 0301 	orr.w	r3, r3, #1
   27a9a:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   27a9e:	f001 fcb3 	bl	29408 <usb_dc_ep_enable>
	if (ret < 0) {
   27aa2:	1e04      	subs	r4, r0, #0
   27aa4:	db09      	blt.n	27aba <usb_enable+0xc6>
		goto out;
	}
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
   27aa6:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   27aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   27aae:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4

	usb_dev.enabled = true;
   27ab2:	2301      	movs	r3, #1
   27ab4:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   27ab8:	2400      	movs	r4, #0
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   27aba:	4812      	ldr	r0, [pc, #72]	; (27b04 <usb_enable+0x110>)
   27abc:	f004 ff0c 	bl	2c8d8 <z_impl_k_mutex_unlock>
out:
	LOG_DBG("unlock usb_enable_lock mutex");
	k_mutex_unlock(&usb_enable_lock);
	return ret;
}
   27ac0:	4620      	mov	r0, r4
   27ac2:	b002      	add	sp, #8
   27ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   27ac8:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   27aca:	2600      	movs	r6, #0
   27acc:	7f22      	ldrb	r2, [r4, #28]
   27ace:	b2f3      	uxtb	r3, r6
   27ad0:	429a      	cmp	r2, r3
   27ad2:	d801      	bhi.n	27ad8 <usb_enable+0xe4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   27ad4:	3424      	adds	r4, #36	; 0x24
   27ad6:	e7d4      	b.n	27a82 <usb_enable+0x8e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   27ad8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   27adc:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   27ae0:	7910      	ldrb	r0, [r2, #4]
   27ae2:	f001 fdc1 	bl	29668 <usb_dc_ep_set_callback>
   27ae6:	3601      	adds	r6, #1
   27ae8:	2800      	cmp	r0, #0
   27aea:	d0ef      	beq.n	27acc <usb_enable+0xd8>
   27aec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27af0:	e7e3      	b.n	27aba <usb_enable+0xc6>
		ret = -EALREADY;
   27af2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   27af6:	e7e0      	b.n	27aba <usb_enable+0xc6>
		ret = -EINVAL;
   27af8:	f06f 0415 	mvn.w	r4, #21
   27afc:	e7dd      	b.n	27aba <usb_enable+0xc6>
   27afe:	bf00      	nop
   27b00:	200006e4 	.word	0x200006e4
   27b04:	200002b4 	.word	0x200002b4
   27b08:	00027421 	.word	0x00027421
   27b0c:	000278ed 	.word	0x000278ed
   27b10:	2000037c 	.word	0x2000037c
   27b14:	200003a0 	.word	0x200003a0

00027b18 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
{
   27b18:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   27b1a:	4b0a      	ldr	r3, [pc, #40]	; (27b44 <usb_device_init+0x2c>)
   27b1c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   27b20:	b94c      	cbnz	r4, 27b36 <usb_device_init+0x1e>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   27b22:	f000 f855 	bl	27bd0 <usb_get_device_descriptor>
	if (!device_descriptor) {
   27b26:	b148      	cbz	r0, 27b3c <usb_device_init+0x24>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   27b28:	f7ff ff4e 	bl	279c8 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
   27b2c:	4620      	mov	r0, r4
	}

	return 0;
}
   27b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return usb_enable(NULL);
   27b32:	f7ff bf5f 	b.w	279f4 <usb_enable>
		return -EALREADY;
   27b36:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   27b3a:	bd10      	pop	{r4, pc}
		return -1;
   27b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27b40:	e7fb      	b.n	27b3a <usb_device_init+0x22>
   27b42:	bf00      	nop
   27b44:	200006e4 	.word	0x200006e4

00027b48 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   27b48:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   27b4a:	4b1f      	ldr	r3, [pc, #124]	; (27bc8 <usb_update_sn_string_descriptor+0x80>)
{
   27b4c:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   27b4e:	aa05      	add	r2, sp, #20
   27b50:	f103 0510 	add.w	r5, r3, #16
   27b54:	6818      	ldr	r0, [r3, #0]
   27b56:	6859      	ldr	r1, [r3, #4]
   27b58:	4614      	mov	r4, r2
   27b5a:	c403      	stmia	r4!, {r0, r1}
   27b5c:	3308      	adds	r3, #8
   27b5e:	42ab      	cmp	r3, r5
   27b60:	4622      	mov	r2, r4
   27b62:	d1f7      	bne.n	27b54 <usb_update_sn_string_descriptor+0xc>
   27b64:	781b      	ldrb	r3, [r3, #0]
   27b66:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   27b68:	2210      	movs	r2, #16
   27b6a:	2100      	movs	r1, #0
   27b6c:	a801      	add	r0, sp, #4
   27b6e:	f006 fbe0 	bl	2e332 <memset>
	memset(sn, 0, sizeof(sn));
   27b72:	2212      	movs	r2, #18
   27b74:	2100      	movs	r1, #0
   27b76:	4815      	ldr	r0, [pc, #84]	; (27bcc <usb_update_sn_string_descriptor+0x84>)
   27b78:	f006 fbdb 	bl	2e332 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   27b7c:	2110      	movs	r1, #16
   27b7e:	a801      	add	r0, sp, #4
   27b80:	f006 fd5f 	bl	2e642 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   27b84:	2800      	cmp	r0, #0
   27b86:	dd1b      	ble.n	27bc0 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   27b88:	2808      	cmp	r0, #8
   27b8a:	bfb8      	it	lt
   27b8c:	2008      	movlt	r0, #8
   27b8e:	3809      	subs	r0, #9
   27b90:	ab01      	add	r3, sp, #4
   27b92:	490e      	ldr	r1, [pc, #56]	; (27bcc <usb_update_sn_string_descriptor+0x84>)
   27b94:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   27b96:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   27b98:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   27b9c:	ac0a      	add	r4, sp, #40	; 0x28
   27b9e:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   27ba2:	f003 030f 	and.w	r3, r3, #15
   27ba6:	3328      	adds	r3, #40	; 0x28
   27ba8:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
   27baa:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   27bac:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   27bb0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   27bb4:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
   27bb6:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   27bb8:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
   27bba:	f101 0102 	add.w	r1, r1, #2
   27bbe:	d1eb      	bne.n	27b98 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   27bc0:	4802      	ldr	r0, [pc, #8]	; (27bcc <usb_update_sn_string_descriptor+0x84>)
   27bc2:	b00b      	add	sp, #44	; 0x2c
   27bc4:	bd30      	pop	{r4, r5, pc}
   27bc6:	bf00      	nop
   27bc8:	0002fa24 	.word	0x0002fa24
   27bcc:	2000146c 	.word	0x2000146c

00027bd0 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
   27bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27bd4:	4c70      	ldr	r4, [pc, #448]	; (27d98 <usb_get_device_descriptor+0x1c8>)
   27bd6:	b087      	sub	sp, #28
	uint8_t str_descr_idx = 0U;
   27bd8:	f04f 0b00 	mov.w	fp, #0
   27bdc:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   27bde:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   27be2:	46b0      	mov	r8, r6
	struct usb_cfg_data *cfg_data = NULL;
   27be4:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
   27be6:	46b1      	mov	r9, r6
	while (head->bLength != 0U) {
   27be8:	7823      	ldrb	r3, [r4, #0]
   27bea:	b92b      	cbnz	r3, 27bf8 <usb_get_device_descriptor+0x28>
	if ((head + 1) != __usb_descriptor_end) {
   27bec:	4b6b      	ldr	r3, [pc, #428]	; (27d9c <usb_get_device_descriptor+0x1cc>)
   27bee:	3402      	adds	r4, #2
   27bf0:	429c      	cmp	r4, r3
   27bf2:	d1f3      	bne.n	27bdc <usb_get_device_descriptor+0xc>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   27bf4:	4868      	ldr	r0, [pc, #416]	; (27d98 <usb_get_device_descriptor+0x1c8>)
   27bf6:	e032      	b.n	27c5e <usb_get_device_descriptor+0x8e>
		switch (head->bDescriptorType) {
   27bf8:	7863      	ldrb	r3, [r4, #1]
   27bfa:	2b05      	cmp	r3, #5
   27bfc:	d81b      	bhi.n	27c36 <usb_get_device_descriptor+0x66>
   27bfe:	e8df f003 	tbb	[pc, r3]
   27c02:	0390      	.short	0x0390
   27c04:	3b1d90c8 	.word	0x3b1d90c8
	struct usb_dc_ep_cfg_data ep_cfg = {
   27c08:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_check_cap(&ep_cfg);
   27c0a:	a804      	add	r0, sp, #16
	struct usb_dc_ep_cfg_data ep_cfg = {
   27c0c:	f88d b010 	strb.w	fp, [sp, #16]
   27c10:	f8ad 3012 	strh.w	r3, [sp, #18]
   27c14:	f88d b014 	strb.w	fp, [sp, #20]
	ret = usb_dc_ep_check_cap(&ep_cfg);
   27c18:	f006 fbd6 	bl	2e3c8 <usb_dc_ep_check_cap>
	if (ret) {
   27c1c:	b140      	cbz	r0, 27c30 <usb_get_device_descriptor+0x60>
		ep_cfg.ep_mps = 8;
   27c1e:	2308      	movs	r3, #8
		ret = usb_dc_ep_check_cap(&ep_cfg);
   27c20:	a804      	add	r0, sp, #16
		ep_cfg.ep_mps = 8;
   27c22:	f8ad 3012 	strh.w	r3, [sp, #18]
		ret = usb_dc_ep_check_cap(&ep_cfg);
   27c26:	f006 fbcf 	bl	2e3c8 <usb_dc_ep_check_cap>
		if (ret) {
   27c2a:	b108      	cbz	r0, 27c30 <usb_get_device_descriptor+0x60>
			ep_cfg.ep_mps = 0;
   27c2c:	f8ad b012 	strh.w	fp, [sp, #18]
	desc->bMaxPacketSize0 = ep_cfg.ep_mps;
   27c30:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   27c34:	71e3      	strb	r3, [r4, #7]
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   27c36:	7823      	ldrb	r3, [r4, #0]
   27c38:	441c      	add	r4, r3
   27c3a:	e7d5      	b.n	27be8 <usb_get_device_descriptor+0x18>
			if (if_descr->bAlternateSetting) {
   27c3c:	78e3      	ldrb	r3, [r4, #3]
   27c3e:	2b00      	cmp	r3, #0
   27c40:	d1f9      	bne.n	27c36 <usb_get_device_descriptor+0x66>
			if (if_descr->bInterfaceNumber == 0U) {
   27c42:	78a3      	ldrb	r3, [r4, #2]
   27c44:	b173      	cbz	r3, 27c64 <usb_get_device_descriptor+0x94>
			numof_ifaces++;
   27c46:	f108 0801 	add.w	r8, r8, #1
   27c4a:	fa5f f888 	uxtb.w	r8, r8
			break;
   27c4e:	e7f2      	b.n	27c36 <usb_get_device_descriptor+0x66>
		if (cfg_data->interface_descriptor == iface) {
   27c50:	686a      	ldr	r2, [r5, #4]
   27c52:	4294      	cmp	r4, r2
   27c54:	d009      	beq.n	27c6a <usb_get_device_descriptor+0x9a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   27c56:	3524      	adds	r5, #36	; 0x24
   27c58:	429d      	cmp	r5, r3
   27c5a:	d3f9      	bcc.n	27c50 <usb_get_device_descriptor+0x80>
		return NULL;
   27c5c:	2000      	movs	r0, #0
}
   27c5e:	b007      	add	sp, #28
   27c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   27c64:	4d4e      	ldr	r5, [pc, #312]	; (27da0 <usb_get_device_descriptor+0x1d0>)
   27c66:	4b4f      	ldr	r3, [pc, #316]	; (27da4 <usb_get_device_descriptor+0x1d4>)
   27c68:	e7f6      	b.n	27c58 <usb_get_device_descriptor+0x88>
				if (cfg_data->interface_config) {
   27c6a:	68ab      	ldr	r3, [r5, #8]
   27c6c:	2b00      	cmp	r3, #0
   27c6e:	d0ea      	beq.n	27c46 <usb_get_device_descriptor+0x76>
					cfg_data->interface_config(head,
   27c70:	4641      	mov	r1, r8
   27c72:	4620      	mov	r0, r4
   27c74:	4798      	blx	r3
   27c76:	e7e6      	b.n	27c46 <usb_get_device_descriptor+0x76>
			if (!cfg_data) {
   27c78:	2d00      	cmp	r5, #0
   27c7a:	d0ef      	beq.n	27c5c <usb_get_device_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   27c7c:	2200      	movs	r2, #0
   27c7e:	7f2b      	ldrb	r3, [r5, #28]
   27c80:	429a      	cmp	r2, r3
   27c82:	d2eb      	bcs.n	27c5c <usb_get_device_descriptor+0x8c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   27c84:	6a29      	ldr	r1, [r5, #32]
   27c86:	78a0      	ldrb	r0, [r4, #2]
   27c88:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   27c8c:	790b      	ldrb	r3, [r1, #4]
   27c8e:	4298      	cmp	r0, r3
   27c90:	d001      	beq.n	27c96 <usb_get_device_descriptor+0xc6>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   27c92:	3201      	adds	r2, #1
   27c94:	e7f3      	b.n	27c7e <usb_get_device_descriptor+0xae>
   27c96:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   27c98:	78e0      	ldrb	r0, [r4, #3]
   27c9a:	f000 0003 	and.w	r0, r0, #3
   27c9e:	f88d 0014 	strb.w	r0, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   27ca2:	7920      	ldrb	r0, [r4, #4]
   27ca4:	f894 c005 	ldrb.w	ip, [r4, #5]
   27ca8:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   27cac:	f8ad 0012 	strh.w	r0, [sp, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   27cb0:	f994 0002 	ldrsb.w	r0, [r4, #2]
   27cb4:	2800      	cmp	r0, #0
   27cb6:	b2fb      	uxtb	r3, r7
   27cb8:	da28      	bge.n	27d0c <usb_get_device_descriptor+0x13c>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   27cba:	f107 0010 	add.w	r0, r7, #16
   27cbe:	f04f 0c01 	mov.w	ip, #1
   27cc2:	fa0c f000 	lsl.w	r0, ip, r0
   27cc6:	ea10 0f0a 	tst.w	r0, sl
   27cca:	d126      	bne.n	27d1a <usb_get_device_descriptor+0x14a>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   27ccc:	f043 0080 	orr.w	r0, r3, #128	; 0x80
   27cd0:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   27cd4:	a804      	add	r0, sp, #16
   27cd6:	e9cd 1302 	strd	r1, r3, [sp, #8]
   27cda:	9201      	str	r2, [sp, #4]
   27cdc:	f006 fb74 	bl	2e3c8 <usb_dc_ep_check_cap>
   27ce0:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
   27ce4:	9b03      	ldr	r3, [sp, #12]
   27ce6:	b9c0      	cbnz	r0, 27d1a <usb_get_device_descriptor+0x14a>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   27ce8:	f89d 2010 	ldrb.w	r2, [sp, #16]
   27cec:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   27cee:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   27cf2:	bf18      	it	ne
   27cf4:	3310      	addne	r3, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   27cf6:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1U << (idx + 16U));
   27cf8:	bf18      	it	ne
   27cfa:	b2db      	uxtbne	r3, r3
   27cfc:	f04f 0201 	mov.w	r2, #1
   27d00:	bf14      	ite	ne
   27d02:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
   27d04:	40ba      	lsleq	r2, r7
   27d06:	ea4a 0a02 	orr.w	sl, sl, r2
				return 0;
   27d0a:	e794      	b.n	27c36 <usb_get_device_descriptor+0x66>
				if ((*requested_ep & (1U << (idx)))) {
   27d0c:	2001      	movs	r0, #1
   27d0e:	40b8      	lsls	r0, r7
   27d10:	ea10 0f0a 	tst.w	r0, sl
   27d14:	d101      	bne.n	27d1a <usb_get_device_descriptor+0x14a>
   27d16:	4618      	mov	r0, r3
   27d18:	e7da      	b.n	27cd0 <usb_get_device_descriptor+0x100>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   27d1a:	3701      	adds	r7, #1
   27d1c:	2f10      	cmp	r7, #16
   27d1e:	d1bb      	bne.n	27c98 <usb_get_device_descriptor+0xc8>
   27d20:	e7b7      	b.n	27c92 <usb_get_device_descriptor+0xc2>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   27d22:	2e03      	cmp	r6, #3
   27d24:	d11d      	bne.n	27d62 <usb_get_device_descriptor+0x192>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   27d26:	f7ff ff0f 	bl	27b48 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   27d2a:	4607      	mov	r7, r0
   27d2c:	b168      	cbz	r0, 27d4a <usb_get_device_descriptor+0x17a>
	runtime_sn_len = strlen(runtime_sn);
   27d2e:	f006 faee 	bl	2e30e <strlen>
	if (!runtime_sn_len) {
   27d32:	9001      	str	r0, [sp, #4]
   27d34:	b148      	cbz	r0, 27d4a <usb_get_device_descriptor+0x17a>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   27d36:	481c      	ldr	r0, [pc, #112]	; (27da8 <usb_get_device_descriptor+0x1d8>)
   27d38:	f006 fae9 	bl	2e30e <strlen>
	if (runtime_sn_len != default_sn_len) {
   27d3c:	9a01      	ldr	r2, [sp, #4]
   27d3e:	4282      	cmp	r2, r0
   27d40:	d103      	bne.n	27d4a <usb_get_device_descriptor+0x17a>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   27d42:	4639      	mov	r1, r7
   27d44:	1ca0      	adds	r0, r4, #2
   27d46:	f006 fae9 	bl	2e31c <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   27d4a:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   27d4c:	f06f 0102 	mvn.w	r1, #2
   27d50:	18e2      	adds	r2, r4, r3
   27d52:	1b09      	subs	r1, r1, r4
   27d54:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   27d58:	42d1      	cmn	r1, r2
   27d5a:	d513      	bpl.n	27d84 <usb_get_device_descriptor+0x1b4>
			str_descr_idx += 1U;
   27d5c:	3601      	adds	r6, #1
   27d5e:	b2f6      	uxtb	r6, r6
			break;
   27d60:	e769      	b.n	27c36 <usb_get_device_descriptor+0x66>
			if (str_descr_idx) {
   27d62:	2e00      	cmp	r6, #0
   27d64:	d1f1      	bne.n	27d4a <usb_get_device_descriptor+0x17a>
				if (!cfg_descr) {
   27d66:	f1b9 0f00 	cmp.w	r9, #0
   27d6a:	f43f af77 	beq.w	27c5c <usb_get_device_descriptor+0x8c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   27d6e:	eba4 0309 	sub.w	r3, r4, r9
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   27d72:	f889 3002 	strb.w	r3, [r9, #2]
	dst[1] = val >> 8;
   27d76:	f3c3 2307 	ubfx	r3, r3, #8, #8
   27d7a:	f889 3003 	strb.w	r3, [r9, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   27d7e:	f889 8004 	strb.w	r8, [r9, #4]
   27d82:	e7eb      	b.n	27d5c <usb_get_device_descriptor+0x18c>
		buf[i] = 0U;
   27d84:	f802 bc01 	strb.w	fp, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   27d88:	f813 0901 	ldrb.w	r0, [r3], #-1
   27d8c:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   27d90:	e7e2      	b.n	27d58 <usb_get_device_descriptor+0x188>
		switch (head->bDescriptorType) {
   27d92:	46a1      	mov	r9, r4
   27d94:	e74f      	b.n	27c36 <usb_get_device_descriptor+0x66>
   27d96:	bf00      	nop
   27d98:	200002d8 	.word	0x200002d8
   27d9c:	2000037b 	.word	0x2000037b
   27da0:	2000037c 	.word	0x2000037c
   27da4:	200003a0 	.word	0x200003a0
   27da8:	0002fa24 	.word	0x0002fa24

00027dac <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   27dac:	b510      	push	{r4, lr}
   27dae:	4b09      	ldr	r3, [pc, #36]	; (27dd4 <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   27db0:	2100      	movs	r1, #0
   27db2:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   27db4:	781c      	ldrb	r4, [r3, #0]
   27db6:	4284      	cmp	r4, r0
   27db8:	d104      	bne.n	27dc4 <usb_ep_get_transfer+0x18>
   27dba:	685c      	ldr	r4, [r3, #4]
   27dbc:	b114      	cbz	r4, 27dc4 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
   27dbe:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
   27dc2:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   27dc4:	3101      	adds	r1, #1
   27dc6:	2904      	cmp	r1, #4
   27dc8:	f103 0340 	add.w	r3, r3, #64	; 0x40
   27dcc:	d1f2      	bne.n	27db4 <usb_ep_get_transfer+0x8>
	return NULL;
   27dce:	2000      	movs	r0, #0
   27dd0:	e7f7      	b.n	27dc2 <usb_ep_get_transfer+0x16>
   27dd2:	bf00      	nop
   27dd4:	200007b0 	.word	0x200007b0

00027dd8 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   27dd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   27ddc:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
   27de0:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
   27de4:	3310      	adds	r3, #16
{
   27de6:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   27de8:	d110      	bne.n	27e0c <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   27dea:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   27dec:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
   27df0:	0799      	lsls	r1, r3, #30
   27df2:	d53c      	bpl.n	27e6e <usb_transfer_work+0x96>
		if (!trans->bsize) {
   27df4:	bb02      	cbnz	r2, 27e38 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   27df6:	f013 0304 	ands.w	r3, r3, #4
   27dfa:	d104      	bne.n	27e06 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   27dfc:	461a      	mov	r2, r3
   27dfe:	4619      	mov	r1, r3
   27e00:	4630      	mov	r0, r6
   27e02:	f006 f986 	bl	2e112 <usb_write>
			}
			trans->status = 0;
   27e06:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   27e08:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   27e0c:	f854 3c28 	ldr.w	r3, [r4, #-40]
   27e10:	3310      	adds	r3, #16
   27e12:	d00e      	beq.n	27e32 <usb_transfer_work+0x5a>
   27e14:	f854 5c18 	ldr.w	r5, [r4, #-24]
   27e18:	b15d      	cbz	r5, 27e32 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   27e1a:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
   27e1e:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
   27e22:	f006 ffa4 	bl	2ed6e <k_is_in_isr>
   27e26:	2800      	cmp	r0, #0
   27e28:	d04c      	beq.n	27ec4 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   27e2a:	482c      	ldr	r0, [pc, #176]	; (27edc <usb_transfer_work+0x104>)
   27e2c:	4621      	mov	r1, r4
   27e2e:	f007 f892 	bl	2ef56 <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
   27e32:	b002      	add	sp, #8
   27e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   27e38:	f850 1c24 	ldr.w	r1, [r0, #-36]
   27e3c:	ab01      	add	r3, sp, #4
   27e3e:	4630      	mov	r0, r6
   27e40:	f006 f967 	bl	2e112 <usb_write>
		if (ret) {
   27e44:	b110      	cbz	r0, 27e4c <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   27e46:	f06f 0315 	mvn.w	r3, #21
   27e4a:	e7dd      	b.n	27e08 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   27e4c:	9a01      	ldr	r2, [sp, #4]
   27e4e:	f854 3c24 	ldr.w	r3, [r4, #-36]
   27e52:	4413      	add	r3, r2
   27e54:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
   27e58:	f854 3c20 	ldr.w	r3, [r4, #-32]
   27e5c:	1a9b      	subs	r3, r3, r2
   27e5e:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
   27e62:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   27e66:	4413      	add	r3, r2
   27e68:	f844 3c1c 	str.w	r3, [r4, #-28]
   27e6c:	e7ce      	b.n	27e0c <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   27e6e:	f850 1c24 	ldr.w	r1, [r0, #-36]
   27e72:	ab01      	add	r3, sp, #4
   27e74:	4630      	mov	r0, r6
   27e76:	f001 fb6d 	bl	29554 <usb_dc_ep_read_wait>
		if (ret) {
   27e7a:	2800      	cmp	r0, #0
   27e7c:	d1e3      	bne.n	27e46 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   27e7e:	9d01      	ldr	r5, [sp, #4]
   27e80:	f854 3c24 	ldr.w	r3, [r4, #-36]
   27e84:	442b      	add	r3, r5
   27e86:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
   27e8a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   27e8e:	1b5b      	subs	r3, r3, r5
   27e90:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
   27e94:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   27e98:	442b      	add	r3, r5
   27e9a:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   27e9e:	2d00      	cmp	r5, #0
   27ea0:	d0b1      	beq.n	27e06 <usb_transfer_work+0x2e>
   27ea2:	4630      	mov	r0, r6
   27ea4:	f001 fbfa 	bl	2969c <usb_dc_ep_mps>
   27ea8:	fbb5 f3f0 	udiv	r3, r5, r0
   27eac:	fb03 5510 	mls	r5, r3, r0, r5
   27eb0:	2d00      	cmp	r5, #0
   27eb2:	d1a8      	bne.n	27e06 <usb_transfer_work+0x2e>
   27eb4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   27eb8:	2b00      	cmp	r3, #0
   27eba:	d0a4      	beq.n	27e06 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   27ebc:	4630      	mov	r0, r6
   27ebe:	f001 fb91 	bl	295e4 <usb_dc_ep_read_continue>
   27ec2:	e7a3      	b.n	27e0c <usb_transfer_work+0x34>
		trans->cb = NULL;
   27ec4:	f844 0c18 	str.w	r0, [r4, #-24]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   27ec8:	f1a4 0010 	sub.w	r0, r4, #16
   27ecc:	f004 fd74 	bl	2c9b8 <z_impl_k_sem_give>
		cb(ep, tsize, priv);
   27ed0:	4642      	mov	r2, r8
   27ed2:	4639      	mov	r1, r7
   27ed4:	4630      	mov	r0, r6
   27ed6:	47a8      	blx	r5
   27ed8:	e7ab      	b.n	27e32 <usb_transfer_work+0x5a>
   27eda:	bf00      	nop
   27edc:	200003a0 	.word	0x200003a0

00027ee0 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   27ee0:	1e4b      	subs	r3, r1, #1
   27ee2:	2b01      	cmp	r3, #1
{
   27ee4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27ee6:	4606      	mov	r6, r0
   27ee8:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   27eea:	d80f      	bhi.n	27f0c <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   27eec:	f7ff ff5e 	bl	27dac <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
   27ef0:	4604      	mov	r4, r0
   27ef2:	b968      	cbnz	r0, 27f10 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
   27ef4:	2d01      	cmp	r5, #1
   27ef6:	d109      	bne.n	27f0c <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
   27ef8:	ab01      	add	r3, sp, #4
   27efa:	2201      	movs	r2, #1
   27efc:	f10d 0103 	add.w	r1, sp, #3
   27f00:	4630      	mov	r0, r6
   27f02:	f001 fb27 	bl	29554 <usb_dc_ep_read_wait>
			} while (bytes);
   27f06:	9b01      	ldr	r3, [sp, #4]
   27f08:	2b00      	cmp	r3, #0
   27f0a:	d1f5      	bne.n	27ef8 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
   27f0c:	b002      	add	sp, #8
   27f0e:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   27f10:	f006 ff2d 	bl	2ed6e <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   27f14:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   27f18:	b108      	cbz	r0, 27f1e <usb_transfer_ep_callback+0x3e>
   27f1a:	2d01      	cmp	r5, #1
   27f1c:	d105      	bne.n	27f2a <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
   27f1e:	4608      	mov	r0, r1
}
   27f20:	b002      	add	sp, #8
   27f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
   27f26:	f7ff bf57 	b.w	27dd8 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   27f2a:	4803      	ldr	r0, [pc, #12]	; (27f38 <usb_transfer_ep_callback+0x58>)
}
   27f2c:	b002      	add	sp, #8
   27f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   27f32:	f007 b810 	b.w	2ef56 <k_work_submit_to_queue>
   27f36:	bf00      	nop
   27f38:	200003a0 	.word	0x200003a0

00027f3c <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
   27f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27f40:	4606      	mov	r6, r0
   27f42:	9101      	str	r1, [sp, #4]
   27f44:	4615      	mov	r5, r2
   27f46:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
   27f48:	f006 f92b 	bl	2e1a2 <usb_transfer_is_busy>
   27f4c:	4604      	mov	r4, r0
   27f4e:	2800      	cmp	r0, #0
   27f50:	d15c      	bne.n	2800c <usb_transfer+0xd0>
	__asm__ volatile(
   27f52:	f04f 0320 	mov.w	r3, #32
   27f56:	f3ef 8a11 	mrs	sl, BASEPRI
   27f5a:	f383 8812 	msr	BASEPRI_MAX, r3
   27f5e:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   27f62:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 28014 <usb_transfer+0xd8>
	return z_impl_k_sem_take(sem, timeout);
   27f66:	2200      	movs	r2, #0
   27f68:	2300      	movs	r3, #0
   27f6a:	4658      	mov	r0, fp
   27f6c:	f004 fd48 	bl	2ca00 <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
   27f70:	b970      	cbnz	r0, 27f90 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
   27f72:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 28018 <usb_transfer+0xdc>
   27f76:	01a7      	lsls	r7, r4, #6
   27f78:	eb09 1484 	add.w	r4, r9, r4, lsl #6
   27f7c:	6863      	ldr	r3, [r4, #4]
   27f7e:	f113 0f10 	cmn.w	r3, #16
   27f82:	d114      	bne.n	27fae <usb_transfer+0x72>
   27f84:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
   27f86:	4658      	mov	r0, fp
   27f88:	f004 fd16 	bl	2c9b8 <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
   27f8c:	9b01      	ldr	r3, [sp, #4]
   27f8e:	e006      	b.n	27f9e <usb_transfer+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   27f90:	3401      	adds	r4, #1
   27f92:	2c04      	cmp	r4, #4
   27f94:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
   27f98:	d1e5      	bne.n	27f66 <usb_transfer+0x2a>
		ret = -ENOMEM;
   27f9a:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
   27f9e:	f38a 8811 	msr	BASEPRI, sl
   27fa2:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
   27fa6:	4618      	mov	r0, r3
   27fa8:	b003      	add	sp, #12
   27faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
   27fae:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
   27fb0:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
   27fb2:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
   27fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   27fb8:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
   27fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   27fbc:	61a3      	str	r3, [r4, #24]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   27fbe:	4630      	mov	r0, r6
	trans->status = -EBUSY;
   27fc0:	f06f 030f 	mvn.w	r3, #15
	trans->ep = ep;
   27fc4:	f809 6007 	strb.w	r6, [r9, r7]
	trans->flags = flags;
   27fc8:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
   27fcc:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   27fce:	f001 fb65 	bl	2969c <usb_dc_ep_mps>
   27fd2:	b158      	cbz	r0, 27fec <usb_transfer+0xb0>
   27fd4:	4630      	mov	r0, r6
   27fd6:	f001 fb61 	bl	2969c <usb_dc_ep_mps>
   27fda:	fbb5 f3f0 	udiv	r3, r5, r0
   27fde:	fb03 5510 	mls	r5, r3, r0, r5
   27fe2:	b11d      	cbz	r5, 27fec <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
   27fe4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   27fe6:	f043 0304 	orr.w	r3, r3, #4
   27fea:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
   27fec:	f018 0f02 	tst.w	r8, #2
   27ff0:	d007      	beq.n	28002 <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   27ff2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   27ff6:	4809      	ldr	r0, [pc, #36]	; (2801c <usb_transfer+0xe0>)
   27ff8:	4449      	add	r1, r9
   27ffa:	f006 ffac 	bl	2ef56 <k_work_submit_to_queue>
	int key, ret = 0;
   27ffe:	2300      	movs	r3, #0
   28000:	e7cd      	b.n	27f9e <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
   28002:	4630      	mov	r0, r6
   28004:	f001 faee 	bl	295e4 <usb_dc_ep_read_continue>
   28008:	4603      	mov	r3, r0
   2800a:	e7c8      	b.n	27f9e <usb_transfer+0x62>
		return -EBUSY;
   2800c:	f06f 030f 	mvn.w	r3, #15
   28010:	e7c9      	b.n	27fa6 <usb_transfer+0x6a>
   28012:	bf00      	nop
   28014:	200007cc 	.word	0x200007cc
   28018:	200007b0 	.word	0x200007b0
   2801c:	200003a0 	.word	0x200003a0

00028020 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
   28020:	b510      	push	{r4, lr}
	__asm__ volatile(
   28022:	f04f 0320 	mov.w	r3, #32
   28026:	f3ef 8411 	mrs	r4, BASEPRI
   2802a:	f383 8812 	msr	BASEPRI_MAX, r3
   2802e:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   28032:	f7ff febb 	bl	27dac <usb_ep_get_transfer>
	if (!trans) {
   28036:	b150      	cbz	r0, 2804e <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   28038:	6843      	ldr	r3, [r0, #4]
   2803a:	3310      	adds	r3, #16
   2803c:	d107      	bne.n	2804e <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   2803e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   28042:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   28044:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   28048:	4803      	ldr	r0, [pc, #12]	; (28058 <usb_cancel_transfer+0x38>)
   2804a:	f006 ff84 	bl	2ef56 <k_work_submit_to_queue>
	__asm__ volatile(
   2804e:	f384 8811 	msr	BASEPRI, r4
   28052:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   28056:	bd10      	pop	{r4, pc}
   28058:	200003a0 	.word	0x200003a0

0002805c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   2805c:	b570      	push	{r4, r5, r6, lr}
   2805e:	4c0f      	ldr	r4, [pc, #60]	; (2809c <usb_cancel_transfers+0x40>)
   28060:	2504      	movs	r5, #4
	__asm__ volatile(
   28062:	f04f 0320 	mov.w	r3, #32
   28066:	f3ef 8611 	mrs	r6, BASEPRI
   2806a:	f383 8812 	msr	BASEPRI_MAX, r3
   2806e:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
   28072:	6863      	ldr	r3, [r4, #4]
   28074:	3310      	adds	r3, #16
   28076:	d107      	bne.n	28088 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
   28078:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2807c:	4808      	ldr	r0, [pc, #32]	; (280a0 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
   2807e:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   28080:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   28084:	f006 ff67 	bl	2ef56 <k_work_submit_to_queue>
	__asm__ volatile(
   28088:	f386 8811 	msr	BASEPRI, r6
   2808c:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   28090:	3d01      	subs	r5, #1
   28092:	f104 0440 	add.w	r4, r4, #64	; 0x40
   28096:	d1e4      	bne.n	28062 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   28098:	bd70      	pop	{r4, r5, r6, pc}
   2809a:	bf00      	nop
   2809c:	200007b0 	.word	0x200007b0
   280a0:	200003a0 	.word	0x200003a0

000280a4 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   280a4:	b570      	push	{r4, r5, r6, lr}
   280a6:	4c0a      	ldr	r4, [pc, #40]	; (280d0 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   280a8:	4e0a      	ldr	r6, [pc, #40]	; (280d4 <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   280aa:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   280ac:	4631      	mov	r1, r6
   280ae:	4620      	mov	r0, r4
   280b0:	f006 ff34 	bl	2ef1c <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   280b4:	2201      	movs	r2, #1
   280b6:	f1a4 0010 	sub.w	r0, r4, #16
   280ba:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   280bc:	3501      	adds	r5, #1
   280be:	f006 fef0 	bl	2eea2 <z_impl_k_sem_init>
   280c2:	2d04      	cmp	r5, #4
   280c4:	f104 0440 	add.w	r4, r4, #64	; 0x40
   280c8:	d1f0      	bne.n	280ac <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   280ca:	2000      	movs	r0, #0
   280cc:	bd70      	pop	{r4, r5, r6, pc}
   280ce:	bf00      	nop
   280d0:	200007dc 	.word	0x200007dc
   280d4:	00027dd9 	.word	0x00027dd9

000280d8 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
   280d8:	b570      	push	{r4, r5, r6, lr}
   280da:	4604      	mov	r4, r0
   280dc:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   280de:	7901      	ldrb	r1, [r0, #4]
   280e0:	4812      	ldr	r0, [pc, #72]	; (2812c <cdc_acm_class_handle_req+0x54>)
{
   280e2:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   280e4:	f006 f839 	bl	2e15a <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
   280e8:	b1e8      	cbz	r0, 28126 <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
   280ea:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
   280ee:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
   280f0:	2a00      	cmp	r2, #0
   280f2:	db11      	blt.n	28118 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
   280f4:	2b20      	cmp	r3, #32
   280f6:	d004      	beq.n	28102 <cdc_acm_class_handle_req+0x2a>
   280f8:	2b22      	cmp	r3, #34	; 0x22
   280fa:	d009      	beq.n	28110 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
   280fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28100:	e005      	b.n	2810e <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
   28102:	6829      	ldr	r1, [r5, #0]
   28104:	2207      	movs	r2, #7
   28106:	3810      	subs	r0, #16
   28108:	f006 f908 	bl	2e31c <memcpy>
			return 0;
   2810c:	2000      	movs	r0, #0
}
   2810e:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
   28110:	8863      	ldrh	r3, [r4, #2]
   28112:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
   28116:	e7f9      	b.n	2810c <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
   28118:	2b21      	cmp	r3, #33	; 0x21
   2811a:	d1ef      	bne.n	280fc <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
   2811c:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
   2811e:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
   28120:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
   28122:	6033      	str	r3, [r6, #0]
			return 0;
   28124:	e7f2      	b.n	2810c <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
   28126:	f06f 0012 	mvn.w	r0, #18
   2812a:	e7f0      	b.n	2810e <cdc_acm_class_handle_req+0x36>
   2812c:	200008b0 	.word	0x200008b0

00028130 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   28130:	b508      	push	{r3, lr}
   28132:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
   28134:	4803      	ldr	r0, [pc, #12]	; (28144 <cdc_acm_int_in+0x14>)
   28136:	f006 f81e 	bl	2e176 <usb_get_dev_data_by_ep>
	if (common == NULL) {
   2813a:	b110      	cbz	r0, 28142 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
   2813c:	2301      	movs	r3, #1
   2813e:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
   28142:	bd08      	pop	{r3, pc}
   28144:	200008b0 	.word	0x200008b0

00028148 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28148:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
   2814a:	2301      	movs	r3, #1
   2814c:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
   28150:	680b      	ldr	r3, [r1, #0]
   28152:	b133      	cbz	r3, 28162 <cdc_acm_irq_rx_enable+0x1a>
   28154:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
   28158:	b11b      	cbz	r3, 28162 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   2815a:	4802      	ldr	r0, [pc, #8]	; (28164 <cdc_acm_irq_rx_enable+0x1c>)
   2815c:	3108      	adds	r1, #8
   2815e:	f006 befa 	b.w	2ef56 <k_work_submit_to_queue>
	}
}
   28162:	4770      	bx	lr
   28164:	200003a0 	.word	0x200003a0

00028168 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28168:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
   2816a:	2301      	movs	r3, #1
   2816c:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
   28170:	680b      	ldr	r3, [r1, #0]
   28172:	b133      	cbz	r3, 28182 <cdc_acm_irq_tx_enable+0x1a>
   28174:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
   28178:	b11b      	cbz	r3, 28182 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   2817a:	4802      	ldr	r0, [pc, #8]	; (28184 <cdc_acm_irq_tx_enable+0x1c>)
   2817c:	3108      	adds	r1, #8
   2817e:	f006 beea 	b.w	2ef56 <k_work_submit_to_queue>
}
   28182:	4770      	bx	lr
   28184:	200003a0 	.word	0x200003a0

00028188 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
   28188:	4a0d      	ldr	r2, [pc, #52]	; (281c0 <cdc_acm_reset_port+0x38>)
{
   2818a:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
   2818c:	2100      	movs	r1, #0
   2818e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
   28192:	6810      	ldr	r0, [r2, #0]
   28194:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
   28198:	8890      	ldrh	r0, [r2, #4]
   2819a:	7992      	ldrb	r2, [r2, #6]
   2819c:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
   281a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
   281a4:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
   281a8:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	dev_data->configured = false;
   281ac:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
   281b0:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
   281b4:	2240      	movs	r2, #64	; 0x40
   281b6:	f103 004c 	add.w	r0, r3, #76	; 0x4c
   281ba:	f006 b8ba 	b.w	2e332 <memset>
   281be:	bf00      	nop
   281c0:	0002f6c0 	.word	0x0002f6c0

000281c4 <cdc_acm_fifo_fill>:
{
   281c4:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   281c6:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
   281c8:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
   281cc:	b188      	cbz	r0, 281f2 <cdc_acm_fifo_fill+0x2e>
   281ce:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   281d2:	b97b      	cbnz	r3, 281f4 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
   281d4:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   281d8:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
   281dc:	f005 ff16 	bl	2e00c <ring_buf_put>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   281e0:	2200      	movs	r2, #0
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   281e2:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   281e4:	2300      	movs	r3, #0
   281e6:	4804      	ldr	r0, [pc, #16]	; (281f8 <cdc_acm_fifo_fill+0x34>)
   281e8:	f105 0118 	add.w	r1, r5, #24
   281ec:	f004 fd5e 	bl	2ccac <k_work_schedule_for_queue>
	return wrote;
   281f0:	4620      	mov	r0, r4
}
   281f2:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   281f4:	2000      	movs	r0, #0
   281f6:	e7fc      	b.n	281f2 <cdc_acm_fifo_fill+0x2e>
   281f8:	200003a0 	.word	0x200003a0

000281fc <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
   281fc:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   281fe:	6904      	ldr	r4, [r0, #16]
{
   28200:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
   28204:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   28208:	b1a3      	cbz	r3, 28234 <cdc_acm_poll_out+0x38>
   2820a:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   2820e:	b98b      	cbnz	r3, 28234 <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   28210:	f10d 0107 	add.w	r1, sp, #7
   28214:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
   28218:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   2821c:	2201      	movs	r2, #1
   2821e:	f005 fef5 	bl	2e00c <ring_buf_put>
   28222:	4601      	mov	r1, r0
   28224:	b140      	cbz	r0, 28238 <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
   28226:	480d      	ldr	r0, [pc, #52]	; (2825c <cdc_acm_poll_out+0x60>)
   28228:	2221      	movs	r2, #33	; 0x21
   2822a:	2300      	movs	r3, #0
   2822c:	f104 0118 	add.w	r1, r4, #24
   28230:	f004 fd3c 	bl	2ccac <k_work_schedule_for_queue>
}
   28234:	b002      	add	sp, #8
   28236:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   28238:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   2823c:	2201      	movs	r2, #1
   2823e:	f005 ff39 	bl	2e0b4 <ring_buf_get>
   28242:	2800      	cmp	r0, #0
   28244:	d0f6      	beq.n	28234 <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   28246:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   2824a:	2201      	movs	r2, #1
   2824c:	f10d 0107 	add.w	r1, sp, #7
   28250:	f005 fedc 	bl	2e00c <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   28254:	2800      	cmp	r0, #0
   28256:	d1e6      	bne.n	28226 <cdc_acm_poll_out+0x2a>
   28258:	e7ec      	b.n	28234 <cdc_acm_poll_out+0x38>
   2825a:	bf00      	nop
   2825c:	200003a0 	.word	0x200003a0

00028260 <tx_work_handler>:
{
   28260:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
   28262:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
   28266:	685b      	ldr	r3, [r3, #4]
   28268:	6a1b      	ldr	r3, [r3, #32]
   2826a:	7d1f      	ldrb	r7, [r3, #20]
{
   2826c:	b085      	sub	sp, #20
   2826e:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
   28270:	4638      	mov	r0, r7
   28272:	f005 ff96 	bl	2e1a2 <usb_transfer_is_busy>
   28276:	4606      	mov	r6, r0
   28278:	b9e0      	cbnz	r0, 282b4 <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
   2827a:	6fa8      	ldr	r0, [r5, #120]	; 0x78
   2827c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   28280:	a903      	add	r1, sp, #12
   28282:	f005 fee2 	bl	2e04a <ring_buf_get_claim>
	if (!len) {
   28286:	4604      	mov	r4, r0
   28288:	b1a0      	cbz	r0, 282b4 <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
   2828a:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
   2828c:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
   28290:	bf08      	it	eq
   28292:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	dev_data->tx_ready = false;
   28296:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
   2829a:	9301      	str	r3, [sp, #4]
   2829c:	4b06      	ldr	r3, [pc, #24]	; (282b8 <tx_work_handler+0x58>)
   2829e:	9903      	ldr	r1, [sp, #12]
   282a0:	9300      	str	r3, [sp, #0]
   282a2:	4622      	mov	r2, r4
   282a4:	2302      	movs	r3, #2
   282a6:	4638      	mov	r0, r7
   282a8:	f7ff fe48 	bl	27f3c <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
   282ac:	6fa8      	ldr	r0, [r5, #120]	; 0x78
   282ae:	4621      	mov	r1, r4
   282b0:	f005 feeb 	bl	2e08a <ring_buf_get_finish>
}
   282b4:	b005      	add	sp, #20
   282b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   282b8:	000282bd 	.word	0x000282bd

000282bc <cdc_acm_write_cb>:
{
   282bc:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
   282be:	2301      	movs	r3, #1
   282c0:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
   282c4:	6813      	ldr	r3, [r2, #0]
{
   282c6:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
   282c8:	b13b      	cbz	r3, 282da <cdc_acm_write_cb+0x1e>
   282ca:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
   282ce:	b123      	cbz	r3, 282da <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   282d0:	480a      	ldr	r0, [pc, #40]	; (282fc <cdc_acm_write_cb+0x40>)
   282d2:	f102 0108 	add.w	r1, r2, #8
   282d6:	f006 fe3e 	bl	2ef56 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
   282da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   282de:	689a      	ldr	r2, [r3, #8]
   282e0:	691b      	ldr	r3, [r3, #16]
   282e2:	429a      	cmp	r2, r3
   282e4:	d008      	beq.n	282f8 <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   282e6:	f104 0118 	add.w	r1, r4, #24
   282ea:	4804      	ldr	r0, [pc, #16]	; (282fc <cdc_acm_write_cb+0x40>)
}
   282ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   282f0:	2200      	movs	r2, #0
   282f2:	2300      	movs	r3, #0
   282f4:	f004 bcda 	b.w	2ccac <k_work_schedule_for_queue>
}
   282f8:	bd10      	pop	{r4, pc}
   282fa:	bf00      	nop
   282fc:	200003a0 	.word	0x200003a0

00028300 <cdc_acm_init>:
{
   28300:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   28302:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
   28304:	2300      	movs	r3, #0
   28306:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   2830a:	4b0c      	ldr	r3, [pc, #48]	; (2833c <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
   2830c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
   28310:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
   28312:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   28316:	b969      	cbnz	r1, 28334 <cdc_acm_init+0x34>
	list->head = node;
   28318:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
   2831c:	f104 0008 	add.w	r0, r4, #8
   28320:	4907      	ldr	r1, [pc, #28]	; (28340 <cdc_acm_init+0x40>)
   28322:	f006 fdfb 	bl	2ef1c <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
   28326:	f104 0018 	add.w	r0, r4, #24
   2832a:	4906      	ldr	r1, [pc, #24]	; (28344 <cdc_acm_init+0x44>)
   2832c:	f006 fe24 	bl	2ef78 <k_work_init_delayable>
}
   28330:	2000      	movs	r0, #0
   28332:	bd10      	pop	{r4, pc}
	parent->next = child;
   28334:	600a      	str	r2, [r1, #0]
	list->tail = node;
   28336:	605a      	str	r2, [r3, #4]
}
   28338:	e7f0      	b.n	2831c <cdc_acm_init+0x1c>
   2833a:	bf00      	nop
   2833c:	200008b0 	.word	0x200008b0
   28340:	0002e1cd 	.word	0x0002e1cd
   28344:	00028261 	.word	0x00028261

00028348 <cdc_acm_read_cb>:
{
   28348:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2834a:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   2834c:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
   28350:	1e0a      	subs	r2, r1, #0
{
   28352:	4605      	mov	r5, r0
	if (size <= 0) {
   28354:	dd1f      	ble.n	28396 <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   28356:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   2835a:	4631      	mov	r1, r6
   2835c:	f005 fe56 	bl	2e00c <ring_buf_put>
	dev_data->rx_ready = true;
   28360:	2301      	movs	r3, #1
   28362:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
   28366:	6823      	ldr	r3, [r4, #0]
   28368:	b13b      	cbz	r3, 2837a <cdc_acm_read_cb+0x32>
   2836a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   2836e:	b123      	cbz	r3, 2837a <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   28370:	480e      	ldr	r0, [pc, #56]	; (283ac <cdc_acm_read_cb+0x64>)
   28372:	f104 0108 	add.w	r1, r4, #8
   28376:	f006 fdee 	bl	2ef56 <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
   2837a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
   2837e:	684b      	ldr	r3, [r1, #4]
   28380:	694a      	ldr	r2, [r1, #20]
   28382:	1a9a      	subs	r2, r3, r2
   28384:	69cb      	ldr	r3, [r1, #28]
   28386:	1a9b      	subs	r3, r3, r2
   28388:	2b3f      	cmp	r3, #63	; 0x3f
   2838a:	d804      	bhi.n	28396 <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
   2838c:	2301      	movs	r3, #1
   2838e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   28392:	b002      	add	sp, #8
   28394:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
   28396:	4b06      	ldr	r3, [pc, #24]	; (283b0 <cdc_acm_read_cb+0x68>)
   28398:	9300      	str	r3, [sp, #0]
   2839a:	9401      	str	r4, [sp, #4]
   2839c:	2301      	movs	r3, #1
   2839e:	2240      	movs	r2, #64	; 0x40
   283a0:	4631      	mov	r1, r6
   283a2:	4628      	mov	r0, r5
   283a4:	f7ff fdca 	bl	27f3c <usb_transfer>
   283a8:	e7f3      	b.n	28392 <cdc_acm_read_cb+0x4a>
   283aa:	bf00      	nop
   283ac:	200003a0 	.word	0x200003a0
   283b0:	00028349 	.word	0x00028349

000283b4 <cdc_acm_dev_status_cb>:
{
   283b4:	b538      	push	{r3, r4, r5, lr}
   283b6:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
   283b8:	4601      	mov	r1, r0
   283ba:	481e      	ldr	r0, [pc, #120]	; (28434 <cdc_acm_dev_status_cb+0x80>)
   283bc:	f005 fec1 	bl	2e142 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   283c0:	4604      	mov	r4, r0
   283c2:	b380      	cbz	r0, 28426 <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
   283c4:	4602      	mov	r2, r0
	switch (status) {
   283c6:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
   283c8:	f852 39a4 	ldr.w	r3, [r2], #-164
   283cc:	685b      	ldr	r3, [r3, #4]
	switch (status) {
   283ce:	2905      	cmp	r1, #5
   283d0:	d829      	bhi.n	28426 <cdc_acm_dev_status_cb+0x72>
   283d2:	e8df f001 	tbb	[pc, r1]
   283d6:	2820      	.short	0x2820
   283d8:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
   283dc:	f814 1c06 	ldrb.w	r1, [r4, #-6]
   283e0:	b931      	cbnz	r1, 283f0 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
   283e2:	6a1b      	ldr	r3, [r3, #32]
   283e4:	7b18      	ldrb	r0, [r3, #12]
   283e6:	f7ff ffaf 	bl	28348 <cdc_acm_read_cb>
			dev_data->configured = true;
   283ea:	2301      	movs	r3, #1
   283ec:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
   283f0:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
   283f4:	b9bb      	cbnz	r3, 28426 <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
   283f6:	2301      	movs	r3, #1
   283f8:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
   283fc:	f854 3ca4 	ldr.w	r3, [r4, #-164]
   28400:	b18b      	cbz	r3, 28426 <cdc_acm_dev_status_cb+0x72>
   28402:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
   28406:	b173      	cbz	r3, 28426 <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   28408:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
   2840c:	480a      	ldr	r0, [pc, #40]	; (28438 <cdc_acm_dev_status_cb+0x84>)
}
   2840e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   28412:	f006 bda0 	b.w	2ef56 <k_work_submit_to_queue>
}
   28416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
   2841a:	4610      	mov	r0, r2
   2841c:	f7ff beb4 	b.w	28188 <cdc_acm_reset_port>
		dev_data->suspended = true;
   28420:	2301      	movs	r3, #1
			dev_data->suspended = false;
   28422:	f804 3c05 	strb.w	r3, [r4, #-5]
}
   28426:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
   28428:	f814 3c05 	ldrb.w	r3, [r4, #-5]
   2842c:	2b00      	cmp	r3, #0
   2842e:	d0fa      	beq.n	28426 <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
   28430:	2300      	movs	r3, #0
   28432:	e7f6      	b.n	28422 <cdc_acm_dev_status_cb+0x6e>
   28434:	200008b0 	.word	0x200008b0
   28438:	200003a0 	.word	0x200003a0

0002843c <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
   2843c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
   2843e:	4d09      	ldr	r5, [pc, #36]	; (28464 <z_usb_work_q_init+0x28>)
   28440:	4909      	ldr	r1, [pc, #36]	; (28468 <z_usb_work_q_init+0x2c>)
   28442:	2400      	movs	r4, #0
   28444:	9400      	str	r4, [sp, #0]
   28446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2844a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2844e:	4628      	mov	r0, r5
   28450:	f004 fbf4 	bl	2cc3c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   28454:	4905      	ldr	r1, [pc, #20]	; (2846c <z_usb_work_q_init+0x30>)
   28456:	4628      	mov	r0, r5
   28458:	f006 fc8f 	bl	2ed7a <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
   2845c:	4620      	mov	r0, r4
   2845e:	b003      	add	sp, #12
   28460:	bd30      	pop	{r4, r5, pc}
   28462:	bf00      	nop
   28464:	200003a0 	.word	0x200003a0
   28468:	200014b0 	.word	0x200014b0
   2846c:	0002fa6b 	.word	0x0002fa6b

00028470 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   28470:	4901      	ldr	r1, [pc, #4]	; (28478 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   28472:	2210      	movs	r2, #16
	str	r2, [r1]
   28474:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   28476:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   28478:	e000ed10 	.word	0xe000ed10

0002847c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   2847c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2847e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   28480:	f380 8811 	msr	BASEPRI, r0
	isb
   28484:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   28488:	f3bf 8f4f 	dsb	sy
   2848c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2848e:	b662      	cpsie	i
	isb
   28490:	f3bf 8f6f 	isb	sy

	bx	lr
   28494:	4770      	bx	lr
   28496:	bf00      	nop

00028498 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   28498:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   2849a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   2849c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   284a0:	f3bf 8f4f 	dsb	sy
   284a4:	bf20      	wfe

	msr	BASEPRI, r0
   284a6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   284aa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   284ac:	4770      	bx	lr
   284ae:	bf00      	nop

000284b0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   284b0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   284b2:	2800      	cmp	r0, #0
   284b4:	db07      	blt.n	284c6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   284b6:	4a04      	ldr	r2, [pc, #16]	; (284c8 <arch_irq_enable+0x18>)
   284b8:	0941      	lsrs	r1, r0, #5
   284ba:	2301      	movs	r3, #1
   284bc:	f000 001f 	and.w	r0, r0, #31
   284c0:	4083      	lsls	r3, r0
   284c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   284c6:	4770      	bx	lr
   284c8:	e000e100 	.word	0xe000e100

000284cc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   284cc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   284ce:	2800      	cmp	r0, #0
   284d0:	db0c      	blt.n	284ec <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   284d2:	0943      	lsrs	r3, r0, #5
   284d4:	4906      	ldr	r1, [pc, #24]	; (284f0 <arch_irq_disable+0x24>)
   284d6:	f000 001f 	and.w	r0, r0, #31
   284da:	3320      	adds	r3, #32
   284dc:	2201      	movs	r2, #1
   284de:	4082      	lsls	r2, r0
   284e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   284e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   284e8:	f3bf 8f6f 	isb	sy
}
   284ec:	4770      	bx	lr
   284ee:	bf00      	nop
   284f0:	e000e100 	.word	0xe000e100

000284f4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   284f4:	4b05      	ldr	r3, [pc, #20]	; (2850c <arch_irq_is_enabled+0x18>)
   284f6:	0942      	lsrs	r2, r0, #5
   284f8:	f000 001f 	and.w	r0, r0, #31
   284fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   28500:	2301      	movs	r3, #1
   28502:	fa03 f000 	lsl.w	r0, r3, r0
}
   28506:	4010      	ands	r0, r2
   28508:	4770      	bx	lr
   2850a:	bf00      	nop
   2850c:	e000e100 	.word	0xe000e100

00028510 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   28510:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   28512:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   28514:	bfa8      	it	ge
   28516:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   2851a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2851e:	bfb8      	it	lt
   28520:	4b06      	ldrlt	r3, [pc, #24]	; (2853c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   28522:	ea4f 1141 	mov.w	r1, r1, lsl #5
   28526:	bfac      	ite	ge
   28528:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2852c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   28530:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   28532:	bfb4      	ite	lt
   28534:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   28536:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   2853a:	4770      	bx	lr
   2853c:	e000ed14 	.word	0xe000ed14

00028540 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   28540:	bf30      	wfi
    b z_SysNmiOnReset
   28542:	f7ff bffd 	b.w	28540 <z_SysNmiOnReset>
   28546:	bf00      	nop

00028548 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   28548:	4a0f      	ldr	r2, [pc, #60]	; (28588 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   2854a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2854c:	4b0f      	ldr	r3, [pc, #60]	; (2858c <z_arm_prep_c+0x44>)
   2854e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   28552:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   28554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   28558:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   2855c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   28560:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   28564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   28568:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   2856c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   28570:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   28574:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   28578:	f003 ff62 	bl	2c440 <z_bss_zero>
	z_data_copy();
   2857c:	f004 ff2e 	bl	2d3dc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   28580:	f000 f9ea 	bl	28958 <z_arm_interrupt_init>
	z_cstart();
   28584:	f003 ffaa 	bl	2c4dc <z_cstart>
   28588:	00026000 	.word	0x00026000
   2858c:	e000ed00 	.word	0xe000ed00

00028590 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   28590:	4a09      	ldr	r2, [pc, #36]	; (285b8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   28592:	490a      	ldr	r1, [pc, #40]	; (285bc <arch_swap+0x2c>)
	_current->arch.basepri = key;
   28594:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   28596:	6809      	ldr	r1, [r1, #0]
   28598:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2859a:	4909      	ldr	r1, [pc, #36]	; (285c0 <arch_swap+0x30>)
	_current->arch.basepri = key;
   2859c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2859e:	684b      	ldr	r3, [r1, #4]
   285a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   285a4:	604b      	str	r3, [r1, #4]
   285a6:	2300      	movs	r3, #0
   285a8:	f383 8811 	msr	BASEPRI, r3
   285ac:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   285b0:	6893      	ldr	r3, [r2, #8]
}
   285b2:	6f98      	ldr	r0, [r3, #120]	; 0x78
   285b4:	4770      	bx	lr
   285b6:	bf00      	nop
   285b8:	20001430 	.word	0x20001430
   285bc:	0002f90c 	.word	0x0002f90c
   285c0:	e000ed00 	.word	0xe000ed00

000285c4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   285c4:	490f      	ldr	r1, [pc, #60]	; (28604 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   285c6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   285c8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   285cc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   285ce:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   285d2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   285d6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   285d8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   285dc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   285e0:	4f09      	ldr	r7, [pc, #36]	; (28608 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   285e2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   285e6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   285e8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   285ea:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   285ec:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   285ee:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   285f0:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   285f2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   285f6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   285fa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   285fe:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   28602:	4770      	bx	lr
    ldr r1, =_kernel
   28604:	20001430 	.word	0x20001430
    ldr v4, =_SCS_ICSR
   28608:	e000ed04 	.word	0xe000ed04

0002860c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   2860c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   28610:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   28612:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   28616:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2861a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   2861c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   28620:	2902      	cmp	r1, #2
    beq _oops
   28622:	d0ff      	beq.n	28624 <_oops>

00028624 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   28624:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   28626:	f005 fe63 	bl	2e2f0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   2862a:	bd01      	pop	{r0, pc}

0002862c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   2862c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   28630:	9b00      	ldr	r3, [sp, #0]
   28632:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   28636:	490a      	ldr	r1, [pc, #40]	; (28660 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   28638:	9b01      	ldr	r3, [sp, #4]
   2863a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2863e:	9b02      	ldr	r3, [sp, #8]
   28640:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   28644:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   28648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2864c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   28650:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   28654:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   28656:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   28658:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   2865a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2865c:	4770      	bx	lr
   2865e:	bf00      	nop
   28660:	0002d8e3 	.word	0x0002d8e3

00028664 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   28664:	4b07      	ldr	r3, [pc, #28]	; (28684 <arch_switch_to_main_thread+0x20>)
   28666:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   28668:	4610      	mov	r0, r2
   2866a:	f381 8809 	msr	PSP, r1
   2866e:	2100      	movs	r1, #0
   28670:	b663      	cpsie	if
   28672:	f381 8811 	msr	BASEPRI, r1
   28676:	f3bf 8f6f 	isb	sy
   2867a:	2200      	movs	r2, #0
   2867c:	2300      	movs	r3, #0
   2867e:	f005 f930 	bl	2d8e2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   28682:	bf00      	nop
   28684:	20001430 	.word	0x20001430

00028688 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   28688:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2868a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2868c:	4a0b      	ldr	r2, [pc, #44]	; (286bc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2868e:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   28690:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   28692:	bf1e      	ittt	ne
	movne	r1, #0
   28694:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   28696:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   28698:	f006 fb74 	blne	2ed84 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2869c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2869e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   286a2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   286a6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   286aa:	4905      	ldr	r1, [pc, #20]	; (286c0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   286ac:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   286ae:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   286b0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   286b2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   286b6:	4903      	ldr	r1, [pc, #12]	; (286c4 <_isr_wrapper+0x3c>)
	bx r1
   286b8:	4708      	bx	r1
   286ba:	0000      	.short	0x0000
	ldr r2, =_kernel
   286bc:	20001430 	.word	0x20001430
	ldr r1, =_sw_isr_table
   286c0:	0002f4ac 	.word	0x0002f4ac
	ldr r1, =z_arm_int_exit
   286c4:	000286c9 	.word	0x000286c9

000286c8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   286c8:	4b04      	ldr	r3, [pc, #16]	; (286dc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   286ca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   286cc:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   286ce:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   286d0:	d003      	beq.n	286da <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   286d2:	4903      	ldr	r1, [pc, #12]	; (286e0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   286d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   286d8:	600a      	str	r2, [r1, #0]

000286da <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   286da:	4770      	bx	lr
	ldr r3, =_kernel
   286dc:	20001430 	.word	0x20001430
	ldr r1, =_SCS_ICSR
   286e0:	e000ed04 	.word	0xe000ed04

000286e4 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   286e4:	4b13      	ldr	r3, [pc, #76]	; (28734 <usage_fault.constprop.0+0x50>)
   286e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   286e8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   286ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   286ee:	bf14      	ite	ne
   286f0:	201e      	movne	r0, #30
   286f2:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   286f4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   286f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   286fa:	bf18      	it	ne
   286fc:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   286fe:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   28702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   28704:	bf18      	it	ne
   28706:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   28708:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2870c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   2870e:	bf18      	it	ne
   28710:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   28712:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   28716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   28718:	bf18      	it	ne
   2871a:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   2871c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   28720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28722:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   28726:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2872a:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   2872c:	bf18      	it	ne
   2872e:	2024      	movne	r0, #36	; 0x24
   28730:	4770      	bx	lr
   28732:	bf00      	nop
   28734:	e000ed00 	.word	0xe000ed00

00028738 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   28738:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2873a:	4b19      	ldr	r3, [pc, #100]	; (287a0 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2873c:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2873e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   28740:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   28742:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   28746:	bf14      	ite	ne
   28748:	2017      	movne	r0, #23
   2874a:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
   2874c:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   28750:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
   28752:	bf18      	it	ne
   28754:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   28756:	05a4      	lsls	r4, r4, #22
   28758:	d509      	bpl.n	2876e <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
   2875a:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2875c:	6a98      	ldr	r0, [r3, #40]	; 0x28
   2875e:	0400      	lsls	r0, r0, #16
   28760:	d504      	bpl.n	2876c <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
   28762:	b11a      	cbz	r2, 2876c <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   28764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   28766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2876a:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   2876c:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2876e:	4b0c      	ldr	r3, [pc, #48]	; (287a0 <bus_fault.constprop.0+0x68>)
   28770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   28772:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   28776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   28778:	bf18      	it	ne
   2877a:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2877c:	05d2      	lsls	r2, r2, #23
   2877e:	d40c      	bmi.n	2879a <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   28780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   28782:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   28786:	bf18      	it	ne
   28788:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2878a:	4a05      	ldr	r2, [pc, #20]	; (287a0 <bus_fault.constprop.0+0x68>)
   2878c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2878e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   28792:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   28794:	2300      	movs	r3, #0
   28796:	700b      	strb	r3, [r1, #0]
}
   28798:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   2879a:	201b      	movs	r0, #27
   2879c:	e7f5      	b.n	2878a <bus_fault.constprop.0+0x52>
   2879e:	bf00      	nop
   287a0:	e000ed00 	.word	0xe000ed00

000287a4 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   287a4:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   287a6:	4b1c      	ldr	r3, [pc, #112]	; (28818 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   287a8:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   287aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   287ac:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   287ae:	f010 0f10 	tst.w	r0, #16
   287b2:	bf14      	ite	ne
   287b4:	2011      	movne	r0, #17
   287b6:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
   287b8:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   287bc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
   287be:	bf18      	it	ne
   287c0:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   287c2:	07a4      	lsls	r4, r4, #30
   287c4:	d509      	bpl.n	287da <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
   287c6:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   287c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
   287ca:	0600      	lsls	r0, r0, #24
   287cc:	d504      	bpl.n	287d8 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
   287ce:	b11a      	cbz	r2, 287d8 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   287d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   287d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   287d6:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   287d8:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   287da:	4b0f      	ldr	r3, [pc, #60]	; (28818 <mem_manage_fault.constprop.0+0x74>)
   287dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   287de:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   287e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   287e4:	bf18      	it	ne
   287e6:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   287e8:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   287ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   287ee:	bf18      	it	ne
   287f0:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   287f2:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   287f4:	bf58      	it	pl
   287f6:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   287f8:	4b07      	ldr	r3, [pc, #28]	; (28818 <mem_manage_fault.constprop.0+0x74>)
   287fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   287fc:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   287fe:	bf42      	ittt	mi
   28800:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   28802:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   28806:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   28808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2880a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   2880e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   28810:	2300      	movs	r3, #0
   28812:	700b      	strb	r3, [r1, #0]
}
   28814:	bd10      	pop	{r4, pc}
   28816:	bf00      	nop
   28818:	e000ed00 	.word	0xe000ed00

0002881c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   2881c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2881e:	4b44      	ldr	r3, [pc, #272]	; (28930 <z_arm_fault+0x114>)
   28820:	685b      	ldr	r3, [r3, #4]
{
   28822:	b08a      	sub	sp, #40	; 0x28
   28824:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   28826:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2882a:	2500      	movs	r5, #0
   2882c:	f385 8811 	msr	BASEPRI, r5
   28830:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   28834:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   28838:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   2883c:	d111      	bne.n	28862 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   2883e:	f002 000c 	and.w	r0, r2, #12
   28842:	2808      	cmp	r0, #8
   28844:	d00d      	beq.n	28862 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   28846:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   28848:	bf4c      	ite	mi
   2884a:	460e      	movmi	r6, r1
			*nested_exc = true;
   2884c:	2501      	movpl	r5, #1
	*recoverable = false;
   2884e:	2200      	movs	r2, #0
	switch (fault) {
   28850:	3b03      	subs	r3, #3
	*recoverable = false;
   28852:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   28856:	2b03      	cmp	r3, #3
   28858:	d805      	bhi.n	28866 <z_arm_fault+0x4a>
   2885a:	e8df f003 	tbb	[pc, r3]
   2885e:	5c1e      	.short	0x5c1e
   28860:	5960      	.short	0x5960
		return NULL;
   28862:	462e      	mov	r6, r5
   28864:	e7f3      	b.n	2884e <z_arm_fault+0x32>
   28866:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   28868:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2886c:	b99b      	cbnz	r3, 28896 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2886e:	2220      	movs	r2, #32
   28870:	4631      	mov	r1, r6
   28872:	a802      	add	r0, sp, #8
   28874:	f005 fd52 	bl	2e31c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   28878:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2887a:	2d00      	cmp	r5, #0
   2887c:	d053      	beq.n	28926 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2887e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   28882:	b922      	cbnz	r2, 2888e <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   28884:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   28888:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2888c:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   2888e:	a902      	add	r1, sp, #8
   28890:	4620      	mov	r0, r4
   28892:	f005 fd2b 	bl	2e2ec <z_arm_fatal_error>
}
   28896:	b00a      	add	sp, #40	; 0x28
   28898:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2889a:	4b25      	ldr	r3, [pc, #148]	; (28930 <z_arm_fault+0x114>)
   2889c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2889e:	0791      	lsls	r1, r2, #30
   288a0:	d4e1      	bmi.n	28866 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   288a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   288a4:	2a00      	cmp	r2, #0
   288a6:	dbde      	blt.n	28866 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   288a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   288aa:	0052      	lsls	r2, r2, #1
   288ac:	d5db      	bpl.n	28866 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   288ae:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   288b0:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   288b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   288b6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   288b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   288bc:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   288c0:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   288c2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   288c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   288ca:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   288cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   288d0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   288d4:	f64d 7202 	movw	r2, #57090	; 0xdf02
   288d8:	4291      	cmp	r1, r2
   288da:	d009      	beq.n	288f0 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   288dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   288de:	b2d2      	uxtb	r2, r2
   288e0:	b142      	cbz	r2, 288f4 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
   288e2:	f10d 0107 	add.w	r1, sp, #7
   288e6:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   288e8:	f7ff ff5c 	bl	287a4 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
   288ec:	4604      	mov	r4, r0
		break;
   288ee:	e7bb      	b.n	28868 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
   288f0:	6834      	ldr	r4, [r6, #0]
   288f2:	e7b9      	b.n	28868 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   288f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   288f6:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   288fa:	d005      	beq.n	28908 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
   288fc:	f10d 0107 	add.w	r1, sp, #7
   28900:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   28902:	f7ff ff19 	bl	28738 <bus_fault.constprop.0>
   28906:	e7f1      	b.n	288ec <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   28908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2890a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2890e:	d3aa      	bcc.n	28866 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
   28910:	f7ff fee8 	bl	286e4 <usage_fault.constprop.0>
   28914:	e7ea      	b.n	288ec <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
   28916:	f10d 0107 	add.w	r1, sp, #7
   2891a:	2000      	movs	r0, #0
   2891c:	e7e4      	b.n	288e8 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
   2891e:	f10d 0107 	add.w	r1, sp, #7
   28922:	2000      	movs	r0, #0
   28924:	e7ed      	b.n	28902 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   28926:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2892a:	f023 0301 	bic.w	r3, r3, #1
   2892e:	e7ad      	b.n	2888c <z_arm_fault+0x70>
   28930:	e000ed00 	.word	0xe000ed00

00028934 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   28934:	4a02      	ldr	r2, [pc, #8]	; (28940 <z_arm_fault_init+0xc>)
   28936:	6953      	ldr	r3, [r2, #20]
   28938:	f043 0310 	orr.w	r3, r3, #16
   2893c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   2893e:	4770      	bx	lr
   28940:	e000ed00 	.word	0xe000ed00

00028944 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   28944:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   28948:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   2894c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2894e:	4672      	mov	r2, lr
	bl z_arm_fault
   28950:	f7ff ff64 	bl	2881c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   28954:	bd01      	pop	{r0, pc}
   28956:	bf00      	nop

00028958 <z_arm_interrupt_init>:
   28958:	4804      	ldr	r0, [pc, #16]	; (2896c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2895a:	2300      	movs	r3, #0
   2895c:	2120      	movs	r1, #32
   2895e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   28960:	3301      	adds	r3, #1
   28962:	2b30      	cmp	r3, #48	; 0x30
   28964:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   28968:	d1f9      	bne.n	2895e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2896a:	4770      	bx	lr
   2896c:	e000e100 	.word	0xe000e100

00028970 <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   28970:	f7fe fb2c 	bl	26fcc <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   28974:	2020      	movs	r0, #32
    msr BASEPRI, r0
   28976:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2897a:	4808      	ldr	r0, [pc, #32]	; (2899c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2897c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   28980:	1840      	adds	r0, r0, r1
    msr PSP, r0
   28982:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   28986:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2898a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2898c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2898e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   28992:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   28996:	f7ff fdd7 	bl	28548 <z_arm_prep_c>
   2899a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   2899c:	20001cb0 	.word	0x20001cb0

000289a0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   289a0:	4b08      	ldr	r3, [pc, #32]	; (289c4 <z_impl_k_thread_abort+0x24>)
   289a2:	689b      	ldr	r3, [r3, #8]
   289a4:	4283      	cmp	r3, r0
   289a6:	d10b      	bne.n	289c0 <z_impl_k_thread_abort+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   289a8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   289ac:	b143      	cbz	r3, 289c0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   289ae:	4b06      	ldr	r3, [pc, #24]	; (289c8 <z_impl_k_thread_abort+0x28>)
   289b0:	685a      	ldr	r2, [r3, #4]
   289b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   289b6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   289b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   289ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   289be:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   289c0:	f004 bc9a 	b.w	2d2f8 <z_thread_abort>
   289c4:	20001430 	.word	0x20001430
   289c8:	e000ed00 	.word	0xe000ed00

000289cc <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   289cc:	4b02      	ldr	r3, [pc, #8]	; (289d8 <z_arm_configure_static_mpu_regions+0xc>)
   289ce:	4a03      	ldr	r2, [pc, #12]	; (289dc <z_arm_configure_static_mpu_regions+0x10>)
   289d0:	4803      	ldr	r0, [pc, #12]	; (289e0 <z_arm_configure_static_mpu_regions+0x14>)
   289d2:	2101      	movs	r1, #1
   289d4:	f000 b860 	b.w	28a98 <arm_core_mpu_configure_static_mpu_regions>
   289d8:	20040000 	.word	0x20040000
   289dc:	20000000 	.word	0x20000000
   289e0:	0002f778 	.word	0x0002f778

000289e4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   289e4:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   289e6:	4e20      	ldr	r6, [pc, #128]	; (28a68 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   289e8:	2500      	movs	r5, #0
   289ea:	428d      	cmp	r5, r1
   289ec:	da39      	bge.n	28a62 <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
   289ee:	6844      	ldr	r4, [r0, #4]
   289f0:	b374      	cbz	r4, 28a50 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   289f2:	b153      	cbz	r3, 28a0a <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   289f4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   289f8:	ea14 0f0c 	tst.w	r4, ip
   289fc:	d12f      	bne.n	28a5e <mpu_configure_regions+0x7a>
		&&
   289fe:	2c1f      	cmp	r4, #31
   28a00:	d92d      	bls.n	28a5e <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
   28a02:	6807      	ldr	r7, [r0, #0]
		&&
   28a04:	ea1c 0f07 	tst.w	ip, r7
   28a08:	d129      	bne.n	28a5e <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   28a0a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   28a0c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   28a0e:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   28a12:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   28a16:	d91e      	bls.n	28a56 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
   28a18:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   28a1c:	d81d      	bhi.n	28a5a <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   28a1e:	3c01      	subs	r4, #1
   28a20:	fab4 f484 	clz	r4, r4
   28a24:	f1c4 041f 	rsb	r4, r4, #31
   28a28:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   28a2a:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   28a2e:	ea4c 0c04 	orr.w	ip, ip, r4
   28a32:	d814      	bhi.n	28a5e <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   28a34:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   28a38:	4314      	orrs	r4, r2
   28a3a:	f044 0410 	orr.w	r4, r4, #16
   28a3e:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   28a42:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   28a46:	f04c 0401 	orr.w	r4, ip, #1
   28a4a:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   28a4e:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   28a50:	3501      	adds	r5, #1
   28a52:	300c      	adds	r0, #12
   28a54:	e7c9      	b.n	289ea <mpu_configure_regions+0x6>
		return REGION_32B;
   28a56:	2408      	movs	r4, #8
   28a58:	e7e7      	b.n	28a2a <mpu_configure_regions+0x46>
		return REGION_4G;
   28a5a:	243e      	movs	r4, #62	; 0x3e
   28a5c:	e7e5      	b.n	28a2a <mpu_configure_regions+0x46>
			return -EINVAL;
   28a5e:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
   28a62:	4610      	mov	r0, r2
   28a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28a66:	bf00      	nop
   28a68:	e000ed00 	.word	0xe000ed00

00028a6c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   28a6c:	4b04      	ldr	r3, [pc, #16]	; (28a80 <arm_core_mpu_enable+0x14>)
   28a6e:	2205      	movs	r2, #5
   28a70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   28a74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   28a78:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
   28a7c:	4770      	bx	lr
   28a7e:	bf00      	nop
   28a80:	e000ed00 	.word	0xe000ed00

00028a84 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   28a84:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
   28a88:	4b02      	ldr	r3, [pc, #8]	; (28a94 <arm_core_mpu_disable+0x10>)
   28a8a:	2200      	movs	r2, #0
   28a8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   28a90:	4770      	bx	lr
   28a92:	bf00      	nop
   28a94:	e000ed00 	.word	0xe000ed00

00028a98 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   28a98:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   28a9a:	4c03      	ldr	r4, [pc, #12]	; (28aa8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   28a9c:	2301      	movs	r3, #1
   28a9e:	7822      	ldrb	r2, [r4, #0]
   28aa0:	f7ff ffa0 	bl	289e4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   28aa4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   28aa6:	bd10      	pop	{r4, pc}
   28aa8:	2000147e 	.word	0x2000147e

00028aac <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   28aac:	4914      	ldr	r1, [pc, #80]	; (28b00 <z_arm_mpu_init+0x54>)
   28aae:	6808      	ldr	r0, [r1, #0]
   28ab0:	2808      	cmp	r0, #8
{
   28ab2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   28ab4:	d821      	bhi.n	28afa <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   28ab6:	f7ff ffe5 	bl	28a84 <arm_core_mpu_disable>
   28aba:	4c12      	ldr	r4, [pc, #72]	; (28b04 <z_arm_mpu_init+0x58>)
   28abc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   28abe:	2200      	movs	r2, #0
   28ac0:	4290      	cmp	r0, r2
   28ac2:	f101 010c 	add.w	r1, r1, #12
   28ac6:	d105      	bne.n	28ad4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   28ac8:	4b0f      	ldr	r3, [pc, #60]	; (28b08 <z_arm_mpu_init+0x5c>)
   28aca:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   28acc:	f7ff ffce 	bl	28a6c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   28ad0:	2000      	movs	r0, #0
}
   28ad2:	bd10      	pop	{r4, pc}
   28ad4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   28ad8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   28adc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   28ae0:	4313      	orrs	r3, r2
   28ae2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   28ae6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   28aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
   28aee:	f043 0301 	orr.w	r3, r3, #1
   28af2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   28af6:	3201      	adds	r2, #1
   28af8:	e7e2      	b.n	28ac0 <z_arm_mpu_init+0x14>
		return -1;
   28afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28afe:	e7e8      	b.n	28ad2 <z_arm_mpu_init+0x26>
   28b00:	0002f784 	.word	0x0002f784
   28b04:	e000ed00 	.word	0xe000ed00
   28b08:	2000147e 	.word	0x2000147e

00028b0c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   28b0c:	4b01      	ldr	r3, [pc, #4]	; (28b14 <__stdout_hook_install+0x8>)
   28b0e:	6018      	str	r0, [r3, #0]
}
   28b10:	4770      	bx	lr
   28b12:	bf00      	nop
   28b14:	200001b8 	.word	0x200001b8

00028b18 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   28b18:	b40c      	push	{r2, r3}
   28b1a:	b510      	push	{r4, lr}
   28b1c:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   28b1e:	b909      	cbnz	r1, 28b24 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   28b20:	f10d 000b 	add.w	r0, sp, #11
   28b24:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
   28b26:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
   28b2a:	ab09      	add	r3, sp, #36	; 0x24
   28b2c:	9a08      	ldr	r2, [sp, #32]
   28b2e:	9400      	str	r4, [sp, #0]
   28b30:	a904      	add	r1, sp, #16
   28b32:	4805      	ldr	r0, [pc, #20]	; (28b48 <snprintf+0x30>)
   28b34:	9303      	str	r3, [sp, #12]
   28b36:	f7fd fe97 	bl	26868 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
   28b3a:	9b04      	ldr	r3, [sp, #16]
   28b3c:	701c      	strb	r4, [r3, #0]
	return r;
}
   28b3e:	b006      	add	sp, #24
   28b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28b44:	b002      	add	sp, #8
   28b46:	4770      	bx	lr
   28b48:	0002e34b 	.word	0x0002e34b

00028b4c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   28b4c:	f04f 0320 	mov.w	r3, #32
   28b50:	f3ef 8211 	mrs	r2, BASEPRI
   28b54:	f383 8812 	msr	BASEPRI_MAX, r3
   28b58:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   28b5c:	4906      	ldr	r1, [pc, #24]	; (28b78 <nordicsemi_nrf52_init+0x2c>)
   28b5e:	2301      	movs	r3, #1
   28b60:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   28b64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   28b68:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   28b6c:	f382 8811 	msr	BASEPRI, r2
   28b70:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   28b74:	2000      	movs	r0, #0
   28b76:	4770      	bx	lr
   28b78:	4001e000 	.word	0x4001e000

00028b7c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   28b7c:	b120      	cbz	r0, 28b88 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   28b7e:	4b03      	ldr	r3, [pc, #12]	; (28b8c <arch_busy_wait+0x10>)
   28b80:	0180      	lsls	r0, r0, #6
   28b82:	f043 0301 	orr.w	r3, r3, #1
   28b86:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   28b88:	4770      	bx	lr
   28b8a:	bf00      	nop
   28b8c:	0002f6d0 	.word	0x0002f6d0

00028b90 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   28b90:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   28b92:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
   28b96:	d512      	bpl.n	28bbe <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   28b98:	2b08      	cmp	r3, #8
   28b9a:	d105      	bne.n	28ba8 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   28b9c:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   28b9e:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   28ba2:	d506      	bpl.n	28bb2 <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   28ba4:	480e      	ldr	r0, [pc, #56]	; (28be0 <endpoint_ctx+0x50>)
   28ba6:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
   28ba8:	f010 0f78 	tst.w	r0, #120	; 0x78
   28bac:	d112      	bne.n	28bd4 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
   28bae:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
   28bb2:	204c      	movs	r0, #76	; 0x4c
   28bb4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   28bb8:	4b0a      	ldr	r3, [pc, #40]	; (28be4 <endpoint_ctx+0x54>)
   28bba:	4418      	add	r0, r3
   28bbc:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   28bbe:	2b08      	cmp	r3, #8
   28bc0:	d105      	bne.n	28bce <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   28bc2:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   28bc4:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   28bc8:	d506      	bpl.n	28bd8 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   28bca:	4807      	ldr	r0, [pc, #28]	; (28be8 <endpoint_ctx+0x58>)
   28bcc:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
   28bce:	f010 0f78 	tst.w	r0, #120	; 0x78
   28bd2:	d0f6      	beq.n	28bc2 <endpoint_ctx+0x32>
		return NULL;
   28bd4:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
   28bd6:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   28bd8:	4804      	ldr	r0, [pc, #16]	; (28bec <endpoint_ctx+0x5c>)
   28bda:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   28bde:	4770      	bx	lr
   28be0:	20000a04 	.word	0x20000a04
   28be4:	200008b8 	.word	0x200008b8
   28be8:	20000b24 	.word	0x20000b24
   28bec:	20000a24 	.word	0x20000a24

00028bf0 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   28bf0:	4901      	ldr	r1, [pc, #4]	; (28bf8 <usbd_work_schedule+0x8>)
   28bf2:	4802      	ldr	r0, [pc, #8]	; (28bfc <usbd_work_schedule+0xc>)
   28bf4:	f006 b9af 	b.w	2ef56 <k_work_submit_to_queue>
   28bf8:	200008e0 	.word	0x200008e0
   28bfc:	20000440 	.word	0x20000440

00028c00 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   28c00:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   28c02:	4801      	ldr	r0, [pc, #4]	; (28c08 <usbd_evt_put+0x8>)
   28c04:	f006 b942 	b.w	2ee8c <k_queue_append>
   28c08:	200002c8 	.word	0x200002c8

00028c0c <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
   28c0c:	4802      	ldr	r0, [pc, #8]	; (28c18 <usbd_evt_get+0xc>)
   28c0e:	2200      	movs	r2, #0
   28c10:	2300      	movs	r3, #0
   28c12:	f003 be9d 	b.w	2c950 <z_impl_k_queue_get>
   28c16:	bf00      	nop
   28c18:	200002c8 	.word	0x200002c8

00028c1c <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
   28c1c:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   28c1e:	4c05      	ldr	r4, [pc, #20]	; (28c34 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
   28c20:	f7ff fff4 	bl	28c0c <usbd_evt_get>
		if (ev) {
   28c24:	b120      	cbz	r0, 28c30 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   28c26:	1d01      	adds	r1, r0, #4
   28c28:	4620      	mov	r0, r4
   28c2a:	f006 f877 	bl	2ed1c <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
   28c2e:	e7f7      	b.n	28c20 <usbd_evt_flush+0x4>
}
   28c30:	bd10      	pop	{r4, pc}
   28c32:	bf00      	nop
   28c34:	20000284 	.word	0x20000284

00028c38 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
   28c38:	b507      	push	{r0, r1, r2, lr}
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
   28c3a:	2300      	movs	r3, #0
   28c3c:	480e      	ldr	r0, [pc, #56]	; (28c78 <usbd_evt_alloc+0x40>)
   28c3e:	2200      	movs	r2, #0
   28c40:	a901      	add	r1, sp, #4
   28c42:	f003 fccd 	bl	2c5e0 <k_mem_slab_alloc>
   28c46:	b190      	cbz	r0, 28c6e <usbd_evt_alloc+0x36>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
   28c48:	f7ff ffe8 	bl	28c1c <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   28c4c:	480a      	ldr	r0, [pc, #40]	; (28c78 <usbd_evt_alloc+0x40>)
   28c4e:	2200      	movs	r2, #0
   28c50:	2300      	movs	r3, #0
   28c52:	a901      	add	r1, sp, #4
   28c54:	f003 fcc4 	bl	2c5e0 <k_mem_slab_alloc>
   28c58:	b938      	cbnz	r0, 28c6a <usbd_evt_alloc+0x32>
			LOG_ERR("USBD event memory corrupted");
			__ASSERT_NO_MSG(0);
			return NULL;
		}

		ev = (struct usbd_event *)block.data;
   28c5a:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
   28c5c:	2304      	movs	r3, #4
		ev->block = block;
   28c5e:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   28c60:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   28c62:	f7ff ffcd 	bl	28c00 <usbd_evt_put>
		usbd_work_schedule();
   28c66:	f7ff ffc3 	bl	28bf0 <usbd_work_schedule>

		return NULL;
   28c6a:	2000      	movs	r0, #0
   28c6c:	e001      	b.n	28c72 <usbd_evt_alloc+0x3a>
	}

	ev = (struct usbd_event *)block.data;
   28c6e:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   28c70:	6040      	str	r0, [r0, #4]

	return ev;
}
   28c72:	b003      	add	sp, #12
   28c74:	f85d fb04 	ldr.w	pc, [sp], #4
   28c78:	20000284 	.word	0x20000284

00028c7c <usb_dc_power_event_handler>:

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
	enum usbd_periph_state new_state;

	switch (event) {
   28c7c:	2802      	cmp	r0, #2
{
   28c7e:	b510      	push	{r4, lr}
   28c80:	d811      	bhi.n	28ca6 <usb_dc_power_event_handler+0x2a>
   28c82:	4b09      	ldr	r3, [pc, #36]	; (28ca8 <usb_dc_power_event_handler+0x2c>)
   28c84:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   28c86:	f7ff ffd7 	bl	28c38 <usbd_evt_alloc>
	if (!ev) {
   28c8a:	b160      	cbz	r0, 28ca6 <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   28c8c:	2200      	movs	r2, #0
   28c8e:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   28c90:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   28c92:	f7ff ffb5 	bl	28c00 <usbd_evt_put>
	if (usbd_ctx.attached) {
   28c96:	4b05      	ldr	r3, [pc, #20]	; (28cac <usb_dc_power_event_handler+0x30>)
   28c98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   28c9c:	b11b      	cbz	r3, 28ca6 <usb_dc_power_event_handler+0x2a>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
   28c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   28ca2:	f7ff bfa5 	b.w	28bf0 <usbd_work_schedule>
}
   28ca6:	bd10      	pop	{r4, pc}
   28ca8:	0002fa96 	.word	0x0002fa96
   28cac:	200008b8 	.word	0x200008b8

00028cb0 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
   28cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
   28cb2:	7887      	ldrb	r7, [r0, #2]
{
   28cb4:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   28cb6:	4638      	mov	r0, r7
   28cb8:	f7ff ff6a 	bl	28b90 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   28cbc:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
   28cbe:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   28cc0:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   28cc2:	d512      	bpl.n	28cea <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   28cc4:	2d00      	cmp	r5, #0
   28cc6:	d143      	bne.n	28d50 <usbd_event_transfer_data+0xa0>
		case NRFX_USBD_EP_OK: {
			struct usbd_event *ev = usbd_evt_alloc();
   28cc8:	f7ff ffb6 	bl	28c38 <usbd_evt_alloc>

			if (!ev) {
   28ccc:	4603      	mov	r3, r0
   28cce:	2800      	cmp	r0, #0
   28cd0:	d03e      	beq.n	28d50 <usbd_event_transfer_data+0xa0>

			LOG_DBG("write complete, ep 0x%02x",
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->write_in_progress = false;
			ev->evt_type = USBD_EVT_EP;
   28cd2:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   28cd4:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   28cd6:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   28cd8:	2203      	movs	r2, #3
   28cda:	7302      	strb	r2, [r0, #12]
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->read_pending = true;
			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
			ev->evt.ep_evt.ep = ep_ctx;
   28cdc:	609c      	str	r4, [r3, #8]

			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
			ev->evt.ep_evt.ep = ep_ctx;

			usbd_evt_put(ev);
   28cde:	f7ff ff8f 	bl	28c00 <usbd_evt_put>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
   28ce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
   28ce6:	f7ff bf83 	b.w	28bf0 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   28cea:	b14d      	cbz	r5, 28d00 <usbd_event_transfer_data+0x50>
   28cec:	2d01      	cmp	r5, #1
   28cee:	d12f      	bne.n	28d50 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   28cf0:	f7ff ffa2 	bl	28c38 <usbd_evt_alloc>
			if (!ev) {
   28cf4:	4603      	mov	r3, r0
   28cf6:	b358      	cbz	r0, 28d50 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   28cf8:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   28cfa:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   28cfc:	7305      	strb	r5, [r0, #12]
   28cfe:	e7ed      	b.n	28cdc <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   28d00:	f7ff ff9a 	bl	28c38 <usbd_evt_alloc>
			if (!ev) {
   28d04:	b320      	cbz	r0, 28d50 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   28d06:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   28d08:	4b12      	ldr	r3, [pc, #72]	; (28d54 <usbd_event_transfer_data+0xa4>)
   28d0a:	f012 0f80 	tst.w	r2, #128	; 0x80
   28d0e:	f002 0108 	and.w	r1, r2, #8
   28d12:	d011      	beq.n	28d38 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   28d14:	b141      	cbz	r1, 28d28 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   28d16:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   28d1a:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   28d1c:	2301      	movs	r3, #1
   28d1e:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   28d20:	2302      	movs	r3, #2
   28d22:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   28d24:	6084      	str	r4, [r0, #8]
   28d26:	e7da      	b.n	28cde <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   28d28:	f002 020f 	and.w	r2, r2, #15
   28d2c:	2114      	movs	r1, #20
   28d2e:	fb01 3302 	mla	r3, r1, r2, r3
   28d32:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   28d36:	e7f0      	b.n	28d1a <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   28d38:	b111      	cbz	r1, 28d40 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   28d3a:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   28d3e:	e7ec      	b.n	28d1a <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   28d40:	f002 020f 	and.w	r2, r2, #15
   28d44:	2114      	movs	r1, #20
   28d46:	fb01 3302 	mla	r3, r1, r2, r3
   28d4a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   28d4e:	e7e4      	b.n	28d1a <usbd_event_transfer_data+0x6a>
}
   28d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28d52:	bf00      	nop
   28d54:	40027000 	.word	0x40027000

00028d58 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
   28d58:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
   28d5a:	4812      	ldr	r0, [pc, #72]	; (28da4 <usb_init+0x4c>)
   28d5c:	f002 feb2 	bl	2bac4 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   28d60:	4b11      	ldr	r3, [pc, #68]	; (28da8 <usb_init+0x50>)
   28d62:	4298      	cmp	r0, r3
   28d64:	d11a      	bne.n	28d9c <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   28d66:	4811      	ldr	r0, [pc, #68]	; (28dac <usb_init+0x54>)
   28d68:	f002 fb20 	bl	2b3ac <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   28d6c:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   28d6e:	4810      	ldr	r0, [pc, #64]	; (28db0 <usb_init+0x58>)
   28d70:	f002 fb62 	bl	2b438 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   28d74:	490f      	ldr	r1, [pc, #60]	; (28db4 <usb_init+0x5c>)
   28d76:	4810      	ldr	r0, [pc, #64]	; (28db8 <usb_init+0x60>)
   28d78:	9400      	str	r4, [sp, #0]
   28d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   28d82:	f003 ff5b 	bl	2cc3c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   28d86:	490d      	ldr	r1, [pc, #52]	; (28dbc <usb_init+0x64>)
   28d88:	480b      	ldr	r0, [pc, #44]	; (28db8 <usb_init+0x60>)
   28d8a:	f005 fff6 	bl	2ed7a <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
   28d8e:	480c      	ldr	r0, [pc, #48]	; (28dc0 <usb_init+0x68>)
   28d90:	490c      	ldr	r1, [pc, #48]	; (28dc4 <usb_init+0x6c>)
   28d92:	f006 f8c3 	bl	2ef1c <k_work_init>

	return 0;
   28d96:	4620      	mov	r0, r4
}
   28d98:	b002      	add	sp, #8
   28d9a:	bd10      	pop	{r4, pc}
		return -EIO;
   28d9c:	f06f 0004 	mvn.w	r0, #4
   28da0:	e7fa      	b.n	28d98 <usb_init+0x40>
   28da2:	bf00      	nop
   28da4:	00028e09 	.word	0x00028e09
   28da8:	0bad0000 	.word	0x0bad0000
   28dac:	0002fa99 	.word	0x0002fa99
   28db0:	0002f7a4 	.word	0x0002f7a4
   28db4:	200018b0 	.word	0x200018b0
   28db8:	20000440 	.word	0x20000440
   28dbc:	0002fa8b 	.word	0x0002fa8b
   28dc0:	200008e0 	.word	0x200008e0
   28dc4:	00028f8d 	.word	0x00028f8d

00028dc8 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   28dc8:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   28dca:	490e      	ldr	r1, [pc, #56]	; (28e04 <hfxo_stop.constprop.0.isra.0+0x3c>)
   28dcc:	f3bf 8f5b 	dmb	ish
   28dd0:	2300      	movs	r3, #0
   28dd2:	e851 2f00 	ldrex	r2, [r1]
   28dd6:	2a01      	cmp	r2, #1
   28dd8:	d103      	bne.n	28de2 <hfxo_stop.constprop.0.isra.0+0x1a>
   28dda:	e841 3000 	strex	r0, r3, [r1]
   28dde:	2800      	cmp	r0, #0
   28de0:	d1f7      	bne.n	28dd2 <hfxo_stop.constprop.0.isra.0+0xa>
   28de2:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   28de6:	d10c      	bne.n	28e02 <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   28de8:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   28dec:	3914      	subs	r1, #20
   28dee:	4620      	mov	r0, r4
   28df0:	f005 f841 	bl	2de76 <onoff_cancel>

	if (rv == -EALREADY) {
   28df4:	3078      	adds	r0, #120	; 0x78
   28df6:	d104      	bne.n	28e02 <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
   28df8:	4620      	mov	r0, r4
}
   28dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28dfe:	f005 b815 	b.w	2de2c <onoff_release>
   28e02:	bd10      	pop	{r4, pc}
   28e04:	200008d8 	.word	0x200008d8

00028e08 <usbd_event_handler>:
{
   28e08:	b5f0      	push	{r4, r5, r6, r7, lr}
   28e0a:	4606      	mov	r6, r0
   28e0c:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   28e0e:	2214      	movs	r2, #20
   28e10:	2100      	movs	r1, #0
   28e12:	a803      	add	r0, sp, #12
   28e14:	f005 fa8d 	bl	2e332 <memset>
	switch (p_event->type) {
   28e18:	7833      	ldrb	r3, [r6, #0]
   28e1a:	3b01      	subs	r3, #1
   28e1c:	2b05      	cmp	r3, #5
   28e1e:	d821      	bhi.n	28e64 <usbd_event_handler+0x5c>
   28e20:	e8df f003 	tbb	[pc, r3]
   28e24:	1414037a 	.word	0x1414037a
   28e28:	166a      	.short	0x166a
   28e2a:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   28e2c:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   28e30:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   28e32:	f7ff ff01 	bl	28c38 <usbd_evt_alloc>
		if (!ev) {
   28e36:	4603      	mov	r3, r0
   28e38:	b1a0      	cbz	r0, 28e64 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   28e3a:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   28e3c:	f100 0208 	add.w	r2, r0, #8
   28e40:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   28e44:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   28e48:	4618      	mov	r0, r3
   28e4a:	e01d      	b.n	28e88 <usbd_event_handler+0x80>
	switch (p_event->type) {
   28e4c:	2304      	movs	r3, #4
   28e4e:	e7ed      	b.n	28e2c <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   28e50:	78b7      	ldrb	r7, [r6, #2]
   28e52:	4638      	mov	r0, r7
   28e54:	f7ff fe9c 	bl	28b90 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   28e58:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   28e5a:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   28e5c:	b123      	cbz	r3, 28e68 <usbd_event_handler+0x60>
   28e5e:	3b01      	subs	r3, #1
   28e60:	2b02      	cmp	r3, #2
   28e62:	d943      	bls.n	28eec <usbd_event_handler+0xe4>
}
   28e64:	b009      	add	sp, #36	; 0x24
   28e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   28e68:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
   28e6a:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   28e6c:	d513      	bpl.n	28e96 <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   28e6e:	2d00      	cmp	r5, #0
   28e70:	d1f8      	bne.n	28e64 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   28e72:	f7ff fee1 	bl	28c38 <usbd_evt_alloc>
			if (!ev) {
   28e76:	4603      	mov	r3, r0
   28e78:	2800      	cmp	r0, #0
   28e7a:	d0f3      	beq.n	28e64 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   28e7c:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   28e7e:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   28e80:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   28e82:	2203      	movs	r2, #3
   28e84:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   28e86:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   28e88:	f7ff feba 	bl	28c00 <usbd_evt_put>
}
   28e8c:	b009      	add	sp, #36	; 0x24
   28e8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   28e92:	f7ff bead 	b.w	28bf0 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   28e96:	b155      	cbz	r5, 28eae <usbd_event_handler+0xa6>
   28e98:	2d01      	cmp	r5, #1
   28e9a:	d1e3      	bne.n	28e64 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   28e9c:	f7ff fecc 	bl	28c38 <usbd_evt_alloc>
			if (!ev) {
   28ea0:	4603      	mov	r3, r0
   28ea2:	2800      	cmp	r0, #0
   28ea4:	d0de      	beq.n	28e64 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   28ea6:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   28ea8:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   28eaa:	7305      	strb	r5, [r0, #12]
   28eac:	e7eb      	b.n	28e86 <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   28eae:	f7ff fec3 	bl	28c38 <usbd_evt_alloc>
			if (!ev) {
   28eb2:	4607      	mov	r7, r0
   28eb4:	2800      	cmp	r0, #0
   28eb6:	d0d5      	beq.n	28e64 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   28eb8:	2301      	movs	r3, #1
   28eba:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   28ebc:	2302      	movs	r3, #2
   28ebe:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   28ec0:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   28ec2:	f104 010c 	add.w	r1, r4, #12
   28ec6:	78b0      	ldrb	r0, [r6, #2]
   28ec8:	f005 fead 	bl	2ec26 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   28ecc:	4a13      	ldr	r2, [pc, #76]	; (28f1c <usbd_event_handler+0x114>)
   28ece:	68e1      	ldr	r1, [r4, #12]
   28ed0:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   28ed4:	428b      	cmp	r3, r1
   28ed6:	d906      	bls.n	28ee6 <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   28ed8:	1a5b      	subs	r3, r3, r1
   28eda:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   28ede:	f003 f82d 	bl	2bf3c <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   28ee2:	4638      	mov	r0, r7
   28ee4:	e7d0      	b.n	28e88 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   28ee6:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   28eea:	e7fa      	b.n	28ee2 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   28eec:	4630      	mov	r0, r6
}
   28eee:	b009      	add	sp, #36	; 0x24
   28ef0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   28ef4:	f7ff bedc 	b.w	28cb0 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   28ef8:	a801      	add	r0, sp, #4
   28efa:	f002 fff9 	bl	2bef0 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   28efe:	f89d 3005 	ldrb.w	r3, [sp, #5]
   28f02:	2b05      	cmp	r3, #5
   28f04:	d104      	bne.n	28f10 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   28f06:	f89d 3004 	ldrb.w	r3, [sp, #4]
   28f0a:	f013 0f60 	tst.w	r3, #96	; 0x60
   28f0e:	d0a9      	beq.n	28e64 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   28f10:	4b03      	ldr	r3, [pc, #12]	; (28f20 <usbd_event_handler+0x118>)
   28f12:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   28f14:	2401      	movs	r4, #1
   28f16:	e78c      	b.n	28e32 <usbd_event_handler+0x2a>
	switch (p_event->type) {
   28f18:	2402      	movs	r4, #2
   28f1a:	e78a      	b.n	28e32 <usbd_event_handler+0x2a>
   28f1c:	200008b8 	.word	0x200008b8
   28f20:	20000a24 	.word	0x20000a24

00028f24 <eps_ctx_init>:
{
   28f24:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   28f26:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   28f28:	f064 007f 	orn	r0, r4, #127	; 0x7f
   28f2c:	b2c0      	uxtb	r0, r0
   28f2e:	f7ff fe2f 	bl	28b90 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   28f32:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   28f34:	f005 fa31 	bl	2e39a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   28f38:	2c08      	cmp	r4, #8
   28f3a:	d1f5      	bne.n	28f28 <eps_ctx_init+0x4>
   28f3c:	4d0e      	ldr	r5, [pc, #56]	; (28f78 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   28f3e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   28f40:	b2e0      	uxtb	r0, r4
   28f42:	f7ff fe25 	bl	28b90 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   28f46:	6903      	ldr	r3, [r0, #16]
   28f48:	b903      	cbnz	r3, 28f4c <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   28f4a:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   28f4c:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   28f4e:	f005 fa24 	bl	2e39a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   28f52:	2c08      	cmp	r4, #8
   28f54:	f105 0540 	add.w	r5, r5, #64	; 0x40
   28f58:	d1f2      	bne.n	28f40 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   28f5a:	4808      	ldr	r0, [pc, #32]	; (28f7c <eps_ctx_init+0x58>)
   28f5c:	f005 fa1d 	bl	2e39a <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   28f60:	4b07      	ldr	r3, [pc, #28]	; (28f80 <eps_ctx_init+0x5c>)
   28f62:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
   28f66:	b912      	cbnz	r2, 28f6e <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   28f68:	4a06      	ldr	r2, [pc, #24]	; (28f84 <eps_ctx_init+0x60>)
   28f6a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   28f6e:	4806      	ldr	r0, [pc, #24]	; (28f88 <eps_ctx_init+0x64>)
   28f70:	f005 fa13 	bl	2e39a <ep_ctx_reset>
}
   28f74:	2000      	movs	r0, #0
   28f76:	bd38      	pop	{r3, r4, r5, pc}
   28f78:	20000f48 	.word	0x20000f48
   28f7c:	20000a04 	.word	0x20000a04
   28f80:	200008b8 	.word	0x200008b8
   28f84:	20000b48 	.word	0x20000b48
   28f88:	20000b24 	.word	0x20000b24

00028f8c <usbd_work_handler>:
{
   28f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   28f90:	4ca7      	ldr	r4, [pc, #668]	; (29230 <usbd_work_handler+0x2a4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   28f92:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 29234 <usbd_work_handler+0x2a8>
{
   28f96:	b085      	sub	sp, #20
   28f98:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   28f9a:	f7ff fe37 	bl	28c0c <usbd_evt_get>
   28f9e:	b910      	cbnz	r0, 28fa6 <usbd_work_handler+0x1a>
}
   28fa0:	b005      	add	sp, #20
   28fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   28fa6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   28faa:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   28fac:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   28fb0:	b93b      	cbnz	r3, 28fc2 <usbd_work_handler+0x36>
   28fb2:	2a00      	cmp	r2, #0
   28fb4:	f000 8088 	beq.w	290c8 <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   28fb8:	489e      	ldr	r0, [pc, #632]	; (29234 <usbd_work_handler+0x2a8>)
   28fba:	4649      	mov	r1, r9
   28fbc:	f005 feae 	bl	2ed1c <k_mem_slab_free>
}
   28fc0:	e7eb      	b.n	28f9a <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   28fc2:	2a04      	cmp	r2, #4
   28fc4:	d844      	bhi.n	29050 <usbd_work_handler+0xc4>
   28fc6:	e8df f012 	tbh	[pc, r2, lsl #1]
   28fca:	007f      	.short	0x007f
   28fcc:	01020005 	.word	0x01020005
   28fd0:	01410118 	.word	0x01410118
	switch (ep_evt->evt_type) {
   28fd4:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   28fd6:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   28fd8:	2b03      	cmp	r3, #3
   28fda:	d839      	bhi.n	29050 <usbd_work_handler+0xc4>
   28fdc:	e8df f003 	tbb	[pc, r3]
   28fe0:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   28fe4:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   28fe6:	2208      	movs	r2, #8
   28fe8:	2100      	movs	r1, #0
   28fea:	4630      	mov	r0, r6
   28fec:	f005 f9a1 	bl	2e332 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   28ff0:	4b91      	ldr	r3, [pc, #580]	; (29238 <usbd_work_handler+0x2ac>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   28ff2:	4892      	ldr	r0, [pc, #584]	; (2923c <usbd_work_handler+0x2b0>)
   28ff4:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   28ff8:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   28ffa:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   28ffe:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   29000:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   29004:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   29008:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   2900c:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   2900e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   29012:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   29016:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   2901a:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   2901c:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   29020:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   29024:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   29028:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   2902a:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   2902c:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   2902e:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   29030:	f005 f974 	bl	2e31c <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   29034:	682b      	ldr	r3, [r5, #0]
   29036:	7a68      	ldrb	r0, [r5, #9]
   29038:	2100      	movs	r1, #0
   2903a:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   2903c:	f996 3000 	ldrsb.w	r3, [r6]
   29040:	2b00      	cmp	r3, #0
   29042:	db08      	blt.n	29056 <usbd_work_handler+0xca>
   29044:	88f3      	ldrh	r3, [r6, #6]
   29046:	b133      	cbz	r3, 29056 <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
   29048:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   2904c:	f002 ff76 	bl	2bf3c <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   29050:	4649      	mov	r1, r9
   29052:	4640      	mov	r0, r8
   29054:	e7b2      	b.n	28fbc <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
   29056:	2300      	movs	r3, #0
   29058:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   2905c:	e7f8      	b.n	29050 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
   2905e:	7f6b      	ldrb	r3, [r5, #29]
   29060:	2b00      	cmp	r3, #0
   29062:	d0f5      	beq.n	29050 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
   29064:	7f2b      	ldrb	r3, [r5, #28]
   29066:	2b00      	cmp	r3, #0
   29068:	d0f2      	beq.n	29050 <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
   2906a:	2600      	movs	r6, #0
   2906c:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2906e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29072:	4873      	ldr	r0, [pc, #460]	; (29240 <usbd_work_handler+0x2b4>)
	ep_ctx->read_complete = false;
   29074:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   29076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2907a:	f005 f9a1 	bl	2e3c0 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   2907e:	696b      	ldr	r3, [r5, #20]
   29080:	9301      	str	r3, [sp, #4]
   29082:	686b      	ldr	r3, [r5, #4]
   29084:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   29088:	a901      	add	r1, sp, #4
   2908a:	7a68      	ldrb	r0, [r5, #9]
   2908c:	f002 fd5c 	bl	2bb48 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   29090:	486b      	ldr	r0, [pc, #428]	; (29240 <usbd_work_handler+0x2b4>)
   29092:	f005 f997 	bl	2e3c4 <k_mutex_unlock.isra.0>
   29096:	e7db      	b.n	29050 <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   29098:	682b      	ldr	r3, [r5, #0]
   2909a:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   2909c:	7a68      	ldrb	r0, [r5, #9]
   2909e:	4798      	blx	r3
		break;
   290a0:	e7d6      	b.n	29050 <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   290a2:	7aab      	ldrb	r3, [r5, #10]
   290a4:	b96b      	cbnz	r3, 290c2 <usbd_work_handler+0x136>
   290a6:	7feb      	ldrb	r3, [r5, #31]
   290a8:	b95b      	cbnz	r3, 290c2 <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   290aa:	4865      	ldr	r0, [pc, #404]	; (29240 <usbd_work_handler+0x2b4>)
   290ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   290b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   290b4:	f005 f984 	bl	2e3c0 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   290b8:	f002 ff70 	bl	2bf9c <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   290bc:	4860      	ldr	r0, [pc, #384]	; (29240 <usbd_work_handler+0x2b4>)
   290be:	f005 f981 	bl	2e3c4 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   290c2:	682b      	ldr	r3, [r5, #0]
   290c4:	2102      	movs	r1, #2
   290c6:	e7e9      	b.n	2909c <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
   290c8:	7a02      	ldrb	r2, [r0, #8]
   290ca:	2a04      	cmp	r2, #4
   290cc:	d8c0      	bhi.n	29050 <usbd_work_handler+0xc4>
   290ce:	e8df f002 	tbb	[pc, r2]
   290d2:	0359      	.short	0x0359
   290d4:	6723      	.short	0x6723
   290d6:	73          	.byte	0x73
   290d7:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   290d8:	f002 fcbe 	bl	2ba58 <nrfx_usbd_is_enabled>
   290dc:	4605      	mov	r5, r0
   290de:	2800      	cmp	r0, #0
   290e0:	d1b6      	bne.n	29050 <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
   290e2:	f002 fbf5 	bl	2b8d0 <nrfx_usbd_enable>
   290e6:	f3bf 8f5b 	dmb	ish
   290ea:	4956      	ldr	r1, [pc, #344]	; (29244 <usbd_work_handler+0x2b8>)
   290ec:	2301      	movs	r3, #1
   290ee:	e851 2f00 	ldrex	r2, [r1]
   290f2:	2a00      	cmp	r2, #0
   290f4:	d103      	bne.n	290fe <usbd_work_handler+0x172>
   290f6:	e841 3000 	strex	r0, r3, [r1]
   290fa:	2800      	cmp	r0, #0
   290fc:	d1f7      	bne.n	290ee <usbd_work_handler+0x162>
   290fe:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   29102:	d1a5      	bne.n	29050 <usbd_work_handler+0xc4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   29104:	f841 5c08 	str.w	r5, [r1, #-8]
   29108:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   2910c:	69e0      	ldr	r0, [r4, #28]
   2910e:	6163      	str	r3, [r4, #20]
   29110:	3914      	subs	r1, #20
   29112:	f004 fe33 	bl	2dd7c <onoff_request>
   29116:	e79b      	b.n	29050 <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
   29118:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   2911a:	f065 007f 	orn	r0, r5, #127	; 0x7f
   2911e:	b2c0      	uxtb	r0, r0
   29120:	f7ff fd36 	bl	28b90 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   29124:	7a03      	ldrb	r3, [r0, #8]
   29126:	b113      	cbz	r3, 2912e <usbd_work_handler+0x1a2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   29128:	7a40      	ldrb	r0, [r0, #9]
   2912a:	f003 f8e7 	bl	2c2fc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   2912e:	3501      	adds	r5, #1
   29130:	2d08      	cmp	r5, #8
   29132:	d1f2      	bne.n	2911a <usbd_work_handler+0x18e>
		if (ep_ctx->cfg.en) {
   29134:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   29138:	b11b      	cbz	r3, 29142 <usbd_work_handler+0x1b6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2913a:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   2913e:	f003 f8dd 	bl	2c2fc <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   29142:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   29144:	b2e8      	uxtb	r0, r5
   29146:	f7ff fd23 	bl	28b90 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2914a:	7a03      	ldrb	r3, [r0, #8]
   2914c:	b113      	cbz	r3, 29154 <usbd_work_handler+0x1c8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2914e:	7a40      	ldrb	r0, [r0, #9]
   29150:	f003 f8d4 	bl	2c2fc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   29154:	3501      	adds	r5, #1
   29156:	2d08      	cmp	r5, #8
   29158:	d1f4      	bne.n	29144 <usbd_work_handler+0x1b8>
		if (ep_ctx->cfg.en) {
   2915a:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   2915e:	b11b      	cbz	r3, 29168 <usbd_work_handler+0x1dc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   29160:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   29164:	f003 f8ca 	bl	2c2fc <nrfx_usbd_ep_enable>
		nrfx_usbd_start(IS_ENABLED(CONFIG_USB_DEVICE_SOF));
   29168:	2000      	movs	r0, #0
   2916a:	f002 fc57 	bl	2ba1c <nrfx_usbd_start>
		ctx->ready = true;
   2916e:	2301      	movs	r3, #1
   29170:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   29174:	6823      	ldr	r3, [r4, #0]
   29176:	2b00      	cmp	r3, #0
   29178:	f43f af6a 	beq.w	29050 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   2917c:	2100      	movs	r1, #0
   2917e:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   29180:	4798      	blx	r3
   29182:	e765      	b.n	29050 <usbd_work_handler+0xc4>
		ctx->ready = false;
   29184:	2500      	movs	r5, #0
   29186:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   2918a:	f003 f873 	bl	2c274 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   2918e:	f7ff fe1b 	bl	28dc8 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   29192:	6823      	ldr	r3, [r4, #0]
   29194:	2b00      	cmp	r3, #0
   29196:	f43f af5b 	beq.w	29050 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   2919a:	4629      	mov	r1, r5
   2919c:	2004      	movs	r0, #4
   2919e:	e7ef      	b.n	29180 <usbd_work_handler+0x1f4>
		if (dev_ready()) {
   291a0:	2b00      	cmp	r3, #0
   291a2:	f43f af55 	beq.w	29050 <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
   291a6:	f002 fc61 	bl	2ba6c <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   291aa:	6823      	ldr	r3, [r4, #0]
   291ac:	2b00      	cmp	r3, #0
   291ae:	f43f af4f 	beq.w	29050 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   291b2:	2100      	movs	r1, #0
   291b4:	2005      	movs	r0, #5
   291b6:	e7e3      	b.n	29180 <usbd_work_handler+0x1f4>
		if (ctx->status_cb && dev_ready()) {
   291b8:	6822      	ldr	r2, [r4, #0]
   291ba:	2a00      	cmp	r2, #0
   291bc:	f43f af48 	beq.w	29050 <usbd_work_handler+0xc4>
   291c0:	2b00      	cmp	r3, #0
   291c2:	f43f af45 	beq.w	29050 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
   291c6:	2100      	movs	r1, #0
   291c8:	2006      	movs	r0, #6
   291ca:	4790      	blx	r2
   291cc:	e740      	b.n	29050 <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   291ce:	f107 0510 	add.w	r5, r7, #16
   291d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   291d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   291da:	4628      	mov	r0, r5
   291dc:	f005 f8f0 	bl	2e3c0 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   291e0:	f7ff fea0 	bl	28f24 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   291e4:	4628      	mov	r0, r5
   291e6:	f005 f8ed 	bl	2e3c4 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   291ea:	f857 3c28 	ldr.w	r3, [r7, #-40]
   291ee:	2b00      	cmp	r3, #0
   291f0:	f43f af2e 	beq.w	29050 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
   291f4:	2100      	movs	r1, #0
   291f6:	2001      	movs	r0, #1
   291f8:	e7c2      	b.n	29180 <usbd_work_handler+0x1f4>
	if (ep_ctx->cfg.en) {
   291fa:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   291fe:	b17b      	cbz	r3, 29220 <usbd_work_handler+0x294>
		ep_ctx->read_pending = true;
   29200:	2501      	movs	r5, #1
   29202:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   29206:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   2920a:	f7ff fd15 	bl	28c38 <usbd_evt_alloc>
		if (!ev) {
   2920e:	b138      	cbz	r0, 29220 <usbd_work_handler+0x294>
		ev->evt.ep_evt.ep = ep_ctx;
   29210:	4a0d      	ldr	r2, [pc, #52]	; (29248 <usbd_work_handler+0x2bc>)
		ev->evt_type = USBD_EVT_EP;
   29212:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   29214:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   29216:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   29218:	f7ff fcf2 	bl	28c00 <usbd_evt_put>
		usbd_work_schedule();
   2921c:	f7ff fce8 	bl	28bf0 <usbd_work_schedule>
			if (ctx->status_cb) {
   29220:	f857 3c28 	ldr.w	r3, [r7, #-40]
   29224:	2b00      	cmp	r3, #0
   29226:	f43f af13 	beq.w	29050 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
   2922a:	2100      	movs	r1, #0
   2922c:	200a      	movs	r0, #10
   2922e:	e7a7      	b.n	29180 <usbd_work_handler+0x1f4>
   29230:	200008b8 	.word	0x200008b8
   29234:	20000284 	.word	0x20000284
   29238:	40027000 	.word	0x40027000
   2923c:	200008bc 	.word	0x200008bc
   29240:	200008f0 	.word	0x200008f0
   29244:	200008d8 	.word	0x200008d8
   29248:	20000b24 	.word	0x20000b24
	nrfx_power_usbevt_disable();
   2924c:	f005 fc62 	bl	2eb14 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   29250:	f003 f810 	bl	2c274 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   29254:	f002 fb32 	bl	2b8bc <nrfx_usbd_uninit>
	usbd_evt_flush();
   29258:	f7ff fce0 	bl	28c1c <usbd_evt_flush>
	ret = eps_ctx_init();
   2925c:	f7ff fe62 	bl	28f24 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   29260:	f005 fc51 	bl	2eb06 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   29264:	4801      	ldr	r0, [pc, #4]	; (2926c <usbd_work_handler+0x2e0>)
   29266:	f002 fc2d 	bl	2bac4 <nrfx_usbd_init>
}
   2926a:	e6f1      	b.n	29050 <usbd_work_handler+0xc4>
   2926c:	00028e09 	.word	0x00028e09

00029270 <usb_dc_attach>:
{
   29270:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   29272:	4d16      	ldr	r5, [pc, #88]	; (292cc <usb_dc_attach+0x5c>)
   29274:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   29278:	bb2c      	cbnz	r4, 292c6 <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
   2927a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2927e:	f005 fd90 	bl	2eda2 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   29282:	4620      	mov	r0, r4
   29284:	f000 fce6 	bl	29c54 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   29288:	4622      	mov	r2, r4
   2928a:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
   2928c:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2928e:	2027      	movs	r0, #39	; 0x27
   29290:	f7ff f93e 	bl	28510 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
   29294:	f005 fc37 	bl	2eb06 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   29298:	f7ff fe44 	bl	28f24 <eps_ctx_init>
	if (ret == 0) {
   2929c:	4604      	mov	r4, r0
   2929e:	b910      	cbnz	r0, 292a6 <usb_dc_attach+0x36>
		ctx->attached = true;
   292a0:	2301      	movs	r3, #1
   292a2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   292a6:	4b0a      	ldr	r3, [pc, #40]	; (292d0 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   292a8:	681b      	ldr	r3, [r3, #0]
   292aa:	b10b      	cbz	r3, 292b0 <usb_dc_attach+0x40>
		usbd_work_schedule();
   292ac:	f7ff fca0 	bl	28bf0 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   292b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   292b4:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   292b8:	07db      	lsls	r3, r3, #31
   292ba:	d502      	bpl.n	292c2 <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   292bc:	2000      	movs	r0, #0
   292be:	f7ff fcdd 	bl	28c7c <usb_dc_power_event_handler>
}
   292c2:	4620      	mov	r0, r4
   292c4:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   292c6:	2400      	movs	r4, #0
   292c8:	e7fb      	b.n	292c2 <usb_dc_attach+0x52>
   292ca:	bf00      	nop
   292cc:	200008b8 	.word	0x200008b8
   292d0:	200002c8 	.word	0x200002c8

000292d4 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   292d4:	4b07      	ldr	r3, [pc, #28]	; (292f4 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   292d6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   292da:	b13a      	cbz	r2, 292ec <usb_dc_set_address+0x18>
   292dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
   292e0:	2b00      	cmp	r3, #0
   292e2:	bf14      	ite	ne
   292e4:	2000      	movne	r0, #0
   292e6:	f06f 0012 	mvneq.w	r0, #18
   292ea:	4770      	bx	lr
   292ec:	f06f 0012 	mvn.w	r0, #18
}
   292f0:	4770      	bx	lr
   292f2:	bf00      	nop
   292f4:	200008b8 	.word	0x200008b8

000292f8 <usb_dc_ep_configure>:
{
   292f8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   292fa:	4b10      	ldr	r3, [pc, #64]	; (2933c <usb_dc_ep_configure+0x44>)
	if (!dev_attached()) {
   292fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   29300:	4604      	mov	r4, r0
	if (!dev_attached()) {
   29302:	b1c3      	cbz	r3, 29336 <usb_dc_ep_configure+0x3e>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   29304:	7805      	ldrb	r5, [r0, #0]
   29306:	4628      	mov	r0, r5
   29308:	f7ff fc42 	bl	28b90 <endpoint_ctx>
	if (!ep_ctx) {
   2930c:	b910      	cbnz	r0, 29314 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   2930e:	f06f 0015 	mvn.w	r0, #21
}
   29312:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   29314:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   29316:	7923      	ldrb	r3, [r4, #4]
   29318:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   2931a:	8863      	ldrh	r3, [r4, #2]
   2931c:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   2931e:	7820      	ldrb	r0, [r4, #0]
   29320:	8861      	ldrh	r1, [r4, #2]
   29322:	f010 0f08 	tst.w	r0, #8
   29326:	d102      	bne.n	2932e <usb_dc_ep_configure+0x36>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   29328:	1e4b      	subs	r3, r1, #1
   2932a:	420b      	tst	r3, r1
   2932c:	d1ef      	bne.n	2930e <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   2932e:	f005 fc75 	bl	2ec1c <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   29332:	2000      	movs	r0, #0
   29334:	e7ed      	b.n	29312 <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   29336:	f06f 0012 	mvn.w	r0, #18
   2933a:	e7ea      	b.n	29312 <usb_dc_ep_configure+0x1a>
   2933c:	200008b8 	.word	0x200008b8

00029340 <usb_dc_ep_set_stall>:
{
   29340:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   29342:	4b12      	ldr	r3, [pc, #72]	; (2938c <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   29344:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   29348:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   2934a:	b1ca      	cbz	r2, 29380 <usb_dc_ep_set_stall+0x40>
   2934c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   29350:	b1b3      	cbz	r3, 29380 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   29352:	f7ff fc1d 	bl	28b90 <endpoint_ctx>
	if (!ep_ctx) {
   29356:	4604      	mov	r4, r0
   29358:	b1a8      	cbz	r0, 29386 <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   2935a:	7a83      	ldrb	r3, [r0, #10]
   2935c:	2b01      	cmp	r3, #1
   2935e:	d012      	beq.n	29386 <usb_dc_ep_set_stall+0x46>
   29360:	d907      	bls.n	29372 <usb_dc_ep_set_stall+0x32>
   29362:	3b02      	subs	r3, #2
   29364:	2b01      	cmp	r3, #1
   29366:	d907      	bls.n	29378 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   29368:	6963      	ldr	r3, [r4, #20]
   2936a:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   2936c:	2000      	movs	r0, #0
   2936e:	60e0      	str	r0, [r4, #12]
}
   29370:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
   29372:	f002 fe1b 	bl	2bfac <nrfx_usbd_setup_stall>
		break;
   29376:	e7f7      	b.n	29368 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   29378:	4628      	mov	r0, r5
   2937a:	f002 fd8b 	bl	2be94 <nrfx_usbd_ep_stall>
		break;
   2937e:	e7f3      	b.n	29368 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   29380:	f06f 0012 	mvn.w	r0, #18
   29384:	e7f4      	b.n	29370 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   29386:	f06f 0015 	mvn.w	r0, #21
   2938a:	e7f1      	b.n	29370 <usb_dc_ep_set_stall+0x30>
   2938c:	200008b8 	.word	0x200008b8

00029390 <usb_dc_ep_clear_stall>:
{
   29390:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   29392:	4b0e      	ldr	r3, [pc, #56]	; (293cc <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   29394:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   29398:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   2939a:	b182      	cbz	r2, 293be <usb_dc_ep_clear_stall+0x2e>
   2939c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   293a0:	b16b      	cbz	r3, 293be <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   293a2:	f7ff fbf5 	bl	28b90 <endpoint_ctx>
	if (!ep_ctx) {
   293a6:	b168      	cbz	r0, 293c4 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   293a8:	f015 0408 	ands.w	r4, r5, #8
   293ac:	d10a      	bne.n	293c4 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   293ae:	4628      	mov	r0, r5
   293b0:	f002 fd92 	bl	2bed8 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   293b4:	4628      	mov	r0, r5
   293b6:	f002 fff5 	bl	2c3a4 <nrfx_usbd_ep_stall_clear>
	return 0;
   293ba:	4620      	mov	r0, r4
}
   293bc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   293be:	f06f 0012 	mvn.w	r0, #18
   293c2:	e7fb      	b.n	293bc <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   293c4:	f06f 0015 	mvn.w	r0, #21
   293c8:	e7f8      	b.n	293bc <usb_dc_ep_clear_stall+0x2c>
   293ca:	bf00      	nop
   293cc:	200008b8 	.word	0x200008b8

000293d0 <usb_dc_ep_is_stalled>:
{
   293d0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   293d2:	4b0c      	ldr	r3, [pc, #48]	; (29404 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   293d4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   293d8:	4605      	mov	r5, r0
   293da:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   293dc:	b162      	cbz	r2, 293f8 <usb_dc_ep_is_stalled+0x28>
   293de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   293e2:	b14b      	cbz	r3, 293f8 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   293e4:	f7ff fbd4 	bl	28b90 <endpoint_ctx>
	if (!ep_ctx) {
   293e8:	b148      	cbz	r0, 293fe <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   293ea:	b144      	cbz	r4, 293fe <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   293ec:	4628      	mov	r0, r5
   293ee:	f002 fd59 	bl	2bea4 <nrfx_usbd_ep_stall_check>
   293f2:	7020      	strb	r0, [r4, #0]
	return 0;
   293f4:	2000      	movs	r0, #0
}
   293f6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   293f8:	f06f 0012 	mvn.w	r0, #18
   293fc:	e7fb      	b.n	293f6 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   293fe:	f06f 0015 	mvn.w	r0, #21
   29402:	e7f8      	b.n	293f6 <usb_dc_ep_is_stalled+0x26>
   29404:	200008b8 	.word	0x200008b8

00029408 <usb_dc_ep_enable>:
{
   29408:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   2940a:	4e13      	ldr	r6, [pc, #76]	; (29458 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   2940c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
   29410:	4604      	mov	r4, r0
	if (!dev_attached()) {
   29412:	b1c3      	cbz	r3, 29446 <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
   29414:	f7ff fbbc 	bl	28b90 <endpoint_ctx>
	if (!ep_ctx) {
   29418:	4605      	mov	r5, r0
   2941a:	b1b8      	cbz	r0, 2944c <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   2941c:	0723      	lsls	r3, r4, #28
   2941e:	d405      	bmi.n	2942c <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   29420:	4620      	mov	r0, r4
   29422:	f002 fd59 	bl	2bed8 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   29426:	4620      	mov	r0, r4
   29428:	f002 ffbc 	bl	2c3a4 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   2942c:	7a2b      	ldrb	r3, [r5, #8]
   2942e:	b983      	cbnz	r3, 29452 <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
   29430:	2301      	movs	r3, #1
   29432:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   29434:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
   29438:	b90b      	cbnz	r3, 2943e <usb_dc_ep_enable+0x36>
	return 0;
   2943a:	2000      	movs	r0, #0
}
   2943c:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   2943e:	4620      	mov	r0, r4
   29440:	f002 ff5c 	bl	2c2fc <nrfx_usbd_ep_enable>
   29444:	e7f9      	b.n	2943a <usb_dc_ep_enable+0x32>
		return -ENODEV;
   29446:	f06f 0012 	mvn.w	r0, #18
   2944a:	e7f7      	b.n	2943c <usb_dc_ep_enable+0x34>
		return -EINVAL;
   2944c:	f06f 0015 	mvn.w	r0, #21
   29450:	e7f4      	b.n	2943c <usb_dc_ep_enable+0x34>
		return -EALREADY;
   29452:	f06f 0077 	mvn.w	r0, #119	; 0x77
   29456:	e7f1      	b.n	2943c <usb_dc_ep_enable+0x34>
   29458:	200008b8 	.word	0x200008b8

0002945c <usb_dc_ep_write>:
{
   2945c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   29460:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 29548 <usb_dc_ep_write+0xec>
{
   29464:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
   29466:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   2946a:	b085      	sub	sp, #20
   2946c:	4607      	mov	r7, r0
   2946e:	4689      	mov	r9, r1
   29470:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
   29472:	2b00      	cmp	r3, #0
   29474:	d061      	beq.n	2953a <usb_dc_ep_write+0xde>
   29476:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   2947a:	2b00      	cmp	r3, #0
   2947c:	d05d      	beq.n	2953a <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   2947e:	0603      	lsls	r3, r0, #24
   29480:	d55e      	bpl.n	29540 <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
   29482:	f7ff fb85 	bl	28b90 <endpoint_ctx>
	if (!ep_ctx) {
   29486:	4604      	mov	r4, r0
   29488:	2800      	cmp	r0, #0
   2948a:	d059      	beq.n	29540 <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
   2948c:	7a03      	ldrb	r3, [r0, #8]
   2948e:	2b00      	cmp	r3, #0
   29490:	d056      	beq.n	29540 <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   29492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2949a:	f108 0038 	add.w	r0, r8, #56	; 0x38
   2949e:	f004 ff8f 	bl	2e3c0 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   294a2:	7fa3      	ldrb	r3, [r4, #30]
   294a4:	b14b      	cbz	r3, 294ba <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   294a6:	f108 0038 	add.w	r0, r8, #56	; 0x38
   294aa:	f004 ff8b 	bl	2e3c4 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   294ae:	f06f 040a 	mvn.w	r4, #10
}
   294b2:	4620      	mov	r0, r4
   294b4:	b005      	add	sp, #20
   294b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   294ba:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
   294bc:	b1c5      	cbz	r5, 294f0 <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   294be:	b33b      	cbz	r3, 29510 <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
   294c0:	2301      	movs	r3, #1
   294c2:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   294c4:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   294c8:	a901      	add	r1, sp, #4
   294ca:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   294cc:	e9cd 9501 	strd	r9, r5, [sp, #4]
   294d0:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   294d4:	f002 fb38 	bl	2bb48 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   294d8:	4b1c      	ldr	r3, [pc, #112]	; (2954c <usb_dc_ep_write+0xf0>)
   294da:	4298      	cmp	r0, r3
   294dc:	d029      	beq.n	29532 <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
   294de:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
   294e2:	bb1e      	cbnz	r6, 2952c <usb_dc_ep_write+0xd0>
		result = -EIO;
   294e4:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
   294e8:	4819      	ldr	r0, [pc, #100]	; (29550 <usb_dc_ep_write+0xf4>)
   294ea:	f004 ff6b 	bl	2e3c4 <k_mutex_unlock.isra.0>
	return result;
   294ee:	e7e0      	b.n	294b2 <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
   294f0:	7fe2      	ldrb	r2, [r4, #31]
   294f2:	b102      	cbz	r2, 294f6 <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
   294f4:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   294f6:	2b00      	cmp	r3, #0
   294f8:	d1e2      	bne.n	294c0 <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   294fa:	f002 fd5f 	bl	2bfbc <nrfx_usbd_last_setup_dir_get>
   294fe:	42b8      	cmp	r0, r7
   29500:	d0de      	beq.n	294c0 <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
   29502:	f002 fd4b 	bl	2bf9c <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   29506:	4812      	ldr	r0, [pc, #72]	; (29550 <usb_dc_ep_write+0xf4>)
   29508:	f004 ff5c 	bl	2e3c4 <k_mutex_unlock.isra.0>
		return 0;
   2950c:	2400      	movs	r4, #0
   2950e:	e7d0      	b.n	294b2 <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   29510:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   29514:	42ab      	cmp	r3, r5
   29516:	d9f0      	bls.n	294fa <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   29518:	6862      	ldr	r2, [r4, #4]
   2951a:	fbb5 f3f2 	udiv	r3, r5, r2
   2951e:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   29522:	2b00      	cmp	r3, #0
   29524:	d1e9      	bne.n	294fa <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
   29526:	2301      	movs	r3, #1
   29528:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   2952a:	e7e6      	b.n	294fa <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
   2952c:	f8c6 8000 	str.w	r8, [r6]
   29530:	e7d8      	b.n	294e4 <usb_dc_ep_write+0x88>
		if (ret_bytes) {
   29532:	b106      	cbz	r6, 29536 <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
   29534:	6035      	str	r5, [r6, #0]
	int result = 0;
   29536:	2400      	movs	r4, #0
   29538:	e7d6      	b.n	294e8 <usb_dc_ep_write+0x8c>
		return -ENODEV;
   2953a:	f06f 0412 	mvn.w	r4, #18
   2953e:	e7b8      	b.n	294b2 <usb_dc_ep_write+0x56>
		return -EINVAL;
   29540:	f06f 0415 	mvn.w	r4, #21
   29544:	e7b5      	b.n	294b2 <usb_dc_ep_write+0x56>
   29546:	bf00      	nop
   29548:	200008b8 	.word	0x200008b8
   2954c:	0bad0000 	.word	0x0bad0000
   29550:	200008f0 	.word	0x200008f0

00029554 <usb_dc_ep_read_wait>:
{
   29554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29558:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   2955a:	4b20      	ldr	r3, [pc, #128]	; (295dc <usb_dc_ep_read_wait+0x88>)
{
   2955c:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   2955e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   29562:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   29564:	2a00      	cmp	r2, #0
   29566:	d033      	beq.n	295d0 <usb_dc_ep_read_wait+0x7c>
   29568:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   2956c:	b383      	cbz	r3, 295d0 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   2956e:	0603      	lsls	r3, r0, #24
   29570:	d431      	bmi.n	295d6 <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   29572:	b901      	cbnz	r1, 29576 <usb_dc_ep_read_wait+0x22>
   29574:	bb7f      	cbnz	r7, 295d6 <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   29576:	f7ff fb0b 	bl	28b90 <endpoint_ctx>
	if (!ep_ctx) {
   2957a:	4604      	mov	r4, r0
   2957c:	b358      	cbz	r0, 295d6 <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   2957e:	7a03      	ldrb	r3, [r0, #8]
   29580:	b34b      	cbz	r3, 295d6 <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   29582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29586:	4816      	ldr	r0, [pc, #88]	; (295e0 <usb_dc_ep_read_wait+0x8c>)
   29588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2958c:	f004 ff18 	bl	2e3c0 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   29590:	68e3      	ldr	r3, [r4, #12]
   29592:	429f      	cmp	r7, r3
   29594:	46b8      	mov	r8, r7
   29596:	bf28      	it	cs
   29598:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   2959a:	b946      	cbnz	r6, 295ae <usb_dc_ep_read_wait+0x5a>
   2959c:	b93f      	cbnz	r7, 295ae <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   2959e:	b105      	cbz	r5, 295a2 <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   295a0:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   295a2:	480f      	ldr	r0, [pc, #60]	; (295e0 <usb_dc_ep_read_wait+0x8c>)
   295a4:	f004 ff0e 	bl	2e3c4 <k_mutex_unlock.isra.0>
		return 0;
   295a8:	2000      	movs	r0, #0
}
   295aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   295ae:	69a1      	ldr	r1, [r4, #24]
   295b0:	4642      	mov	r2, r8
   295b2:	4630      	mov	r0, r6
   295b4:	f004 feb2 	bl	2e31c <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   295b8:	69a3      	ldr	r3, [r4, #24]
   295ba:	4443      	add	r3, r8
   295bc:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   295be:	68e3      	ldr	r3, [r4, #12]
   295c0:	eba3 0308 	sub.w	r3, r3, r8
   295c4:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   295c6:	2d00      	cmp	r5, #0
   295c8:	d0eb      	beq.n	295a2 <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   295ca:	f8c5 8000 	str.w	r8, [r5]
   295ce:	e7e8      	b.n	295a2 <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   295d0:	f06f 0012 	mvn.w	r0, #18
   295d4:	e7e9      	b.n	295aa <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   295d6:	f06f 0015 	mvn.w	r0, #21
   295da:	e7e6      	b.n	295aa <usb_dc_ep_read_wait+0x56>
   295dc:	200008b8 	.word	0x200008b8
   295e0:	200008f0 	.word	0x200008f0

000295e4 <usb_dc_ep_read_continue>:
{
   295e4:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   295e6:	4d1e      	ldr	r5, [pc, #120]	; (29660 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   295e8:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   295ec:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   295ee:	b382      	cbz	r2, 29652 <usb_dc_ep_read_continue+0x6e>
   295f0:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   295f4:	b36a      	cbz	r2, 29652 <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   295f6:	061b      	lsls	r3, r3, #24
   295f8:	d42e      	bmi.n	29658 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   295fa:	f7ff fac9 	bl	28b90 <endpoint_ctx>
	if (!ep_ctx) {
   295fe:	4604      	mov	r4, r0
   29600:	b350      	cbz	r0, 29658 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   29602:	7a03      	ldrb	r3, [r0, #8]
   29604:	b343      	cbz	r3, 29658 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   29606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2960a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2960e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   29612:	f004 fed5 	bl	2e3c0 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   29616:	68e3      	ldr	r3, [r4, #12]
   29618:	b9b3      	cbnz	r3, 29648 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   2961a:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   2961c:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   2961e:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   29620:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   29622:	7f63      	ldrb	r3, [r4, #29]
   29624:	b183      	cbz	r3, 29648 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   29626:	f7ff fb07 	bl	28c38 <usbd_evt_alloc>
			if (!ev) {
   2962a:	b930      	cbnz	r0, 2963a <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   2962c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   29630:	f004 fec8 	bl	2e3c4 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   29634:	f06f 000b 	mvn.w	r0, #11
}
   29638:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   2963a:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   2963c:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   2963e:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   29640:	f7ff fade 	bl	28c00 <usbd_evt_put>
			usbd_work_schedule();
   29644:	f7ff fad4 	bl	28bf0 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   29648:	4806      	ldr	r0, [pc, #24]	; (29664 <usb_dc_ep_read_continue+0x80>)
   2964a:	f004 febb 	bl	2e3c4 <k_mutex_unlock.isra.0>
	return 0;
   2964e:	2000      	movs	r0, #0
   29650:	e7f2      	b.n	29638 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   29652:	f06f 0012 	mvn.w	r0, #18
   29656:	e7ef      	b.n	29638 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   29658:	f06f 0015 	mvn.w	r0, #21
   2965c:	e7ec      	b.n	29638 <usb_dc_ep_read_continue+0x54>
   2965e:	bf00      	nop
   29660:	200008b8 	.word	0x200008b8
   29664:	200008f0 	.word	0x200008f0

00029668 <usb_dc_ep_set_callback>:
{
   29668:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   2966a:	4b08      	ldr	r3, [pc, #32]	; (2968c <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   2966c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   29670:	460c      	mov	r4, r1
	if (!dev_attached()) {
   29672:	b12b      	cbz	r3, 29680 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
   29674:	f7ff fa8c 	bl	28b90 <endpoint_ctx>
	if (!ep_ctx) {
   29678:	b128      	cbz	r0, 29686 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   2967a:	6004      	str	r4, [r0, #0]
	return 0;
   2967c:	2000      	movs	r0, #0
}
   2967e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   29680:	f06f 0012 	mvn.w	r0, #18
   29684:	e7fb      	b.n	2967e <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
   29686:	f06f 0015 	mvn.w	r0, #21
   2968a:	e7f8      	b.n	2967e <usb_dc_ep_set_callback+0x16>
   2968c:	200008b8 	.word	0x200008b8

00029690 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   29690:	4b01      	ldr	r3, [pc, #4]	; (29698 <usb_dc_set_status_callback+0x8>)
   29692:	6018      	str	r0, [r3, #0]
}
   29694:	4770      	bx	lr
   29696:	bf00      	nop
   29698:	200008b8 	.word	0x200008b8

0002969c <usb_dc_ep_mps>:
{
   2969c:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   2969e:	4b07      	ldr	r3, [pc, #28]	; (296bc <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   296a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   296a4:	b123      	cbz	r3, 296b0 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   296a6:	f7ff fa73 	bl	28b90 <endpoint_ctx>
	if (!ep_ctx) {
   296aa:	b120      	cbz	r0, 296b6 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   296ac:	6840      	ldr	r0, [r0, #4]
}
   296ae:	bd08      	pop	{r3, pc}
		return -ENODEV;
   296b0:	f06f 0012 	mvn.w	r0, #18
   296b4:	e7fb      	b.n	296ae <usb_dc_ep_mps+0x12>
		return -EINVAL;
   296b6:	f06f 0015 	mvn.w	r0, #21
   296ba:	e7f8      	b.n	296ae <usb_dc_ep_mps+0x12>
   296bc:	200008b8 	.word	0x200008b8

000296c0 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   296c0:	2813      	cmp	r0, #19
   296c2:	d80e      	bhi.n	296e2 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   296c4:	4a08      	ldr	r2, [pc, #32]	; (296e8 <adc_gain_invert+0x28>)
   296c6:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   296ca:	b153      	cbz	r3, 296e2 <adc_gain_invert+0x22>
   296cc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   296d0:	7852      	ldrb	r2, [r2, #1]
   296d2:	b132      	cbz	r2, 296e2 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   296d4:	6808      	ldr	r0, [r1, #0]
   296d6:	4343      	muls	r3, r0
			rv = 0;
   296d8:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   296da:	fb93 f3f2 	sdiv	r3, r3, r2
   296de:	600b      	str	r3, [r1, #0]
			rv = 0;
   296e0:	4770      	bx	lr
	int rv = -EINVAL;
   296e2:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   296e6:	4770      	bx	lr
   296e8:	0002faa3 	.word	0x0002faa3

000296ec <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   296ec:	4b05      	ldr	r3, [pc, #20]	; (29704 <adc_context_start_sampling+0x18>)
   296ee:	2201      	movs	r2, #1
   296f0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   296f4:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
   296f8:	b109      	cbz	r1, 296fe <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   296fa:	60da      	str	r2, [r3, #12]
}
   296fc:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   296fe:	601a      	str	r2, [r3, #0]
   29700:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   29702:	4770      	bx	lr
   29704:	40007000 	.word	0x40007000

00029708 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
   29708:	7908      	ldrb	r0, [r1, #4]
{
   2970a:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   2970c:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   29710:	2c07      	cmp	r4, #7
   29712:	d820      	bhi.n	29756 <adc_nrfx_channel_setup+0x4e>
	switch (channel_cfg->gain) {
   29714:	780b      	ldrb	r3, [r1, #0]
   29716:	2b0b      	cmp	r3, #11
   29718:	d81d      	bhi.n	29756 <adc_nrfx_channel_setup+0x4e>
   2971a:	e8df f003 	tbb	[pc, r3]
   2971e:	0707      	.short	0x0707
   29720:	061c0707 	.word	0x061c0707
   29724:	211f1c1c 	.word	0x211f1c1c
   29728:	231c      	.short	0x231c
		config.gain = NRF_SAADC_GAIN1_2;
   2972a:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   2972c:	784a      	ldrb	r2, [r1, #1]
   2972e:	2a03      	cmp	r2, #3
   29730:	d01a      	beq.n	29768 <adc_nrfx_channel_setup+0x60>
   29732:	2a04      	cmp	r2, #4
   29734:	d10f      	bne.n	29756 <adc_nrfx_channel_setup+0x4e>
	nrf_saadc_channel_config_t config = {
   29736:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
   29738:	884a      	ldrh	r2, [r1, #2]
   2973a:	f244 060a 	movw	r6, #16394	; 0x400a
   2973e:	42b2      	cmp	r2, r6
   29740:	d046      	beq.n	297d0 <adc_nrfx_channel_setup+0xc8>
   29742:	d813      	bhi.n	2976c <adc_nrfx_channel_setup+0x64>
   29744:	f244 0603 	movw	r6, #16387	; 0x4003
   29748:	42b2      	cmp	r2, r6
   2974a:	d03d      	beq.n	297c8 <adc_nrfx_channel_setup+0xc0>
   2974c:	f244 0605 	movw	r6, #16389	; 0x4005
   29750:	42b2      	cmp	r2, r6
   29752:	d03b      	beq.n	297cc <adc_nrfx_channel_setup+0xc4>
   29754:	b3e2      	cbz	r2, 297d0 <adc_nrfx_channel_setup+0xc8>
   29756:	f06f 0015 	mvn.w	r0, #21
   2975a:	e034      	b.n	297c6 <adc_nrfx_channel_setup+0xbe>
		config.gain = NRF_SAADC_GAIN1;
   2975c:	2305      	movs	r3, #5
		break;
   2975e:	e7e5      	b.n	2972c <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   29760:	2306      	movs	r3, #6
		break;
   29762:	e7e3      	b.n	2972c <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   29764:	2307      	movs	r3, #7
		break;
   29766:	e7e1      	b.n	2972c <adc_nrfx_channel_setup+0x24>
	switch (channel_cfg->reference) {
   29768:	2501      	movs	r5, #1
   2976a:	e7e5      	b.n	29738 <adc_nrfx_channel_setup+0x30>
	switch (channel_cfg->acquisition_time) {
   2976c:	f244 0614 	movw	r6, #16404	; 0x4014
   29770:	42b2      	cmp	r2, r6
   29772:	d02f      	beq.n	297d4 <adc_nrfx_channel_setup+0xcc>
   29774:	f244 0628 	movw	r6, #16424	; 0x4028
   29778:	42b2      	cmp	r2, r6
   2977a:	d02d      	beq.n	297d8 <adc_nrfx_channel_setup+0xd0>
   2977c:	f244 060f 	movw	r6, #16399	; 0x400f
   29780:	42b2      	cmp	r2, r6
   29782:	d1e8      	bne.n	29756 <adc_nrfx_channel_setup+0x4e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   29784:	2203      	movs	r2, #3
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
#if NRF_SAADC_HAS_CONVTIME
            | ((config->conv_time  << SAADC_CH_CONFIG_TCONV_Pos)  & SAADC_CH_CONFIG_TCONV_Msk)
#endif
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   29786:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   2978a:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2978c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   29790:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   29794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   29798:	0122      	lsls	r2, r4, #4
   2979a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2979e:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   297a2:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   297a4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   297a8:	0123      	lsls	r3, r4, #4
   297aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   297ae:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   297b2:	798a      	ldrb	r2, [r1, #6]
   297b4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   297b8:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   297bc:	4b07      	ldr	r3, [pc, #28]	; (297dc <adc_nrfx_channel_setup+0xd4>)
   297be:	794a      	ldrb	r2, [r1, #5]
   297c0:	4423      	add	r3, r4
   297c2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
   297c6:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   297c8:	2200      	movs	r2, #0
   297ca:	e7dc      	b.n	29786 <adc_nrfx_channel_setup+0x7e>
	switch (channel_cfg->acquisition_time) {
   297cc:	2201      	movs	r2, #1
   297ce:	e7da      	b.n	29786 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   297d0:	2202      	movs	r2, #2
   297d2:	e7d8      	b.n	29786 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   297d4:	2204      	movs	r2, #4
   297d6:	e7d6      	b.n	29786 <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   297d8:	2205      	movs	r2, #5
   297da:	e7d4      	b.n	29786 <adc_nrfx_channel_setup+0x7e>
   297dc:	200000b8 	.word	0x200000b8

000297e0 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   297e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   297e2:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   297e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   297e8:	4855      	ldr	r0, [pc, #340]	; (29940 <adc_nrfx_read+0x160>)
   297ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   297ee:	f003 f907 	bl	2ca00 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   297f2:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   297f4:	1e73      	subs	r3, r6, #1
   297f6:	2bfe      	cmp	r3, #254	; 0xfe
   297f8:	d83c      	bhi.n	29874 <adc_nrfx_read+0x94>
   297fa:	2300      	movs	r3, #0
    p_reg->CH[channel].PSELP = pselp;
   297fc:	4851      	ldr	r0, [pc, #324]	; (29944 <adc_nrfx_read+0x164>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   297fe:	4f52      	ldr	r7, [pc, #328]	; (29948 <adc_nrfx_read+0x168>)
	active_channels = 0U;
   29800:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   29802:	fa26 f103 	lsr.w	r1, r6, r3
   29806:	f011 0101 	ands.w	r1, r1, #1
   2980a:	d026      	beq.n	2985a <adc_nrfx_read+0x7a>
			if (m_data.positive_inputs[channel_id] == 0U) {
   2980c:	f817 c003 	ldrb.w	ip, [r7, r3]
   29810:	f1bc 0f00 	cmp.w	ip, #0
   29814:	d02e      	beq.n	29874 <adc_nrfx_read+0x94>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   29816:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   2981a:	7c65      	ldrb	r5, [r4, #17]
   2981c:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   29820:	3d00      	subs	r5, #0
   29822:	bf18      	it	ne
   29824:	2501      	movne	r5, #1
   29826:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   2982a:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   2982e:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   29832:	f103 0151 	add.w	r1, r3, #81	; 0x51
   29836:	0109      	lsls	r1, r1, #4
			++active_channels;
   29838:	3201      	adds	r2, #1
   2983a:	f840 c001 	str.w	ip, [r0, r1]
   2983e:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   29840:	3301      	adds	r3, #1
   29842:	2b08      	cmp	r3, #8
   29844:	d1dd      	bne.n	29802 <adc_nrfx_read+0x22>
	switch (sequence->resolution) {
   29846:	7c23      	ldrb	r3, [r4, #16]
   29848:	3b08      	subs	r3, #8
   2984a:	2b06      	cmp	r3, #6
   2984c:	d812      	bhi.n	29874 <adc_nrfx_read+0x94>
   2984e:	e8df f003 	tbb	[pc, r3]
   29852:	1109      	.short	0x1109
   29854:	1119111d 	.word	0x1119111d
   29858:	1b          	.byte	0x1b
   29859:	00          	.byte	0x00
   2985a:	f103 0551 	add.w	r5, r3, #81	; 0x51
   2985e:	012d      	lsls	r5, r5, #4
   29860:	5141      	str	r1, [r0, r5]
}
   29862:	e7ed      	b.n	29840 <adc_nrfx_read+0x60>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   29864:	2300      	movs	r3, #0
    p_reg->RESOLUTION = resolution;
   29866:	4937      	ldr	r1, [pc, #220]	; (29944 <adc_nrfx_read+0x164>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   29868:	2a01      	cmp	r2, #1
   2986a:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   2986e:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   29870:	d90e      	bls.n	29890 <adc_nrfx_read+0xb0>
   29872:	b17b      	cbz	r3, 29894 <adc_nrfx_read+0xb4>
		return -EINVAL;
   29874:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   29878:	4831      	ldr	r0, [pc, #196]	; (29940 <adc_nrfx_read+0x160>)
   2987a:	f003 f89d 	bl	2c9b8 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   2987e:	4620      	mov	r0, r4
   29880:	b003      	add	sp, #12
   29882:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   29884:	2302      	movs	r3, #2
		break;
   29886:	e7ee      	b.n	29866 <adc_nrfx_read+0x86>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   29888:	2303      	movs	r3, #3
		break;
   2988a:	e7ec      	b.n	29866 <adc_nrfx_read+0x86>
	switch (sequence->resolution) {
   2988c:	2301      	movs	r3, #1
   2988e:	e7ea      	b.n	29866 <adc_nrfx_read+0x86>
	switch (sequence->oversampling) {
   29890:	2b08      	cmp	r3, #8
   29892:	d8ef      	bhi.n	29874 <adc_nrfx_read+0x94>
    p_reg->OVERSAMPLE = oversample;
   29894:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   29898:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   2989a:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   2989c:	b111      	cbz	r1, 298a4 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   2989e:	8989      	ldrh	r1, [r1, #12]
   298a0:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   298a4:	68e1      	ldr	r1, [r4, #12]
   298a6:	4299      	cmp	r1, r3
   298a8:	d347      	bcc.n	2993a <adc_nrfx_read+0x15a>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   298aa:	4b26      	ldr	r3, [pc, #152]	; (29944 <adc_nrfx_read+0x164>)
   298ac:	68a1      	ldr	r1, [r4, #8]
   298ae:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   298b2:	4627      	mov	r7, r4
    p_reg->RESULT.MAXCNT = size;
   298b4:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   298b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   298ba:	4d24      	ldr	r5, [pc, #144]	; (2994c <adc_nrfx_read+0x16c>)
   298bc:	f105 0664 	add.w	r6, r5, #100	; 0x64
   298c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   298c2:	683b      	ldr	r3, [r7, #0]
   298c4:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   298c6:	2600      	movs	r6, #0
   298c8:	662e      	str	r6, [r5, #96]	; 0x60

	if (sequence->options) {
   298ca:	6823      	ldr	r3, [r4, #0]
   298cc:	462f      	mov	r7, r5
   298ce:	b383      	cbz	r3, 29932 <adc_nrfx_read+0x152>
		ctx->options = *sequence->options;
   298d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   298d2:	f105 0478 	add.w	r4, r5, #120	; 0x78
   298d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   298da:	666c      	str	r4, [r5, #100]	; 0x64
		ctx->sampling_index = 0U;
   298dc:	f8a5 6088 	strh.w	r6, [r5, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
   298e0:	b338      	cbz	r0, 29932 <adc_nrfx_read+0x152>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   298e2:	f3bf 8f5b 	dmb	ish
   298e6:	e857 3f00 	ldrex	r3, [r7]
   298ea:	e847 6200 	strex	r2, r6, [r7]
   298ee:	2a00      	cmp	r2, #0
   298f0:	d1f9      	bne.n	298e6 <adc_nrfx_read+0x106>
   298f2:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   298f6:	4916      	ldr	r1, [pc, #88]	; (29950 <adc_nrfx_read+0x170>)
   298f8:	6fac      	ldr	r4, [r5, #120]	; 0x78
   298fa:	4a16      	ldr	r2, [pc, #88]	; (29954 <adc_nrfx_read+0x174>)
   298fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   29900:	460f      	mov	r7, r1
   29902:	4631      	mov	r1, r6
   29904:	fbe4 7100 	umlal	r7, r1, r4, r0
   29908:	2300      	movs	r3, #0
   2990a:	4638      	mov	r0, r7
   2990c:	f7fc fbf8 	bl	26100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   29910:	2200      	movs	r2, #0
   29912:	e9cd 0100 	strd	r0, r1, [sp]
   29916:	2300      	movs	r3, #0
   29918:	f105 0008 	add.w	r0, r5, #8
   2991c:	f003 ff2a 	bl	2d774 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   29920:	480d      	ldr	r0, [pc, #52]	; (29958 <adc_nrfx_read+0x178>)
   29922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2992a:	f003 f869 	bl	2ca00 <z_impl_k_sem_take>
	return ctx->status;
   2992e:	6e2c      	ldr	r4, [r5, #96]	; 0x60
	return error;
   29930:	e7a2      	b.n	29878 <adc_nrfx_read+0x98>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   29932:	4806      	ldr	r0, [pc, #24]	; (2994c <adc_nrfx_read+0x16c>)
   29934:	f7ff feda 	bl	296ec <adc_context_start_sampling>
   29938:	e7f2      	b.n	29920 <adc_nrfx_read+0x140>
		return -ENOMEM;
   2993a:	f06f 040b 	mvn.w	r4, #11
   2993e:	e79b      	b.n	29878 <adc_nrfx_read+0x98>
   29940:	200000f8 	.word	0x200000f8
   29944:	40007000 	.word	0x40007000
   29948:	20000148 	.word	0x20000148
   2994c:	200000b8 	.word	0x200000b8
   29950:	000f423f 	.word	0x000f423f
   29954:	000f4240 	.word	0x000f4240
   29958:	20000108 	.word	0x20000108

0002995c <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   2995c:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2995e:	4b0e      	ldr	r3, [pc, #56]	; (29998 <init_saadc+0x3c>)
   29960:	2400      	movs	r4, #0
   29962:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   29966:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2996a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   2996e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   29972:	2212      	movs	r2, #18
   29974:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   29978:	2007      	movs	r0, #7
   2997a:	f7fe fd99 	bl	284b0 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2997e:	4622      	mov	r2, r4
   29980:	2101      	movs	r1, #1
   29982:	2007      	movs	r0, #7
   29984:	f7fe fdc4 	bl	28510 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   29988:	4804      	ldr	r0, [pc, #16]	; (2999c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   2998a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   2998c:	b913      	cbnz	r3, 29994 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   2998e:	3040      	adds	r0, #64	; 0x40
   29990:	f003 f812 	bl	2c9b8 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   29994:	2000      	movs	r0, #0
   29996:	bd10      	pop	{r4, pc}
   29998:	40007000 	.word	0x40007000
   2999c:	200000b8 	.word	0x200000b8

000299a0 <saadc_irq_handler>:
{
   299a0:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   299a2:	4b2e      	ldr	r3, [pc, #184]	; (29a5c <saadc_irq_handler+0xbc>)
   299a4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   299a8:	2a00      	cmp	r2, #0
   299aa:	d049      	beq.n	29a40 <saadc_irq_handler+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   299ac:	2200      	movs	r2, #0
   299ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   299b2:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   299b6:	4c2a      	ldr	r4, [pc, #168]	; (29a60 <saadc_irq_handler+0xc0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   299b8:	2101      	movs	r1, #1
   299ba:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   299bc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   299c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   299c2:	4625      	mov	r5, r4
   299c4:	b3bb      	cbz	r3, 29a36 <saadc_irq_handler+0x96>
		adc_sequence_callback callback = ctx->options.callback;
   299c6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   299c8:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
		if (callback) {
   299cc:	b133      	cbz	r3, 299dc <saadc_irq_handler+0x3c>
			action = callback(dev,
   299ce:	f104 0164 	add.w	r1, r4, #100	; 0x64
   299d2:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   299d4:	2801      	cmp	r0, #1
   299d6:	d014      	beq.n	29a02 <saadc_irq_handler+0x62>
   299d8:	2802      	cmp	r0, #2
   299da:	d027      	beq.n	29a2c <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   299dc:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
   299e0:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
   299e4:	429a      	cmp	r2, r3
   299e6:	d921      	bls.n	29a2c <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   299e8:	3301      	adds	r3, #1
   299ea:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   299ee:	4b1b      	ldr	r3, [pc, #108]	; (29a5c <saadc_irq_handler+0xbc>)
   299f0:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return (uint16_t)p_reg->RESULT.AMOUNT;
   299f4:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   299f8:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   299fa:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   299fe:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   29a02:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   29a04:	b923      	cbnz	r3, 29a10 <saadc_irq_handler+0x70>
}
   29a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   29a0a:	4815      	ldr	r0, [pc, #84]	; (29a60 <saadc_irq_handler+0xc0>)
   29a0c:	f7ff be6e 	b.w	296ec <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   29a10:	f3bf 8f5b 	dmb	ish
   29a14:	e855 3f00 	ldrex	r3, [r5]
   29a18:	1e5a      	subs	r2, r3, #1
   29a1a:	e845 2100 	strex	r1, r2, [r5]
   29a1e:	2900      	cmp	r1, #0
   29a20:	d1f8      	bne.n	29a14 <saadc_irq_handler+0x74>
   29a22:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   29a26:	2b01      	cmp	r3, #1
   29a28:	dced      	bgt.n	29a06 <saadc_irq_handler+0x66>
   29a2a:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   29a2c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   29a2e:	b113      	cbz	r3, 29a36 <saadc_irq_handler+0x96>
	z_impl_k_timer_stop(timer);
   29a30:	480c      	ldr	r0, [pc, #48]	; (29a64 <saadc_irq_handler+0xc4>)
   29a32:	f005 fc15 	bl	2f260 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   29a36:	480c      	ldr	r0, [pc, #48]	; (29a68 <saadc_irq_handler+0xc8>)
   29a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29a3c:	f002 bfbc 	b.w	2c9b8 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29a40:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   29a44:	2900      	cmp	r1, #0
   29a46:	d0f0      	beq.n	29a2a <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29a48:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   29a4c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29a50:	2201      	movs	r2, #1
   29a52:	609a      	str	r2, [r3, #8]
   29a54:	601a      	str	r2, [r3, #0]
   29a56:	605a      	str	r2, [r3, #4]
}
   29a58:	e7e7      	b.n	29a2a <saadc_irq_handler+0x8a>
   29a5a:	bf00      	nop
   29a5c:	40007000 	.word	0x40007000
   29a60:	200000b8 	.word	0x200000b8
   29a64:	200000c0 	.word	0x200000c0
   29a68:	20000108 	.word	0x20000108

00029a6c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   29a6c:	4b08      	ldr	r3, [pc, #32]	; (29a90 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   29a6e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   29a70:	1ac3      	subs	r3, r0, r3
{
   29a72:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   29a74:	4907      	ldr	r1, [pc, #28]	; (29a94 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   29a76:	109b      	asrs	r3, r3, #2
{
   29a78:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   29a7a:	4359      	muls	r1, r3
   29a7c:	4806      	ldr	r0, [pc, #24]	; (29a98 <onoff_stop+0x2c>)
   29a7e:	2240      	movs	r2, #64	; 0x40
   29a80:	f004 fd15 	bl	2e4ae <stop>
	notify(mgr, res);
   29a84:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   29a86:	4601      	mov	r1, r0
	notify(mgr, res);
   29a88:	4620      	mov	r0, r4
}
   29a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   29a8e:	4718      	bx	r3
   29a90:	2000115c 	.word	0x2000115c
   29a94:	b6db6db7 	.word	0xb6db6db7
   29a98:	0002f434 	.word	0x0002f434

00029a9c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   29a9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   29a9e:	4c0c      	ldr	r4, [pc, #48]	; (29ad0 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   29aa0:	4a0c      	ldr	r2, [pc, #48]	; (29ad4 <onoff_start+0x38>)
   29aa2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   29aa4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   29aa6:	9300      	str	r3, [sp, #0]
{
   29aa8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   29aaa:	460b      	mov	r3, r1
   29aac:	490a      	ldr	r1, [pc, #40]	; (29ad8 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   29aae:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   29ab0:	4361      	muls	r1, r4
{
   29ab2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   29ab4:	4809      	ldr	r0, [pc, #36]	; (29adc <onoff_start+0x40>)
   29ab6:	f004 fd27 	bl	2e508 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   29aba:	1e01      	subs	r1, r0, #0
   29abc:	da05      	bge.n	29aca <onoff_start+0x2e>
		notify(mgr, err);
   29abe:	4630      	mov	r0, r6
   29ac0:	462b      	mov	r3, r5
	}
}
   29ac2:	b002      	add	sp, #8
   29ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   29ac8:	4718      	bx	r3
}
   29aca:	b002      	add	sp, #8
   29acc:	bd70      	pop	{r4, r5, r6, pc}
   29ace:	bf00      	nop
   29ad0:	2000115c 	.word	0x2000115c
   29ad4:	0002e575 	.word	0x0002e575
   29ad8:	b6db6db7 	.word	0xb6db6db7
   29adc:	0002f434 	.word	0x0002f434

00029ae0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   29ae0:	2200      	movs	r2, #0
{
   29ae2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   29ae4:	2101      	movs	r1, #1
{
   29ae6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   29ae8:	4610      	mov	r0, r2
   29aea:	f7fe fd11 	bl	28510 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   29aee:	480f      	ldr	r0, [pc, #60]	; (29b2c <clk_init+0x4c>)
   29af0:	f001 f8a2 	bl	2ac38 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   29af4:	4b0e      	ldr	r3, [pc, #56]	; (29b30 <clk_init+0x50>)
   29af6:	4298      	cmp	r0, r3
   29af8:	d115      	bne.n	29b26 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   29afa:	f001 f8ad 	bl	2ac58 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   29afe:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   29b00:	490c      	ldr	r1, [pc, #48]	; (29b34 <clk_init+0x54>)
   29b02:	4630      	mov	r0, r6
   29b04:	f004 f927 	bl	2dd56 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   29b08:	2800      	cmp	r0, #0
   29b0a:	db0b      	blt.n	29b24 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   29b0c:	2501      	movs	r5, #1
   29b0e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   29b10:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   29b12:	4908      	ldr	r1, [pc, #32]	; (29b34 <clk_init+0x54>)
   29b14:	f104 001c 	add.w	r0, r4, #28
   29b18:	f004 f91d 	bl	2dd56 <onoff_manager_init>
		if (err < 0) {
   29b1c:	2800      	cmp	r0, #0
   29b1e:	db01      	blt.n	29b24 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   29b20:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   29b22:	2000      	movs	r0, #0
}
   29b24:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   29b26:	f06f 0004 	mvn.w	r0, #4
   29b2a:	e7fb      	b.n	29b24 <clk_init+0x44>
   29b2c:	00029b6d 	.word	0x00029b6d
   29b30:	0bad0000 	.word	0x0bad0000
   29b34:	0002f7b4 	.word	0x0002f7b4

00029b38 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   29b38:	b570      	push	{r4, r5, r6, lr}
   29b3a:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   29b3c:	230c      	movs	r3, #12
   29b3e:	4809      	ldr	r0, [pc, #36]	; (29b64 <clkstarted_handle.constprop.0+0x2c>)
   29b40:	434b      	muls	r3, r1
   29b42:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   29b44:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   29b48:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   29b4a:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   29b4c:	4418      	add	r0, r3
	sub_data->cb = NULL;
   29b4e:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   29b50:	f004 fc9a 	bl	2e488 <set_on_state>
	if (callback) {
   29b54:	b12d      	cbz	r5, 29b62 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   29b56:	4632      	mov	r2, r6
   29b58:	462b      	mov	r3, r5
   29b5a:	4803      	ldr	r0, [pc, #12]	; (29b68 <clkstarted_handle.constprop.0+0x30>)
}
   29b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   29b60:	4718      	bx	r3
}
   29b62:	bd70      	pop	{r4, r5, r6, pc}
   29b64:	2000115c 	.word	0x2000115c
   29b68:	0002f434 	.word	0x0002f434

00029b6c <clock_event_handler>:
	switch (event) {
   29b6c:	b110      	cbz	r0, 29b74 <clock_event_handler+0x8>
   29b6e:	2801      	cmp	r0, #1
   29b70:	d004      	beq.n	29b7c <clock_event_handler+0x10>
   29b72:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   29b74:	4b03      	ldr	r3, [pc, #12]	; (29b84 <clock_event_handler+0x18>)
   29b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   29b78:	075b      	lsls	r3, r3, #29
   29b7a:	d101      	bne.n	29b80 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   29b7c:	f7ff bfdc 	b.w	29b38 <clkstarted_handle.constprop.0>
}
   29b80:	4770      	bx	lr
   29b82:	bf00      	nop
   29b84:	2000115c 	.word	0x2000115c

00029b88 <generic_hfclk_start>:
{
   29b88:	b508      	push	{r3, lr}
	__asm__ volatile(
   29b8a:	f04f 0320 	mov.w	r3, #32
   29b8e:	f3ef 8111 	mrs	r1, BASEPRI
   29b92:	f383 8812 	msr	BASEPRI_MAX, r3
   29b96:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   29b9a:	4a12      	ldr	r2, [pc, #72]	; (29be4 <generic_hfclk_start+0x5c>)
   29b9c:	6813      	ldr	r3, [r2, #0]
   29b9e:	f043 0002 	orr.w	r0, r3, #2
   29ba2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   29ba4:	07da      	lsls	r2, r3, #31
   29ba6:	d408      	bmi.n	29bba <generic_hfclk_start+0x32>
	__asm__ volatile(
   29ba8:	f381 8811 	msr	BASEPRI, r1
   29bac:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   29bb0:	2001      	movs	r0, #1
}
   29bb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   29bb6:	f004 bf04 	b.w	2e9c2 <nrfx_clock_start>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
            }
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
   29bba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29bbe:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                 * It has to be derived from HFCLK state. */
                (*(nrf_clock_hfclk_t *)p_clk_src) = clock_running ? NRF_CLOCK_HFCLK_HIGH_ACCURACY :
                                                                    NRF_CLOCK_HFCLK_LOW_ACCURACY;
#else
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_SRC_Msk)
   29bc2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   29bc6:	07db      	lsls	r3, r3, #31
   29bc8:	d5ee      	bpl.n	29ba8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   29bca:	4807      	ldr	r0, [pc, #28]	; (29be8 <generic_hfclk_start+0x60>)
   29bcc:	f004 fc5c 	bl	2e488 <set_on_state>
   29bd0:	f381 8811 	msr	BASEPRI, r1
   29bd4:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   29bd8:	2000      	movs	r0, #0
}
   29bda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   29bde:	f7ff bfab 	b.w	29b38 <clkstarted_handle.constprop.0>
   29be2:	bf00      	nop
   29be4:	200011ac 	.word	0x200011ac
   29be8:	2000119c 	.word	0x2000119c

00029bec <api_blocking_start>:
{
   29bec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   29bee:	2200      	movs	r2, #0
   29bf0:	2301      	movs	r3, #1
   29bf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   29bf6:	4a09      	ldr	r2, [pc, #36]	; (29c1c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   29bf8:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   29bfc:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   29bfe:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   29c02:	f004 fcb0 	bl	2e566 <api_start>
	if (err < 0) {
   29c06:	2800      	cmp	r0, #0
   29c08:	db05      	blt.n	29c16 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
   29c0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   29c0e:	2300      	movs	r3, #0
   29c10:	4668      	mov	r0, sp
   29c12:	f002 fef5 	bl	2ca00 <z_impl_k_sem_take>
}
   29c16:	b005      	add	sp, #20
   29c18:	f85d fb04 	ldr.w	pc, [sp], #4
   29c1c:	0002e593 	.word	0x0002e593

00029c20 <generic_hfclk_stop>:
{
   29c20:	b510      	push	{r4, lr}
	__asm__ volatile(
   29c22:	f04f 0320 	mov.w	r3, #32
   29c26:	f3ef 8411 	mrs	r4, BASEPRI
   29c2a:	f383 8812 	msr	BASEPRI_MAX, r3
   29c2e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   29c32:	4a07      	ldr	r2, [pc, #28]	; (29c50 <generic_hfclk_stop+0x30>)
   29c34:	6813      	ldr	r3, [r2, #0]
   29c36:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   29c3a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   29c3c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   29c3e:	d402      	bmi.n	29c46 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   29c40:	2001      	movs	r0, #1
   29c42:	f004 fefa 	bl	2ea3a <nrfx_clock_stop>
	__asm__ volatile(
   29c46:	f384 8811 	msr	BASEPRI, r4
   29c4a:	f3bf 8f6f 	isb	sy
}
   29c4e:	bd10      	pop	{r4, pc}
   29c50:	200011ac 	.word	0x200011ac

00029c54 <z_nrf_clock_control_get_onoff>:
}
   29c54:	4a02      	ldr	r2, [pc, #8]	; (29c60 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   29c56:	b2c3      	uxtb	r3, r0
}
   29c58:	201c      	movs	r0, #28
   29c5a:	fb03 2000 	mla	r0, r3, r0, r2
   29c5e:	4770      	bx	lr
   29c60:	2000115c 	.word	0x2000115c

00029c64 <z_nrf_clock_control_lf_on>:
{
   29c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29c68:	4938      	ldr	r1, [pc, #224]	; (29d4c <z_nrf_clock_control_lf_on+0xe8>)
   29c6a:	f3bf 8f5b 	dmb	ish
   29c6e:	4607      	mov	r7, r0
   29c70:	2201      	movs	r2, #1
   29c72:	e851 3f00 	ldrex	r3, [r1]
   29c76:	e841 2000 	strex	r0, r2, [r1]
   29c7a:	2800      	cmp	r0, #0
   29c7c:	d1f9      	bne.n	29c72 <z_nrf_clock_control_lf_on+0xe>
   29c7e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   29c82:	b933      	cbnz	r3, 29c92 <z_nrf_clock_control_lf_on+0x2e>
   29c84:	4932      	ldr	r1, [pc, #200]	; (29d50 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   29c86:	4833      	ldr	r0, [pc, #204]	; (29d54 <z_nrf_clock_control_lf_on+0xf0>)
   29c88:	604b      	str	r3, [r1, #4]
   29c8a:	60cb      	str	r3, [r1, #12]
   29c8c:	608a      	str	r2, [r1, #8]
   29c8e:	f004 f875 	bl	2dd7c <onoff_request>
	switch (start_mode) {
   29c92:	1e7b      	subs	r3, r7, #1
   29c94:	2b01      	cmp	r3, #1
   29c96:	d82b      	bhi.n	29cf0 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   29c98:	2f01      	cmp	r7, #1
   29c9a:	d107      	bne.n	29cac <z_nrf_clock_control_lf_on+0x48>
}

#if NRF_CLOCK_HAS_LFCLKSRCCOPY
NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   29c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29ca0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   29ca4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_XTAL) &&
   29ca8:	2b01      	cmp	r3, #1
   29caa:	d021      	beq.n	29cf0 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   29cac:	f005 f85f 	bl	2ed6e <k_is_in_isr>
   29cb0:	4605      	mov	r5, r0
   29cb2:	b9f8      	cbnz	r0, 29cf4 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   29cb4:	4b28      	ldr	r3, [pc, #160]	; (29d58 <z_nrf_clock_control_lf_on+0xf4>)
   29cb6:	781b      	ldrb	r3, [r3, #0]
   29cb8:	b1e3      	cbz	r3, 29cf4 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   29cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29cbe:	2202      	movs	r2, #2
   29cc0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   29cc4:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29cc6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 29d5c <z_nrf_clock_control_lf_on+0xf8>
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   29cca:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   29cce:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   29cd2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
	while (!(nrfx_clock_is_running(d, (void *)&type)
   29cd6:	03d2      	lsls	r2, r2, #15
   29cd8:	d516      	bpl.n	29d08 <z_nrf_clock_control_lf_on+0xa4>
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
   29cda:	f003 0303 	and.w	r3, r3, #3
   29cde:	2b01      	cmp	r3, #1
   29ce0:	d001      	beq.n	29ce6 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   29ce2:	2f01      	cmp	r7, #1
   29ce4:	d110      	bne.n	29d08 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   29ce6:	b35d      	cbz	r5, 29d40 <z_nrf_clock_control_lf_on+0xdc>
   29ce8:	f386 8811 	msr	BASEPRI, r6
   29cec:	f3bf 8f6f 	isb	sy
}
   29cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   29cf4:	f04f 0320 	mov.w	r3, #32
   29cf8:	f3ef 8611 	mrs	r6, BASEPRI
   29cfc:	f383 8812 	msr	BASEPRI_MAX, r3
   29d00:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   29d04:	2501      	movs	r5, #1
   29d06:	e7de      	b.n	29cc6 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   29d08:	b1ad      	cbz	r5, 29d36 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   29d0a:	4630      	mov	r0, r6
   29d0c:	f7fe fbc4 	bl	28498 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->NRF_LFCLKSRC);
   29d10:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_XTAL)
   29d14:	2b00      	cmp	r3, #0
   29d16:	d1da      	bne.n	29cce <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   29d18:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   29d1c:	2a00      	cmp	r2, #0
   29d1e:	d0d6      	beq.n	29cce <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29d20:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   29d24:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   29d28:	2301      	movs	r3, #1
   29d2a:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   29d2e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29d32:	60a3      	str	r3, [r4, #8]
}
   29d34:	e7cb      	b.n	29cce <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   29d36:	2100      	movs	r1, #0
   29d38:	2021      	movs	r0, #33	; 0x21
   29d3a:	f003 faa3 	bl	2d284 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   29d3e:	e7e7      	b.n	29d10 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   29d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29d44:	2202      	movs	r2, #2
   29d46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   29d4a:	e7d1      	b.n	29cf0 <z_nrf_clock_control_lf_on+0x8c>
   29d4c:	20001158 	.word	0x20001158
   29d50:	20001148 	.word	0x20001148
   29d54:	20001178 	.word	0x20001178
   29d58:	200014a7 	.word	0x200014a7
   29d5c:	e000e100 	.word	0xe000e100

00029d60 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   29d60:	b508      	push	{r3, lr}
   29d62:	4807      	ldr	r0, [pc, #28]	; (29d80 <uart_console_init+0x20>)
   29d64:	f004 ff8e 	bl	2ec84 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   29d68:	b138      	cbz	r0, 29d7a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   29d6a:	4806      	ldr	r0, [pc, #24]	; (29d84 <uart_console_init+0x24>)
   29d6c:	f7fe fece 	bl	28b0c <__stdout_hook_install>
	__printk_hook_install(console_out);
   29d70:	4804      	ldr	r0, [pc, #16]	; (29d84 <uart_console_init+0x24>)
   29d72:	f7fc fc57 	bl	26624 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   29d76:	2000      	movs	r0, #0
}
   29d78:	bd08      	pop	{r3, pc}
		return -ENODEV;
   29d7a:	f06f 0012 	mvn.w	r0, #18
   29d7e:	e7fb      	b.n	29d78 <uart_console_init+0x18>
   29d80:	0002f470 	.word	0x0002f470
   29d84:	00029d89 	.word	0x00029d89

00029d88 <console_out>:
	if ('\n' == c) {
   29d88:	280a      	cmp	r0, #10
{
   29d8a:	b538      	push	{r3, r4, r5, lr}
   29d8c:	4d07      	ldr	r5, [pc, #28]	; (29dac <console_out+0x24>)
   29d8e:	4604      	mov	r4, r0
	if ('\n' == c) {
   29d90:	d104      	bne.n	29d9c <console_out+0x14>
	api->poll_out(dev, out_char);
   29d92:	68ab      	ldr	r3, [r5, #8]
   29d94:	210d      	movs	r1, #13
   29d96:	685b      	ldr	r3, [r3, #4]
   29d98:	4628      	mov	r0, r5
   29d9a:	4798      	blx	r3
   29d9c:	68ab      	ldr	r3, [r5, #8]
   29d9e:	4803      	ldr	r0, [pc, #12]	; (29dac <console_out+0x24>)
   29da0:	685b      	ldr	r3, [r3, #4]
   29da2:	b2e1      	uxtb	r1, r4
   29da4:	4798      	blx	r3
}
   29da6:	4620      	mov	r0, r4
   29da8:	bd38      	pop	{r3, r4, r5, pc}
   29daa:	bf00      	nop
   29dac:	0002f470 	.word	0x0002f470

00029db0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   29db0:	b530      	push	{r4, r5, lr}
	return port->config;
   29db2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   29db4:	7b05      	ldrb	r5, [r0, #12]
   29db6:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   29dba:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   29dbe:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   29dc0:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   29dc4:	d105      	bne.n	29dd2 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   29dc6:	4620      	mov	r0, r4
   29dc8:	f001 f9c6 	bl	2b158 <nrfx_gpiote_trigger_disable>

		return 0;
   29dcc:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   29dce:	b005      	add	sp, #20
   29dd0:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   29dd2:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   29dd4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   29dd8:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   29ddc:	d114      	bne.n	29e08 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   29dde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   29de2:	bf0c      	ite	eq
   29de4:	2304      	moveq	r3, #4
   29de6:	2305      	movne	r3, #5
   29de8:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   29dec:	2300      	movs	r3, #0
   29dee:	4619      	mov	r1, r3
   29df0:	aa02      	add	r2, sp, #8
   29df2:	4620      	mov	r0, r4
   29df4:	f000 fff8 	bl	2ade8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   29df8:	4b23      	ldr	r3, [pc, #140]	; (29e88 <gpio_nrfx_pin_interrupt_configure+0xd8>)
   29dfa:	4298      	cmp	r0, r3
   29dfc:	d13d      	bne.n	29e7a <gpio_nrfx_pin_interrupt_configure+0xca>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   29dfe:	2101      	movs	r1, #1
   29e00:	4620      	mov	r0, r4
   29e02:	f001 f963 	bl	2b0cc <nrfx_gpiote_trigger_enable>
	return 0;
   29e06:	e7e1      	b.n	29dcc <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   29e08:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   29e0c:	d027      	beq.n	29e5e <gpio_nrfx_pin_interrupt_configure+0xae>
   29e0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   29e12:	bf14      	ite	ne
   29e14:	2301      	movne	r3, #1
   29e16:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   29e18:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   29e1c:	6883      	ldr	r3, [r0, #8]
   29e1e:	fa23 f101 	lsr.w	r1, r3, r1
   29e22:	f011 0101 	ands.w	r1, r1, #1
   29e26:	d1e1      	bne.n	29dec <gpio_nrfx_pin_interrupt_configure+0x3c>
   29e28:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   29e2c:	d1de      	bne.n	29dec <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   29e2e:	f004 031f 	and.w	r3, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   29e32:	0962      	lsrs	r2, r4, #5
   29e34:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   29e38:	d013      	beq.n	29e62 <gpio_nrfx_pin_interrupt_configure+0xb2>
   29e3a:	2a01      	cmp	r2, #1
   29e3c:	d120      	bne.n	29e80 <gpio_nrfx_pin_interrupt_configure+0xd0>
   29e3e:	4a13      	ldr	r2, [pc, #76]	; (29e8c <gpio_nrfx_pin_interrupt_configure+0xdc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   29e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   29e44:	07db      	lsls	r3, r3, #31
   29e46:	d4d1      	bmi.n	29dec <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   29e48:	f10d 0507 	add.w	r5, sp, #7
   29e4c:	4629      	mov	r1, r5
   29e4e:	4620      	mov	r0, r4
   29e50:	f001 f8ec 	bl	2b02c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   29e54:	4b0e      	ldr	r3, [pc, #56]	; (29e90 <gpio_nrfx_pin_interrupt_configure+0xe0>)
   29e56:	4298      	cmp	r0, r3
   29e58:	d006      	beq.n	29e68 <gpio_nrfx_pin_interrupt_configure+0xb8>
		trigger_config.p_in_channel = &ch;
   29e5a:	9503      	str	r5, [sp, #12]
   29e5c:	e7c6      	b.n	29dec <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   29e5e:	2303      	movs	r3, #3
   29e60:	e7da      	b.n	29e18 <gpio_nrfx_pin_interrupt_configure+0x68>
        NRF_INTERNAL_GPIO_PORT_EXTRACT(p_port);
   29e62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   29e66:	e7eb      	b.n	29e40 <gpio_nrfx_pin_interrupt_configure+0x90>
			err = nrfx_gpiote_channel_alloc(&ch);
   29e68:	4628      	mov	r0, r5
   29e6a:	f001 f929 	bl	2b0c0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   29e6e:	4b06      	ldr	r3, [pc, #24]	; (29e88 <gpio_nrfx_pin_interrupt_configure+0xd8>)
   29e70:	4298      	cmp	r0, r3
   29e72:	d0f2      	beq.n	29e5a <gpio_nrfx_pin_interrupt_configure+0xaa>
				return -ENOMEM;
   29e74:	f06f 000b 	mvn.w	r0, #11
   29e78:	e7a9      	b.n	29dce <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   29e7a:	f06f 0015 	mvn.w	r0, #21
   29e7e:	e7a6      	b.n	29dce <gpio_nrfx_pin_interrupt_configure+0x1e>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   29e80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   29e84:	deff      	udf	#255	; 0xff
   29e86:	bf00      	nop
   29e88:	0bad0000 	.word	0x0bad0000
   29e8c:	50000300 	.word	0x50000300
   29e90:	0bad0004 	.word	0x0bad0004

00029e94 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   29e94:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   29e96:	f001 f903 	bl	2b0a0 <nrfx_gpiote_is_init>
   29e9a:	4604      	mov	r4, r0
   29e9c:	b968      	cbnz	r0, 29eba <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   29e9e:	f001 f8d7 	bl	2b050 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   29ea2:	4b08      	ldr	r3, [pc, #32]	; (29ec4 <gpio_nrfx_init+0x30>)
   29ea4:	4298      	cmp	r0, r3
   29ea6:	d10a      	bne.n	29ebe <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   29ea8:	4807      	ldr	r0, [pc, #28]	; (29ec8 <gpio_nrfx_init+0x34>)
   29eaa:	4621      	mov	r1, r4
   29eac:	f001 f8b8 	bl	2b020 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   29eb0:	4622      	mov	r2, r4
   29eb2:	2105      	movs	r1, #5
   29eb4:	2006      	movs	r0, #6
   29eb6:	f7fe fb2b 	bl	28510 <z_arm_irq_priority_set>
		return 0;
   29eba:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   29ebc:	bd10      	pop	{r4, pc}
		return -EIO;
   29ebe:	f06f 0004 	mvn.w	r0, #4
   29ec2:	e7fb      	b.n	29ebc <gpio_nrfx_init+0x28>
   29ec4:	0bad0000 	.word	0x0bad0000
   29ec8:	00029ecd 	.word	0x00029ecd

00029ecc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   29ecc:	0942      	lsrs	r2, r0, #5
{
   29ece:	b570      	push	{r4, r5, r6, lr}
   29ed0:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   29ed2:	d002      	beq.n	29eda <nrfx_gpio_handler+0xe>
   29ed4:	2a01      	cmp	r2, #1
   29ed6:	d017      	beq.n	29f08 <nrfx_gpio_handler+0x3c>
}
   29ed8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   29eda:	4e0d      	ldr	r6, [pc, #52]	; (29f10 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   29edc:	6932      	ldr	r2, [r6, #16]
   29ede:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   29ee0:	2900      	cmp	r1, #0
   29ee2:	d0f9      	beq.n	29ed8 <nrfx_gpio_handler+0xc>
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   29ee4:	f003 031f 	and.w	r3, r3, #31
   29ee8:	2501      	movs	r5, #1
	return node->next;
   29eea:	680c      	ldr	r4, [r1, #0]
   29eec:	409d      	lsls	r5, r3
   29eee:	2900      	cmp	r1, #0
   29ef0:	d0f2      	beq.n	29ed8 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   29ef2:	688a      	ldr	r2, [r1, #8]
   29ef4:	402a      	ands	r2, r5
   29ef6:	d002      	beq.n	29efe <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   29ef8:	684b      	ldr	r3, [r1, #4]
   29efa:	4630      	mov	r0, r6
   29efc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   29efe:	b12c      	cbz	r4, 29f0c <nrfx_gpio_handler+0x40>
   29f00:	6823      	ldr	r3, [r4, #0]
   29f02:	4621      	mov	r1, r4
   29f04:	461c      	mov	r4, r3
   29f06:	e7f2      	b.n	29eee <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   29f08:	4e02      	ldr	r6, [pc, #8]	; (29f14 <nrfx_gpio_handler+0x48>)
   29f0a:	e7e7      	b.n	29edc <nrfx_gpio_handler+0x10>
   29f0c:	4623      	mov	r3, r4
   29f0e:	e7f8      	b.n	29f02 <nrfx_gpio_handler+0x36>
   29f10:	0002f45c 	.word	0x0002f45c
   29f14:	0002f448 	.word	0x0002f448

00029f18 <gpio_nrfx_pin_configure>:
{
   29f18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   29f1c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   29f1e:	7b3b      	ldrb	r3, [r7, #12]
   29f20:	f001 051f 	and.w	r5, r1, #31
   29f24:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   29f28:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   29f2a:	4628      	mov	r0, r5
   29f2c:	f10d 0103 	add.w	r1, sp, #3
{
   29f30:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   29f32:	f001 f87b 	bl	2b02c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   29f36:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   29f3a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   29f3c:	d10b      	bne.n	29f56 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   29f3e:	4628      	mov	r0, r5
   29f40:	f001 f92c 	bl	2b19c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   29f44:	4b3d      	ldr	r3, [pc, #244]	; (2a03c <gpio_nrfx_pin_configure+0x124>)
   29f46:	4598      	cmp	r8, r3
   29f48:	d103      	bne.n	29f52 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   29f4a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   29f4e:	f001 f8b1 	bl	2b0b4 <nrfx_gpiote_channel_free>
		return 0;
   29f52:	2000      	movs	r0, #0
   29f54:	e00c      	b.n	29f70 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   29f56:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   29f58:	4619      	mov	r1, r3
   29f5a:	aa02      	add	r2, sp, #8
   29f5c:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   29f5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   29f62:	f000 ff41 	bl	2ade8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   29f66:	4b35      	ldr	r3, [pc, #212]	; (2a03c <gpio_nrfx_pin_configure+0x124>)
   29f68:	4298      	cmp	r0, r3
   29f6a:	d004      	beq.n	29f76 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   29f6c:	f06f 0015 	mvn.w	r0, #21
}
   29f70:	b004      	add	sp, #16
   29f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   29f76:	4580      	cmp	r8, r0
   29f78:	d103      	bne.n	29f82 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   29f7a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   29f7e:	f001 f899 	bl	2b0b4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   29f82:	03a3      	lsls	r3, r4, #14
   29f84:	d54b      	bpl.n	2a01e <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   29f86:	f240 3306 	movw	r3, #774	; 0x306
   29f8a:	4023      	ands	r3, r4
   29f8c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   29f90:	d019      	beq.n	29fc6 <gpio_nrfx_pin_configure+0xae>
   29f92:	d80c      	bhi.n	29fae <gpio_nrfx_pin_configure+0x96>
   29f94:	2b06      	cmp	r3, #6
   29f96:	d017      	beq.n	29fc8 <gpio_nrfx_pin_configure+0xb0>
   29f98:	d804      	bhi.n	29fa4 <gpio_nrfx_pin_configure+0x8c>
   29f9a:	b1ab      	cbz	r3, 29fc8 <gpio_nrfx_pin_configure+0xb0>
   29f9c:	2b02      	cmp	r3, #2
   29f9e:	d1e5      	bne.n	29f6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   29fa0:	2304      	movs	r3, #4
   29fa2:	e011      	b.n	29fc8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   29fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   29fa8:	d1e0      	bne.n	29f6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   29faa:	2301      	movs	r3, #1
   29fac:	e00c      	b.n	29fc8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   29fae:	f240 2202 	movw	r2, #514	; 0x202
   29fb2:	4293      	cmp	r3, r2
   29fb4:	d027      	beq.n	2a006 <gpio_nrfx_pin_configure+0xee>
   29fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   29fba:	d026      	beq.n	2a00a <gpio_nrfx_pin_configure+0xf2>
   29fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   29fc0:	d1d4      	bne.n	29f6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   29fc2:	2302      	movs	r3, #2
   29fc4:	e000      	b.n	29fc8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   29fc6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   29fc8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   29fcc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   29fd0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   29fd4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   29fd6:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   29fda:	bf54      	ite	pl
   29fdc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   29fe0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   29fe2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   29fe4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   29fe8:	d511      	bpl.n	2a00e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   29fea:	687a      	ldr	r2, [r7, #4]
   29fec:	2301      	movs	r3, #1
   29fee:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   29ff0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   29ff4:	2200      	movs	r2, #0
   29ff6:	a901      	add	r1, sp, #4
   29ff8:	4628      	mov	r0, r5
   29ffa:	f000 ffa1 	bl	2af40 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   29ffe:	4b0f      	ldr	r3, [pc, #60]	; (2a03c <gpio_nrfx_pin_configure+0x124>)
   2a000:	4298      	cmp	r0, r3
   2a002:	d0a6      	beq.n	29f52 <gpio_nrfx_pin_configure+0x3a>
   2a004:	e7b2      	b.n	29f6c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   2a006:	2305      	movs	r3, #5
   2a008:	e7de      	b.n	29fc8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2a00a:	2303      	movs	r3, #3
   2a00c:	e7dc      	b.n	29fc8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   2a00e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   2a010:	bf41      	itttt	mi
   2a012:	2301      	movmi	r3, #1
   2a014:	687a      	ldrmi	r2, [r7, #4]
   2a016:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   2a018:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   2a01c:	e7ea      	b.n	29ff4 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   2a01e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2a020:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   2a024:	bf54      	ite	pl
   2a026:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2a02a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2a02c:	461a      	mov	r2, r3
   2a02e:	a901      	add	r1, sp, #4
   2a030:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   2a032:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2a036:	f000 fed7 	bl	2ade8 <nrfx_gpiote_input_configure>
   2a03a:	e7e0      	b.n	29ffe <gpio_nrfx_pin_configure+0xe6>
   2a03c:	0bad0000 	.word	0x0bad0000

0002a040 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   2a040:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   2a042:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2a046:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   2a048:	6002      	str	r2, [r0, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2a04a:	d004      	beq.n	2a056 <nrf_gpio_pin_port_decode+0x16>
    NRF_GPIO_Type * p_port = NULL;
   2a04c:	2b01      	cmp	r3, #1
   2a04e:	4803      	ldr	r0, [pc, #12]	; (2a05c <nrf_gpio_pin_port_decode+0x1c>)
   2a050:	bf18      	it	ne
   2a052:	2000      	movne	r0, #0
   2a054:	4770      	bx	lr
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2a056:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   2a05a:	4770      	bx	lr
   2a05c:	50000300 	.word	0x50000300

0002a060 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cnf &= ~to_update;
   2a064:	f8df 915c 	ldr.w	r9, [pc, #348]	; 2a1c4 <pinctrl_configure_pins+0x164>
   2a068:	b085      	sub	sp, #20
   2a06a:	4615      	mov	r5, r2
   2a06c:	4682      	mov	sl, r0
   2a06e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2a072:	f04f 0801 	mov.w	r8, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2a076:	4551      	cmp	r1, sl
   2a078:	d103      	bne.n	2a082 <pinctrl_configure_pins+0x22>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2a07a:	2000      	movs	r0, #0
}
   2a07c:	b005      	add	sp, #20
   2a07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2a082:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t psel = NRF_GET_PIN(pins[i]);
   2a086:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2a08a:	f3c3 2743 	ubfx	r7, r3, #9, #4
			psel = PSEL_DISCONNECTED;
   2a08e:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2a090:	ea4f 4313 	mov.w	r3, r3, lsr #16
			psel = PSEL_DISCONNECTED;
   2a094:	bf08      	it	eq
   2a096:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   2a09a:	2b22      	cmp	r3, #34	; 0x22
   2a09c:	f200 808f 	bhi.w	2a1be <pinctrl_configure_pins+0x15e>
   2a0a0:	e8df f003 	tbb	[pc, r3]
   2a0a4:	3b211912 	.word	0x3b211912
   2a0a8:	8d3b3524 	.word	0x8d3b3524
   2a0ac:	3e8d8d8d 	.word	0x3e8d8d8d
   2a0b0:	8d8d8d6a 	.word	0x8d8d8d6a
   2a0b4:	8d8d8d8d 	.word	0x8d8d8d8d
   2a0b8:	8d8d8d8d 	.word	0x8d8d8d8d
   2a0bc:	8d8d8d8d 	.word	0x8d8d8d8d
   2a0c0:	76736d8d 	.word	0x76736d8d
   2a0c4:	7c79      	.short	0x7c79
   2a0c6:	7f          	.byte	0x7f
   2a0c7:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = psel;
   2a0c8:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
		if (psel != PSEL_DISCONNECTED) {
   2a0cc:	1c62      	adds	r2, r4, #1
   2a0ce:	d16b      	bne.n	2a1a8 <pinctrl_configure_pins+0x148>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2a0d0:	f10a 0a04 	add.w	sl, sl, #4
   2a0d4:	e7cf      	b.n	2a076 <pinctrl_configure_pins+0x16>
			NRF_PSEL_UART(reg, RXD) = psel;
   2a0d6:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
		if (psel != PSEL_DISCONNECTED) {
   2a0da:	1c63      	adds	r3, r4, #1
   2a0dc:	d0f8      	beq.n	2a0d0 <pinctrl_configure_pins+0x70>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2a0de:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2a0e0:	f04f 0b00 	mov.w	fp, #0
   2a0e4:	e025      	b.n	2a132 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = psel;
   2a0e6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   2a0ea:	e7ef      	b.n	2a0cc <pinctrl_configure_pins+0x6c>
		if (psel != PSEL_DISCONNECTED) {
   2a0ec:	1c63      	adds	r3, r4, #1
			NRF_PSEL_SPIM(reg, SCK) = psel;
   2a0ee:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
		if (psel != PSEL_DISCONNECTED) {
   2a0f2:	d0ed      	beq.n	2a0d0 <pinctrl_configure_pins+0x70>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2a0f4:	2600      	movs	r6, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a0f6:	a803      	add	r0, sp, #12
   2a0f8:	9403      	str	r4, [sp, #12]
   2a0fa:	f7ff ffa1 	bl	2a040 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2a0fe:	9b03      	ldr	r3, [sp, #12]
   2a100:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTCLR = clr_mask;
   2a104:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   2a108:	f04f 0b01 	mov.w	fp, #1
   2a10c:	e011      	b.n	2a132 <pinctrl_configure_pins+0xd2>
		if (psel != PSEL_DISCONNECTED) {
   2a10e:	1c66      	adds	r6, r4, #1
			NRF_PSEL_SPIM(reg, MOSI) = psel;
   2a110:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
		if (psel != PSEL_DISCONNECTED) {
   2a114:	d0dc      	beq.n	2a0d0 <pinctrl_configure_pins+0x70>
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2a116:	2601      	movs	r6, #1
   2a118:	e7ed      	b.n	2a0f6 <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = psel;
   2a11a:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
		if (psel != PSEL_DISCONNECTED) {
   2a11e:	e7dc      	b.n	2a0da <pinctrl_configure_pins+0x7a>
			NRF_PSEL_TWIM(reg, SCL) = psel;
   2a120:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2a124:	2f00      	cmp	r7, #0
   2a126:	d1d8      	bne.n	2a0da <pinctrl_configure_pins+0x7a>
		if (psel != PSEL_DISCONNECTED) {
   2a128:	1c60      	adds	r0, r4, #1
   2a12a:	d0d1      	beq.n	2a0d0 <pinctrl_configure_pins+0x70>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2a12c:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2a12e:	46b3      	mov	fp, r6
				drive = NRF_DRIVE_S0D1;
   2a130:	2706      	movs	r7, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2a132:	f8da 3000 	ldr.w	r3, [sl]
   2a136:	9301      	str	r3, [sp, #4]
   2a138:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2a13c:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a13e:	a803      	add	r0, sp, #12
   2a140:	bf1c      	itt	ne
   2a142:	2601      	movne	r6, #1
   2a144:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   2a148:	9403      	str	r4, [sp, #12]
   2a14a:	f7ff ff79 	bl	2a040 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2a14e:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
   2a150:	9b01      	ldr	r3, [sp, #4]
   2a152:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   2a156:	f3c3 14c1 	ubfx	r4, r3, #7, #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2a15a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)  |
   2a15e:	023b      	lsls	r3, r7, #8
   2a160:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
   2a164:	ea43 030b 	orr.w	r3, r3, fp
    cnf &= ~to_update;
   2a168:	ea02 0209 	and.w	r2, r2, r9
   2a16c:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   2a16e:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2a172:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
   2a176:	e7ab      	b.n	2a0d0 <pinctrl_configure_pins+0x70>
			NRF_PSEL_TWIM(reg, SDA) = psel;
   2a178:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2a17c:	e7d2      	b.n	2a124 <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, SCK) = psel;
   2a17e:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
		if (psel != PSEL_DISCONNECTED) {
   2a182:	1c62      	adds	r2, r4, #1
   2a184:	d0a4      	beq.n	2a0d0 <pinctrl_configure_pins+0x70>
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2a186:	2601      	movs	r6, #1
   2a188:	e7aa      	b.n	2a0e0 <pinctrl_configure_pins+0x80>
			NRF_PSEL_QSPI(reg, CSN) = psel;
   2a18a:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
		if (psel != PSEL_DISCONNECTED) {
   2a18e:	e79d      	b.n	2a0cc <pinctrl_configure_pins+0x6c>
			NRF_PSEL_QSPI(reg, IO0) = psel;
   2a190:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
		if (psel != PSEL_DISCONNECTED) {
   2a194:	e7f5      	b.n	2a182 <pinctrl_configure_pins+0x122>
			NRF_PSEL_QSPI(reg, IO1) = psel;
   2a196:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
		if (psel != PSEL_DISCONNECTED) {
   2a19a:	e7f2      	b.n	2a182 <pinctrl_configure_pins+0x122>
			NRF_PSEL_QSPI(reg, IO2) = psel;
   2a19c:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
   2a1a0:	e7ef      	b.n	2a182 <pinctrl_configure_pins+0x122>
			NRF_PSEL_QSPI(reg, IO3) = psel;
   2a1a2:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
		if (psel != PSEL_DISCONNECTED) {
   2a1a6:	e7ec      	b.n	2a182 <pinctrl_configure_pins+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a1a8:	a803      	add	r0, sp, #12
   2a1aa:	9403      	str	r4, [sp, #12]
   2a1ac:	f7ff ff48 	bl	2a040 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2a1b0:	9b03      	ldr	r3, [sp, #12]
   2a1b2:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTSET = set_mask;
   2a1b6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
   2a1ba:	2601      	movs	r6, #1
   2a1bc:	e7a4      	b.n	2a108 <pinctrl_configure_pins+0xa8>
		switch (NRF_GET_FUN(pins[i])) {
   2a1be:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a1c2:	e75b      	b.n	2a07c <pinctrl_configure_pins+0x1c>
   2a1c4:	fffcf8f0 	.word	0xfffcf8f0

0002a1c8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   2a1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2a1ca:	794b      	ldrb	r3, [r1, #5]
   2a1cc:	2b01      	cmp	r3, #1
   2a1ce:	d026      	beq.n	2a21e <uarte_nrfx_configure+0x56>
   2a1d0:	2b03      	cmp	r3, #3
   2a1d2:	d121      	bne.n	2a218 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2a1d4:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2a1d6:	798b      	ldrb	r3, [r1, #6]
   2a1d8:	2b03      	cmp	r3, #3
   2a1da:	d11d      	bne.n	2a218 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   2a1dc:	79ce      	ldrb	r6, [r1, #7]
   2a1de:	b10e      	cbz	r6, 2a1e4 <uarte_nrfx_configure+0x1c>
   2a1e0:	2e01      	cmp	r6, #1
   2a1e2:	d119      	bne.n	2a218 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   2a1e4:	790a      	ldrb	r2, [r1, #4]
   2a1e6:	b112      	cbz	r2, 2a1ee <uarte_nrfx_configure+0x26>
   2a1e8:	2a02      	cmp	r2, #2
   2a1ea:	d115      	bne.n	2a218 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2a1ec:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2a1ee:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   2a1f0:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   2a1f2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2a1f6:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   2a1f8:	d067      	beq.n	2a2ca <uarte_nrfx_configure+0x102>
   2a1fa:	d82d      	bhi.n	2a258 <uarte_nrfx_configure+0x90>
   2a1fc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   2a200:	d066      	beq.n	2a2d0 <uarte_nrfx_configure+0x108>
   2a202:	d816      	bhi.n	2a232 <uarte_nrfx_configure+0x6a>
   2a204:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2a208:	d064      	beq.n	2a2d4 <uarte_nrfx_configure+0x10c>
   2a20a:	d80a      	bhi.n	2a222 <uarte_nrfx_configure+0x5a>
   2a20c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   2a210:	d063      	beq.n	2a2da <uarte_nrfx_configure+0x112>
   2a212:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2a216:	d063      	beq.n	2a2e0 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   2a218:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a21c:	e054      	b.n	2a2c8 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   2a21e:	2500      	movs	r5, #0
   2a220:	e7d9      	b.n	2a1d6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   2a222:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2a226:	d05e      	beq.n	2a2e6 <uarte_nrfx_configure+0x11e>
   2a228:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2a22c:	d1f4      	bne.n	2a218 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2a22e:	4b38      	ldr	r3, [pc, #224]	; (2a310 <uarte_nrfx_configure+0x148>)
   2a230:	e03c      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2a232:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2a236:	d059      	beq.n	2a2ec <uarte_nrfx_configure+0x124>
   2a238:	d807      	bhi.n	2a24a <uarte_nrfx_configure+0x82>
   2a23a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2a23e:	d057      	beq.n	2a2f0 <uarte_nrfx_configure+0x128>
   2a240:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   2a244:	d1e8      	bne.n	2a218 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2a246:	4b33      	ldr	r3, [pc, #204]	; (2a314 <uarte_nrfx_configure+0x14c>)
   2a248:	e030      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2a24a:	f647 2412 	movw	r4, #31250	; 0x7a12
   2a24e:	42a3      	cmp	r3, r4
   2a250:	d1e2      	bne.n	2a218 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   2a252:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2a256:	e029      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2a258:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2a25c:	d04a      	beq.n	2a2f4 <uarte_nrfx_configure+0x12c>
   2a25e:	d813      	bhi.n	2a288 <uarte_nrfx_configure+0xc0>
   2a260:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   2a264:	d049      	beq.n	2a2fa <uarte_nrfx_configure+0x132>
   2a266:	d809      	bhi.n	2a27c <uarte_nrfx_configure+0xb4>
   2a268:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   2a26c:	42a3      	cmp	r3, r4
   2a26e:	d046      	beq.n	2a2fe <uarte_nrfx_configure+0x136>
   2a270:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   2a274:	d1d0      	bne.n	2a218 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2a276:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2a27a:	e017      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2a27c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   2a280:	d1ca      	bne.n	2a218 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2a282:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2a286:	e011      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2a288:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   2a28c:	d03a      	beq.n	2a304 <uarte_nrfx_configure+0x13c>
   2a28e:	d808      	bhi.n	2a2a2 <uarte_nrfx_configure+0xda>
   2a290:	4c21      	ldr	r4, [pc, #132]	; (2a318 <uarte_nrfx_configure+0x150>)
   2a292:	42a3      	cmp	r3, r4
   2a294:	d039      	beq.n	2a30a <uarte_nrfx_configure+0x142>
   2a296:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2a29a:	d1bd      	bne.n	2a218 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2a29c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2a2a0:	e004      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2a2a2:	4c1e      	ldr	r4, [pc, #120]	; (2a31c <uarte_nrfx_configure+0x154>)
   2a2a4:	42a3      	cmp	r3, r4
   2a2a6:	d1b7      	bne.n	2a218 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2a2a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   2a2ac:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2a2ae:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   2a2b2:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   2a2b4:	4335      	orrs	r5, r6
   2a2b6:	681b      	ldr	r3, [r3, #0]
   2a2b8:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2a2ba:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   2a2be:	c903      	ldmia	r1, {r0, r1}
   2a2c0:	1d23      	adds	r3, r4, #4
   2a2c2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   2a2c6:	2000      	movs	r0, #0
}
   2a2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2a2ca:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2a2ce:	e7ed      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   2a2d0:	4b13      	ldr	r3, [pc, #76]	; (2a320 <uarte_nrfx_configure+0x158>)
   2a2d2:	e7eb      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2a2d4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2a2d8:	e7e8      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   2a2da:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2a2de:	e7e5      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2a2e0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2a2e4:	e7e2      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2a2e6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2a2ea:	e7df      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2a2ec:	4b0d      	ldr	r3, [pc, #52]	; (2a324 <uarte_nrfx_configure+0x15c>)
   2a2ee:	e7dd      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   2a2f0:	4b0d      	ldr	r3, [pc, #52]	; (2a328 <uarte_nrfx_configure+0x160>)
   2a2f2:	e7db      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2a2f4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2a2f8:	e7d8      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2a2fa:	4b0c      	ldr	r3, [pc, #48]	; (2a32c <uarte_nrfx_configure+0x164>)
   2a2fc:	e7d6      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2a2fe:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2a302:	e7d3      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2a304:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2a308:	e7d0      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2a30a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2a30e:	e7cd      	b.n	2a2ac <uarte_nrfx_configure+0xe4>
   2a310:	0013b000 	.word	0x0013b000
   2a314:	004ea000 	.word	0x004ea000
   2a318:	0003d090 	.word	0x0003d090
   2a31c:	000f4240 	.word	0x000f4240
   2a320:	00275000 	.word	0x00275000
   2a324:	0075c000 	.word	0x0075c000
   2a328:	003af000 	.word	0x003af000
   2a32c:	013a9000 	.word	0x013a9000

0002a330 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2a330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2a334:	4680      	mov	r8, r0
   2a336:	2200      	movs	r2, #0
   2a338:	2101      	movs	r1, #1
   2a33a:	2002      	movs	r0, #2
   2a33c:	f7fe f8e8 	bl	28510 <z_arm_irq_priority_set>
   2a340:	2002      	movs	r0, #2
   2a342:	f7fe f8b5 	bl	284b0 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   2a346:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   2a34a:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   2a34e:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2a350:	2100      	movs	r1, #0
   2a352:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   2a356:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2a35a:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   2a35e:	aa01      	add	r2, sp, #4
   2a360:	4648      	mov	r0, r9
   2a362:	f004 f982 	bl	2e66a <pinctrl_lookup_state>
	if (ret < 0) {
   2a366:	1e05      	subs	r5, r0, #0
   2a368:	db4c      	blt.n	2a404 <uarte_0_init+0xd4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   2a36a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2a36c:	f8d9 2000 	ldr.w	r2, [r9]
   2a370:	7919      	ldrb	r1, [r3, #4]
   2a372:	6818      	ldr	r0, [r3, #0]
   2a374:	f7ff fe74 	bl	2a060 <pinctrl_configure_pins>
	if (err < 0) {
   2a378:	1e05      	subs	r5, r0, #0
   2a37a:	db43      	blt.n	2a404 <uarte_0_init+0xd4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   2a37c:	1d31      	adds	r1, r6, #4
   2a37e:	4640      	mov	r0, r8
   2a380:	f7ff ff22 	bl	2a1c8 <uarte_nrfx_configure>
	if (err) {
   2a384:	4605      	mov	r5, r0
   2a386:	2800      	cmp	r0, #0
   2a388:	d13c      	bne.n	2a404 <uarte_0_init+0xd4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2a38a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2a38c:	0799      	lsls	r1, r3, #30
   2a38e:	d512      	bpl.n	2a3b6 <uarte_0_init+0x86>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2a390:	f106 001c 	add.w	r0, r6, #28
   2a394:	f001 f8aa 	bl	2b4ec <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   2a398:	4b1e      	ldr	r3, [pc, #120]	; (2a414 <uarte_0_init+0xe4>)
   2a39a:	4298      	cmp	r0, r3
   2a39c:	d136      	bne.n	2a40c <uarte_0_init+0xdc>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   2a39e:	7f30      	ldrb	r0, [r6, #28]
   2a3a0:	f104 020c 	add.w	r2, r4, #12
   2a3a4:	f504 7190 	add.w	r1, r4, #288	; 0x120
   2a3a8:	f004 fb01 	bl	2e9ae <nrfx_gppi_channel_endpoints_setup>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   2a3ac:	7f33      	ldrb	r3, [r6, #28]
   2a3ae:	2001      	movs	r0, #1
   2a3b0:	4098      	lsls	r0, r3
   2a3b2:	f000 fbd9 	bl	2ab68 <nrfx_gppi_channels_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2a3b6:	2308      	movs	r3, #8
   2a3b8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   2a3bc:	7a3b      	ldrb	r3, [r7, #8]
   2a3be:	b953      	cbnz	r3, 2a3d6 <uarte_0_init+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a3c0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2a3c4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
{
#if NRF_UARTE_HAS_DMA_REG
    p_reg->DMA.RX.PTR    = (uint32_t)p_buffer;
    p_reg->DMA.RX.MAXCNT = length;
#else
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2a3c8:	69b3      	ldr	r3, [r6, #24]
   2a3ca:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2a3ce:	2301      	movs	r3, #1
   2a3d0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a3d4:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2a3d6:	687b      	ldr	r3, [r7, #4]
   2a3d8:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   2a3da:	bf5c      	itt	pl
   2a3dc:	f44f 7380 	movpl.w	r3, #256	; 0x100
   2a3e0:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2a3e4:	687b      	ldr	r3, [r7, #4]
   2a3e6:	06db      	lsls	r3, r3, #27
   2a3e8:	bf44      	itt	mi
   2a3ea:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   2a3ee:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2a3f2:	6973      	ldr	r3, [r6, #20]
   2a3f4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2a3f8:	2300      	movs	r3, #0
   2a3fa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a3fe:	2301      	movs	r3, #1
   2a400:	60a3      	str	r3, [r4, #8]
   2a402:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   2a404:	4628      	mov	r0, r5
   2a406:	b003      	add	sp, #12
   2a408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   2a40c:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   2a410:	e7f8      	b.n	2a404 <uarte_0_init+0xd4>
   2a412:	bf00      	nop
   2a414:	0bad0000 	.word	0x0bad0000

0002a418 <uarte_nrfx_poll_out>:
{
   2a418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a41a:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2a41c:	6907      	ldr	r7, [r0, #16]
{
   2a41e:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2a420:	f004 fca5 	bl	2ed6e <k_is_in_isr>
   2a424:	b9b0      	cbnz	r0, 2a454 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   2a426:	4b21      	ldr	r3, [pc, #132]	; (2a4ac <uarte_nrfx_poll_out+0x94>)
   2a428:	781b      	ldrb	r3, [r3, #0]
   2a42a:	b19b      	cbz	r3, 2a454 <uarte_nrfx_poll_out+0x3c>
{
   2a42c:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2a42e:	6860      	ldr	r0, [r4, #4]
   2a430:	f004 f9fd 	bl	2e82e <is_tx_ready.isra.0>
   2a434:	bb00      	cbnz	r0, 2a478 <uarte_nrfx_poll_out+0x60>
   2a436:	2001      	movs	r0, #1
   2a438:	f004 fab7 	bl	2e9aa <nrfx_busy_wait>
   2a43c:	3e01      	subs	r6, #1
   2a43e:	d1f6      	bne.n	2a42e <uarte_nrfx_poll_out+0x16>
   2a440:	2100      	movs	r1, #0
   2a442:	2021      	movs	r0, #33	; 0x21
   2a444:	f002 ff1e 	bl	2d284 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2a448:	e7f0      	b.n	2a42c <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   2a44a:	f381 8811 	msr	BASEPRI, r1
   2a44e:	f3bf 8f6f 	isb	sy
}
   2a452:	e7f5      	b.n	2a440 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   2a454:	f04f 0320 	mov.w	r3, #32
   2a458:	f3ef 8111 	mrs	r1, BASEPRI
   2a45c:	f383 8812 	msr	BASEPRI_MAX, r3
   2a460:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2a464:	6860      	ldr	r0, [r4, #4]
   2a466:	460e      	mov	r6, r1
   2a468:	f004 f9e1 	bl	2e82e <is_tx_ready.isra.0>
   2a46c:	b990      	cbnz	r0, 2a494 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   2a46e:	f381 8811 	msr	BASEPRI, r1
   2a472:	f3bf 8f6f 	isb	sy
}
   2a476:	e7ed      	b.n	2a454 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   2a478:	f04f 0320 	mov.w	r3, #32
   2a47c:	f3ef 8111 	mrs	r1, BASEPRI
   2a480:	f383 8812 	msr	BASEPRI_MAX, r3
   2a484:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2a488:	6860      	ldr	r0, [r4, #4]
   2a48a:	460e      	mov	r6, r1
   2a48c:	f004 f9cf 	bl	2e82e <is_tx_ready.isra.0>
   2a490:	2800      	cmp	r0, #0
   2a492:	d0da      	beq.n	2a44a <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   2a494:	697b      	ldr	r3, [r7, #20]
   2a496:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   2a498:	6979      	ldr	r1, [r7, #20]
   2a49a:	2201      	movs	r2, #1
   2a49c:	4620      	mov	r0, r4
   2a49e:	f004 f906 	bl	2e6ae <tx_start>
	__asm__ volatile(
   2a4a2:	f386 8811 	msr	BASEPRI, r6
   2a4a6:	f3bf 8f6f 	isb	sy
}
   2a4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a4ac:	200014a7 	.word	0x200014a7

0002a4b0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   2a4b0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2a4b2:	2301      	movs	r3, #1
   2a4b4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a4b6:	4a0e      	ldr	r2, [pc, #56]	; (2a4f0 <compare_int_lock+0x40>)
   2a4b8:	f3bf 8f5b 	dmb	ish
   2a4bc:	43dc      	mvns	r4, r3
   2a4be:	e852 1f00 	ldrex	r1, [r2]
   2a4c2:	ea01 0504 	and.w	r5, r1, r4
   2a4c6:	e842 5600 	strex	r6, r5, [r2]
   2a4ca:	2e00      	cmp	r6, #0
   2a4cc:	d1f7      	bne.n	2a4be <compare_int_lock+0xe>
   2a4ce:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
   2a4d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2a4d6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   2a4d8:	4806      	ldr	r0, [pc, #24]	; (2a4f4 <compare_int_lock+0x44>)
   2a4da:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   2a4de:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a4e2:	f3bf 8f6f 	isb	sy

	barrier_dmem_fence_full();
	barrier_isync_fence_full();

	return prev & BIT(chan);
   2a4e6:	420b      	tst	r3, r1
}
   2a4e8:	bf14      	ite	ne
   2a4ea:	2001      	movne	r0, #1
   2a4ec:	2000      	moveq	r0, #0
   2a4ee:	bd70      	pop	{r4, r5, r6, pc}
   2a4f0:	200011cc 	.word	0x200011cc
   2a4f4:	40011000 	.word	0x40011000

0002a4f8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   2a4f8:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   2a4fa:	490e      	ldr	r1, [pc, #56]	; (2a534 <sys_clock_timeout_handler+0x3c>)
   2a4fc:	e9d1 3400 	ldrd	r3, r4, [r1]
   2a500:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   2a502:	18c3      	adds	r3, r0, r3
   2a504:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   2a508:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   2a50c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   2a510:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   2a514:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2a518:	d209      	bcs.n	2a52e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   2a51a:	4b07      	ldr	r3, [pc, #28]	; (2a538 <sys_clock_timeout_handler+0x40>)
   2a51c:	681b      	ldr	r3, [r3, #0]
   2a51e:	0a1a      	lsrs	r2, r3, #8
   2a520:	061b      	lsls	r3, r3, #24
   2a522:	199c      	adds	r4, r3, r6
   2a524:	4b05      	ldr	r3, [pc, #20]	; (2a53c <sys_clock_timeout_handler+0x44>)
   2a526:	f142 0500 	adc.w	r5, r2, #0
   2a52a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL, false);
	}

	sys_clock_announce(dticks);
}
   2a52e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   2a530:	f003 b82a 	b.w	2d588 <sys_clock_announce>
   2a534:	200004f0 	.word	0x200004f0
   2a538:	200011d0 	.word	0x200011d0
   2a53c:	200004f8 	.word	0x200004f8

0002a540 <compare_int_unlock>:
	if (key) {
   2a540:	b311      	cbz	r1, 2a588 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a542:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   2a546:	2301      	movs	r3, #1
   2a548:	4a10      	ldr	r2, [pc, #64]	; (2a58c <compare_int_unlock+0x4c>)
   2a54a:	4083      	lsls	r3, r0
   2a54c:	e852 cf00 	ldrex	ip, [r2]
   2a550:	ea4c 0c03 	orr.w	ip, ip, r3
   2a554:	e842 c100 	strex	r1, ip, [r2]
   2a558:	2900      	cmp	r1, #0
   2a55a:	d1f7      	bne.n	2a54c <compare_int_unlock+0xc>
   2a55c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   2a560:	4a0b      	ldr	r2, [pc, #44]	; (2a590 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
   2a562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2a566:	4083      	lsls	r3, r0
   2a568:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a56c:	4b09      	ldr	r3, [pc, #36]	; (2a594 <compare_int_unlock+0x54>)
   2a56e:	f3bf 8f5b 	dmb	ish
   2a572:	681b      	ldr	r3, [r3, #0]
   2a574:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2a578:	40c3      	lsrs	r3, r0
   2a57a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a57c:	bf42      	ittt	mi
   2a57e:	4b06      	ldrmi	r3, [pc, #24]	; (2a598 <compare_int_unlock+0x58>)
   2a580:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   2a584:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   2a588:	4770      	bx	lr
   2a58a:	bf00      	nop
   2a58c:	200011cc 	.word	0x200011cc
   2a590:	40011000 	.word	0x40011000
   2a594:	200011c8 	.word	0x200011c8
   2a598:	e000e100 	.word	0xe000e100

0002a59c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   2a59c:	4b0d      	ldr	r3, [pc, #52]	; (2a5d4 <z_nrf_rtc_timer_read+0x38>)
   2a59e:	6818      	ldr	r0, [r3, #0]
   2a5a0:	0a01      	lsrs	r1, r0, #8
   2a5a2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2a5a4:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   2a5a8:	4b0b      	ldr	r3, [pc, #44]	; (2a5d8 <z_nrf_rtc_timer_read+0x3c>)
   2a5aa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   2a5ae:	1818      	adds	r0, r3, r0
   2a5b0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2a5b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2a5b8:	d20a      	bcs.n	2a5d0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   2a5ba:	4b08      	ldr	r3, [pc, #32]	; (2a5dc <z_nrf_rtc_timer_read+0x40>)
   2a5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a5c0:	4290      	cmp	r0, r2
   2a5c2:	eb71 0303 	sbcs.w	r3, r1, r3
   2a5c6:	d203      	bcs.n	2a5d0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   2a5c8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   2a5cc:	f141 0100 	adc.w	r1, r1, #0
}
   2a5d0:	4770      	bx	lr
   2a5d2:	bf00      	nop
   2a5d4:	200011d0 	.word	0x200011d0
   2a5d8:	40011000 	.word	0x40011000
   2a5dc:	200004f8 	.word	0x200004f8

0002a5e0 <compare_set>:
{
   2a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a5e4:	b085      	sub	sp, #20
   2a5e6:	4616      	mov	r6, r2
   2a5e8:	461f      	mov	r7, r3
   2a5ea:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
   2a5ee:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   2a5f0:	f7ff ff5e 	bl	2a4b0 <compare_int_lock>
   2a5f4:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   2a5f6:	f7ff ffd1 	bl	2a59c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2a5fa:	42b0      	cmp	r0, r6
   2a5fc:	eb71 0307 	sbcs.w	r3, r1, r7
   2a600:	d254      	bcs.n	2a6ac <compare_set+0xcc>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   2a602:	4b3e      	ldr	r3, [pc, #248]	; (2a6fc <compare_set+0x11c>)
   2a604:	1a30      	subs	r0, r6, r0
   2a606:	eb67 0101 	sbc.w	r1, r7, r1
   2a60a:	4298      	cmp	r0, r3
   2a60c:	f171 0100 	sbcs.w	r1, r1, #0
   2a610:	d24f      	bcs.n	2a6b2 <compare_set+0xd2>
		if (target_time != cc_data[chan].target_time) {
   2a612:	4b3b      	ldr	r3, [pc, #236]	; (2a700 <compare_set+0x120>)
   2a614:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   2a618:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   2a61c:	429f      	cmp	r7, r3
   2a61e:	bf08      	it	eq
   2a620:	4296      	cmpeq	r6, r2
   2a622:	d05e      	beq.n	2a6e2 <compare_set+0x102>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   2a624:	4937      	ldr	r1, [pc, #220]	; (2a704 <compare_set+0x124>)
	nrf_rtc_event_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
   2a626:	f44f 3880 	mov.w	r8, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
   2a62a:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
   2a62e:	fa08 f804 	lsl.w	r8, r8, r4
	return nrf_rtc_event_check(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
   2a632:	00ad      	lsls	r5, r5, #2
   2a634:	f8c1 8348 	str.w	r8, [r1, #840]	; 0x348
	event_clear(chan);
   2a638:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a63a:	b2ad      	uxth	r5, r5
   2a63c:	f004 f9a4 	bl	2e988 <event_clear>
	return absolute_time & COUNTER_MAX;
   2a640:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   2a644:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   2a648:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a64c:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   2a650:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   2a652:	f04f 0903 	mov.w	r9, #3
    p_reg->CC[ch] = cc_val;
   2a656:	9302      	str	r3, [sp, #8]
   2a658:	9a02      	ldr	r2, [sp, #8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2a65a:	f02c 437f 	bic.w	r3, ip, #4278190080	; 0xff000000
   2a65e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    p_reg->EVTENSET = mask;
   2a662:	f8c1 8344 	str.w	r8, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   2a666:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   2a66a:	4a27      	ldr	r2, [pc, #156]	; (2a708 <compare_set+0x128>)
	return (a - b) & COUNTER_MAX;
   2a66c:	f06f 0002 	mvn.w	r0, #2
   2a670:	1ac0      	subs	r0, r0, r3
   2a672:	4460      	add	r0, ip
   2a674:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   2a678:	4290      	cmp	r0, r2
   2a67a:	d932      	bls.n	2a6e2 <compare_set+0x102>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a67c:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   2a67e:	b168      	cbz	r0, 2a69c <compare_set+0xbc>
     return p_reg->COUNTER;
   2a680:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   2a684:	9303      	str	r3, [sp, #12]
   2a686:	eba3 000b 	sub.w	r0, r3, fp
   2a68a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   2a68e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2a692:	d926      	bls.n	2a6e2 <compare_set+0x102>
					event_clear(chan);
   2a694:	4620      	mov	r0, r4
   2a696:	f004 f977 	bl	2e988 <event_clear>
					if (exact) {
   2a69a:	9b03      	ldr	r3, [sp, #12]
			} else if (exact) {
   2a69c:	f1ba 0f00 	cmp.w	sl, #0
   2a6a0:	d107      	bne.n	2a6b2 <compare_set+0xd2>
			cc_val = now + cc_inc;
   2a6a2:	eb09 0c03 	add.w	ip, r9, r3
			cc_inc++;
   2a6a6:	f109 0901 	add.w	r9, r9, #1
	for (;;) {
   2a6aa:	e7d5      	b.n	2a658 <compare_set+0x78>
	} else if (!exact) {
   2a6ac:	f1ba 0f00 	cmp.w	sl, #0
   2a6b0:	d009      	beq.n	2a6c6 <compare_set+0xe6>
			return -EINVAL;
   2a6b2:	f06f 0515 	mvn.w	r5, #21
	compare_int_unlock(chan, key);
   2a6b6:	4620      	mov	r0, r4
   2a6b8:	9901      	ldr	r1, [sp, #4]
   2a6ba:	f7ff ff41 	bl	2a540 <compare_int_unlock>
}
   2a6be:	4628      	mov	r0, r5
   2a6c0:	b005      	add	sp, #20
   2a6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		atomic_or(&force_isr_mask, BIT(chan));
   2a6c6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a6c8:	4a10      	ldr	r2, [pc, #64]	; (2a70c <compare_set+0x12c>)
   2a6ca:	f3bf 8f5b 	dmb	ish
   2a6ce:	40a3      	lsls	r3, r4
   2a6d0:	e852 0f00 	ldrex	r0, [r2]
   2a6d4:	4318      	orrs	r0, r3
   2a6d6:	e842 0100 	strex	r1, r0, [r2]
   2a6da:	2900      	cmp	r1, #0
   2a6dc:	d1f8      	bne.n	2a6d0 <compare_set+0xf0>
   2a6de:	f3bf 8f5b 	dmb	ish
		cc_data[chan].target_time = target_time;
   2a6e2:	4907      	ldr	r1, [pc, #28]	; (2a700 <compare_set+0x120>)
		cc_data[chan].callback = handler;
   2a6e4:	980e      	ldr	r0, [sp, #56]	; 0x38
		cc_data[chan].target_time = target_time;
   2a6e6:	0123      	lsls	r3, r4, #4
   2a6e8:	eb01 1204 	add.w	r2, r1, r4, lsl #4
		cc_data[chan].callback = handler;
   2a6ec:	50c8      	str	r0, [r1, r3]
		cc_data[chan].user_context = user_data;
   2a6ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2a6f0:	6053      	str	r3, [r2, #4]
		cc_data[chan].target_time = target_time;
   2a6f2:	e9c2 6702 	strd	r6, r7, [r2, #8]
		cc_data[chan].user_context = user_data;
   2a6f6:	2500      	movs	r5, #0
   2a6f8:	e7dd      	b.n	2a6b6 <compare_set+0xd6>
   2a6fa:	bf00      	nop
   2a6fc:	00800001 	.word	0x00800001
   2a700:	200004e0 	.word	0x200004e0
   2a704:	40011000 	.word	0x40011000
   2a708:	007ffffd 	.word	0x007ffffd
   2a70c:	200011c8 	.word	0x200011c8

0002a710 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   2a710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   2a712:	4c1c      	ldr	r4, [pc, #112]	; (2a784 <sys_clock_driver_init+0x74>)
   2a714:	4b1c      	ldr	r3, [pc, #112]	; (2a788 <sys_clock_driver_init+0x78>)
   2a716:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   2a71a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2a71e:	4b1b      	ldr	r3, [pc, #108]	; (2a78c <sys_clock_driver_init+0x7c>)
    p_reg->PRESCALER = val;
   2a720:	2500      	movs	r5, #0
   2a722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a726:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a72a:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   2a72e:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   2a732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2a736:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a73a:	4b15      	ldr	r3, [pc, #84]	; (2a790 <sys_clock_driver_init+0x80>)
   2a73c:	2602      	movs	r6, #2
   2a73e:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2a742:	2101      	movs	r1, #1
   2a744:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   2a748:	2011      	movs	r0, #17
   2a74a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   2a74e:	462a      	mov	r2, r5
   2a750:	f7fd fede 	bl	28510 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2a754:	2011      	movs	r0, #17
   2a756:	f7fd feab 	bl	284b0 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   2a75a:	4a0e      	ldr	r2, [pc, #56]	; (2a794 <sys_clock_driver_init+0x84>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2a75c:	2301      	movs	r3, #1
   2a75e:	60a3      	str	r3, [r4, #8]
   2a760:	6023      	str	r3, [r4, #0]
   2a762:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL, false);
   2a764:	4b0c      	ldr	r3, [pc, #48]	; (2a798 <sys_clock_driver_init+0x88>)
   2a766:	4a0d      	ldr	r2, [pc, #52]	; (2a79c <sys_clock_driver_init+0x8c>)
   2a768:	9300      	str	r3, [sp, #0]
   2a76a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   2a76e:	2300      	movs	r3, #0
   2a770:	4628      	mov	r0, r5
   2a772:	f7ff ff35 	bl	2a5e0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2a776:	4630      	mov	r0, r6
   2a778:	f7ff fa74 	bl	29c64 <z_nrf_clock_control_lf_on>

	return 0;
}
   2a77c:	4628      	mov	r0, r5
   2a77e:	b004      	add	sp, #16
   2a780:	bd70      	pop	{r4, r5, r6, pc}
   2a782:	bf00      	nop
   2a784:	40011000 	.word	0x40011000
   2a788:	000f0003 	.word	0x000f0003
   2a78c:	200004e0 	.word	0x200004e0
   2a790:	e000e100 	.word	0xe000e100
   2a794:	200011cc 	.word	0x200011cc
   2a798:	0002a4f9 	.word	0x0002a4f9
   2a79c:	007fffff 	.word	0x007fffff

0002a7a0 <rtc_nrf_isr>:
{
   2a7a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   2a7a4:	4c2f      	ldr	r4, [pc, #188]	; (2a864 <rtc_nrf_isr+0xc4>)
   2a7a6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2a7aa:	0799      	lsls	r1, r3, #30
   2a7ac:	d50b      	bpl.n	2a7c6 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a7ae:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2a7b2:	b143      	cbz	r3, 2a7c6 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   2a7b4:	4a2c      	ldr	r2, [pc, #176]	; (2a868 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2a7b6:	2300      	movs	r3, #0
   2a7b8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   2a7bc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2a7c0:	6813      	ldr	r3, [r2, #0]
   2a7c2:	3301      	adds	r3, #1
   2a7c4:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2a7c6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_CHANNEL_INT_MASK(chan))) {
   2a7ca:	03da      	lsls	r2, r3, #15
   2a7cc:	d52a      	bpl.n	2a824 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a7ce:	f3bf 8f5b 	dmb	ish
   2a7d2:	4b26      	ldr	r3, [pc, #152]	; (2a86c <rtc_nrf_isr+0xcc>)
   2a7d4:	e853 2f00 	ldrex	r2, [r3]
   2a7d8:	f022 0101 	bic.w	r1, r2, #1
   2a7dc:	e843 1000 	strex	r0, r1, [r3]
   2a7e0:	2800      	cmp	r0, #0
   2a7e2:	d1f7      	bne.n	2a7d4 <rtc_nrf_isr+0x34>
   2a7e4:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   2a7e8:	07d3      	lsls	r3, r2, #31
   2a7ea:	d402      	bmi.n	2a7f2 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a7ec:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   2a7f0:	b1c3      	cbz	r3, 2a824 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2a7f2:	2500      	movs	r5, #0
   2a7f4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2a7f8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   2a7fc:	f7ff fece 	bl	2a59c <z_nrf_rtc_timer_read>
	__asm__ volatile(
   2a800:	f04f 0320 	mov.w	r3, #32
   2a804:	f3ef 8211 	mrs	r2, BASEPRI
   2a808:	f383 8812 	msr	BASEPRI_MAX, r3
   2a80c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   2a810:	4b17      	ldr	r3, [pc, #92]	; (2a870 <rtc_nrf_isr+0xd0>)
   2a812:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   2a816:	42b0      	cmp	r0, r6
   2a818:	41b9      	sbcs	r1, r7
   2a81a:	d206      	bcs.n	2a82a <rtc_nrf_isr+0x8a>
	__asm__ volatile(
   2a81c:	f382 8811 	msr	BASEPRI, r2
   2a820:	f3bf 8f6f 	isb	sy
}
   2a824:	b003      	add	sp, #12
   2a826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2a82a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2a82e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2a832:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   2a836:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   2a83a:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   2a83c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2a840:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2a844:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2a848:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   2a84c:	f382 8811 	msr	BASEPRI, r2
   2a850:	f3bf 8f6f 	isb	sy
		if (handler) {
   2a854:	2900      	cmp	r1, #0
   2a856:	d0e5      	beq.n	2a824 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
   2a858:	9000      	str	r0, [sp, #0]
   2a85a:	4632      	mov	r2, r6
   2a85c:	463b      	mov	r3, r7
   2a85e:	4628      	mov	r0, r5
   2a860:	4788      	blx	r1
   2a862:	e7df      	b.n	2a824 <rtc_nrf_isr+0x84>
   2a864:	40011000 	.word	0x40011000
   2a868:	200011d0 	.word	0x200011d0
   2a86c:	200011c8 	.word	0x200011c8
   2a870:	200004e0 	.word	0x200004e0

0002a874 <sys_clock_set_timeout>:
{
   2a874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   2a876:	1c43      	adds	r3, r0, #1
   2a878:	d023      	beq.n	2a8c2 <sys_clock_set_timeout+0x4e>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2a87a:	2801      	cmp	r0, #1
   2a87c:	dd23      	ble.n	2a8c6 <sys_clock_set_timeout+0x52>
   2a87e:	4a13      	ldr	r2, [pc, #76]	; (2a8cc <sys_clock_set_timeout+0x58>)
   2a880:	4b13      	ldr	r3, [pc, #76]	; (2a8d0 <sys_clock_set_timeout+0x5c>)
   2a882:	4290      	cmp	r0, r2
   2a884:	bfd4      	ite	le
   2a886:	4604      	movle	r4, r0
   2a888:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2a88a:	f7ff fe87 	bl	2a59c <z_nrf_rtc_timer_read>
   2a88e:	4b11      	ldr	r3, [pc, #68]	; (2a8d4 <sys_clock_set_timeout+0x60>)
	if (cyc > MAX_CYCLES) {
   2a890:	490f      	ldr	r1, [pc, #60]	; (2a8d0 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2a892:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a896:	1a80      	subs	r0, r0, r2
		cyc = 0;
   2a898:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2a89c:	bf28      	it	cs
   2a89e:	2400      	movcs	r4, #0
	cyc += unannounced;
   2a8a0:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   2a8a2:	428c      	cmp	r4, r1
   2a8a4:	bf28      	it	cs
   2a8a6:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   2a8a8:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
   2a8aa:	490b      	ldr	r1, [pc, #44]	; (2a8d8 <sys_clock_set_timeout+0x64>)
   2a8ac:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   2a8ae:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
   2a8b2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2a8b6:	f143 0300 	adc.w	r3, r3, #0
   2a8ba:	f7ff fe91 	bl	2a5e0 <compare_set>
}
   2a8be:	b004      	add	sp, #16
   2a8c0:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   2a8c2:	4c03      	ldr	r4, [pc, #12]	; (2a8d0 <sys_clock_set_timeout+0x5c>)
   2a8c4:	e7e1      	b.n	2a88a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2a8c6:	2401      	movs	r4, #1
   2a8c8:	e7df      	b.n	2a88a <sys_clock_set_timeout+0x16>
   2a8ca:	bf00      	nop
   2a8cc:	007ffffe 	.word	0x007ffffe
   2a8d0:	007fffff 	.word	0x007fffff
   2a8d4:	200004f0 	.word	0x200004f0
   2a8d8:	0002a4f9 	.word	0x0002a4f9

0002a8dc <sys_clock_elapsed>:
{
   2a8dc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2a8de:	f7ff fe5d 	bl	2a59c <z_nrf_rtc_timer_read>
   2a8e2:	4b02      	ldr	r3, [pc, #8]	; (2a8ec <sys_clock_elapsed+0x10>)
   2a8e4:	681b      	ldr	r3, [r3, #0]
}
   2a8e6:	1ac0      	subs	r0, r0, r3
   2a8e8:	bd08      	pop	{r3, pc}
   2a8ea:	bf00      	nop
   2a8ec:	200004f0 	.word	0x200004f0

0002a8f0 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2a8f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2a8f4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2a8f8:	2a08      	cmp	r2, #8
   2a8fa:	d106      	bne.n	2a90a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2a8fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   2a900:	2b05      	cmp	r3, #5
   2a902:	d802      	bhi.n	2a90a <nrf52_errata_103+0x1a>
   2a904:	4a02      	ldr	r2, [pc, #8]	; (2a910 <nrf52_errata_103+0x20>)
   2a906:	5cd0      	ldrb	r0, [r2, r3]
   2a908:	4770      	bx	lr
                {
                    case 0x00ul:
                        return true;
                    case 0x01ul:
                        return false;
   2a90a:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   2a90c:	4770      	bx	lr
   2a90e:	bf00      	nop
   2a910:	0002fb44 	.word	0x0002fb44

0002a914 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   2a914:	4a02      	ldr	r2, [pc, #8]	; (2a920 <nvmc_wait+0xc>)
   2a916:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2a91a:	2b00      	cmp	r3, #0
   2a91c:	d0fb      	beq.n	2a916 <nvmc_wait+0x2>
}
   2a91e:	4770      	bx	lr
   2a920:	4001e000 	.word	0x4001e000

0002a924 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   2a924:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2a926:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2a92a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2a92e:	2a08      	cmp	r2, #8
   2a930:	d14e      	bne.n	2a9d0 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   2a932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2a936:	2100      	movs	r1, #0
   2a938:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   2a93c:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2a940:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   2a944:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   2a948:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   2a94c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   2a950:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   2a954:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   2a958:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   2a95c:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   2a960:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   2a964:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   2a968:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   2a96c:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   2a970:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2a974:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   2a978:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   2a97c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   2a980:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   2a984:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2a988:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   2a98c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   2a990:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   2a994:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2a998:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   2a99c:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   2a9a0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   2a9a4:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   2a9a8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   2a9ac:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   2a9b0:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   2a9b4:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   2a9b8:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   2a9bc:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   2a9c0:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   2a9c4:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2a9c8:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   2a9cc:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   2a9d0:	f7ff ff8e 	bl	2a8f0 <nrf52_errata_103>
   2a9d4:	b118      	cbz	r0, 2a9de <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   2a9d6:	4b3a      	ldr	r3, [pc, #232]	; (2aac0 <SystemInit+0x19c>)
   2a9d8:	4a3a      	ldr	r2, [pc, #232]	; (2aac4 <SystemInit+0x1a0>)
   2a9da:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   2a9de:	f7ff ff87 	bl	2a8f0 <nrf52_errata_103>
   2a9e2:	b118      	cbz	r0, 2a9ec <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   2a9e4:	4b38      	ldr	r3, [pc, #224]	; (2aac8 <SystemInit+0x1a4>)
   2a9e6:	22fb      	movs	r2, #251	; 0xfb
   2a9e8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   2a9ec:	f7ff ff80 	bl	2a8f0 <nrf52_errata_103>
   2a9f0:	b170      	cbz	r0, 2aa10 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   2a9f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2a9f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2a9fa:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   2a9fe:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   2aa02:	f022 020f 	bic.w	r2, r2, #15
   2aa06:	f003 030f 	and.w	r3, r3, #15
   2aa0a:	4313      	orrs	r3, r2
   2aa0c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   2aa10:	f7ff ff6e 	bl	2a8f0 <nrf52_errata_103>
   2aa14:	b120      	cbz	r0, 2aa20 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   2aa16:	4b2d      	ldr	r3, [pc, #180]	; (2aacc <SystemInit+0x1a8>)
   2aa18:	f44f 7200 	mov.w	r2, #512	; 0x200
   2aa1c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2aa20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2aa24:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2aa28:	2b08      	cmp	r3, #8
   2aa2a:	d11a      	bne.n	2aa62 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2aa2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2aa30:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   2aa34:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   2aa36:	bf44      	itt	mi
   2aa38:	f06f 0201 	mvnmi.w	r2, #1
   2aa3c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2aa40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2aa44:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   2aa48:	2b05      	cmp	r3, #5
   2aa4a:	d802      	bhi.n	2aa52 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2aa4c:	4a20      	ldr	r2, [pc, #128]	; (2aad0 <SystemInit+0x1ac>)
   2aa4e:	5cd3      	ldrb	r3, [r2, r3]
   2aa50:	b13b      	cbz	r3, 2aa62 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2aa52:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2aa56:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2aa5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2aa5e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2aa62:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2aa66:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2aa6a:	2a00      	cmp	r2, #0
   2aa6c:	db03      	blt.n	2aa76 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   2aa6e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2aa72:	2b00      	cmp	r3, #0
   2aa74:	da22      	bge.n	2aabc <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2aa76:	4917      	ldr	r1, [pc, #92]	; (2aad4 <SystemInit+0x1b0>)
   2aa78:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2aa7a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2aa7e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2aa82:	2412      	movs	r4, #18
    nvmc_wait();
   2aa84:	f7ff ff46 	bl	2a914 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2aa88:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2aa8c:	f7ff ff42 	bl	2a914 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2aa90:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   2aa94:	f7ff ff3e 	bl	2a914 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2aa98:	2300      	movs	r3, #0
   2aa9a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2aa9e:	f7ff ff39 	bl	2a914 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   2aaa2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2aaa6:	490c      	ldr	r1, [pc, #48]	; (2aad8 <SystemInit+0x1b4>)
   2aaa8:	4b0c      	ldr	r3, [pc, #48]	; (2aadc <SystemInit+0x1b8>)
   2aaaa:	68ca      	ldr	r2, [r1, #12]
   2aaac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2aab0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2aab2:	60cb      	str	r3, [r1, #12]
   2aab4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2aab8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2aaba:	e7fd      	b.n	2aab8 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   2aabc:	bd10      	pop	{r4, pc}
   2aabe:	bf00      	nop
   2aac0:	40005000 	.word	0x40005000
   2aac4:	00038148 	.word	0x00038148
   2aac8:	4000f000 	.word	0x4000f000
   2aacc:	40029000 	.word	0x40029000
   2aad0:	0002fb3e 	.word	0x0002fb3e
   2aad4:	4001e000 	.word	0x4001e000
   2aad8:	e000ed00 	.word	0xe000ed00
   2aadc:	05fa0004 	.word	0x05fa0004

0002aae0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2aae0:	b530      	push	{r4, r5, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   2aae2:	6804      	ldr	r4, [r0, #0]
        if (prev_mask == 0)
   2aae4:	b1cc      	cbz	r4, 2ab1a <nrfx_flag32_alloc+0x3a>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2aae6:	f3bf 8f5b 	dmb	ish
        {
            return NRFX_ERROR_NO_MEM;
        }

        idx = 31 - NRF_CLZ(prev_mask);
   2aaea:	fab4 f384 	clz	r3, r4
   2aaee:	f1c3 031f 	rsb	r3, r3, #31
   2aaf2:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2aaf4:	2201      	movs	r2, #1
   2aaf6:	409a      	lsls	r2, r3
   2aaf8:	ea24 0202 	bic.w	r2, r4, r2
   2aafc:	e850 5f00 	ldrex	r5, [r0]
   2ab00:	42a5      	cmp	r5, r4
   2ab02:	d104      	bne.n	2ab0e <nrfx_flag32_alloc+0x2e>
   2ab04:	e840 2c00 	strex	ip, r2, [r0]
   2ab08:	f1bc 0f00 	cmp.w	ip, #0
   2ab0c:	d1f6      	bne.n	2aafc <nrfx_flag32_alloc+0x1c>
   2ab0e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2ab12:	d1e6      	bne.n	2aae2 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;

    return NRFX_SUCCESS;
   2ab14:	4802      	ldr	r0, [pc, #8]	; (2ab20 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   2ab16:	700b      	strb	r3, [r1, #0]
}
   2ab18:	bd30      	pop	{r4, r5, pc}
            return NRFX_ERROR_NO_MEM;
   2ab1a:	4802      	ldr	r0, [pc, #8]	; (2ab24 <nrfx_flag32_alloc+0x44>)
   2ab1c:	e7fc      	b.n	2ab18 <nrfx_flag32_alloc+0x38>
   2ab1e:	bf00      	nop
   2ab20:	0bad0000 	.word	0x0bad0000
   2ab24:	0bad0002 	.word	0x0bad0002

0002ab28 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   2ab28:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   2ab2a:	6803      	ldr	r3, [r0, #0]
   2ab2c:	40cb      	lsrs	r3, r1
   2ab2e:	07db      	lsls	r3, r3, #31
   2ab30:	d414      	bmi.n	2ab5c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2ab32:	2301      	movs	r3, #1
   2ab34:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   2ab36:	6802      	ldr	r2, [r0, #0]
   2ab38:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   2ab3c:	ea43 0102 	orr.w	r1, r3, r2
   2ab40:	e850 4f00 	ldrex	r4, [r0]
   2ab44:	4294      	cmp	r4, r2
   2ab46:	d104      	bne.n	2ab52 <nrfx_flag32_free+0x2a>
   2ab48:	e840 1c00 	strex	ip, r1, [r0]
   2ab4c:	f1bc 0f00 	cmp.w	ip, #0
   2ab50:	d1f6      	bne.n	2ab40 <nrfx_flag32_free+0x18>
   2ab52:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2ab56:	d1ee      	bne.n	2ab36 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   2ab58:	4801      	ldr	r0, [pc, #4]	; (2ab60 <nrfx_flag32_free+0x38>)
}
   2ab5a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2ab5c:	4801      	ldr	r0, [pc, #4]	; (2ab64 <nrfx_flag32_free+0x3c>)
   2ab5e:	e7fc      	b.n	2ab5a <nrfx_flag32_free+0x32>
   2ab60:	0bad0000 	.word	0x0bad0000
   2ab64:	0bad0004 	.word	0x0bad0004

0002ab68 <nrfx_gppi_channels_enable>:
    p_reg->CHENCLR = ((uint32_t)0xFFFFFFFFuL);
}

NRF_STATIC_INLINE void nrf_ppi_channels_enable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   2ab68:	4b01      	ldr	r3, [pc, #4]	; (2ab70 <nrfx_gppi_channels_enable+0x8>)
   2ab6a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}

void nrfx_gppi_channels_enable(uint32_t mask)
{
    nrf_ppi_channels_enable(NRF_PPI, mask);
}
   2ab6e:	4770      	bx	lr
   2ab70:	4001f000 	.word	0x4001f000

0002ab74 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   2ab74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   2ab76:	4604      	mov	r4, r0
   2ab78:	b118      	cbz	r0, 2ab82 <clock_stop+0xe>
   2ab7a:	2801      	cmp	r0, #1
   2ab7c:	d023      	beq.n	2abc6 <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   2ab7e:	b003      	add	sp, #12
   2ab80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   2ab82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ab86:	2202      	movs	r2, #2
   2ab88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ab8c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   2ab90:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ab94:	2201      	movs	r2, #1
   2ab96:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2ab98:	4606      	mov	r6, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   2ab9a:	2301      	movs	r3, #1
   2ab9c:	f88d 3007 	strb.w	r3, [sp, #7]
   2aba0:	f242 7510 	movw	r5, #10000	; 0x2710
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
   2aba4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    switch (domain)
   2aba8:	b1d4      	cbz	r4, 2abe0 <clock_stop+0x6c>
   2abaa:	2c01      	cmp	r4, #1
   2abac:	d1e7      	bne.n	2ab7e <clock_stop+0xa>
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
   2abae:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
   2abb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
   2abb6:	bbae      	cbnz	r6, 2ac24 <clock_stop+0xb0>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2abb8:	b383      	cbz	r3, 2ac1c <clock_stop+0xa8>
   2abba:	2001      	movs	r0, #1
   2abbc:	f003 fef5 	bl	2e9aa <nrfx_busy_wait>
   2abc0:	3d01      	subs	r5, #1
   2abc2:	d1f4      	bne.n	2abae <clock_stop+0x3a>
   2abc4:	e02a      	b.n	2ac1c <clock_stop+0xa8>
    p_reg->INTENCLR = mask;
   2abc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2abca:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   2abcc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2abd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2abd4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2abd8:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2abda:	f10d 0607 	add.w	r6, sp, #7
   2abde:	e7dc      	b.n	2ab9a <clock_stop+0x26>
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   2abe0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
   2abe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
   2abe8:	b93e      	cbnz	r6, 2abfa <clock_stop+0x86>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2abea:	2b00      	cmp	r3, #0
   2abec:	d0c7      	beq.n	2ab7e <clock_stop+0xa>
   2abee:	2001      	movs	r0, #1
   2abf0:	f003 fedb 	bl	2e9aa <nrfx_busy_wait>
   2abf4:	3d01      	subs	r5, #1
   2abf6:	d1f3      	bne.n	2abe0 <clock_stop+0x6c>
   2abf8:	e7c1      	b.n	2ab7e <clock_stop+0xa>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   2abfa:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
   2abfe:	f002 0203 	and.w	r2, r2, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   2ac02:	6032      	str	r2, [r6, #0]
   2ac04:	2b00      	cmp	r3, #0
   2ac06:	d0ba      	beq.n	2ab7e <clock_stop+0xa>
   2ac08:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2ac0c:	2801      	cmp	r0, #1
   2ac0e:	d103      	bne.n	2ac18 <clock_stop+0xa4>
   2ac10:	f003 fecb 	bl	2e9aa <nrfx_busy_wait>
   2ac14:	3d01      	subs	r5, #1
   2ac16:	d1c7      	bne.n	2aba8 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   2ac18:	2c01      	cmp	r4, #1
   2ac1a:	d1b0      	bne.n	2ab7e <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
   2ac1c:	4b05      	ldr	r3, [pc, #20]	; (2ac34 <clock_stop+0xc0>)
   2ac1e:	2200      	movs	r2, #0
   2ac20:	715a      	strb	r2, [r3, #5]
   2ac22:	e7ac      	b.n	2ab7e <clock_stop+0xa>
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_SRC_Msk)
   2ac24:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
   2ac28:	f002 0201 	and.w	r2, r2, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2ac2c:	7032      	strb	r2, [r6, #0]
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2ac2e:	2b00      	cmp	r3, #0
   2ac30:	d1ea      	bne.n	2ac08 <clock_stop+0x94>
   2ac32:	e7f3      	b.n	2ac1c <clock_stop+0xa8>
   2ac34:	200011d4 	.word	0x200011d4

0002ac38 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2ac38:	4b04      	ldr	r3, [pc, #16]	; (2ac4c <nrfx_clock_init+0x14>)
   2ac3a:	791a      	ldrb	r2, [r3, #4]
   2ac3c:	b922      	cbnz	r2, 2ac48 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2ac3e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   2ac40:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   2ac42:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   2ac44:	4802      	ldr	r0, [pc, #8]	; (2ac50 <nrfx_clock_init+0x18>)
   2ac46:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2ac48:	4802      	ldr	r0, [pc, #8]	; (2ac54 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2ac4a:	4770      	bx	lr
   2ac4c:	200011d4 	.word	0x200011d4
   2ac50:	0bad0000 	.word	0x0bad0000
   2ac54:	0bad000c 	.word	0x0bad000c

0002ac58 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   2ac58:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2ac5a:	2000      	movs	r0, #0
   2ac5c:	f7fd fc4a 	bl	284f4 <arch_irq_is_enabled>
   2ac60:	b908      	cbnz	r0, 2ac66 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2ac62:	f7fd fc25 	bl	284b0 <arch_irq_enable>
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   2ac66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ac6a:	2200      	movs	r2, #0
   2ac6c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   2ac70:	4b01      	ldr	r3, [pc, #4]	; (2ac78 <nrfx_clock_enable+0x20>)
   2ac72:	2201      	movs	r2, #1
   2ac74:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   2ac76:	bd08      	pop	{r3, pc}
   2ac78:	200014a1 	.word	0x200014a1

0002ac7c <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   2ac7c:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2ac7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ac82:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2ac86:	b16a      	cbz	r2, 2aca4 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ac88:	2200      	movs	r2, #0
   2ac8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2ac8e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   2ac92:	2201      	movs	r2, #1
   2ac94:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   2ac98:	4b11      	ldr	r3, [pc, #68]	; (2ace0 <nrfx_clock_irq_handler+0x64>)
   2ac9a:	7958      	ldrb	r0, [r3, #5]
   2ac9c:	b910      	cbnz	r0, 2aca4 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   2ac9e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2aca0:	681b      	ldr	r3, [r3, #0]
   2aca2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2aca4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2aca8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2acac:	b172      	cbz	r2, 2accc <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2acae:	2200      	movs	r2, #0
   2acb0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2acb4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   2acb8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   2acbc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   2acc0:	0792      	lsls	r2, r2, #30
   2acc2:	d104      	bne.n	2acce <nrfx_clock_irq_handler+0x52>
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   2acc4:	2201      	movs	r2, #1
   2acc6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2acca:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   2accc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   2acce:	2202      	movs	r2, #2
   2acd0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2acd4:	4b02      	ldr	r3, [pc, #8]	; (2ace0 <nrfx_clock_irq_handler+0x64>)
}
   2acd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2acda:	681b      	ldr	r3, [r3, #0]
   2acdc:	2001      	movs	r0, #1
   2acde:	4718      	bx	r3
   2ace0:	200011d4 	.word	0x200011d4

0002ace4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   2ace4:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   2ace6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2acea:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   2acec:	6002      	str	r2, [r0, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2acee:	d004      	beq.n	2acfa <nrf_gpio_pin_port_decode+0x16>
    NRF_GPIO_Type * p_port = NULL;
   2acf0:	2b01      	cmp	r3, #1
   2acf2:	4803      	ldr	r0, [pc, #12]	; (2ad00 <nrf_gpio_pin_port_decode+0x1c>)
   2acf4:	bf18      	it	ne
   2acf6:	2000      	movne	r0, #0
   2acf8:	4770      	bx	lr
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2acfa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   2acfe:	4770      	bx	lr
   2ad00:	50000300 	.word	0x50000300

0002ad04 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrfy_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   2ad04:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2ad06:	f100 0308 	add.w	r3, r0, #8
   2ad0a:	4c0c      	ldr	r4, [pc, #48]	; (2ad3c <call_handler+0x38>)
   2ad0c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   2ad10:	05da      	lsls	r2, r3, #23
{
   2ad12:	4605      	mov	r5, r0
   2ad14:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2ad16:	d507      	bpl.n	2ad28 <call_handler+0x24>
   2ad18:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   2ad1c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   2ad20:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   2ad24:	6852      	ldr	r2, [r2, #4]
   2ad26:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   2ad28:	68a3      	ldr	r3, [r4, #8]
   2ad2a:	b12b      	cbz	r3, 2ad38 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2ad2c:	68e2      	ldr	r2, [r4, #12]
   2ad2e:	4631      	mov	r1, r6
   2ad30:	4628      	mov	r0, r5
    }
}
   2ad32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2ad36:	4718      	bx	r3
}
   2ad38:	bd70      	pop	{r4, r5, r6, pc}
   2ad3a:	bf00      	nop
   2ad3c:	200001f0 	.word	0x200001f0

0002ad40 <release_handler>:
{
   2ad40:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2ad42:	4a12      	ldr	r2, [pc, #72]	; (2ad8c <release_handler+0x4c>)
   2ad44:	3008      	adds	r0, #8
   2ad46:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   2ad4a:	05d9      	lsls	r1, r3, #23
   2ad4c:	d51b      	bpl.n	2ad86 <release_handler+0x46>
   2ad4e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   2ad52:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2ad56:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2ad5a:	f102 040e 	add.w	r4, r2, #14
   2ad5e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2ad60:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   2ad64:	f413 7f80 	tst.w	r3, #256	; 0x100
   2ad68:	d003      	beq.n	2ad72 <release_handler+0x32>
   2ad6a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2ad6e:	4299      	cmp	r1, r3
   2ad70:	d009      	beq.n	2ad86 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2ad72:	3001      	adds	r0, #1
   2ad74:	2830      	cmp	r0, #48	; 0x30
   2ad76:	d1f3      	bne.n	2ad60 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   2ad78:	2300      	movs	r3, #0
   2ad7a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2ad7e:	4804      	ldr	r0, [pc, #16]	; (2ad90 <release_handler+0x50>)
}
   2ad80:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2ad82:	f7ff bed1 	b.w	2ab28 <nrfx_flag32_free>
}
   2ad86:	bc10      	pop	{r4}
   2ad88:	4770      	bx	lr
   2ad8a:	bf00      	nop
   2ad8c:	200001f0 	.word	0x200001f0
   2ad90:	20000264 	.word	0x20000264

0002ad94 <__nrfy_internal_gpiote_events_process.constprop.0>:
        return true;
    }
    return false;
}

NRFY_STATIC_INLINE uint32_t __nrfy_internal_gpiote_events_process(NRF_GPIOTE_Type * p_reg,
   2ad94:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ad96:	4601      	mov	r1, r0
   2ad98:	4a10      	ldr	r2, [pc, #64]	; (2addc <__nrfy_internal_gpiote_events_process.constprop.0+0x48>)
                                                                  uint32_t          mask)
{
    uint32_t event_mask = 0;

    nrf_barrier_r();
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
   2ad9a:	4c11      	ldr	r4, [pc, #68]	; (2ade0 <__nrfy_internal_gpiote_events_process.constprop.0+0x4c>)
    uint32_t event_mask = 0;
   2ad9c:	2000      	movs	r0, #0
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
   2ad9e:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2ada0:	4606      	mov	r6, r0
   2ada2:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
   2ada6:	f5a3 43c2 	sub.w	r3, r3, #24832	; 0x6100
   2adaa:	089b      	lsrs	r3, r3, #2
   2adac:	fa05 f303 	lsl.w	r3, r5, r3
   2adb0:	4219      	tst	r1, r3
   2adb2:	d004      	beq.n	2adbe <__nrfy_internal_gpiote_events_process.constprop.0+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2adb4:	6817      	ldr	r7, [r2, #0]
   2adb6:	b117      	cbz	r7, 2adbe <__nrfy_internal_gpiote_events_process.constprop.0+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2adb8:	6016      	str	r6, [r2, #0]
   2adba:	6817      	ldr	r7, [r2, #0]
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
   2adbc:	4318      	orrs	r0, r3
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
   2adbe:	3204      	adds	r2, #4
   2adc0:	42a2      	cmp	r2, r4
   2adc2:	d1ee      	bne.n	2ada2 <__nrfy_internal_gpiote_events_process.constprop.0+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2adc4:	4b07      	ldr	r3, [pc, #28]	; (2ade4 <__nrfy_internal_gpiote_events_process.constprop.0+0x50>)
   2adc6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
   2adca:	b132      	cbz	r2, 2adda <__nrfy_internal_gpiote_events_process.constprop.0+0x46>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2adcc:	2200      	movs	r2, #0
   2adce:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   2add2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
   2add6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    }

    (void)__nrfy_internal_gpiote_event_handle(p_reg, mask, NRF_GPIOTE_EVENT_PORT, &event_mask);

    return event_mask;
}
   2adda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2addc:	40006100 	.word	0x40006100
   2ade0:	40006120 	.word	0x40006120
   2ade4:	40006000 	.word	0x40006000

0002ade8 <nrfx_gpiote_input_configure>:
{
   2ade8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2adec:	461d      	mov	r5, r3
   2adee:	4604      	mov	r4, r0
   2adf0:	4616      	mov	r6, r2
    if (p_input_config)
   2adf2:	460b      	mov	r3, r1
   2adf4:	b1e9      	cbz	r1, 2ae32 <nrfx_gpiote_input_configure+0x4a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2adf6:	4f4d      	ldr	r7, [pc, #308]	; (2af2c <nrfx_gpiote_input_configure+0x144>)
   2adf8:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2adfc:	f837 2018 	ldrh.w	r2, [r7, r8, lsl #1]
   2ae00:	f002 0222 	and.w	r2, r2, #34	; 0x22
   2ae04:	2a22      	cmp	r2, #34	; 0x22
   2ae06:	d020      	beq.n	2ae4a <nrfx_gpiote_input_configure+0x62>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2ae08:	2200      	movs	r2, #0
                                              const nrf_gpio_pin_input_t * p_input,
                                              const nrf_gpio_pin_pull_t *  p_pull,
                                              const nrf_gpio_pin_drive_t * p_drive,
                                              const nrf_gpio_pin_sense_t * p_sense)
{
    nrf_gpio_reconfigure(pin_number, p_dir, p_input, p_pull, p_drive, p_sense);
   2ae0a:	e9cd 2200 	strd	r2, r2, [sp]
   2ae0e:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2ae12:	f88d 200f 	strb.w	r2, [sp, #15]
   2ae16:	f10d 010e 	add.w	r1, sp, #14
   2ae1a:	f10d 020f 	add.w	r2, sp, #15
   2ae1e:	f003 fe0e 	bl	2ea3e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2ae22:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   2ae26:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2ae2a:	f043 0301 	orr.w	r3, r3, #1
   2ae2e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   2ae32:	b346      	cbz	r6, 2ae86 <nrfx_gpiote_input_configure+0x9e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2ae34:	4b3d      	ldr	r3, [pc, #244]	; (2af2c <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2ae36:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2ae3a:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2ae3c:	f104 0708 	add.w	r7, r4, #8
   2ae40:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   2ae44:	0788      	lsls	r0, r1, #30
   2ae46:	d502      	bpl.n	2ae4e <nrfx_gpiote_input_configure+0x66>
            if (use_evt)
   2ae48:	b1aa      	cbz	r2, 2ae76 <nrfx_gpiote_input_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
   2ae4a:	4839      	ldr	r0, [pc, #228]	; (2af30 <nrfx_gpiote_input_configure+0x148>)
   2ae4c:	e01d      	b.n	2ae8a <nrfx_gpiote_input_configure+0xa2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2ae4e:	f021 0120 	bic.w	r1, r1, #32
   2ae52:	04c9      	lsls	r1, r1, #19
   2ae54:	0cc9      	lsrs	r1, r1, #19
   2ae56:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   2ae5a:	b162      	cbz	r2, 2ae76 <nrfx_gpiote_input_configure+0x8e>
                if (!edge)
   2ae5c:	f1bc 0f03 	cmp.w	ip, #3
   2ae60:	d8f3      	bhi.n	2ae4a <nrfx_gpiote_input_configure+0x62>
                uint8_t ch = *p_trigger_config->p_in_channel;
   2ae62:	6872      	ldr	r2, [r6, #4]
   2ae64:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2ae66:	f1bc 0f00 	cmp.w	ip, #0
   2ae6a:	d111      	bne.n	2ae90 <nrfx_gpiote_input_configure+0xa8>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   2ae6c:	4a31      	ldr	r2, [pc, #196]	; (2af34 <nrfx_gpiote_input_configure+0x14c>)
   2ae6e:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   2ae72:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2ae76:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   2ae7a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2ae7e:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   2ae82:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   2ae86:	bb45      	cbnz	r5, 2aeda <nrfx_gpiote_input_configure+0xf2>
        err = NRFX_SUCCESS;
   2ae88:	482b      	ldr	r0, [pc, #172]	; (2af38 <nrfx_gpiote_input_configure+0x150>)
}
   2ae8a:	b004      	add	sp, #16
   2ae8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2ae90:	00b2      	lsls	r2, r6, #2
   2ae92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2ae96:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2ae9a:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   2ae9e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2aea2:	f020 0003 	bic.w	r0, r0, #3
   2aea6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2aeaa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2aeae:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   2aeb2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   2aeb6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2aeba:	0220      	lsls	r0, r4, #8
   2aebc:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   2aec0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   2aec4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   2aec8:	ea40 000e 	orr.w	r0, r0, lr
   2aecc:	f041 0120 	orr.w	r1, r1, #32
   2aed0:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   2aed4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   2aed8:	e7cd      	b.n	2ae76 <nrfx_gpiote_input_configure+0x8e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   2aeda:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   2aede:	4620      	mov	r0, r4
   2aee0:	f7ff ff2e 	bl	2ad40 <release_handler>
    if (!handler)
   2aee4:	2e00      	cmp	r6, #0
   2aee6:	d0cf      	beq.n	2ae88 <nrfx_gpiote_input_configure+0xa0>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2aee8:	4d10      	ldr	r5, [pc, #64]	; (2af2c <nrfx_gpiote_input_configure+0x144>)
   2aeea:	e9d5 2300 	ldrd	r2, r3, [r5]
   2aeee:	4296      	cmp	r6, r2
   2aef0:	d101      	bne.n	2aef6 <nrfx_gpiote_input_configure+0x10e>
   2aef2:	429f      	cmp	r7, r3
   2aef4:	d018      	beq.n	2af28 <nrfx_gpiote_input_configure+0x140>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   2aef6:	4811      	ldr	r0, [pc, #68]	; (2af3c <nrfx_gpiote_input_configure+0x154>)
   2aef8:	f10d 010f 	add.w	r1, sp, #15
   2aefc:	f7ff fdf0 	bl	2aae0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2af00:	4b0d      	ldr	r3, [pc, #52]	; (2af38 <nrfx_gpiote_input_configure+0x150>)
   2af02:	4298      	cmp	r0, r3
   2af04:	d1c1      	bne.n	2ae8a <nrfx_gpiote_input_configure+0xa2>
        handler_id = (int32_t)id;
   2af06:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   2af0a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   2af0e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2af12:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   2af14:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2af16:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   2af1a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   2af1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2af22:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   2af26:	e7af      	b.n	2ae88 <nrfx_gpiote_input_configure+0xa0>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2af28:	2200      	movs	r2, #0
   2af2a:	e7ee      	b.n	2af0a <nrfx_gpiote_input_configure+0x122>
   2af2c:	200001f0 	.word	0x200001f0
   2af30:	0bad0004 	.word	0x0bad0004
   2af34:	40006000 	.word	0x40006000
   2af38:	0bad0000 	.word	0x0bad0000
   2af3c:	20000264 	.word	0x20000264

0002af40 <nrfx_gpiote_output_configure>:
{
   2af40:	b5f0      	push	{r4, r5, r6, r7, lr}
   2af42:	4604      	mov	r4, r0
   2af44:	b085      	sub	sp, #20
   2af46:	4615      	mov	r5, r2
    if (p_config)
   2af48:	b309      	cbz	r1, 2af8e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2af4a:	f100 0708 	add.w	r7, r0, #8
   2af4e:	4e31      	ldr	r6, [pc, #196]	; (2b014 <nrfx_gpiote_output_configure+0xd4>)
   2af50:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   2af54:	0798      	lsls	r0, r3, #30
   2af56:	d401      	bmi.n	2af5c <nrfx_gpiote_output_configure+0x1c>
   2af58:	069a      	lsls	r2, r3, #26
   2af5a:	d458      	bmi.n	2b00e <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2af5c:	f013 0f1c 	tst.w	r3, #28
   2af60:	d002      	beq.n	2af68 <nrfx_gpiote_output_configure+0x28>
   2af62:	784b      	ldrb	r3, [r1, #1]
   2af64:	2b01      	cmp	r3, #1
   2af66:	d052      	beq.n	2b00e <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2af68:	2301      	movs	r3, #1
   2af6a:	f88d 300f 	strb.w	r3, [sp, #15]
   2af6e:	2300      	movs	r3, #0
   2af70:	e9cd 1300 	strd	r1, r3, [sp]
   2af74:	1c4a      	adds	r2, r1, #1
   2af76:	1c8b      	adds	r3, r1, #2
   2af78:	4620      	mov	r0, r4
   2af7a:	f10d 010f 	add.w	r1, sp, #15
   2af7e:	f003 fd5e 	bl	2ea3e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2af82:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   2af86:	f043 0303 	orr.w	r3, r3, #3
   2af8a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   2af8e:	b915      	cbnz	r5, 2af96 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   2af90:	4821      	ldr	r0, [pc, #132]	; (2b018 <nrfx_gpiote_output_configure+0xd8>)
}
   2af92:	b005      	add	sp, #20
   2af94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2af96:	4e1f      	ldr	r6, [pc, #124]	; (2b014 <nrfx_gpiote_output_configure+0xd4>)
   2af98:	f104 0708 	add.w	r7, r4, #8
   2af9c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   2afa0:	0783      	lsls	r3, r0, #30
   2afa2:	d534      	bpl.n	2b00e <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
   2afa4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   2afa8:	4661      	mov	r1, ip
   2afaa:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2afac:	f020 0020 	bic.w	r0, r0, #32
   2afb0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   2afb4:	04c0      	lsls	r0, r0, #19
   2afb6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2afba:	0cc0      	lsrs	r0, r0, #19
   2afbc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2afc0:	2300      	movs	r3, #0
   2afc2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   2afc6:	786a      	ldrb	r2, [r5, #1]
   2afc8:	2a00      	cmp	r2, #0
   2afca:	d0e1      	beq.n	2af90 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2afcc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                       p_task_config->init_val);
   2afd0:	78ad      	ldrb	r5, [r5, #2]
   2afd2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   2afd6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2afda:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2afde:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   2afe2:	0223      	lsls	r3, r4, #8
   2afe4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2afe8:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2afea:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2afee:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2aff2:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2aff4:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2aff6:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2affa:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2affe:	432b      	orrs	r3, r5
   2b000:	f040 0020 	orr.w	r0, r0, #32
   2b004:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2b008:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2b00c:	e7c0      	b.n	2af90 <nrfx_gpiote_output_configure+0x50>
{
   2b00e:	4803      	ldr	r0, [pc, #12]	; (2b01c <nrfx_gpiote_output_configure+0xdc>)
   2b010:	e7bf      	b.n	2af92 <nrfx_gpiote_output_configure+0x52>
   2b012:	bf00      	nop
   2b014:	200001f0 	.word	0x200001f0
   2b018:	0bad0000 	.word	0x0bad0000
   2b01c:	0bad0004 	.word	0x0bad0004

0002b020 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2b020:	4b01      	ldr	r3, [pc, #4]	; (2b028 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   2b022:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   2b026:	4770      	bx	lr
   2b028:	200001f0 	.word	0x200001f0

0002b02c <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2b02c:	3008      	adds	r0, #8
   2b02e:	4b05      	ldr	r3, [pc, #20]	; (2b044 <nrfx_gpiote_channel_get+0x18>)
   2b030:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
   2b034:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2b036:	bf43      	ittte	mi
   2b038:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
   2b03a:	4803      	ldrmi	r0, [pc, #12]	; (2b048 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2b03c:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
   2b03e:	4803      	ldrpl	r0, [pc, #12]	; (2b04c <nrfx_gpiote_channel_get+0x20>)
}
   2b040:	4770      	bx	lr
   2b042:	bf00      	nop
   2b044:	200001f0 	.word	0x200001f0
   2b048:	0bad0000 	.word	0x0bad0000
   2b04c:	0bad0004 	.word	0x0bad0004

0002b050 <nrfx_gpiote_init>:
{
   2b050:	b570      	push	{r4, r5, r6, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2b052:	4c0f      	ldr	r4, [pc, #60]	; (2b090 <nrfx_gpiote_init+0x40>)
   2b054:	f894 6078 	ldrb.w	r6, [r4, #120]	; 0x78
   2b058:	b9be      	cbnz	r6, 2b08a <nrfx_gpiote_init+0x3a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2b05a:	4d0e      	ldr	r5, [pc, #56]	; (2b094 <nrfx_gpiote_init+0x44>)
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2b05c:	2260      	movs	r2, #96	; 0x60
   2b05e:	4631      	mov	r1, r6
   2b060:	f104 0010 	add.w	r0, r4, #16
   2b064:	f003 f965 	bl	2e332 <memset>
   2b068:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
    NRFX_IRQ_ENABLE(irqn);
   2b06c:	2006      	movs	r0, #6
   2b06e:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
   2b072:	f7fd fa1d 	bl	284b0 <arch_irq_enable>
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
   2b076:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   2b07a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return err_code;
   2b07e:	4806      	ldr	r0, [pc, #24]	; (2b098 <nrfx_gpiote_init+0x48>)
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2b080:	2301      	movs	r3, #1
   2b082:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2b086:	6763      	str	r3, [r4, #116]	; 0x74
}
   2b088:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   2b08a:	4804      	ldr	r0, [pc, #16]	; (2b09c <nrfx_gpiote_init+0x4c>)
   2b08c:	e7fc      	b.n	2b088 <nrfx_gpiote_init+0x38>
   2b08e:	bf00      	nop
   2b090:	200001f0 	.word	0x200001f0
   2b094:	40006000 	.word	0x40006000
   2b098:	0bad0000 	.word	0x0bad0000
   2b09c:	0bad0005 	.word	0x0bad0005

0002b0a0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   2b0a0:	4b03      	ldr	r3, [pc, #12]	; (2b0b0 <nrfx_gpiote_is_init+0x10>)
   2b0a2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2b0a6:	3800      	subs	r0, #0
   2b0a8:	bf18      	it	ne
   2b0aa:	2001      	movne	r0, #1
   2b0ac:	4770      	bx	lr
   2b0ae:	bf00      	nop
   2b0b0:	200001f0 	.word	0x200001f0

0002b0b4 <nrfx_gpiote_channel_free>:
{
   2b0b4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2b0b6:	4801      	ldr	r0, [pc, #4]	; (2b0bc <nrfx_gpiote_channel_free+0x8>)
   2b0b8:	f7ff bd36 	b.w	2ab28 <nrfx_flag32_free>
   2b0bc:	20000260 	.word	0x20000260

0002b0c0 <nrfx_gpiote_channel_alloc>:
{
   2b0c0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2b0c2:	4801      	ldr	r0, [pc, #4]	; (2b0c8 <nrfx_gpiote_channel_alloc+0x8>)
   2b0c4:	f7ff bd0c 	b.w	2aae0 <nrfx_flag32_alloc>
   2b0c8:	20000260 	.word	0x20000260

0002b0cc <nrfx_gpiote_trigger_enable>:
{
   2b0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2b0ce:	4b20      	ldr	r3, [pc, #128]	; (2b150 <nrfx_gpiote_trigger_enable+0x84>)
   2b0d0:	f100 0208 	add.w	r2, r0, #8
{
   2b0d4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2b0d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2b0da:	069a      	lsls	r2, r3, #26
   2b0dc:	d51d      	bpl.n	2b11a <nrfx_gpiote_trigger_enable+0x4e>
   2b0de:	f013 0502 	ands.w	r5, r3, #2
   2b0e2:	d11a      	bne.n	2b11a <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2b0e4:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2b0e6:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   2b0e8:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   2b0ec:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   2b0f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2b0f4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2b0f8:	6005      	str	r5, [r0, #0]
   2b0fa:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2b0fc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2b100:	f040 0001 	orr.w	r0, r0, #1
   2b104:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   2b108:	b129      	cbz	r1, 2b116 <nrfx_gpiote_trigger_enable+0x4a>
            nrfy_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   2b10a:	2201      	movs	r2, #1
   2b10c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
   2b110:	4a10      	ldr	r2, [pc, #64]	; (2b154 <nrfx_gpiote_trigger_enable+0x88>)
   2b112:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2b116:	b003      	add	sp, #12
   2b118:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2b11a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2b11e:	2b04      	cmp	r3, #4
   2b120:	d012      	beq.n	2b148 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   2b122:	2b05      	cmp	r3, #5
   2b124:	d012      	beq.n	2b14c <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b126:	a801      	add	r0, sp, #4
   2b128:	9401      	str	r4, [sp, #4]
   2b12a:	f7ff fddb 	bl	2ace4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2b12e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   2b130:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2b134:	40d9      	lsrs	r1, r3
   2b136:	f001 0101 	and.w	r1, r1, #1
NRFY_STATIC_INLINE uint32_t nrfy_gpio_pin_read(uint32_t pin_number)
{
    nrf_barrier_r();
    uint32_t pin = nrf_gpio_pin_read(pin_number);
    nrf_barrier_r();
    return pin;
   2b13a:	3102      	adds	r1, #2
    nrf_gpio_cfg_sense_set(pin_number, sense_config);
   2b13c:	4620      	mov	r0, r4
}
   2b13e:	b003      	add	sp, #12
   2b140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2b144:	f003 bcc4 	b.w	2ead0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2b148:	2103      	movs	r1, #3
   2b14a:	e7f7      	b.n	2b13c <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2b14c:	2102      	movs	r1, #2
   2b14e:	e7f5      	b.n	2b13c <nrfx_gpiote_trigger_enable+0x70>
   2b150:	200001f0 	.word	0x200001f0
   2b154:	40006000 	.word	0x40006000

0002b158 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2b158:	4b0e      	ldr	r3, [pc, #56]	; (2b194 <nrfx_gpiote_trigger_disable+0x3c>)
   2b15a:	f100 0208 	add.w	r2, r0, #8
   2b15e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2b162:	0699      	lsls	r1, r3, #26
   2b164:	d513      	bpl.n	2b18e <nrfx_gpiote_trigger_disable+0x36>
   2b166:	079a      	lsls	r2, r3, #30
   2b168:	d411      	bmi.n	2b18e <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2b16a:	0b5b      	lsrs	r3, r3, #13
        nrfy_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2b16c:	2201      	movs	r2, #1
   2b16e:	409a      	lsls	r2, r3
    p_reg->NRFX_CONCAT_2(INTENCLR, NRF_GPIOTE_IRQ_GROUP) = mask;
   2b170:	009b      	lsls	r3, r3, #2
   2b172:	4909      	ldr	r1, [pc, #36]	; (2b198 <nrfx_gpiote_trigger_disable+0x40>)
   2b174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2b178:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2b17c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2b180:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2b184:	f022 0203 	bic.w	r2, r2, #3
   2b188:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2b18c:	4770      	bx	lr
   2b18e:	2100      	movs	r1, #0
   2b190:	f003 bc9e 	b.w	2ead0 <nrf_gpio_cfg_sense_set>
   2b194:	200001f0 	.word	0x200001f0
   2b198:	40006000 	.word	0x40006000

0002b19c <nrfx_gpiote_pin_uninit>:
{
   2b19c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2b19e:	4d17      	ldr	r5, [pc, #92]	; (2b1fc <nrfx_gpiote_pin_uninit+0x60>)
   2b1a0:	f100 0608 	add.w	r6, r0, #8
{
   2b1a4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2b1a6:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
    if (!pin_in_use(pin))
   2b1aa:	07d9      	lsls	r1, r3, #31
   2b1ac:	d524      	bpl.n	2b1f8 <nrfx_gpiote_pin_uninit+0x5c>
    nrfx_gpiote_trigger_disable(pin);
   2b1ae:	f7ff ffd3 	bl	2b158 <nrfx_gpiote_trigger_disable>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2b1b2:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
    if (pin_in_use_by_te(pin))
   2b1b6:	069a      	lsls	r2, r3, #26
   2b1b8:	d506      	bpl.n	2b1c8 <nrfx_gpiote_pin_uninit+0x2c>
        nrfy_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2b1ba:	0b5b      	lsrs	r3, r3, #13
    p_reg->CONFIG[idx] = 0;
   2b1bc:	4a10      	ldr	r2, [pc, #64]	; (2b200 <nrfx_gpiote_pin_uninit+0x64>)
   2b1be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   2b1c2:	2100      	movs	r1, #0
   2b1c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   2b1c8:	4620      	mov	r0, r4
   2b1ca:	f7ff fdb9 	bl	2ad40 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   2b1ce:	2300      	movs	r3, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b1d0:	a801      	add	r0, sp, #4
   2b1d2:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
    nrf_gpio_cfg(
   2b1d6:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b1d8:	f7ff fd84 	bl	2ace4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2b1dc:	9b01      	ldr	r3, [sp, #4]
   2b1de:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cnf &= ~to_update;
   2b1e2:	4b08      	ldr	r3, [pc, #32]	; (2b204 <nrfx_gpiote_pin_uninit+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2b1e4:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   2b1e8:	4013      	ands	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   2b1ea:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   2b1ee:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    nrf_gpio_cfg(
   2b1f2:	4805      	ldr	r0, [pc, #20]	; (2b208 <nrfx_gpiote_pin_uninit+0x6c>)
}
   2b1f4:	b002      	add	sp, #8
   2b1f6:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2b1f8:	4804      	ldr	r0, [pc, #16]	; (2b20c <nrfx_gpiote_pin_uninit+0x70>)
   2b1fa:	e7fb      	b.n	2b1f4 <nrfx_gpiote_pin_uninit+0x58>
   2b1fc:	200001f0 	.word	0x200001f0
   2b200:	40006000 	.word	0x40006000
   2b204:	fffcf8f0 	.word	0xfffcf8f0
   2b208:	0bad0000 	.word	0x0bad0000
   2b20c:	0bad0004 	.word	0x0bad0004

0002b210 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   2b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) & mask;
   2b214:	4b62      	ldr	r3, [pc, #392]	; (2b3a0 <nrfx_gpiote_irq_handler+0x190>)
   2b216:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   2b21a:	b2c0      	uxtb	r0, r0
   2b21c:	b087      	sub	sp, #28
    uint32_t evt_mask = __nrfy_internal_gpiote_events_process(p_reg, mask);
   2b21e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   2b222:	f7ff fdb7 	bl	2ad94 <__nrfy_internal_gpiote_events_process.constprop.0>
    uint32_t evt_mask = nrfy_gpiote_events_process(NRF_GPIOTE,
                                                   enabled_in_events |
                                                   (uint32_t)NRF_GPIOTE_INT_PORT_MASK);

    /* Handle PORT event. */
    if (evt_mask & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
   2b226:	1e05      	subs	r5, r0, #0
   2b228:	f280 809c 	bge.w	2b364 <nrfx_gpiote_irq_handler+0x154>
        *p_masks = gpio_regs[i]->LATCH;
   2b22c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2b230:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2b3a4 <nrfx_gpiote_irq_handler+0x194>
   2b234:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   2b238:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   2b23a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2b23e:	f8d8 3520 	ldr.w	r3, [r8, #1312]	; 0x520
   2b242:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   2b244:	f8c8 3520 	str.w	r3, [r8, #1312]	; 0x520
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2b248:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   2b24c:	f10d 0a10 	add.w	sl, sp, #16
   2b250:	ea4f 1349 	mov.w	r3, r9, lsl #5
   2b254:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   2b256:	f04f 0b01 	mov.w	fp, #1
   2b25a:	e049      	b.n	2b2f0 <nrfx_gpiote_irq_handler+0xe0>
                pin += 32 * i;
   2b25c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2b25e:	4a52      	ldr	r2, [pc, #328]	; (2b3a8 <nrfx_gpiote_irq_handler+0x198>)
                uint32_t pin = NRF_CTZ(latch[i]);
   2b260:	fa94 f4a4 	rbit	r4, r4
   2b264:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   2b268:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2b26a:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2b26c:	f104 0308 	add.w	r3, r4, #8
   2b270:	9403      	str	r4, [sp, #12]
   2b272:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   2b276:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   2b27a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2b27e:	fa0b f202 	lsl.w	r2, fp, r2
   2b282:	ea23 0302 	bic.w	r3, r3, r2
   2b286:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b28a:	a803      	add	r0, sp, #12
   2b28c:	f7ff fd2a 	bl	2ace4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2b290:	9b03      	ldr	r3, [sp, #12]
   2b292:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2b296:	08b9      	lsrs	r1, r7, #2
   2b298:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2b29c:	f3c7 0682 	ubfx	r6, r7, #2, #3
    if (is_level(trigger))
   2b2a0:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2b2a2:	4637      	mov	r7, r6
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2b2a4:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   2b2a8:	d52c      	bpl.n	2b304 <nrfx_gpiote_irq_handler+0xf4>
        call_handler(pin, trigger);
   2b2aa:	4620      	mov	r0, r4
   2b2ac:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2b2ae:	b2de      	uxtb	r6, r3
   2b2b0:	f7ff fd28 	bl	2ad04 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b2b4:	a803      	add	r0, sp, #12
   2b2b6:	9403      	str	r4, [sp, #12]
   2b2b8:	f7ff fd14 	bl	2ace4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2b2bc:	9b03      	ldr	r3, [sp, #12]
   2b2be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2b2c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrfy_gpio_pin_sense_get(pin) == sense)
   2b2c6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   2b2ca:	429e      	cmp	r6, r3
   2b2cc:	d107      	bne.n	2b2de <nrfx_gpiote_irq_handler+0xce>
   2b2ce:	2100      	movs	r1, #0
   2b2d0:	4620      	mov	r0, r4
   2b2d2:	f003 fbfd 	bl	2ead0 <nrf_gpio_cfg_sense_set>
   2b2d6:	4631      	mov	r1, r6
   2b2d8:	4620      	mov	r0, r4
   2b2da:	f003 fbf9 	bl	2ead0 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2b2de:	a803      	add	r0, sp, #12
   2b2e0:	9403      	str	r4, [sp, #12]
   2b2e2:	f7ff fcff 	bl	2ace4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2b2e6:	9b03      	ldr	r3, [sp, #12]
   2b2e8:	fa0b f303 	lsl.w	r3, fp, r3
   2b2ec:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   2b2f0:	f85a 4029 	ldr.w	r4, [sl, r9, lsl #2]
   2b2f4:	2c00      	cmp	r4, #0
   2b2f6:	d1b1      	bne.n	2b25c <nrfx_gpiote_irq_handler+0x4c>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2b2f8:	f1b9 0f00 	cmp.w	r9, #0
   2b2fc:	d11d      	bne.n	2b33a <nrfx_gpiote_irq_handler+0x12a>
   2b2fe:	f04f 0901 	mov.w	r9, #1
   2b302:	e7a5      	b.n	2b250 <nrfx_gpiote_irq_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2b304:	2b02      	cmp	r3, #2
   2b306:	d10c      	bne.n	2b322 <nrfx_gpiote_irq_handler+0x112>
   2b308:	2103      	movs	r1, #3
   2b30a:	4620      	mov	r0, r4
   2b30c:	f003 fbe0 	bl	2ead0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2b310:	f006 0305 	and.w	r3, r6, #5
   2b314:	2b01      	cmp	r3, #1
   2b316:	d1e2      	bne.n	2b2de <nrfx_gpiote_irq_handler+0xce>
            call_handler(pin, trigger);
   2b318:	4639      	mov	r1, r7
   2b31a:	4620      	mov	r0, r4
   2b31c:	f7ff fcf2 	bl	2ad04 <call_handler>
   2b320:	e7dd      	b.n	2b2de <nrfx_gpiote_irq_handler+0xce>
   2b322:	2102      	movs	r1, #2
   2b324:	4620      	mov	r0, r4
   2b326:	9301      	str	r3, [sp, #4]
   2b328:	f003 fbd2 	bl	2ead0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2b32c:	2e03      	cmp	r6, #3
   2b32e:	d0f3      	beq.n	2b318 <nrfx_gpiote_irq_handler+0x108>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2b330:	9b01      	ldr	r3, [sp, #4]
   2b332:	2b03      	cmp	r3, #3
   2b334:	d1d3      	bne.n	2b2de <nrfx_gpiote_irq_handler+0xce>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2b336:	2e02      	cmp	r6, #2
   2b338:	e7ed      	b.n	2b316 <nrfx_gpiote_irq_handler+0x106>
   2b33a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2b33e:	f7ff fd29 	bl	2ad94 <__nrfy_internal_gpiote_events_process.constprop.0>
        *p_masks = gpio_regs[i]->LATCH;
   2b342:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2b346:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   2b34a:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   2b34c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2b350:	f8d8 2520 	ldr.w	r2, [r8, #1312]	; 0x520
   2b354:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   2b356:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   2b358:	f8c8 2520 	str.w	r2, [r8, #1312]	; 0x520
   2b35c:	f47f af74 	bne.w	2b248 <nrfx_gpiote_irq_handler+0x38>
    {
        port_event_handle();
        evt_mask &= ~(uint32_t)NRF_GPIOTE_INT_PORT_MASK;
   2b360:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
        mask &= ~NRFX_BIT(ch);
   2b364:	2401      	movs	r4, #1
    while (mask)
   2b366:	b915      	cbnz	r5, 2b36e <nrfx_gpiote_irq_handler+0x15e>
    }

    /* Process pin events. */
    gpiote_evt_handle(evt_mask);
}
   2b368:	b007      	add	sp, #28
   2b36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   2b36e:	fa95 f3a5 	rbit	r3, r5
   2b372:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   2b376:	fa04 f203 	lsl.w	r2, r4, r3
   2b37a:	009b      	lsls	r3, r3, #2
   2b37c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2b380:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2b384:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2b388:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   2b38c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2b390:	f3c0 2005 	ubfx	r0, r0, #8, #6
   2b394:	f3c1 4101 	ubfx	r1, r1, #16, #2
   2b398:	f7ff fcb4 	bl	2ad04 <call_handler>
   2b39c:	e7e3      	b.n	2b366 <nrfx_gpiote_irq_handler+0x156>
   2b39e:	bf00      	nop
   2b3a0:	40006000 	.word	0x40006000
   2b3a4:	50000300 	.word	0x50000300
   2b3a8:	200001f0 	.word	0x200001f0

0002b3ac <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   2b3ac:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   2b3ae:	4c18      	ldr	r4, [pc, #96]	; (2b410 <nrfx_power_init+0x64>)
   2b3b0:	7823      	ldrb	r3, [r4, #0]
   2b3b2:	bb53      	cbnz	r3, 2b40a <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   2b3b4:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   2b3b6:	f3c2 0340 	ubfx	r3, r2, #1, #1
   2b3ba:	0792      	lsls	r2, r2, #30
   2b3bc:	d512      	bpl.n	2b3e4 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2b3be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2b3c2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2b3c6:	2a08      	cmp	r2, #8
   2b3c8:	d10b      	bne.n	2b3e2 <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2b3ca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2b3ce:	2b05      	cmp	r3, #5
   2b3d0:	d807      	bhi.n	2b3e2 <nrfx_power_init+0x36>
   2b3d2:	4a10      	ldr	r2, [pc, #64]	; (2b414 <nrfx_power_init+0x68>)
   2b3d4:	5cd3      	ldrb	r3, [r2, r3]
   2b3d6:	b123      	cbz	r3, 2b3e2 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   2b3d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b3dc:	2201      	movs	r2, #1
   2b3de:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   2b3e2:	2301      	movs	r3, #1
   2b3e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2b3e8:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
   2b3ec:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2b3ee:	f003 0301 	and.w	r3, r3, #1
   2b3f2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2b3f6:	2000      	movs	r0, #0
   2b3f8:	f7fd f87c 	bl	284f4 <arch_irq_is_enabled>
   2b3fc:	b908      	cbnz	r0, 2b402 <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2b3fe:	f7fd f857 	bl	284b0 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   2b402:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   2b404:	4804      	ldr	r0, [pc, #16]	; (2b418 <nrfx_power_init+0x6c>)
    m_initialized = true;
   2b406:	7023      	strb	r3, [r4, #0]
}
   2b408:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   2b40a:	4804      	ldr	r0, [pc, #16]	; (2b41c <nrfx_power_init+0x70>)
   2b40c:	e7fc      	b.n	2b408 <nrfx_power_init+0x5c>
   2b40e:	bf00      	nop
   2b410:	200014a2 	.word	0x200014a2
   2b414:	0002fb61 	.word	0x0002fb61
   2b418:	0bad0000 	.word	0x0bad0000
   2b41c:	0bad000c 	.word	0x0bad000c

0002b420 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   2b420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b424:	f44f 7260 	mov.w	r2, #896	; 0x380
   2b428:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   2b42c:	4b01      	ldr	r3, [pc, #4]	; (2b434 <nrfx_power_usbevt_uninit+0x14>)
   2b42e:	2200      	movs	r2, #0
   2b430:	601a      	str	r2, [r3, #0]
}
   2b432:	4770      	bx	lr
   2b434:	200011dc 	.word	0x200011dc

0002b438 <nrfx_power_usbevt_init>:
{
   2b438:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   2b43a:	f7ff fff1 	bl	2b420 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   2b43e:	6803      	ldr	r3, [r0, #0]
   2b440:	b10b      	cbz	r3, 2b446 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   2b442:	4a01      	ldr	r2, [pc, #4]	; (2b448 <nrfx_power_usbevt_init+0x10>)
   2b444:	6013      	str	r3, [r2, #0]
}
   2b446:	bd08      	pop	{r3, pc}
   2b448:	200011dc 	.word	0x200011dc

0002b44c <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   2b44c:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
   2b44e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b452:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   2b456:	0762      	lsls	r2, r4, #29
   2b458:	d507      	bpl.n	2b46a <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   2b45a:	f44f 7084 	mov.w	r0, #264	; 0x108
   2b45e:	f003 fb46 	bl	2eaee <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   2b462:	b110      	cbz	r0, 2b46a <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   2b464:	4b1e      	ldr	r3, [pc, #120]	; (2b4e0 <nrfx_power_irq_handler+0x94>)
   2b466:	681b      	ldr	r3, [r3, #0]
   2b468:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   2b46a:	06a3      	lsls	r3, r4, #26
   2b46c:	d508      	bpl.n	2b480 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   2b46e:	f44f 708a 	mov.w	r0, #276	; 0x114
   2b472:	f003 fb3c 	bl	2eaee <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   2b476:	b118      	cbz	r0, 2b480 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   2b478:	4b1a      	ldr	r3, [pc, #104]	; (2b4e4 <nrfx_power_irq_handler+0x98>)
   2b47a:	2000      	movs	r0, #0
   2b47c:	681b      	ldr	r3, [r3, #0]
   2b47e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   2b480:	0660      	lsls	r0, r4, #25
   2b482:	d508      	bpl.n	2b496 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   2b484:	f44f 708c 	mov.w	r0, #280	; 0x118
   2b488:	f003 fb31 	bl	2eaee <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   2b48c:	b118      	cbz	r0, 2b496 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   2b48e:	4b15      	ldr	r3, [pc, #84]	; (2b4e4 <nrfx_power_irq_handler+0x98>)
   2b490:	2001      	movs	r0, #1
   2b492:	681b      	ldr	r3, [r3, #0]
   2b494:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   2b496:	0621      	lsls	r1, r4, #24
   2b498:	d508      	bpl.n	2b4ac <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   2b49a:	f44f 708e 	mov.w	r0, #284	; 0x11c
   2b49e:	f003 fb26 	bl	2eaee <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   2b4a2:	b118      	cbz	r0, 2b4ac <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   2b4a4:	4b10      	ldr	r3, [pc, #64]	; (2b4e8 <nrfx_power_irq_handler+0x9c>)
   2b4a6:	2000      	movs	r0, #0
   2b4a8:	681b      	ldr	r3, [r3, #0]
   2b4aa:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   2b4ac:	05e2      	lsls	r2, r4, #23
   2b4ae:	d508      	bpl.n	2b4c2 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   2b4b0:	f44f 7090 	mov.w	r0, #288	; 0x120
   2b4b4:	f003 fb1b 	bl	2eaee <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   2b4b8:	b118      	cbz	r0, 2b4c2 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   2b4ba:	4b0b      	ldr	r3, [pc, #44]	; (2b4e8 <nrfx_power_irq_handler+0x9c>)
   2b4bc:	2001      	movs	r0, #1
   2b4be:	681b      	ldr	r3, [r3, #0]
   2b4c0:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   2b4c2:	05a3      	lsls	r3, r4, #22
   2b4c4:	d50a      	bpl.n	2b4dc <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   2b4c6:	f44f 7092 	mov.w	r0, #292	; 0x124
   2b4ca:	f003 fb10 	bl	2eaee <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   2b4ce:	b128      	cbz	r0, 2b4dc <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   2b4d0:	4b05      	ldr	r3, [pc, #20]	; (2b4e8 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   2b4d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   2b4d6:	681b      	ldr	r3, [r3, #0]
   2b4d8:	2002      	movs	r0, #2
   2b4da:	4718      	bx	r3
}
   2b4dc:	bd10      	pop	{r4, pc}
   2b4de:	bf00      	nop
   2b4e0:	200011e4 	.word	0x200011e4
   2b4e4:	200011e0 	.word	0x200011e0
   2b4e8:	200011dc 	.word	0x200011dc

0002b4ec <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   2b4ec:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   2b4ee:	4801      	ldr	r0, [pc, #4]	; (2b4f4 <nrfx_ppi_channel_alloc+0x8>)
   2b4f0:	f7ff baf6 	b.w	2aae0 <nrfx_flag32_alloc>
   2b4f4:	2000026c 	.word	0x2000026c

0002b4f8 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2b4f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2b4fc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2b500:	2a08      	cmp	r2, #8
   2b502:	d106      	bne.n	2b512 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2b504:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2b508:	2b05      	cmp	r3, #5
   2b50a:	d804      	bhi.n	2b516 <nrf52_errata_187+0x1e>
   2b50c:	4a03      	ldr	r2, [pc, #12]	; (2b51c <nrf52_errata_187+0x24>)
   2b50e:	5cd0      	ldrb	r0, [r2, r3]
   2b510:	4770      	bx	lr
                        return false;
   2b512:	2000      	movs	r0, #0
   2b514:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2b516:	2001      	movs	r0, #1
}
   2b518:	4770      	bx	lr
   2b51a:	bf00      	nop
   2b51c:	0002fb70 	.word	0x0002fb70

0002b520 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   2b520:	4b05      	ldr	r3, [pc, #20]	; (2b538 <ep_state_access+0x18>)
   2b522:	f010 0f80 	tst.w	r0, #128	; 0x80
   2b526:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   2b52a:	bf08      	it	eq
   2b52c:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   2b52e:	f000 000f 	and.w	r0, r0, #15
}
   2b532:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2b536:	4770      	bx	lr
   2b538:	20001390 	.word	0x20001390

0002b53c <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   2b53c:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   2b53e:	4a07      	ldr	r2, [pc, #28]	; (2b55c <ev_usbreset_handler+0x20>)
   2b540:	2300      	movs	r3, #0
   2b542:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   2b544:	4a06      	ldr	r2, [pc, #24]	; (2b560 <ev_usbreset_handler+0x24>)
   2b546:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   2b548:	2301      	movs	r3, #1
   2b54a:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   2b54c:	4b05      	ldr	r3, [pc, #20]	; (2b564 <ev_usbreset_handler+0x28>)
   2b54e:	a801      	add	r0, sp, #4
   2b550:	681b      	ldr	r3, [r3, #0]
   2b552:	4798      	blx	r3
}
   2b554:	b003      	add	sp, #12
   2b556:	f85d fb04 	ldr.w	pc, [sp], #4
   2b55a:	bf00      	nop
   2b55c:	200014a5 	.word	0x200014a5
   2b560:	200014a4 	.word	0x200014a4
   2b564:	20001428 	.word	0x20001428

0002b568 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   2b568:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
   2b56a:	4b19      	ldr	r3, [pc, #100]	; (2b5d0 <ev_usbevent_handler+0x68>)
   2b56c:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   2b570:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   2b574:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   2b576:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2b57a:	d508      	bpl.n	2b58e <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   2b57c:	4b15      	ldr	r3, [pc, #84]	; (2b5d4 <ev_usbevent_handler+0x6c>)
   2b57e:	2201      	movs	r2, #1
   2b580:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   2b582:	2302      	movs	r3, #2
   2b584:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   2b586:	4b14      	ldr	r3, [pc, #80]	; (2b5d8 <ev_usbevent_handler+0x70>)
   2b588:	a801      	add	r0, sp, #4
   2b58a:	681b      	ldr	r3, [r3, #0]
   2b58c:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   2b58e:	05a2      	lsls	r2, r4, #22
   2b590:	d508      	bpl.n	2b5a4 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   2b592:	4b10      	ldr	r3, [pc, #64]	; (2b5d4 <ev_usbevent_handler+0x6c>)
   2b594:	2200      	movs	r2, #0
   2b596:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   2b598:	2303      	movs	r3, #3
   2b59a:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   2b59c:	4b0e      	ldr	r3, [pc, #56]	; (2b5d8 <ev_usbevent_handler+0x70>)
   2b59e:	a801      	add	r0, sp, #4
   2b5a0:	681b      	ldr	r3, [r3, #0]
   2b5a2:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   2b5a4:	0563      	lsls	r3, r4, #21
   2b5a6:	d510      	bpl.n	2b5ca <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   2b5a8:	4b0a      	ldr	r3, [pc, #40]	; (2b5d4 <ev_usbevent_handler+0x6c>)
   2b5aa:	781a      	ldrb	r2, [r3, #0]
   2b5ac:	b16a      	cbz	r2, 2b5ca <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   2b5ae:	2200      	movs	r2, #0
   2b5b0:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   2b5b2:	4b07      	ldr	r3, [pc, #28]	; (2b5d0 <ev_usbevent_handler+0x68>)
   2b5b4:	2201      	movs	r2, #1
   2b5b6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2b5ba:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2b5bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   2b5be:	2304      	movs	r3, #4
   2b5c0:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   2b5c2:	4b05      	ldr	r3, [pc, #20]	; (2b5d8 <ev_usbevent_handler+0x70>)
   2b5c4:	a801      	add	r0, sp, #4
   2b5c6:	681b      	ldr	r3, [r3, #0]
   2b5c8:	4798      	blx	r3
        }
    }
}
   2b5ca:	b002      	add	sp, #8
   2b5cc:	bd10      	pop	{r4, pc}
   2b5ce:	bf00      	nop
   2b5d0:	40027000 	.word	0x40027000
   2b5d4:	200014a5 	.word	0x200014a5
   2b5d8:	20001428 	.word	0x20001428

0002b5dc <usbd_errata_187_211_begin>:
	__asm__ volatile(
   2b5dc:	f04f 0320 	mov.w	r3, #32
   2b5e0:	f3ef 8011 	mrs	r0, BASEPRI
   2b5e4:	f383 8812 	msr	BASEPRI_MAX, r3
   2b5e8:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2b5ec:	4b0a      	ldr	r3, [pc, #40]	; (2b618 <usbd_errata_187_211_begin+0x3c>)
   2b5ee:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2b5f2:	2203      	movs	r2, #3
   2b5f4:	b961      	cbnz	r1, 2b610 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2b5f6:	f249 3175 	movw	r1, #37749	; 0x9375
   2b5fa:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   2b5fe:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2b602:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2b606:	f380 8811 	msr	BASEPRI, r0
   2b60a:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   2b60e:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   2b610:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   2b614:	e7f7      	b.n	2b606 <usbd_errata_187_211_begin+0x2a>
   2b616:	bf00      	nop
   2b618:	4006e000 	.word	0x4006e000

0002b61c <usbd_errata_187_211_end>:
	__asm__ volatile(
   2b61c:	f04f 0320 	mov.w	r3, #32
   2b620:	f3ef 8011 	mrs	r0, BASEPRI
   2b624:	f383 8812 	msr	BASEPRI_MAX, r3
   2b628:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2b62c:	4b0a      	ldr	r3, [pc, #40]	; (2b658 <usbd_errata_187_211_end+0x3c>)
   2b62e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2b632:	b961      	cbnz	r1, 2b64e <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2b634:	f249 3275 	movw	r2, #37749	; 0x9375
   2b638:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   2b63c:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2b640:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2b644:	f380 8811 	msr	BASEPRI, r0
   2b648:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   2b64c:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   2b64e:	2200      	movs	r2, #0
   2b650:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   2b654:	e7f6      	b.n	2b644 <usbd_errata_187_211_end+0x28>
   2b656:	bf00      	nop
   2b658:	4006e000 	.word	0x4006e000

0002b65c <nrfx_usbd_feeder_flash>:
{
   2b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b65e:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   2b660:	4f0b      	ldr	r7, [pc, #44]	; (2b690 <nrfx_usbd_feeder_flash+0x34>)
   2b662:	429a      	cmp	r2, r3
   2b664:	bf28      	it	cs
   2b666:	461a      	movcs	r2, r3
{
   2b668:	460c      	mov	r4, r1
   2b66a:	4615      	mov	r5, r2
   2b66c:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   2b66e:	6809      	ldr	r1, [r1, #0]
   2b670:	4638      	mov	r0, r7
   2b672:	f002 fe53 	bl	2e31c <memcpy>
    p_next->size = tx_size;
   2b676:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
   2b67a:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   2b67c:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
   2b67e:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
   2b680:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
   2b682:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   2b684:	6023      	str	r3, [r4, #0]
}
   2b686:	3800      	subs	r0, #0
   2b688:	bf18      	it	ne
   2b68a:	2001      	movne	r0, #1
   2b68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b68e:	bf00      	nop
   2b690:	200011e8 	.word	0x200011e8

0002b694 <nrfx_usbd_feeder_flash_zlp>:
{
   2b694:	b570      	push	{r4, r5, r6, lr}
   2b696:	684b      	ldr	r3, [r1, #4]
   2b698:	429a      	cmp	r2, r3
   2b69a:	bf28      	it	cs
   2b69c:	461a      	movcs	r2, r3
   2b69e:	4606      	mov	r6, r0
   2b6a0:	460d      	mov	r5, r1
   2b6a2:	4614      	mov	r4, r2
    if (tx_size != 0)
   2b6a4:	b182      	cbz	r2, 2b6c8 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   2b6a6:	6809      	ldr	r1, [r1, #0]
   2b6a8:	4808      	ldr	r0, [pc, #32]	; (2b6cc <nrfx_usbd_feeder_flash_zlp+0x38>)
   2b6aa:	f002 fe37 	bl	2e31c <memcpy>
        p_next->p_data.tx = p_buffer;
   2b6ae:	4b07      	ldr	r3, [pc, #28]	; (2b6cc <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
   2b6b0:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
   2b6b4:	686b      	ldr	r3, [r5, #4]
   2b6b6:	1b1b      	subs	r3, r3, r4
   2b6b8:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   2b6ba:	682b      	ldr	r3, [r5, #0]
   2b6bc:	4423      	add	r3, r4
}
   2b6be:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   2b6c0:	602b      	str	r3, [r5, #0]
}
   2b6c2:	bf18      	it	ne
   2b6c4:	2001      	movne	r0, #1
   2b6c6:	bd70      	pop	{r4, r5, r6, pc}
   2b6c8:	4613      	mov	r3, r2
   2b6ca:	e7f1      	b.n	2b6b0 <nrfx_usbd_feeder_flash_zlp+0x1c>
   2b6cc:	200011e8 	.word	0x200011e8

0002b6d0 <ev_sof_handler>:
{
   2b6d0:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   2b6d2:	2300      	movs	r3, #0
   2b6d4:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   2b6d8:	4b0b      	ldr	r3, [pc, #44]	; (2b708 <ev_sof_handler+0x38>)
   2b6da:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   2b6de:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   2b6e2:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   2b6e6:	4a09      	ldr	r2, [pc, #36]	; (2b70c <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   2b6e8:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   2b6ea:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   2b6ec:	bf14      	ite	ne
   2b6ee:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
   2b6f2:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
   2b6f6:	430b      	orrs	r3, r1
   2b6f8:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   2b6fa:	4b05      	ldr	r3, [pc, #20]	; (2b710 <ev_sof_handler+0x40>)
   2b6fc:	a801      	add	r0, sp, #4
   2b6fe:	681b      	ldr	r3, [r3, #0]
   2b700:	4798      	blx	r3
}
   2b702:	b003      	add	sp, #12
   2b704:	f85d fb04 	ldr.w	pc, [sp], #4
   2b708:	40027000 	.word	0x40027000
   2b70c:	20001424 	.word	0x20001424
   2b710:	20001428 	.word	0x20001428

0002b714 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b714:	4b06      	ldr	r3, [pc, #24]	; (2b730 <atomic_and.constprop.0.isra.0+0x1c>)
   2b716:	f3bf 8f5b 	dmb	ish
   2b71a:	e853 1f00 	ldrex	r1, [r3]
   2b71e:	4001      	ands	r1, r0
   2b720:	e843 1200 	strex	r2, r1, [r3]
   2b724:	2a00      	cmp	r2, #0
   2b726:	d1f8      	bne.n	2b71a <atomic_and.constprop.0.isra.0+0x6>
   2b728:	f3bf 8f5b 	dmb	ish
}
   2b72c:	4770      	bx	lr
   2b72e:	bf00      	nop
   2b730:	20001420 	.word	0x20001420

0002b734 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2b734:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2b738:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2b73c:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   2b73e:	bf02      	ittt	eq
   2b740:	4b03      	ldreq	r3, [pc, #12]	; (2b750 <usbd_dma_pending_clear+0x1c>)
   2b742:	2200      	moveq	r2, #0
   2b744:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
   2b748:	4b02      	ldr	r3, [pc, #8]	; (2b754 <usbd_dma_pending_clear+0x20>)
   2b74a:	2200      	movs	r2, #0
   2b74c:	701a      	strb	r2, [r3, #0]
}
   2b74e:	4770      	bx	lr
   2b750:	40027000 	.word	0x40027000
   2b754:	200014a3 	.word	0x200014a3

0002b758 <nrf_usbd_ep0in_dma_handler>:
{
   2b758:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   2b75a:	f7ff ffeb 	bl	2b734 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2b75e:	4b08      	ldr	r3, [pc, #32]	; (2b780 <nrf_usbd_ep0in_dma_handler+0x28>)
   2b760:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   2b764:	2a03      	cmp	r2, #3
   2b766:	d105      	bne.n	2b774 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   2b768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2b76c:	f06f 0001 	mvn.w	r0, #1
   2b770:	f7ff bfd0 	b.w	2b714 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2b774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   2b778:	2b00      	cmp	r3, #0
   2b77a:	d0f5      	beq.n	2b768 <nrf_usbd_ep0in_dma_handler+0x10>
}
   2b77c:	bd08      	pop	{r3, pc}
   2b77e:	bf00      	nop
   2b780:	20001300 	.word	0x20001300

0002b784 <usbd_ep_data_handler>:
{
   2b784:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   2b786:	2201      	movs	r2, #1
   2b788:	fa02 f501 	lsl.w	r5, r2, r1
   2b78c:	491c      	ldr	r1, [pc, #112]	; (2b800 <usbd_ep_data_handler+0x7c>)
   2b78e:	4e1d      	ldr	r6, [pc, #116]	; (2b804 <usbd_ep_data_handler+0x80>)
   2b790:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   2b792:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   2b796:	ea43 0305 	orr.w	r3, r3, r5
{
   2b79a:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   2b79c:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   2b79e:	d024      	beq.n	2b7ea <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   2b7a0:	f000 020f 	and.w	r2, r0, #15
   2b7a4:	4b18      	ldr	r3, [pc, #96]	; (2b808 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2b7a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2b7aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2b7ae:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2b7b2:	681a      	ldr	r2, [r3, #0]
    if (ret)
   2b7b4:	b132      	cbz	r2, 2b7c4 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2b7b6:	2200      	movs	r2, #0
   2b7b8:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   2b7ba:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   2b7bc:	681b      	ldr	r3, [r3, #0]
   2b7be:	d011      	beq.n	2b7e4 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   2b7c0:	f003 f9fd 	bl	2ebbe <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   2b7c4:	6833      	ldr	r3, [r6, #0]
   2b7c6:	402b      	ands	r3, r5
   2b7c8:	d10a      	bne.n	2b7e0 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2b7ca:	2206      	movs	r2, #6
   2b7cc:	f88d 2004 	strb.w	r2, [sp, #4]
   2b7d0:	f88d 4006 	strb.w	r4, [sp, #6]
   2b7d4:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   2b7d8:	4b0c      	ldr	r3, [pc, #48]	; (2b80c <usbd_ep_data_handler+0x88>)
   2b7da:	a801      	add	r0, sp, #4
   2b7dc:	681b      	ldr	r3, [r3, #0]
   2b7de:	4798      	blx	r3
}
   2b7e0:	b002      	add	sp, #8
   2b7e2:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   2b7e4:	f7ff ffb8 	bl	2b758 <nrf_usbd_ep0in_dma_handler>
   2b7e8:	e7ec      	b.n	2b7c4 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   2b7ea:	6833      	ldr	r3, [r6, #0]
   2b7ec:	421d      	tst	r5, r3
   2b7ee:	d1f7      	bne.n	2b7e0 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   2b7f0:	2306      	movs	r3, #6
   2b7f2:	f88d 3004 	strb.w	r3, [sp, #4]
   2b7f6:	f88d 0006 	strb.w	r0, [sp, #6]
   2b7fa:	f88d 2007 	strb.w	r2, [sp, #7]
   2b7fe:	e7eb      	b.n	2b7d8 <usbd_ep_data_handler+0x54>
   2b800:	20001424 	.word	0x20001424
   2b804:	20001420 	.word	0x20001420
   2b808:	0002f93a 	.word	0x0002f93a
   2b80c:	20001428 	.word	0x20001428

0002b810 <ev_setup_data_handler>:
{
   2b810:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   2b812:	4b05      	ldr	r3, [pc, #20]	; (2b828 <ev_setup_data_handler+0x18>)
   2b814:	781a      	ldrb	r2, [r3, #0]
   2b816:	4610      	mov	r0, r2
   2b818:	f003 f9c8 	bl	2ebac <ep2bit>
}
   2b81c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   2b820:	4601      	mov	r1, r0
   2b822:	4610      	mov	r0, r2
   2b824:	f7ff bfae 	b.w	2b784 <usbd_ep_data_handler>
   2b828:	200014a4 	.word	0x200014a4

0002b82c <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   2b82c:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   2b82e:	f7ff ff81 	bl	2b734 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2b832:	4b0c      	ldr	r3, [pc, #48]	; (2b864 <ev_dma_epout8_handler+0x38>)
   2b834:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   2b838:	2a03      	cmp	r2, #3
   2b83a:	d010      	beq.n	2b85e <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   2b83c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   2b840:	b96b      	cbnz	r3, 2b85e <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2b842:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   2b846:	f7ff ff65 	bl	2b714 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2b84a:	2306      	movs	r3, #6
   2b84c:	f88d 3004 	strb.w	r3, [sp, #4]
   2b850:	2308      	movs	r3, #8
   2b852:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   2b856:	4b04      	ldr	r3, [pc, #16]	; (2b868 <ev_dma_epout8_handler+0x3c>)
   2b858:	a801      	add	r0, sp, #4
   2b85a:	681b      	ldr	r3, [r3, #0]
   2b85c:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   2b85e:	b003      	add	sp, #12
   2b860:	f85d fb04 	ldr.w	pc, [sp], #4
   2b864:	20001300 	.word	0x20001300
   2b868:	20001428 	.word	0x20001428

0002b86c <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   2b86c:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   2b86e:	f7ff ff61 	bl	2b734 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2b872:	4b10      	ldr	r3, [pc, #64]	; (2b8b4 <ev_dma_epin8_handler+0x48>)
   2b874:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   2b878:	2a03      	cmp	r2, #3
   2b87a:	d106      	bne.n	2b88a <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2b87c:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   2b880:	b003      	add	sp, #12
   2b882:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2b886:	f7ff bf45 	b.w	2b714 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2b88a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   2b88e:	b96b      	cbnz	r3, 2b8ac <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2b890:	f46f 7080 	mvn.w	r0, #256	; 0x100
   2b894:	f7ff ff3e 	bl	2b714 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2b898:	2306      	movs	r3, #6
   2b89a:	f88d 3004 	strb.w	r3, [sp, #4]
   2b89e:	2388      	movs	r3, #136	; 0x88
   2b8a0:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   2b8a4:	4b04      	ldr	r3, [pc, #16]	; (2b8b8 <ev_dma_epin8_handler+0x4c>)
   2b8a6:	a801      	add	r0, sp, #4
   2b8a8:	681b      	ldr	r3, [r3, #0]
   2b8aa:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   2b8ac:	b003      	add	sp, #12
   2b8ae:	f85d fb04 	ldr.w	pc, [sp], #4
   2b8b2:	bf00      	nop
   2b8b4:	20001300 	.word	0x20001300
   2b8b8:	20001428 	.word	0x20001428

0002b8bc <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   2b8bc:	4a02      	ldr	r2, [pc, #8]	; (2b8c8 <nrfx_usbd_uninit+0xc>)
   2b8be:	2300      	movs	r3, #0
   2b8c0:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   2b8c2:	4a02      	ldr	r2, [pc, #8]	; (2b8cc <nrfx_usbd_uninit+0x10>)
   2b8c4:	7013      	strb	r3, [r2, #0]
    return;
}
   2b8c6:	4770      	bx	lr
   2b8c8:	20001428 	.word	0x20001428
   2b8cc:	200014a6 	.word	0x200014a6

0002b8d0 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   2b8d0:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   2b8d2:	4b4c      	ldr	r3, [pc, #304]	; (2ba04 <nrfx_usbd_enable+0x134>)
   2b8d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2b8d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   2b8dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   2b8e0:	f7ff fe0a 	bl	2b4f8 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   2b8e4:	b108      	cbz	r0, 2b8ea <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   2b8e6:	f7ff fe79 	bl	2b5dc <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2b8ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2b8ee:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2b8f2:	2b08      	cmp	r3, #8
   2b8f4:	d119      	bne.n	2b92a <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
   2b8f6:	f04f 0320 	mov.w	r3, #32
   2b8fa:	f3ef 8011 	mrs	r0, BASEPRI
   2b8fe:	f383 8812 	msr	BASEPRI_MAX, r3
   2b902:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2b906:	4b40      	ldr	r3, [pc, #256]	; (2ba08 <nrfx_usbd_enable+0x138>)
   2b908:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2b90c:	22c0      	movs	r2, #192	; 0xc0
   2b90e:	2900      	cmp	r1, #0
   2b910:	d170      	bne.n	2b9f4 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2b912:	f249 3175 	movw	r1, #37749	; 0x9375
   2b916:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   2b91a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2b91e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2b922:	f380 8811 	msr	BASEPRI, r0
   2b926:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   2b92a:	4b36      	ldr	r3, [pc, #216]	; (2ba04 <nrfx_usbd_enable+0x134>)
   2b92c:	2201      	movs	r2, #1
   2b92e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   2b932:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   2b936:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   2b93a:	0512      	lsls	r2, r2, #20
   2b93c:	d5fb      	bpl.n	2b936 <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
   2b93e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2b942:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   2b946:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2b94a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2b94e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2b952:	2b08      	cmp	r3, #8
   2b954:	d118      	bne.n	2b988 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
   2b956:	f04f 0320 	mov.w	r3, #32
   2b95a:	f3ef 8011 	mrs	r0, BASEPRI
   2b95e:	f383 8812 	msr	BASEPRI_MAX, r3
   2b962:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2b966:	4b28      	ldr	r3, [pc, #160]	; (2ba08 <nrfx_usbd_enable+0x138>)
   2b968:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2b96c:	2900      	cmp	r1, #0
   2b96e:	d144      	bne.n	2b9fa <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2b970:	f249 3275 	movw	r2, #37749	; 0x9375
   2b974:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   2b978:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2b97c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2b980:	f380 8811 	msr	BASEPRI, r0
   2b984:	f3bf 8f6f 	isb	sy
   2b988:	f7ff fdb6 	bl	2b4f8 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   2b98c:	b130      	cbz	r0, 2b99c <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
   2b98e:	f7ff fe45 	bl	2b61c <usbd_errata_187_211_end>
   2b992:	f7ff fdb1 	bl	2b4f8 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   2b996:	b108      	cbz	r0, 2b99c <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
   2b998:	f7ff fe20 	bl	2b5dc <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2b99c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2b9a0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2b9a4:	2b08      	cmp	r3, #8
   2b9a6:	4b17      	ldr	r3, [pc, #92]	; (2ba04 <nrfx_usbd_enable+0x134>)
   2b9a8:	d10a      	bne.n	2b9c0 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   2b9aa:	f240 72e3 	movw	r2, #2019	; 0x7e3
   2b9ae:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   2b9b2:	2240      	movs	r2, #64	; 0x40
   2b9b4:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   2b9b8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   2b9bc:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   2b9c0:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   2b9c2:	2280      	movs	r2, #128	; 0x80
   2b9c4:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   2b9c8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   2b9cc:	4b0f      	ldr	r3, [pc, #60]	; (2ba0c <nrfx_usbd_enable+0x13c>)
   2b9ce:	f240 12ff 	movw	r2, #511	; 0x1ff
   2b9d2:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   2b9d4:	4b0e      	ldr	r3, [pc, #56]	; (2ba10 <nrfx_usbd_enable+0x140>)
   2b9d6:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   2b9d8:	f7ff feac 	bl	2b734 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   2b9dc:	4b0d      	ldr	r3, [pc, #52]	; (2ba14 <nrfx_usbd_enable+0x144>)
   2b9de:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   2b9e0:	4b0d      	ldr	r3, [pc, #52]	; (2ba18 <nrfx_usbd_enable+0x148>)
   2b9e2:	2202      	movs	r2, #2
   2b9e4:	701a      	strb	r2, [r3, #0]
   2b9e6:	f7ff fd87 	bl	2b4f8 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   2b9ea:	b150      	cbz	r0, 2ba02 <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   2b9ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   2b9f0:	f7ff be14 	b.w	2b61c <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   2b9f4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   2b9f8:	e793      	b.n	2b922 <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   2b9fa:	2200      	movs	r2, #0
   2b9fc:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   2ba00:	e7be      	b.n	2b980 <nrfx_usbd_enable+0xb0>
}
   2ba02:	bd08      	pop	{r3, pc}
   2ba04:	40027000 	.word	0x40027000
   2ba08:	4006e000 	.word	0x4006e000
   2ba0c:	20001424 	.word	0x20001424
   2ba10:	20001420 	.word	0x20001420
   2ba14:	200014a4 	.word	0x200014a4
   2ba18:	200014a6 	.word	0x200014a6

0002ba1c <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   2ba1c:	4b0a      	ldr	r3, [pc, #40]	; (2ba48 <nrfx_usbd_start+0x2c>)
   2ba1e:	2200      	movs	r2, #0
{
   2ba20:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   2ba22:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
   2ba24:	4a09      	ldr	r2, [pc, #36]	; (2ba4c <nrfx_usbd_start+0x30>)
   2ba26:	4b0a      	ldr	r3, [pc, #40]	; (2ba50 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   2ba28:	4c0a      	ldr	r4, [pc, #40]	; (2ba54 <nrfx_usbd_start+0x38>)
   2ba2a:	2800      	cmp	r0, #0
   2ba2c:	bf08      	it	eq
   2ba2e:	4613      	moveq	r3, r2
   2ba30:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   2ba34:	2027      	movs	r0, #39	; 0x27
   2ba36:	f7fc fd3b 	bl	284b0 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   2ba3a:	2301      	movs	r3, #1
   2ba3c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   2ba40:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   2ba44:	bd10      	pop	{r4, pc}
   2ba46:	bf00      	nop
   2ba48:	200014a5 	.word	0x200014a5
   2ba4c:	01c01407 	.word	0x01c01407
   2ba50:	01e01407 	.word	0x01e01407
   2ba54:	40027000 	.word	0x40027000

0002ba58 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   2ba58:	4b03      	ldr	r3, [pc, #12]	; (2ba68 <nrfx_usbd_is_enabled+0x10>)
   2ba5a:	7818      	ldrb	r0, [r3, #0]
}
   2ba5c:	2801      	cmp	r0, #1
   2ba5e:	bf94      	ite	ls
   2ba60:	2000      	movls	r0, #0
   2ba62:	2001      	movhi	r0, #1
   2ba64:	4770      	bx	lr
   2ba66:	bf00      	nop
   2ba68:	200014a6 	.word	0x200014a6

0002ba6c <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
   2ba6c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ba6e:	f04f 0320 	mov.w	r3, #32
   2ba72:	f3ef 8111 	mrs	r1, BASEPRI
   2ba76:	f383 8812 	msr	BASEPRI_MAX, r3
   2ba7a:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
   2ba7e:	4b0f      	ldr	r3, [pc, #60]	; (2babc <nrfx_usbd_suspend+0x50>)
   2ba80:	781b      	ldrb	r3, [r3, #0]
   2ba82:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   2ba86:	b193      	cbz	r3, 2baae <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
   2ba88:	4b0d      	ldr	r3, [pc, #52]	; (2bac0 <nrfx_usbd_suspend+0x54>)
   2ba8a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   2ba8e:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   2ba92:	d10c      	bne.n	2baae <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   2ba94:	2401      	movs	r4, #1
   2ba96:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   2ba9a:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   2ba9e:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   2baa2:	05a4      	lsls	r4, r4, #22
   2baa4:	d504      	bpl.n	2bab0 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   2baa6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   2baaa:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   2baae:	2000      	movs	r0, #0
	__asm__ volatile(
   2bab0:	f381 8811 	msr	BASEPRI, r1
   2bab4:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
   2bab8:	bd10      	pop	{r4, pc}
   2baba:	bf00      	nop
   2babc:	200014a5 	.word	0x200014a5
   2bac0:	40027000 	.word	0x40027000

0002bac4 <nrfx_usbd_init>:
{
   2bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   2bac6:	4b1c      	ldr	r3, [pc, #112]	; (2bb38 <nrfx_usbd_init+0x74>)
   2bac8:	781c      	ldrb	r4, [r3, #0]
   2baca:	bb94      	cbnz	r4, 2bb32 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
   2bacc:	4a1b      	ldr	r2, [pc, #108]	; (2bb3c <nrfx_usbd_init+0x78>)
   2bace:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   2bad0:	2201      	movs	r2, #1
   2bad2:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2bad4:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   2bad8:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   2bada:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2bade:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   2bae2:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2bae4:	bf14      	ite	ne
   2bae6:	4639      	movne	r1, r7
   2bae8:	2140      	moveq	r1, #64	; 0x40
   2baea:	4628      	mov	r0, r5
   2baec:	f003 f896 	bl	2ec1c <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   2baf0:	4628      	mov	r0, r5
   2baf2:	f7ff fd15 	bl	2b520 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   2baf6:	3401      	adds	r4, #1
   2baf8:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   2bafa:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
   2bafc:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
   2bafe:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   2bb00:	d1eb      	bne.n	2bada <nrfx_usbd_init+0x16>
   2bb02:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2bb04:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   2bb08:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2bb0a:	f014 0f08 	tst.w	r4, #8
   2bb0e:	b2e6      	uxtb	r6, r4
   2bb10:	bf14      	ite	ne
   2bb12:	4639      	movne	r1, r7
   2bb14:	2140      	moveq	r1, #64	; 0x40
   2bb16:	4630      	mov	r0, r6
   2bb18:	f003 f880 	bl	2ec1c <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   2bb1c:	4630      	mov	r0, r6
   2bb1e:	f7ff fcff 	bl	2b520 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   2bb22:	3401      	adds	r4, #1
   2bb24:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   2bb26:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   2bb28:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   2bb2a:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   2bb2c:	d1ed      	bne.n	2bb0a <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
   2bb2e:	4804      	ldr	r0, [pc, #16]	; (2bb40 <nrfx_usbd_init+0x7c>)
}
   2bb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
   2bb32:	4804      	ldr	r0, [pc, #16]	; (2bb44 <nrfx_usbd_init+0x80>)
   2bb34:	e7fc      	b.n	2bb30 <nrfx_usbd_init+0x6c>
   2bb36:	bf00      	nop
   2bb38:	200014a6 	.word	0x200014a6
   2bb3c:	20001428 	.word	0x20001428
   2bb40:	0bad0000 	.word	0x0bad0000
   2bb44:	0bad0005 	.word	0x0bad0005

0002bb48 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   2bb48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bb4c:	4604      	mov	r4, r0
	__asm__ volatile(
   2bb4e:	f04f 0320 	mov.w	r3, #32
   2bb52:	f3ef 8611 	mrs	r6, BASEPRI
   2bb56:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb5a:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   2bb5e:	f010 090f 	ands.w	r9, r0, #15
   2bb62:	d103      	bne.n	2bb6c <nrfx_usbd_ep_transfer+0x24>
   2bb64:	4b27      	ldr	r3, [pc, #156]	; (2bc04 <nrfx_usbd_ep_transfer+0xbc>)
   2bb66:	781b      	ldrb	r3, [r3, #0]
   2bb68:	4283      	cmp	r3, r0
   2bb6a:	d147      	bne.n	2bbfc <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2bb6c:	4b26      	ldr	r3, [pc, #152]	; (2bc08 <nrfx_usbd_ep_transfer+0xc0>)
   2bb6e:	4f27      	ldr	r7, [pc, #156]	; (2bc0c <nrfx_usbd_ep_transfer+0xc4>)
   2bb70:	681a      	ldr	r2, [r3, #0]
   2bb72:	683b      	ldr	r3, [r7, #0]
   2bb74:	43d2      	mvns	r2, r2
   2bb76:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
   2bb78:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2bb7a:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
   2bb7c:	f003 f816 	bl	2ebac <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2bb80:	f04f 0801 	mov.w	r8, #1
   2bb84:	fa08 f800 	lsl.w	r8, r8, r0
   2bb88:	ea12 0f08 	tst.w	r2, r8
   2bb8c:	d138      	bne.n	2bc00 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   2bb8e:	4620      	mov	r0, r4
   2bb90:	f7ff fcc6 	bl	2b520 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2bb94:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
   2bb96:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   2bb98:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2bb9a:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
   2bb9e:	d529      	bpl.n	2bbf4 <nrfx_usbd_ep_transfer+0xac>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2bba0:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2bba2:	6888      	ldr	r0, [r1, #8]
   2bba4:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   2bba8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2bbac:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   2bbb0:	d11d      	bne.n	2bbee <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2bbb2:	4a17      	ldr	r2, [pc, #92]	; (2bc10 <nrfx_usbd_ep_transfer+0xc8>)
   2bbb4:	4c17      	ldr	r4, [pc, #92]	; (2bc14 <nrfx_usbd_ep_transfer+0xcc>)
   2bbb6:	2800      	cmp	r0, #0
   2bbb8:	bf08      	it	eq
   2bbba:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2bbbc:	4816      	ldr	r0, [pc, #88]	; (2bc18 <nrfx_usbd_ep_transfer+0xd0>)
   2bbbe:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   2bbc0:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
   2bbc2:	c907      	ldmia	r1, {r0, r1, r2}
   2bbc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   2bbc8:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
   2bbca:	2300      	movs	r3, #0
   2bbcc:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   2bbce:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   2bbd0:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
   2bbd2:	4812      	ldr	r0, [pc, #72]	; (2bc1c <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   2bbd4:	ea43 0308 	orr.w	r3, r3, r8
   2bbd8:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2bbda:	4b11      	ldr	r3, [pc, #68]	; (2bc20 <nrfx_usbd_ep_transfer+0xd8>)
   2bbdc:	2280      	movs	r2, #128	; 0x80
   2bbde:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   2bbe2:	f386 8811 	msr	BASEPRI, r6
   2bbe6:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   2bbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2bbee:	4a0d      	ldr	r2, [pc, #52]	; (2bc24 <nrfx_usbd_ep_transfer+0xdc>)
   2bbf0:	4c0d      	ldr	r4, [pc, #52]	; (2bc28 <nrfx_usbd_ep_transfer+0xe0>)
   2bbf2:	e7e0      	b.n	2bbb6 <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   2bbf4:	4a0d      	ldr	r2, [pc, #52]	; (2bc2c <nrfx_usbd_ep_transfer+0xe4>)
   2bbf6:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   2bbf8:	4a0d      	ldr	r2, [pc, #52]	; (2bc30 <nrfx_usbd_ep_transfer+0xe8>)
   2bbfa:	e7e1      	b.n	2bbc0 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
   2bbfc:	480d      	ldr	r0, [pc, #52]	; (2bc34 <nrfx_usbd_ep_transfer+0xec>)
   2bbfe:	e7f0      	b.n	2bbe2 <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
   2bc00:	480d      	ldr	r0, [pc, #52]	; (2bc38 <nrfx_usbd_ep_transfer+0xf0>)
   2bc02:	e7ee      	b.n	2bbe2 <nrfx_usbd_ep_transfer+0x9a>
   2bc04:	200014a4 	.word	0x200014a4
   2bc08:	20001424 	.word	0x20001424
   2bc0c:	20001420 	.word	0x20001420
   2bc10:	0002eb85 	.word	0x0002eb85
   2bc14:	0002eb63 	.word	0x0002eb63
   2bc18:	20001294 	.word	0x20001294
   2bc1c:	0bad0000 	.word	0x0bad0000
   2bc20:	e000e100 	.word	0xe000e100
   2bc24:	0002b695 	.word	0x0002b695
   2bc28:	0002b65d 	.word	0x0002b65d
   2bc2c:	20001228 	.word	0x20001228
   2bc30:	0002eb31 	.word	0x0002eb31
   2bc34:	0bad000a 	.word	0x0bad000a
   2bc38:	0bad000b 	.word	0x0bad000b

0002bc3c <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   2bc3c:	f010 0f08 	tst.w	r0, #8
   2bc40:	4b07      	ldr	r3, [pc, #28]	; (2bc60 <nrfx_usbd_epout_size_get+0x24>)
   2bc42:	d006      	beq.n	2bc52 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   2bc44:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   2bc48:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   2bc4c:	bf18      	it	ne
   2bc4e:	2000      	movne	r0, #0
   2bc50:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   2bc52:	f000 000f 	and.w	r0, r0, #15
   2bc56:	f500 7094 	add.w	r0, r0, #296	; 0x128
   2bc5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   2bc5e:	4770      	bx	lr
   2bc60:	40027000 	.word	0x40027000

0002bc64 <usbd_dmareq_process>:
{
   2bc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   2bc68:	4e59      	ldr	r6, [pc, #356]	; (2bdd0 <usbd_dmareq_process+0x16c>)
   2bc6a:	7833      	ldrb	r3, [r6, #0]
{
   2bc6c:	b085      	sub	sp, #20
    if (!m_dma_pending)
   2bc6e:	2b00      	cmp	r3, #0
   2bc70:	d173      	bne.n	2bd5a <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   2bc72:	f8df 8160 	ldr.w	r8, [pc, #352]	; 2bdd4 <usbd_dmareq_process+0x170>
   2bc76:	4d58      	ldr	r5, [pc, #352]	; (2bdd8 <usbd_dmareq_process+0x174>)
   2bc78:	f8d8 4000 	ldr.w	r4, [r8]
   2bc7c:	682b      	ldr	r3, [r5, #0]
   2bc7e:	401c      	ands	r4, r3
   2bc80:	d06b      	beq.n	2bd5a <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   2bc82:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
   2bc86:	bf14      	ite	ne
   2bc88:	fa93 f4a3 	rbitne	r4, r3
   2bc8c:	fa94 f4a4 	rbiteq	r4, r4
   2bc90:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2bc94:	f04f 0901 	mov.w	r9, #1
   2bc98:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2bc9c:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2bc9e:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2bca2:	d95d      	bls.n	2bd60 <usbd_dmareq_process+0xfc>
   2bca4:	3c10      	subs	r4, #16
   2bca6:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2bca8:	4620      	mov	r0, r4
   2bcaa:	f7ff fc39 	bl	2b520 <ep_state_access>
   2bcae:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   2bcb0:	4620      	mov	r0, r4
   2bcb2:	f7ff ffc3 	bl	2bc3c <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   2bcb6:	f8da 7000 	ldr.w	r7, [sl]
   2bcba:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   2bcbe:	f8da 1004 	ldr.w	r1, [sl, #4]
   2bcc2:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   2bcc4:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
   2bcc6:	a802      	add	r0, sp, #8
   2bcc8:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
   2bcca:	9b02      	ldr	r3, [sp, #8]
   2bccc:	2b00      	cmp	r3, #0
   2bcce:	d153      	bne.n	2bd78 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
   2bcd0:	b908      	cbnz	r0, 2bcd6 <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
   2bcd2:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2bcd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
   2bcda:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
   2bcdc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2bce0:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   2bce2:	bf02      	ittt	eq
   2bce4:	4b3d      	ldreq	r3, [pc, #244]	; (2bddc <usbd_dmareq_process+0x178>)
   2bce6:	2282      	moveq	r2, #130	; 0x82
   2bce8:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   2bcec:	2301      	movs	r3, #1
   2bcee:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
   2bcf0:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   2bcf2:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   2bcf4:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
   2bcf6:	ea03 0309 	and.w	r3, r3, r9
   2bcfa:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   2bcfc:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
   2bd00:	2900      	cmp	r1, #0
   2bd02:	4413      	add	r3, r2
   2bd04:	f8ca 3008 	str.w	r3, [sl, #8]
   2bd08:	f004 0508 	and.w	r5, r4, #8
   2bd0c:	4b33      	ldr	r3, [pc, #204]	; (2bddc <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   2bd0e:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   2bd12:	da4e      	bge.n	2bdb2 <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
   2bd14:	2d00      	cmp	r5, #0
   2bd16:	d044      	beq.n	2bda2 <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
   2bd18:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   2bd1c:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   2bd20:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2bd22:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2bd26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2bd2a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2bd2e:	2201      	movs	r2, #1
   2bd30:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2bd32:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   2bd34:	4a2a      	ldr	r2, [pc, #168]	; (2bde0 <usbd_dmareq_process+0x17c>)
   2bd36:	4b2b      	ldr	r3, [pc, #172]	; (2bde4 <usbd_dmareq_process+0x180>)
   2bd38:	ea13 0321 	ands.w	r3, r3, r1, asr #32
   2bd3c:	bf38      	it	cc
   2bd3e:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2bd40:	4926      	ldr	r1, [pc, #152]	; (2bddc <usbd_dmareq_process+0x178>)
   2bd42:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2bd46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2bd4a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2bd4e:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   2bd50:	b91a      	cbnz	r2, 2bd5a <usbd_dmareq_process+0xf6>
   2bd52:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   2bd56:	2a00      	cmp	r2, #0
   2bd58:	d0f9      	beq.n	2bd4e <usbd_dmareq_process+0xea>
}
   2bd5a:	b005      	add	sp, #20
   2bd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2bd60:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2bd64:	4620      	mov	r0, r4
   2bd66:	f7ff fbdb 	bl	2b520 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
   2bd6a:	6803      	ldr	r3, [r0, #0]
   2bd6c:	8982      	ldrh	r2, [r0, #12]
   2bd6e:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2bd70:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
   2bd72:	a802      	add	r0, sp, #8
   2bd74:	4798      	blx	r3
   2bd76:	e7ab      	b.n	2bcd0 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
   2bd78:	9b03      	ldr	r3, [sp, #12]
   2bd7a:	459b      	cmp	fp, r3
   2bd7c:	d9a8      	bls.n	2bcd0 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   2bd7e:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2bd80:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   2bd82:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2bd86:	f7ff fcc5 	bl	2b714 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   2bd8a:	2306      	movs	r3, #6
   2bd8c:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   2bd90:	4b15      	ldr	r3, [pc, #84]	; (2bde8 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   2bd92:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   2bd96:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   2bd98:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   2bd9c:	a801      	add	r0, sp, #4
   2bd9e:	4798      	blx	r3
                    continue;
   2bda0:	e76a      	b.n	2bc78 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
   2bda2:	2514      	movs	r5, #20
   2bda4:	fb05 3304 	mla	r3, r5, r4, r3
   2bda8:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   2bdac:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
   2bdb0:	e7b6      	b.n	2bd20 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
   2bdb2:	b12d      	cbz	r5, 2bdc0 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
   2bdb4:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   2bdb8:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
   2bdbc:	2328      	movs	r3, #40	; 0x28
   2bdbe:	e7b0      	b.n	2bd22 <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
   2bdc0:	2514      	movs	r5, #20
   2bdc2:	fb05 3304 	mla	r3, r5, r4, r3
   2bdc6:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   2bdca:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   2bdce:	e7f5      	b.n	2bdbc <usbd_dmareq_process+0x158>
   2bdd0:	200014a3 	.word	0x200014a3
   2bdd4:	20001420 	.word	0x20001420
   2bdd8:	20001424 	.word	0x20001424
   2bddc:	40027000 	.word	0x40027000
   2bde0:	0002f928 	.word	0x0002f928
   2bde4:	0002f93a 	.word	0x0002f93a
   2bde8:	20001428 	.word	0x20001428

0002bdec <ev_epdata_handler>:
{
   2bdec:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   2bdee:	4b0f      	ldr	r3, [pc, #60]	; (2be2c <ev_epdata_handler+0x40>)
   2bdf0:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   2bdf4:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   2bdf8:	2501      	movs	r5, #1
    while (dataepstatus)
   2bdfa:	b91c      	cbnz	r4, 2be04 <ev_epdata_handler+0x18>
}
   2bdfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   2be00:	f7ff bf30 	b.w	2bc64 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   2be04:	fa94 f3a4 	rbit	r3, r4
   2be08:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2be0c:	2b0f      	cmp	r3, #15
   2be0e:	bfc8      	it	gt
   2be10:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   2be14:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2be16:	bfd4      	ite	le
   2be18:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   2be1c:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   2be1e:	fa05 f303 	lsl.w	r3, r5, r3
   2be22:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   2be26:	f7ff fcad 	bl	2b784 <usbd_ep_data_handler>
   2be2a:	e7e6      	b.n	2bdfa <ev_epdata_handler+0xe>
   2be2c:	40027000 	.word	0x40027000

0002be30 <nrf_usbd_epout_dma_handler>:
{
   2be30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
   2be32:	f7ff fc7f 	bl	2b734 <usbd_dma_pending_clear>
{
   2be36:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2be38:	f7ff fb72 	bl	2b520 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2be3c:	7b83      	ldrb	r3, [r0, #14]
   2be3e:	2b03      	cmp	r3, #3
   2be40:	d10d      	bne.n	2be5e <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2be42:	4620      	mov	r0, r4
   2be44:	f002 feb2 	bl	2ebac <ep2bit>
   2be48:	2301      	movs	r3, #1
   2be4a:	fa03 f000 	lsl.w	r0, r3, r0
   2be4e:	43c0      	mvns	r0, r0
   2be50:	f7ff fc60 	bl	2b714 <atomic_and.constprop.0.isra.0>
}
   2be54:	b003      	add	sp, #12
   2be56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   2be5a:	f7ff bf03 	b.w	2bc64 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   2be5e:	6805      	ldr	r5, [r0, #0]
   2be60:	2d00      	cmp	r5, #0
   2be62:	d1f7      	bne.n	2be54 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2be64:	4620      	mov	r0, r4
   2be66:	f002 fea1 	bl	2ebac <ep2bit>
   2be6a:	2301      	movs	r3, #1
   2be6c:	fa03 f000 	lsl.w	r0, r3, r0
   2be70:	43c0      	mvns	r0, r0
   2be72:	f7ff fc4f 	bl	2b714 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2be76:	2306      	movs	r3, #6
   2be78:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   2be7c:	4b04      	ldr	r3, [pc, #16]	; (2be90 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2be7e:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   2be82:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2be84:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   2be88:	a801      	add	r0, sp, #4
   2be8a:	4798      	blx	r3
   2be8c:	e7e2      	b.n	2be54 <nrf_usbd_epout_dma_handler+0x24>
   2be8e:	bf00      	nop
   2be90:	20001428 	.word	0x20001428

0002be94 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   2be94:	4b02      	ldr	r3, [pc, #8]	; (2bea0 <nrfx_usbd_ep_stall+0xc>)
   2be96:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   2be9a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   2be9e:	4770      	bx	lr
   2bea0:	40027000 	.word	0x40027000

0002bea4 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   2bea4:	0702      	lsls	r2, r0, #28
   2bea6:	d413      	bmi.n	2bed0 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   2bea8:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   2beac:	f010 0f80 	tst.w	r0, #128	; 0x80
   2beb0:	4a08      	ldr	r2, [pc, #32]	; (2bed4 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   2beb2:	bf0b      	itete	eq
   2beb4:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   2beb8:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   2bebc:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   2bec0:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   2bec4:	bf08      	it	eq
   2bec6:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   2bec8:	1e43      	subs	r3, r0, #1
   2beca:	4258      	negs	r0, r3
   2becc:	4158      	adcs	r0, r3
   2bece:	4770      	bx	lr
        return false;
   2bed0:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   2bed2:	4770      	bx	lr
   2bed4:	40027000 	.word	0x40027000

0002bed8 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   2bed8:	4b04      	ldr	r3, [pc, #16]	; (2beec <nrfx_usbd_ep_dtoggle_clear+0x14>)
   2beda:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   2bede:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   2bee2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   2bee6:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   2beea:	4770      	bx	lr
   2beec:	40027000 	.word	0x40027000

0002bef0 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   2bef0:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   2bef2:	2208      	movs	r2, #8
   2bef4:	2100      	movs	r1, #0
{
   2bef6:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   2bef8:	f002 fa1b 	bl	2e332 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   2befc:	4b0e      	ldr	r3, [pc, #56]	; (2bf38 <nrfx_usbd_setup_get+0x48>)
   2befe:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   2bf02:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   2bf04:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   2bf08:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   2bf0a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   2bf0e:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   2bf12:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   2bf16:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   2bf18:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   2bf1c:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   2bf20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   2bf24:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   2bf26:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   2bf2a:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   2bf2e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   2bf32:	80e3      	strh	r3, [r4, #6]
}
   2bf34:	bd10      	pop	{r4, pc}
   2bf36:	bf00      	nop
   2bf38:	40027000 	.word	0x40027000

0002bf3c <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2bf3c:	4b02      	ldr	r3, [pc, #8]	; (2bf48 <nrfx_usbd_setup_data_clear+0xc>)
   2bf3e:	2201      	movs	r2, #1
   2bf40:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2bf42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   2bf44:	4770      	bx	lr
   2bf46:	bf00      	nop
   2bf48:	40027000 	.word	0x40027000

0002bf4c <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   2bf4c:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   2bf4e:	f7ff fbf1 	bl	2b734 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2bf52:	4b10      	ldr	r3, [pc, #64]	; (2bf94 <ev_dma_epout0_handler+0x48>)
   2bf54:	7b9a      	ldrb	r2, [r3, #14]
   2bf56:	2a03      	cmp	r2, #3
   2bf58:	d106      	bne.n	2bf68 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2bf5a:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   2bf5e:	b002      	add	sp, #8
   2bf60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2bf64:	f7ff bbd6 	b.w	2b714 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   2bf68:	681c      	ldr	r4, [r3, #0]
   2bf6a:	b974      	cbnz	r4, 2bf8a <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2bf6c:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   2bf70:	f7ff fbd0 	bl	2b714 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2bf74:	2306      	movs	r3, #6
   2bf76:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   2bf7a:	4b07      	ldr	r3, [pc, #28]	; (2bf98 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2bf7c:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   2bf80:	681b      	ldr	r3, [r3, #0]
   2bf82:	a801      	add	r0, sp, #4
   2bf84:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   2bf86:	b002      	add	sp, #8
   2bf88:	bd10      	pop	{r4, pc}
   2bf8a:	b002      	add	sp, #8
   2bf8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   2bf90:	f7ff bfd4 	b.w	2bf3c <nrfx_usbd_setup_data_clear>
   2bf94:	20001300 	.word	0x20001300
   2bf98:	20001428 	.word	0x20001428

0002bf9c <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2bf9c:	4b02      	ldr	r3, [pc, #8]	; (2bfa8 <nrfx_usbd_setup_clear+0xc>)
   2bf9e:	2201      	movs	r2, #1
   2bfa0:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2bfa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   2bfa4:	4770      	bx	lr
   2bfa6:	bf00      	nop
   2bfa8:	40027000 	.word	0x40027000

0002bfac <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2bfac:	4b02      	ldr	r3, [pc, #8]	; (2bfb8 <nrfx_usbd_setup_stall+0xc>)
   2bfae:	2201      	movs	r2, #1
   2bfb0:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2bfb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   2bfb4:	4770      	bx	lr
   2bfb6:	bf00      	nop
   2bfb8:	40027000 	.word	0x40027000

0002bfbc <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   2bfbc:	4b01      	ldr	r3, [pc, #4]	; (2bfc4 <nrfx_usbd_last_setup_dir_get+0x8>)
   2bfbe:	7818      	ldrb	r0, [r3, #0]
   2bfc0:	4770      	bx	lr
   2bfc2:	bf00      	nop
   2bfc4:	200014a4 	.word	0x200014a4

0002bfc8 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   2bfc8:	b510      	push	{r4, lr}
   2bfca:	4602      	mov	r2, r0
	__asm__ volatile(
   2bfcc:	f04f 0320 	mov.w	r3, #32
   2bfd0:	f3ef 8411 	mrs	r4, BASEPRI
   2bfd4:	f383 8812 	msr	BASEPRI_MAX, r3
   2bfd8:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   2bfdc:	f002 fde6 	bl	2ebac <ep2bit>
   2bfe0:	490d      	ldr	r1, [pc, #52]	; (2c018 <nrfx_usbd_transfer_out_drop+0x50>)
   2bfe2:	2301      	movs	r3, #1
   2bfe4:	fa03 f000 	lsl.w	r0, r3, r0
   2bfe8:	680b      	ldr	r3, [r1, #0]
   2bfea:	ea23 0300 	bic.w	r3, r3, r0
   2bfee:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   2bff0:	f012 0108 	ands.w	r1, r2, #8
   2bff4:	d10a      	bne.n	2c00c <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   2bff6:	f002 030f 	and.w	r3, r2, #15
   2bffa:	009b      	lsls	r3, r3, #2
   2bffc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2c000:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   2c004:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   2c008:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   2c00c:	f384 8811 	msr	BASEPRI, r4
   2c010:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   2c014:	bd10      	pop	{r4, pc}
   2c016:	bf00      	nop
   2c018:	20001424 	.word	0x20001424

0002c01c <usbd_ep_abort>:
{
   2c01c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c01e:	4601      	mov	r1, r0
	__asm__ volatile(
   2c020:	f04f 0320 	mov.w	r3, #32
   2c024:	f3ef 8511 	mrs	r5, BASEPRI
   2c028:	f383 8812 	msr	BASEPRI_MAX, r3
   2c02c:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2c030:	f7ff fa76 	bl	2b520 <ep_state_access>
   2c034:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2c036:	4608      	mov	r0, r1
   2c038:	f002 fdb8 	bl	2ebac <ep2bit>
   2c03c:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   2c03e:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2c042:	fa02 f200 	lsl.w	r2, r2, r0
   2c046:	482e      	ldr	r0, [pc, #184]	; (2c100 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   2c048:	d119      	bne.n	2c07e <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2c04a:	6803      	ldr	r3, [r0, #0]
   2c04c:	ea32 0303 	bics.w	r3, r2, r3
   2c050:	d00a      	beq.n	2c068 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   2c052:	4608      	mov	r0, r1
   2c054:	f7ff ffb8 	bl	2bfc8 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   2c058:	2303      	movs	r3, #3
   2c05a:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   2c05c:	f385 8811 	msr	BASEPRI, r5
   2c060:	f3bf 8f6f 	isb	sy
}
   2c064:	b003      	add	sp, #12
   2c066:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
   2c068:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2c06a:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   2c06c:	4925      	ldr	r1, [pc, #148]	; (2c104 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2c06e:	ea23 0302 	bic.w	r3, r3, r2
   2c072:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   2c074:	680b      	ldr	r3, [r1, #0]
   2c076:	ea23 0302 	bic.w	r3, r3, r2
   2c07a:	600b      	str	r3, [r1, #0]
   2c07c:	e7ec      	b.n	2c058 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   2c07e:	070b      	lsls	r3, r1, #28
   2c080:	d415      	bmi.n	2c0ae <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
   2c082:	2980      	cmp	r1, #128	; 0x80
   2c084:	4b20      	ldr	r3, [pc, #128]	; (2c108 <usbd_ep_abort+0xec>)
   2c086:	d02f      	beq.n	2c0e8 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   2c088:	f001 040f 	and.w	r4, r1, #15
   2c08c:	f204 34da 	addw	r4, r4, #986	; 0x3da
   2c090:	0064      	lsls	r4, r4, #1
   2c092:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2c096:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2c09a:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2c09e:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2c0a0:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2c0a4:	433c      	orrs	r4, r7
   2c0a6:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   2c0aa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   2c0ae:	4f15      	ldr	r7, [pc, #84]	; (2c104 <usbd_ep_abort+0xe8>)
   2c0b0:	6804      	ldr	r4, [r0, #0]
   2c0b2:	683b      	ldr	r3, [r7, #0]
   2c0b4:	ea64 0c03 	orn	ip, r4, r3
   2c0b8:	ea1c 0f02 	tst.w	ip, r2
   2c0bc:	d0ce      	beq.n	2c05c <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   2c0be:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2c0c0:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   2c0c4:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   2c0c6:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2c0c8:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   2c0ca:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   2c0cc:	2303      	movs	r3, #3
   2c0ce:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   2c0d0:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   2c0d4:	4b0d      	ldr	r3, [pc, #52]	; (2c10c <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   2c0d6:	f88d 1006 	strb.w	r1, [sp, #6]
   2c0da:	2206      	movs	r2, #6
            m_event_handler(&evt);
   2c0dc:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   2c0de:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   2c0e2:	a801      	add	r0, sp, #4
   2c0e4:	4798      	blx	r3
   2c0e6:	e7b9      	b.n	2c05c <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   2c0e8:	f240 74b4 	movw	r4, #1972	; 0x7b4
   2c0ec:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2c0f0:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2c0f4:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2c0f8:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2c0fa:	f044 0404 	orr.w	r4, r4, #4
   2c0fe:	e7d1      	b.n	2c0a4 <usbd_ep_abort+0x88>
   2c100:	20001420 	.word	0x20001420
   2c104:	20001424 	.word	0x20001424
   2c108:	40027000 	.word	0x40027000
   2c10c:	20001428 	.word	0x20001428

0002c110 <ev_setup_handler>:
{
   2c110:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   2c112:	4b14      	ldr	r3, [pc, #80]	; (2c164 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2c114:	4c14      	ldr	r4, [pc, #80]	; (2c168 <ev_setup_handler+0x58>)
   2c116:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   2c11a:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   2c11c:	4e13      	ldr	r6, [pc, #76]	; (2c16c <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2c11e:	43da      	mvns	r2, r3
   2c120:	4b13      	ldr	r3, [pc, #76]	; (2c170 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
   2c122:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2c124:	681b      	ldr	r3, [r3, #0]
   2c126:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   2c128:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2c12a:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   2c12c:	f002 fd3e 	bl	2ebac <ep2bit>
   2c130:	2301      	movs	r3, #1
   2c132:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2c134:	4213      	tst	r3, r2
   2c136:	d002      	beq.n	2c13e <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   2c138:	4608      	mov	r0, r1
   2c13a:	f7ff ff6f 	bl	2c01c <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   2c13e:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
   2c142:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   2c146:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   2c148:	f7ff fae4 	bl	2b714 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   2c14c:	6823      	ldr	r3, [r4, #0]
   2c14e:	f043 0301 	orr.w	r3, r3, #1
   2c152:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   2c154:	2305      	movs	r3, #5
   2c156:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
   2c158:	4b06      	ldr	r3, [pc, #24]	; (2c174 <ev_setup_handler+0x64>)
   2c15a:	a801      	add	r0, sp, #4
   2c15c:	681b      	ldr	r3, [r3, #0]
   2c15e:	4798      	blx	r3
}
   2c160:	b002      	add	sp, #8
   2c162:	bd70      	pop	{r4, r5, r6, pc}
   2c164:	40027000 	.word	0x40027000
   2c168:	20001424 	.word	0x20001424
   2c16c:	200014a4 	.word	0x200014a4
   2c170:	20001420 	.word	0x20001420
   2c174:	20001428 	.word	0x20001428

0002c178 <nrfx_usbd_irq_handler>:
{
   2c178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
   2c17c:	4b1a      	ldr	r3, [pc, #104]	; (2c1e8 <nrfx_usbd_irq_handler+0x70>)
   2c17e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   2c182:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
   2c184:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2c186:	461d      	mov	r5, r3
    while (to_process)
   2c188:	b970      	cbnz	r0, 2c1a8 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   2c18a:	4f18      	ldr	r7, [pc, #96]	; (2c1ec <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   2c18c:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   2c190:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   2c194:	f04f 0801 	mov.w	r8, #1
    while (active)
   2c198:	b9bc      	cbnz	r4, 2c1ca <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   2c19a:	f7ff fd63 	bl	2bc64 <usbd_dmareq_process>
    if (setup_active)
   2c19e:	b306      	cbz	r6, 2c1e2 <nrfx_usbd_irq_handler+0x6a>
}
   2c1a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   2c1a4:	f7ff bfb4 	b.w	2c110 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   2c1a8:	fa90 f2a0 	rbit	r2, r0
   2c1ac:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2c1b0:	490f      	ldr	r1, [pc, #60]	; (2c1f0 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   2c1b2:	0096      	lsls	r6, r2, #2
   2c1b4:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   2c1b6:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2c1ba:	680e      	ldr	r6, [r1, #0]
    if (ret)
   2c1bc:	b116      	cbz	r6, 2c1c4 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2c1be:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   2c1c0:	6809      	ldr	r1, [r1, #0]
   2c1c2:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   2c1c4:	ea20 0002 	bic.w	r0, r0, r2
   2c1c8:	e7de      	b.n	2c188 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   2c1ca:	fa94 f5a4 	rbit	r5, r4
   2c1ce:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   2c1d2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   2c1d6:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   2c1da:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   2c1dc:	ea24 0405 	bic.w	r4, r4, r5
   2c1e0:	e7da      	b.n	2c198 <nrfx_usbd_irq_handler+0x20>
}
   2c1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c1e6:	bf00      	nop
   2c1e8:	40027000 	.word	0x40027000
   2c1ec:	0002f8a8 	.word	0x0002f8a8
   2c1f0:	40027100 	.word	0x40027100

0002c1f4 <nrfx_usbd_stop>:
{
   2c1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2c1f6:	4b1b      	ldr	r3, [pc, #108]	; (2c264 <nrfx_usbd_stop+0x70>)
   2c1f8:	2280      	movs	r2, #128	; 0x80
   2c1fa:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   2c1fe:	2027      	movs	r0, #39	; 0x27
   2c200:	f7fc f978 	bl	284f4 <arch_irq_is_enabled>
   2c204:	b1b8      	cbz	r0, 2c236 <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   2c206:	4e18      	ldr	r6, [pc, #96]	; (2c268 <nrfx_usbd_stop+0x74>)
   2c208:	4b18      	ldr	r3, [pc, #96]	; (2c26c <nrfx_usbd_stop+0x78>)
   2c20a:	6834      	ldr	r4, [r6, #0]
   2c20c:	681b      	ldr	r3, [r3, #0]
   2c20e:	0c24      	lsrs	r4, r4, #16
   2c210:	0424      	lsls	r4, r4, #16
   2c212:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   2c214:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   2c216:	b97c      	cbnz	r4, 2c238 <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   2c218:	4d15      	ldr	r5, [pc, #84]	; (2c270 <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   2c21a:	f240 13ff 	movw	r3, #511	; 0x1ff
   2c21e:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
   2c220:	2027      	movs	r0, #39	; 0x27
   2c222:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   2c226:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   2c22a:	f7fc f94f 	bl	284cc <arch_irq_disable>
    p_reg->INTENCLR = mask;
   2c22e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c232:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
   2c236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   2c238:	fa94 f5a4 	rbit	r5, r4
   2c23c:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2c240:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   2c242:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2c244:	bfc6      	itte	gt
   2c246:	f1a5 0010 	subgt.w	r0, r5, #16
   2c24a:	b2c0      	uxtbgt	r0, r0
   2c24c:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   2c250:	0703      	lsls	r3, r0, #28
   2c252:	d401      	bmi.n	2c258 <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
   2c254:	f7ff fee2 	bl	2c01c <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   2c258:	fa07 f505 	lsl.w	r5, r7, r5
   2c25c:	ea24 0405 	bic.w	r4, r4, r5
   2c260:	e7d9      	b.n	2c216 <nrfx_usbd_stop+0x22>
   2c262:	bf00      	nop
   2c264:	e000e100 	.word	0xe000e100
   2c268:	20001424 	.word	0x20001424
   2c26c:	20001420 	.word	0x20001420
   2c270:	40027000 	.word	0x40027000

0002c274 <nrfx_usbd_disable>:
{
   2c274:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   2c276:	f7ff ffbd 	bl	2c1f4 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   2c27a:	4b08      	ldr	r3, [pc, #32]	; (2c29c <nrfx_usbd_disable+0x28>)
   2c27c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   2c280:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   2c284:	2200      	movs	r2, #0
   2c286:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   2c28a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   2c28e:	f7ff fa51 	bl	2b734 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   2c292:	4b03      	ldr	r3, [pc, #12]	; (2c2a0 <nrfx_usbd_disable+0x2c>)
   2c294:	2201      	movs	r2, #1
   2c296:	701a      	strb	r2, [r3, #0]
}
   2c298:	bd08      	pop	{r3, pc}
   2c29a:	bf00      	nop
   2c29c:	40027000 	.word	0x40027000
   2c2a0:	200014a6 	.word	0x200014a6

0002c2a4 <nrfx_usbd_ep_disable>:
{
   2c2a4:	b510      	push	{r4, lr}
   2c2a6:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   2c2a8:	f7ff feb8 	bl	2c01c <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   2c2ac:	4a10      	ldr	r2, [pc, #64]	; (2c2f0 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   2c2ae:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   2c2b2:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   2c2b6:	f04f 0301 	mov.w	r3, #1
   2c2ba:	bf14      	ite	ne
   2c2bc:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   2c2c0:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   2c2c4:	fa03 f300 	lsl.w	r3, r3, r0
   2c2c8:	ea6f 0303 	mvn.w	r3, r3
   2c2cc:	bf15      	itete	ne
   2c2ce:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   2c2d0:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   2c2d2:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   2c2d6:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2c2da:	bf14      	ite	ne
   2c2dc:	4b05      	ldrne	r3, [pc, #20]	; (2c2f4 <nrfx_usbd_ep_disable+0x50>)
   2c2de:	4b06      	ldreq	r3, [pc, #24]	; (2c2f8 <nrfx_usbd_ep_disable+0x54>)
   2c2e0:	5c1a      	ldrb	r2, [r3, r0]
   2c2e2:	2301      	movs	r3, #1
   2c2e4:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   2c2e6:	4a02      	ldr	r2, [pc, #8]	; (2c2f0 <nrfx_usbd_ep_disable+0x4c>)
   2c2e8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   2c2ec:	bd10      	pop	{r4, pc}
   2c2ee:	bf00      	nop
   2c2f0:	40027000 	.word	0x40027000
   2c2f4:	0002fb7f 	.word	0x0002fb7f
   2c2f8:	0002fb76 	.word	0x0002fb76

0002c2fc <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2c2fc:	f010 0f80 	tst.w	r0, #128	; 0x80
{
   2c300:	b570      	push	{r4, r5, r6, lr}
   2c302:	4924      	ldr	r1, [pc, #144]	; (2c394 <nrfx_usbd_ep_enable+0x98>)
   2c304:	4604      	mov	r4, r0
   2c306:	f000 030f 	and.w	r3, r0, #15
   2c30a:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2c30e:	d012      	beq.n	2c336 <nrfx_usbd_ep_enable+0x3a>
   2c310:	4a21      	ldr	r2, [pc, #132]	; (2c398 <nrfx_usbd_ep_enable+0x9c>)
   2c312:	5cd2      	ldrb	r2, [r2, r3]
   2c314:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   2c318:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   2c31c:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   2c320:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   2c322:	07d0      	lsls	r0, r2, #31
   2c324:	d406      	bmi.n	2c334 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
   2c326:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   2c32a:	fa05 f303 	lsl.w	r3, r5, r3
   2c32e:	4313      	orrs	r3, r2
   2c330:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
   2c334:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2c336:	4a19      	ldr	r2, [pc, #100]	; (2c39c <nrfx_usbd_ep_enable+0xa0>)
   2c338:	5cd2      	ldrb	r2, [r2, r3]
   2c33a:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   2c33e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   2c342:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
   2c346:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   2c348:	07d2      	lsls	r2, r2, #31
   2c34a:	d4f3      	bmi.n	2c334 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
   2c34c:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
   2c350:	fa05 f203 	lsl.w	r2, r5, r3
   2c354:	4332      	orrs	r2, r6
   2c356:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   2c35a:	2b00      	cmp	r3, #0
   2c35c:	d0ea      	beq.n	2c334 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
   2c35e:	0703      	lsls	r3, r0, #28
   2c360:	d4e8      	bmi.n	2c334 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
   2c362:	f04f 0320 	mov.w	r3, #32
   2c366:	f3ef 8611 	mrs	r6, BASEPRI
   2c36a:	f383 8812 	msr	BASEPRI_MAX, r3
   2c36e:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   2c372:	f7ff fe29 	bl	2bfc8 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2c376:	4620      	mov	r0, r4
   2c378:	f002 fc18 	bl	2ebac <ep2bit>
   2c37c:	4a08      	ldr	r2, [pc, #32]	; (2c3a0 <nrfx_usbd_ep_enable+0xa4>)
   2c37e:	6813      	ldr	r3, [r2, #0]
   2c380:	fa05 f000 	lsl.w	r0, r5, r0
   2c384:	ea23 0300 	bic.w	r3, r3, r0
   2c388:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   2c38a:	f386 8811 	msr	BASEPRI, r6
   2c38e:	f3bf 8f6f 	isb	sy
}
   2c392:	e7cf      	b.n	2c334 <nrfx_usbd_ep_enable+0x38>
   2c394:	40027000 	.word	0x40027000
   2c398:	0002fb7f 	.word	0x0002fb7f
   2c39c:	0002fb76 	.word	0x0002fb76
   2c3a0:	20001420 	.word	0x20001420

0002c3a4 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   2c3a4:	0603      	lsls	r3, r0, #24
{
   2c3a6:	b510      	push	{r4, lr}
   2c3a8:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   2c3aa:	d405      	bmi.n	2c3b8 <nrfx_usbd_ep_stall_clear+0x14>
   2c3ac:	f7ff fd7a 	bl	2bea4 <nrfx_usbd_ep_stall_check>
   2c3b0:	b110      	cbz	r0, 2c3b8 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   2c3b2:	4620      	mov	r0, r4
   2c3b4:	f7ff fe08 	bl	2bfc8 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   2c3b8:	4b01      	ldr	r3, [pc, #4]	; (2c3c0 <nrfx_usbd_ep_stall_clear+0x1c>)
   2c3ba:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   2c3be:	bd10      	pop	{r4, pc}
   2c3c0:	40027000 	.word	0x40027000

0002c3c4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2c3c4:	4b10      	ldr	r3, [pc, #64]	; (2c408 <z_sys_init_run_level+0x44>)
{
   2c3c6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2c3c8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2c3cc:	3001      	adds	r0, #1
   2c3ce:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2c3d2:	42a6      	cmp	r6, r4
   2c3d4:	d800      	bhi.n	2c3d8 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   2c3d6:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
   2c3d8:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   2c3dc:	b195      	cbz	r5, 2c404 <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
   2c3de:	b153      	cbz	r3, 2c3f6 <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
   2c3e0:	4628      	mov	r0, r5
   2c3e2:	4798      	blx	r3
				if (rc != 0) {
   2c3e4:	b138      	cbz	r0, 2c3f6 <z_sys_init_run_level+0x32>
					if (rc < 0) {
   2c3e6:	2800      	cmp	r0, #0
   2c3e8:	bfb8      	it	lt
   2c3ea:	4240      	neglt	r0, r0
					dev->state->init_res = rc;
   2c3ec:	68eb      	ldr	r3, [r5, #12]
					if (rc > UINT8_MAX) {
   2c3ee:	28ff      	cmp	r0, #255	; 0xff
   2c3f0:	bfa8      	it	ge
   2c3f2:	20ff      	movge	r0, #255	; 0xff
					dev->state->init_res = rc;
   2c3f4:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2c3f6:	68ea      	ldr	r2, [r5, #12]
   2c3f8:	7853      	ldrb	r3, [r2, #1]
   2c3fa:	f043 0301 	orr.w	r3, r3, #1
   2c3fe:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2c400:	3408      	adds	r4, #8
   2c402:	e7e6      	b.n	2c3d2 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   2c404:	4798      	blx	r3
   2c406:	e7fb      	b.n	2c400 <z_sys_init_run_level+0x3c>
   2c408:	0002f910 	.word	0x0002f910

0002c40c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   2c40c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   2c40e:	4b0a      	ldr	r3, [pc, #40]	; (2c438 <bg_thread_main+0x2c>)
   2c410:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2c412:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   2c414:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2c416:	f7ff ffd5 	bl	2c3c4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2c41a:	f001 f9f9 	bl	2d810 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   2c41e:	2004      	movs	r0, #4
   2c420:	f7ff ffd0 	bl	2c3c4 <z_sys_init_run_level>

	z_init_static_threads();
   2c424:	f000 f966 	bl	2c6f4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   2c428:	f7fa f80a 	bl	26440 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2c42c:	4a03      	ldr	r2, [pc, #12]	; (2c43c <bg_thread_main+0x30>)
   2c42e:	7b13      	ldrb	r3, [r2, #12]
   2c430:	f023 0301 	bic.w	r3, r3, #1
   2c434:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2c436:	bd08      	pop	{r3, pc}
   2c438:	200014a7 	.word	0x200014a7
   2c43c:	20000580 	.word	0x20000580

0002c440 <z_bss_zero>:
{
   2c440:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2c442:	4803      	ldr	r0, [pc, #12]	; (2c450 <z_bss_zero+0x10>)
   2c444:	4a03      	ldr	r2, [pc, #12]	; (2c454 <z_bss_zero+0x14>)
   2c446:	2100      	movs	r1, #0
   2c448:	1a12      	subs	r2, r2, r0
   2c44a:	f002 fc4d 	bl	2ece8 <z_early_memset>
}
   2c44e:	bd08      	pop	{r3, pc}
   2c450:	200003a0 	.word	0x200003a0
   2c454:	200014ac 	.word	0x200014ac

0002c458 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   2c458:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   2c45a:	2300      	movs	r3, #0
{
   2c45c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   2c45e:	2201      	movs	r2, #1
   2c460:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   2c464:	4e17      	ldr	r6, [pc, #92]	; (2c4c4 <z_init_cpu+0x6c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2c466:	4d18      	ldr	r5, [pc, #96]	; (2c4c8 <z_init_cpu+0x70>)
	z_setup_new_thread(thread, stack,
   2c468:	9301      	str	r3, [sp, #4]
   2c46a:	220f      	movs	r2, #15
   2c46c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2c470:	4916      	ldr	r1, [pc, #88]	; (2c4cc <z_init_cpu+0x74>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2c472:	2314      	movs	r3, #20
   2c474:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   2c478:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
   2c47c:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
   2c480:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   2c482:	4b13      	ldr	r3, [pc, #76]	; (2c4d0 <z_init_cpu+0x78>)
   2c484:	9500      	str	r5, [sp, #0]
   2c486:	fb02 1100 	mla	r1, r2, r0, r1
   2c48a:	4630      	mov	r0, r6
   2c48c:	f000 f8d6 	bl	2c63c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2c490:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   2c492:	742c      	strb	r4, [r5, #16]
   2c494:	f023 0304 	bic.w	r3, r3, #4
   2c498:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2c49a:	4b0e      	ldr	r3, [pc, #56]	; (2c4d4 <z_init_cpu+0x7c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   2c49c:	60ee      	str	r6, [r5, #12]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2c49e:	3401      	adds	r4, #1
   2c4a0:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].irq_stack =
   2c4a4:	606b      	str	r3, [r5, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2c4a6:	4b0c      	ldr	r3, [pc, #48]	; (2c4d8 <z_init_cpu+0x80>)
   2c4a8:	f3bf 8f5b 	dmb	ish
   2c4ac:	e853 1f00 	ldrex	r1, [r3]
   2c4b0:	3101      	adds	r1, #1
   2c4b2:	e843 1200 	strex	r2, r1, [r3]
   2c4b6:	2a00      	cmp	r2, #0
   2c4b8:	d1f8      	bne.n	2c4ac <z_init_cpu+0x54>
   2c4ba:	f3bf 8f5b 	dmb	ish
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
   2c4be:	b006      	add	sp, #24
   2c4c0:	bd70      	pop	{r4, r5, r6, pc}
   2c4c2:	bf00      	nop
   2c4c4:	20000500 	.word	0x20000500
   2c4c8:	20001430 	.word	0x20001430
   2c4cc:	200024b0 	.word	0x200024b0
   2c4d0:	0002c7ad 	.word	0x0002c7ad
   2c4d4:	20001cb0 	.word	0x20001cb0
   2c4d8:	2000142c 	.word	0x2000142c

0002c4dc <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   2c4dc:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2c4de:	2000      	movs	r0, #0
{
   2c4e0:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2c4e2:	f7ff ff6f 	bl	2c3c4 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2c4e6:	4b2e      	ldr	r3, [pc, #184]	; (2c5a0 <z_cstart+0xc4>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2c4e8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   2c4ec:	4d2d      	ldr	r5, [pc, #180]	; (2c5a4 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   2c4ee:	4e2e      	ldr	r6, [pc, #184]	; (2c5a8 <z_cstart+0xcc>)
   2c4f0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2c4f2:	4f2e      	ldr	r7, [pc, #184]	; (2c5ac <z_cstart+0xd0>)
   2c4f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2c4f8:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c4fa:	2400      	movs	r4, #0
   2c4fc:	23e0      	movs	r3, #224	; 0xe0
   2c4fe:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2c502:	77ec      	strb	r4, [r5, #31]
   2c504:	762c      	strb	r4, [r5, #24]
   2c506:	766c      	strb	r4, [r5, #25]
   2c508:	76ac      	strb	r4, [r5, #26]
   2c50a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2c50e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2c510:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2c514:	626b      	str	r3, [r5, #36]	; 0x24
   2c516:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2c51a:	f7fc fa0b 	bl	28934 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2c51e:	f7fb ffa7 	bl	28470 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2c522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c526:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2c528:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   2c52a:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2c52c:	f7fc fabe 	bl	28aac <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2c530:	f7fc fa4c 	bl	289cc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2c534:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   2c538:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   2c53a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   2c53e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
   2c542:	f001 f947 	bl	2d7d4 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   2c546:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2c548:	f002 fb9b 	bl	2ec82 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   2c54c:	2001      	movs	r0, #1
   2c54e:	f7ff ff39 	bl	2c3c4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2c552:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   2c554:	4d16      	ldr	r5, [pc, #88]	; (2c5b0 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2c556:	f7ff ff35 	bl	2c3c4 <z_sys_init_run_level>
	z_sched_init();
   2c55a:	f000 fe09 	bl	2d170 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2c55e:	4b15      	ldr	r3, [pc, #84]	; (2c5b4 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   2c560:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2c562:	9305      	str	r3, [sp, #20]
   2c564:	2301      	movs	r3, #1
   2c566:	4914      	ldr	r1, [pc, #80]	; (2c5b8 <z_cstart+0xdc>)
   2c568:	9400      	str	r4, [sp, #0]
   2c56a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2c56e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2c572:	463b      	mov	r3, r7
   2c574:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2c578:	4628      	mov	r0, r5
   2c57a:	f000 f85f 	bl	2c63c <z_setup_new_thread>
   2c57e:	7b6a      	ldrb	r2, [r5, #13]
   2c580:	4606      	mov	r6, r0
   2c582:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   2c586:	4628      	mov	r0, r5
   2c588:	736a      	strb	r2, [r5, #13]
   2c58a:	f002 fd3b 	bl	2f004 <z_ready_thread>
	z_init_cpu(0);
   2c58e:	4620      	mov	r0, r4
   2c590:	f7ff ff62 	bl	2c458 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2c594:	463a      	mov	r2, r7
   2c596:	4631      	mov	r1, r6
   2c598:	4628      	mov	r0, r5
   2c59a:	f7fc f863 	bl	28664 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2c59e:	bf00      	nop
   2c5a0:	200024b0 	.word	0x200024b0
   2c5a4:	e000ed00 	.word	0xe000ed00
   2c5a8:	20001430 	.word	0x20001430
   2c5ac:	0002c40d 	.word	0x0002c40d
   2c5b0:	20000580 	.word	0x20000580
   2c5b4:	0002fb92 	.word	0x0002fb92
   2c5b8:	200025f0 	.word	0x200025f0

0002c5bc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   2c5bc:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2c5be:	4c06      	ldr	r4, [pc, #24]	; (2c5d8 <init_mem_slab_module+0x1c>)
   2c5c0:	4d06      	ldr	r5, [pc, #24]	; (2c5dc <init_mem_slab_module+0x20>)
	int rc = 0;
   2c5c2:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2c5c4:	42ac      	cmp	r4, r5
   2c5c6:	d300      	bcc.n	2c5ca <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   2c5c8:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   2c5ca:	4620      	mov	r0, r4
   2c5cc:	f002 fb90 	bl	2ecf0 <create_free_list>
		if (rc < 0) {
   2c5d0:	2800      	cmp	r0, #0
   2c5d2:	dbf9      	blt.n	2c5c8 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2c5d4:	341c      	adds	r4, #28
   2c5d6:	e7f5      	b.n	2c5c4 <init_mem_slab_module+0x8>
   2c5d8:	20000284 	.word	0x20000284
   2c5dc:	200002a0 	.word	0x200002a0

0002c5e0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2c5e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c5e2:	460c      	mov	r4, r1
	__asm__ volatile(
   2c5e4:	f04f 0520 	mov.w	r5, #32
   2c5e8:	f3ef 8111 	mrs	r1, BASEPRI
   2c5ec:	f385 8812 	msr	BASEPRI_MAX, r5
   2c5f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2c5f4:	6945      	ldr	r5, [r0, #20]
   2c5f6:	b15d      	cbz	r5, 2c610 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   2c5f8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2c5fa:	682b      	ldr	r3, [r5, #0]
   2c5fc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2c5fe:	6983      	ldr	r3, [r0, #24]
   2c600:	3301      	adds	r3, #1
   2c602:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2c604:	2000      	movs	r0, #0
	__asm__ volatile(
   2c606:	f381 8811 	msr	BASEPRI, r1
   2c60a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   2c60e:	e011      	b.n	2c634 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   2c610:	ea52 0603 	orrs.w	r6, r2, r3
   2c614:	d103      	bne.n	2c61e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   2c616:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   2c618:	f06f 000b 	mvn.w	r0, #11
   2c61c:	e7f3      	b.n	2c606 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2c61e:	e9cd 2300 	strd	r2, r3, [sp]
   2c622:	4602      	mov	r2, r0
   2c624:	3008      	adds	r0, #8
   2c626:	f000 fcad 	bl	2cf84 <z_pend_curr>
		if (result == 0) {
   2c62a:	b918      	cbnz	r0, 2c634 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   2c62c:	4b02      	ldr	r3, [pc, #8]	; (2c638 <k_mem_slab_alloc+0x58>)
   2c62e:	689b      	ldr	r3, [r3, #8]
   2c630:	695b      	ldr	r3, [r3, #20]
   2c632:	6023      	str	r3, [r4, #0]
}
   2c634:	b002      	add	sp, #8
   2c636:	bd70      	pop	{r4, r5, r6, pc}
   2c638:	20001430 	.word	0x20001430

0002c63c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2c63c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2c640:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2c642:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2c644:	2604      	movs	r6, #4
   2c646:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   2c648:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2c64a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2c64c:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2c650:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   2c652:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2c656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   2c658:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2c65a:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2c65e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   2c662:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
   2c666:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   2c668:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   2c66a:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2c66c:	9202      	str	r2, [sp, #8]
   2c66e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c670:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   2c672:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2c676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c678:	9200      	str	r2, [sp, #0]
   2c67a:	4642      	mov	r2, r8
{
   2c67c:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2c67e:	f7fb ffd5 	bl	2862c <arch_new_thread>
	if (!_current) {
   2c682:	4b05      	ldr	r3, [pc, #20]	; (2c698 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   2c684:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   2c686:	689b      	ldr	r3, [r3, #8]
   2c688:	b103      	cbz	r3, 2c68c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   2c68a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
   2c68c:	6723      	str	r3, [r4, #112]	; 0x70
}
   2c68e:	4640      	mov	r0, r8
   2c690:	b004      	add	sp, #16
   2c692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c696:	bf00      	nop
   2c698:	20001430 	.word	0x20001430

0002c69c <z_impl_k_thread_create>:
{
   2c69c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c69e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c6a0:	2500      	movs	r5, #0
   2c6a2:	9505      	str	r5, [sp, #20]
   2c6a4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   2c6a6:	9504      	str	r5, [sp, #16]
   2c6a8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2c6aa:	9503      	str	r5, [sp, #12]
   2c6ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2c6ae:	9502      	str	r5, [sp, #8]
{
   2c6b0:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c6b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2c6b6:	9501      	str	r5, [sp, #4]
   2c6b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2c6ba:	9500      	str	r5, [sp, #0]
{
   2c6bc:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c6be:	f7ff ffbd 	bl	2c63c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2c6c2:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   2c6c6:	bf08      	it	eq
   2c6c8:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   2c6cc:	d005      	beq.n	2c6da <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2c6ce:	ea56 0307 	orrs.w	r3, r6, r7
   2c6d2:	d105      	bne.n	2c6e0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   2c6d4:	4620      	mov	r0, r4
   2c6d6:	f000 fccb 	bl	2d070 <z_sched_start>
}
   2c6da:	4620      	mov	r0, r4
   2c6dc:	b007      	add	sp, #28
   2c6de:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2c6e0:	4903      	ldr	r1, [pc, #12]	; (2c6f0 <z_impl_k_thread_create+0x54>)
   2c6e2:	463a      	mov	r2, r7
   2c6e4:	4633      	mov	r3, r6
   2c6e6:	f104 0018 	add.w	r0, r4, #24
   2c6ea:	f000 fed7 	bl	2d49c <z_add_timeout>
   2c6ee:	e7f4      	b.n	2c6da <z_impl_k_thread_create+0x3e>
   2c6f0:	0002f08d 	.word	0x0002f08d

0002c6f4 <z_init_static_threads>:
{
   2c6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c6f8:	4c29      	ldr	r4, [pc, #164]	; (2c7a0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2c6fa:	4d2a      	ldr	r5, [pc, #168]	; (2c7a4 <z_init_static_threads+0xb0>)
{
   2c6fc:	b087      	sub	sp, #28
   2c6fe:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   2c700:	42ae      	cmp	r6, r5
   2c702:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   2c706:	d30f      	bcc.n	2c728 <z_init_static_threads+0x34>
	k_sched_lock();
   2c708:	f000 fd02 	bl	2d110 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2c70c:	4c24      	ldr	r4, [pc, #144]	; (2c7a0 <z_init_static_threads+0xac>)
   2c70e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2c7a8 <z_init_static_threads+0xb4>
   2c712:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2c716:	f240 37e7 	movw	r7, #999	; 0x3e7
   2c71a:	42ac      	cmp	r4, r5
   2c71c:	d320      	bcc.n	2c760 <z_init_static_threads+0x6c>
}
   2c71e:	b007      	add	sp, #28
   2c720:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2c724:	f000 bd08 	b.w	2d138 <k_sched_unlock>
		z_setup_new_thread(
   2c728:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2c72c:	9305      	str	r3, [sp, #20]
   2c72e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   2c732:	9304      	str	r3, [sp, #16]
   2c734:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2c738:	9303      	str	r3, [sp, #12]
   2c73a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2c73e:	9302      	str	r3, [sp, #8]
   2c740:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2c744:	9301      	str	r3, [sp, #4]
   2c746:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2c74a:	9300      	str	r3, [sp, #0]
   2c74c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   2c750:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   2c754:	f7ff ff72 	bl	2c63c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2c758:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2c75c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2c75e:	e7ce      	b.n	2c6fe <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2c760:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c762:	1c5a      	adds	r2, r3, #1
   2c764:	d00d      	beq.n	2c782 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   2c766:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c76a:	2100      	movs	r1, #0
   2c76c:	4638      	mov	r0, r7
   2c76e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2c772:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2c776:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2c77a:	d104      	bne.n	2c786 <z_init_static_threads+0x92>
	z_sched_start(thread);
   2c77c:	4640      	mov	r0, r8
   2c77e:	f000 fc77 	bl	2d070 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2c782:	342c      	adds	r4, #44	; 0x2c
   2c784:	e7c9      	b.n	2c71a <z_init_static_threads+0x26>
   2c786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c78a:	2300      	movs	r3, #0
   2c78c:	f7f9 fcb8 	bl	26100 <__aeabi_uldivmod>
   2c790:	4602      	mov	r2, r0
   2c792:	460b      	mov	r3, r1
   2c794:	f108 0018 	add.w	r0, r8, #24
   2c798:	4649      	mov	r1, r9
   2c79a:	f000 fe7f 	bl	2d49c <z_add_timeout>
   2c79e:	e7f0      	b.n	2c782 <z_init_static_threads+0x8e>
   2c7a0:	0002f62c 	.word	0x0002f62c
   2c7a4:	0002f62c 	.word	0x0002f62c
   2c7a8:	0002f08d 	.word	0x0002f08d

0002c7ac <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
   2c7ac:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2c7ae:	4c0b      	ldr	r4, [pc, #44]	; (2c7dc <idle+0x30>)
	return !z_sys_post_kernel;
   2c7b0:	4d0b      	ldr	r5, [pc, #44]	; (2c7e0 <idle+0x34>)
	__asm__ volatile(
   2c7b2:	f04f 0220 	mov.w	r2, #32
   2c7b6:	f3ef 8311 	mrs	r3, BASEPRI
   2c7ba:	f382 8812 	msr	BASEPRI_MAX, r2
   2c7be:	f3bf 8f6f 	isb	sy
   2c7c2:	f002 fd11 	bl	2f1e8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2c7c6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   2c7c8:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2c7ca:	b913      	cbnz	r3, 2c7d2 <idle+0x26>
	arch_cpu_idle();
   2c7cc:	f7fb fe56 	bl	2847c <arch_cpu_idle>
}
   2c7d0:	e7ef      	b.n	2c7b2 <idle+0x6>
   2c7d2:	f7fa fc67 	bl	270a4 <pm_system_suspend>
   2c7d6:	2800      	cmp	r0, #0
   2c7d8:	d1eb      	bne.n	2c7b2 <idle+0x6>
   2c7da:	e7f7      	b.n	2c7cc <idle+0x20>
   2c7dc:	20001430 	.word	0x20001430
   2c7e0:	200014a7 	.word	0x200014a7

0002c7e4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2c7e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2c7e8:	4604      	mov	r4, r0
   2c7ea:	4617      	mov	r7, r2
   2c7ec:	461e      	mov	r6, r3
   2c7ee:	f04f 0320 	mov.w	r3, #32
   2c7f2:	f3ef 8811 	mrs	r8, BASEPRI
   2c7f6:	f383 8812 	msr	BASEPRI_MAX, r3
   2c7fa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2c7fe:	68c3      	ldr	r3, [r0, #12]
   2c800:	4a33      	ldr	r2, [pc, #204]	; (2c8d0 <z_impl_k_mutex_lock+0xec>)
   2c802:	b17b      	cbz	r3, 2c824 <z_impl_k_mutex_lock+0x40>
   2c804:	6880      	ldr	r0, [r0, #8]
   2c806:	6891      	ldr	r1, [r2, #8]
   2c808:	4288      	cmp	r0, r1
   2c80a:	d019      	beq.n	2c840 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2c80c:	ea57 0306 	orrs.w	r3, r7, r6
   2c810:	d118      	bne.n	2c844 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2c812:	f388 8811 	msr	BASEPRI, r8
   2c816:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2c81a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2c81e:	b002      	add	sp, #8
   2c820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2c824:	6891      	ldr	r1, [r2, #8]
   2c826:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2c82a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   2c82c:	3301      	adds	r3, #1
   2c82e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2c830:	6893      	ldr	r3, [r2, #8]
   2c832:	60a3      	str	r3, [r4, #8]
   2c834:	f388 8811 	msr	BASEPRI, r8
   2c838:	f3bf 8f6f 	isb	sy
		return 0;
   2c83c:	2000      	movs	r0, #0
   2c83e:	e7ee      	b.n	2c81e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   2c840:	6921      	ldr	r1, [r4, #16]
   2c842:	e7f2      	b.n	2c82a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2c844:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2c848:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2c84c:	4299      	cmp	r1, r3
   2c84e:	bfa8      	it	ge
   2c850:	4619      	movge	r1, r3
   2c852:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2c856:	4291      	cmp	r1, r2
   2c858:	bfb8      	it	lt
   2c85a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2c85c:	428b      	cmp	r3, r1
   2c85e:	dd2e      	ble.n	2c8be <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   2c860:	f002 fa97 	bl	2ed92 <adjust_owner_prio.isra.0>
   2c864:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2c866:	e9cd 7600 	strd	r7, r6, [sp]
   2c86a:	481a      	ldr	r0, [pc, #104]	; (2c8d4 <z_impl_k_mutex_lock+0xf0>)
   2c86c:	4622      	mov	r2, r4
   2c86e:	4641      	mov	r1, r8
   2c870:	f000 fb88 	bl	2cf84 <z_pend_curr>
	if (got_mutex == 0) {
   2c874:	2800      	cmp	r0, #0
   2c876:	d0e1      	beq.n	2c83c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   2c878:	f04f 0320 	mov.w	r3, #32
   2c87c:	f3ef 8611 	mrs	r6, BASEPRI
   2c880:	f383 8812 	msr	BASEPRI_MAX, r3
   2c884:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   2c888:	68a0      	ldr	r0, [r4, #8]
   2c88a:	b1d0      	cbz	r0, 2c8c2 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2c88c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2c88e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c890:	429c      	cmp	r4, r3
   2c892:	d00a      	beq.n	2c8aa <z_impl_k_mutex_lock+0xc6>
   2c894:	b14b      	cbz	r3, 2c8aa <z_impl_k_mutex_lock+0xc6>
   2c896:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2c89a:	4299      	cmp	r1, r3
   2c89c:	bfa8      	it	ge
   2c89e:	4619      	movge	r1, r3
   2c8a0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   2c8a4:	4299      	cmp	r1, r3
   2c8a6:	bfb8      	it	lt
   2c8a8:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   2c8aa:	f002 fa72 	bl	2ed92 <adjust_owner_prio.isra.0>
   2c8ae:	b140      	cbz	r0, 2c8c2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   2c8b0:	4808      	ldr	r0, [pc, #32]	; (2c8d4 <z_impl_k_mutex_lock+0xf0>)
   2c8b2:	4631      	mov	r1, r6
   2c8b4:	f000 fbca 	bl	2d04c <z_reschedule>
	return -EAGAIN;
   2c8b8:	f06f 000a 	mvn.w	r0, #10
   2c8bc:	e7af      	b.n	2c81e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   2c8be:	2500      	movs	r5, #0
   2c8c0:	e7d1      	b.n	2c866 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   2c8c2:	2d00      	cmp	r5, #0
   2c8c4:	d1f4      	bne.n	2c8b0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   2c8c6:	f386 8811 	msr	BASEPRI, r6
   2c8ca:	f3bf 8f6f 	isb	sy
   2c8ce:	e7f3      	b.n	2c8b8 <z_impl_k_mutex_lock+0xd4>
   2c8d0:	20001430 	.word	0x20001430
   2c8d4:	200014a8 	.word	0x200014a8

0002c8d8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2c8d8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2c8da:	6883      	ldr	r3, [r0, #8]
{
   2c8dc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2c8de:	b36b      	cbz	r3, 2c93c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2c8e0:	4a19      	ldr	r2, [pc, #100]	; (2c948 <z_impl_k_mutex_unlock+0x70>)
   2c8e2:	6892      	ldr	r2, [r2, #8]
   2c8e4:	4293      	cmp	r3, r2
   2c8e6:	d12c      	bne.n	2c942 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2c8e8:	68c3      	ldr	r3, [r0, #12]
   2c8ea:	2b01      	cmp	r3, #1
   2c8ec:	d903      	bls.n	2c8f6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   2c8ee:	3b01      	subs	r3, #1
   2c8f0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2c8f2:	2000      	movs	r0, #0
}
   2c8f4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2c8f6:	f04f 0320 	mov.w	r3, #32
   2c8fa:	f3ef 8511 	mrs	r5, BASEPRI
   2c8fe:	f383 8812 	msr	BASEPRI_MAX, r3
   2c902:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2c906:	6901      	ldr	r1, [r0, #16]
   2c908:	6880      	ldr	r0, [r0, #8]
   2c90a:	f002 fa42 	bl	2ed92 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2c90e:	4620      	mov	r0, r4
   2c910:	f002 fbd7 	bl	2f0c2 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2c914:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2c916:	b158      	cbz	r0, 2c930 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   2c918:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2c91c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2c91e:	2200      	movs	r2, #0
   2c920:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   2c922:	f002 fb6f 	bl	2f004 <z_ready_thread>
		z_reschedule(&lock, key);
   2c926:	4809      	ldr	r0, [pc, #36]	; (2c94c <z_impl_k_mutex_unlock+0x74>)
   2c928:	4629      	mov	r1, r5
   2c92a:	f000 fb8f 	bl	2d04c <z_reschedule>
   2c92e:	e7e0      	b.n	2c8f2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   2c930:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2c932:	f385 8811 	msr	BASEPRI, r5
   2c936:	f3bf 8f6f 	isb	sy
   2c93a:	e7da      	b.n	2c8f2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   2c93c:	f06f 0015 	mvn.w	r0, #21
   2c940:	e7d8      	b.n	2c8f4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   2c942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c946:	e7d5      	b.n	2c8f4 <z_impl_k_mutex_unlock+0x1c>
   2c948:	20001430 	.word	0x20001430
   2c94c:	200014a8 	.word	0x200014a8

0002c950 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2c950:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c952:	4611      	mov	r1, r2
	__asm__ volatile(
   2c954:	f04f 0220 	mov.w	r2, #32
   2c958:	f3ef 8511 	mrs	r5, BASEPRI
   2c95c:	f382 8812 	msr	BASEPRI_MAX, r2
   2c960:	f3bf 8f6f 	isb	sy
   2c964:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2c966:	b19c      	cbz	r4, 2c990 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2c968:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2c96a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2c96c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2c970:	4294      	cmp	r4, r2
	list->head = node;
   2c972:	6003      	str	r3, [r0, #0]
	list->tail = node;
   2c974:	bf08      	it	eq
   2c976:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2c978:	2101      	movs	r1, #1
   2c97a:	4620      	mov	r0, r4
   2c97c:	f002 fa7a 	bl	2ee74 <z_queue_node_peek>
   2c980:	4604      	mov	r4, r0
	__asm__ volatile(
   2c982:	f385 8811 	msr	BASEPRI, r5
   2c986:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2c98a:	4620      	mov	r0, r4
   2c98c:	b003      	add	sp, #12
   2c98e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c990:	ea51 0203 	orrs.w	r2, r1, r3
   2c994:	d0f5      	beq.n	2c982 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2c996:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2c99a:	e9cd 1300 	strd	r1, r3, [sp]
   2c99e:	4610      	mov	r0, r2
   2c9a0:	4629      	mov	r1, r5
   2c9a2:	f000 faef 	bl	2cf84 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2c9a6:	2800      	cmp	r0, #0
   2c9a8:	d1ef      	bne.n	2c98a <z_impl_k_queue_get+0x3a>
   2c9aa:	4b02      	ldr	r3, [pc, #8]	; (2c9b4 <z_impl_k_queue_get+0x64>)
   2c9ac:	689b      	ldr	r3, [r3, #8]
   2c9ae:	695c      	ldr	r4, [r3, #20]
   2c9b0:	e7eb      	b.n	2c98a <z_impl_k_queue_get+0x3a>
   2c9b2:	bf00      	nop
   2c9b4:	20001430 	.word	0x20001430

0002c9b8 <z_impl_k_sem_give>:
	return false;
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2c9b8:	b538      	push	{r3, r4, r5, lr}
   2c9ba:	4604      	mov	r4, r0
	__asm__ volatile(
   2c9bc:	f04f 0320 	mov.w	r3, #32
   2c9c0:	f3ef 8511 	mrs	r5, BASEPRI
   2c9c4:	f383 8812 	msr	BASEPRI_MAX, r3
   2c9c8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	bool resched = true;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2c9cc:	f002 fb79 	bl	2f0c2 <z_unpend_first_thread>

	if (thread != NULL) {
   2c9d0:	b148      	cbz	r0, 2c9e6 <z_impl_k_sem_give+0x2e>
   2c9d2:	2200      	movs	r2, #0
   2c9d4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2c9d6:	f002 fb15 	bl	2f004 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		resched = handle_poll_events(sem);
	}

	if (resched) {
		z_reschedule(&lock, key);
   2c9da:	4629      	mov	r1, r5
   2c9dc:	4807      	ldr	r0, [pc, #28]	; (2c9fc <z_impl_k_sem_give+0x44>)
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2c9de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   2c9e2:	f000 bb33 	b.w	2d04c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2c9e6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2c9ea:	429a      	cmp	r2, r3
   2c9ec:	bf18      	it	ne
   2c9ee:	3301      	addne	r3, #1
   2c9f0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2c9f2:	f385 8811 	msr	BASEPRI, r5
   2c9f6:	f3bf 8f6f 	isb	sy
}
   2c9fa:	bd38      	pop	{r3, r4, r5, pc}
   2c9fc:	200014a8 	.word	0x200014a8

0002ca00 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2ca00:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
   2ca02:	f04f 0420 	mov.w	r4, #32
   2ca06:	f3ef 8111 	mrs	r1, BASEPRI
   2ca0a:	f384 8812 	msr	BASEPRI_MAX, r4
   2ca0e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2ca12:	6884      	ldr	r4, [r0, #8]
   2ca14:	b144      	cbz	r4, 2ca28 <z_impl_k_sem_take+0x28>
		sem->count--;
   2ca16:	3c01      	subs	r4, #1
   2ca18:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2ca1a:	f381 8811 	msr	BASEPRI, r1
   2ca1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2ca22:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2ca24:	b002      	add	sp, #8
   2ca26:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2ca28:	ea52 0403 	orrs.w	r4, r2, r3
   2ca2c:	d106      	bne.n	2ca3c <z_impl_k_sem_take+0x3c>
   2ca2e:	f381 8811 	msr	BASEPRI, r1
   2ca32:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2ca36:	f06f 000f 	mvn.w	r0, #15
   2ca3a:	e7f3      	b.n	2ca24 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2ca3c:	e9cd 2300 	strd	r2, r3, [sp]
   2ca40:	4602      	mov	r2, r0
   2ca42:	4802      	ldr	r0, [pc, #8]	; (2ca4c <z_impl_k_sem_take+0x4c>)
   2ca44:	f000 fa9e 	bl	2cf84 <z_pend_curr>
	return ret;
   2ca48:	e7ec      	b.n	2ca24 <z_impl_k_sem_take+0x24>
   2ca4a:	bf00      	nop
   2ca4c:	200014a8 	.word	0x200014a8

0002ca50 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   2ca50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   2ca54:	4e4a      	ldr	r6, [pc, #296]	; (2cb80 <work_queue_main+0x130>)
   2ca56:	b085      	sub	sp, #20
   2ca58:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   2ca5a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2ca5e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   2ca62:	f04f 0320 	mov.w	r3, #32
   2ca66:	f3ef 8711 	mrs	r7, BASEPRI
   2ca6a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ca6e:	f3bf 8f6f 	isb	sy
   2ca72:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   2ca76:	b98d      	cbnz	r5, 2ca9c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   2ca78:	2102      	movs	r1, #2
   2ca7a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2ca7e:	f002 fa1c 	bl	2eeba <flag_test_and_clear>
   2ca82:	2800      	cmp	r0, #0
   2ca84:	d143      	bne.n	2cb0e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2ca86:	2300      	movs	r3, #0
   2ca88:	e9cd 8900 	strd	r8, r9, [sp]
   2ca8c:	9302      	str	r3, [sp, #8]
   2ca8e:	f104 0288 	add.w	r2, r4, #136	; 0x88
   2ca92:	4639      	mov	r1, r7
   2ca94:	483b      	ldr	r0, [pc, #236]	; (2cb84 <work_queue_main+0x134>)
   2ca96:	f000 fc8f 	bl	2d3b8 <z_sched_wait>
			continue;
   2ca9a:	e7e2      	b.n	2ca62 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ca9c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   2caa0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2caa2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2caa6:	4295      	cmp	r5, r2
	list->tail = node;
   2caa8:	bf08      	it	eq
   2caaa:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   2caae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2cab2:	f043 0302 	orr.w	r3, r3, #2
   2cab6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   2caba:	68eb      	ldr	r3, [r5, #12]
   2cabc:	f023 0304 	bic.w	r3, r3, #4
   2cac0:	f043 0301 	orr.w	r3, r3, #1
   2cac4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2cac6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   2cac8:	f387 8811 	msr	BASEPRI, r7
   2cacc:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   2cad0:	4628      	mov	r0, r5
   2cad2:	4798      	blx	r3
	__asm__ volatile(
   2cad4:	f04f 0320 	mov.w	r3, #32
   2cad8:	f3ef 8b11 	mrs	fp, BASEPRI
   2cadc:	f383 8812 	msr	BASEPRI_MAX, r3
   2cae0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   2cae4:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2cae6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2cae8:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2caec:	d419      	bmi.n	2cb22 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   2caee:	60ea      	str	r2, [r5, #12]
   2caf0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2caf4:	f023 0302 	bic.w	r3, r3, #2
   2caf8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   2cafc:	f38b 8811 	msr	BASEPRI, fp
   2cb00:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   2cb04:	05db      	lsls	r3, r3, #23
   2cb06:	d4ac      	bmi.n	2ca62 <work_queue_main+0x12>
	z_impl_k_yield();
   2cb08:	f000 fb3a 	bl	2d180 <z_impl_k_yield>
}
   2cb0c:	e7a9      	b.n	2ca62 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2cb0e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2cb12:	2200      	movs	r2, #0
   2cb14:	2101      	movs	r1, #1
   2cb16:	4628      	mov	r0, r5
   2cb18:	f002 fb2d 	bl	2f176 <z_sched_wake>
   2cb1c:	2800      	cmp	r0, #0
   2cb1e:	d1f8      	bne.n	2cb12 <work_queue_main+0xc2>
   2cb20:	e7b1      	b.n	2ca86 <work_queue_main+0x36>
	return list->head;
   2cb22:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   2cb24:	f023 0303 	bic.w	r3, r3, #3
   2cb28:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2cb2a:	2800      	cmp	r0, #0
   2cb2c:	d0e0      	beq.n	2caf0 <work_queue_main+0xa0>
	return node->next;
   2cb2e:	2700      	movs	r7, #0
   2cb30:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   2cb34:	463b      	mov	r3, r7
   2cb36:	2800      	cmp	r0, #0
   2cb38:	d0da      	beq.n	2caf0 <work_queue_main+0xa0>
		if (wc->work == work) {
   2cb3a:	6842      	ldr	r2, [r0, #4]
   2cb3c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   2cb3e:	4601      	mov	r1, r0
		if (wc->work == work) {
   2cb40:	d10c      	bne.n	2cb5c <work_queue_main+0x10c>
	return node->next;
   2cb42:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   2cb44:	b99f      	cbnz	r7, 2cb6e <work_queue_main+0x11e>
   2cb46:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   2cb48:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cb4a:	4282      	cmp	r2, r0
   2cb4c:	d100      	bne.n	2cb50 <work_queue_main+0x100>
	list->tail = node;
   2cb4e:	6071      	str	r1, [r6, #4]
	parent->next = child;
   2cb50:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   2cb54:	f7ff ff30 	bl	2c9b8 <z_impl_k_sem_give>
}
   2cb58:	4639      	mov	r1, r7
   2cb5a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2cb5c:	f1ba 0f00 	cmp.w	sl, #0
   2cb60:	d00b      	beq.n	2cb7a <work_queue_main+0x12a>
	return node->next;
   2cb62:	f8da 2000 	ldr.w	r2, [sl]
   2cb66:	4650      	mov	r0, sl
   2cb68:	460f      	mov	r7, r1
   2cb6a:	4692      	mov	sl, r2
   2cb6c:	e7e3      	b.n	2cb36 <work_queue_main+0xe6>
	parent->next = child;
   2cb6e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cb70:	6872      	ldr	r2, [r6, #4]
   2cb72:	4282      	cmp	r2, r0
	list->tail = node;
   2cb74:	bf08      	it	eq
   2cb76:	6077      	streq	r7, [r6, #4]
}
   2cb78:	e7ea      	b.n	2cb50 <work_queue_main+0x100>
   2cb7a:	4652      	mov	r2, sl
   2cb7c:	e7f3      	b.n	2cb66 <work_queue_main+0x116>
   2cb7e:	bf00      	nop
   2cb80:	20001454 	.word	0x20001454
   2cb84:	200014a8 	.word	0x200014a8

0002cb88 <submit_to_queue_locked>:
{
   2cb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2cb8a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2cb8c:	079a      	lsls	r2, r3, #30
{
   2cb8e:	4604      	mov	r4, r0
   2cb90:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2cb92:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2cb96:	d42c      	bmi.n	2cbf2 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2cb98:	075b      	lsls	r3, r3, #29
   2cb9a:	d41a      	bmi.n	2cbd2 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   2cb9c:	680b      	ldr	r3, [r1, #0]
   2cb9e:	b90b      	cbnz	r3, 2cba4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   2cba0:	6883      	ldr	r3, [r0, #8]
   2cba2:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   2cba4:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2cba6:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   2cba8:	bf44      	itt	mi
   2cbaa:	68a3      	ldrmi	r3, [r4, #8]
   2cbac:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   2cbae:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   2cbb0:	bf4c      	ite	mi
   2cbb2:	2602      	movmi	r6, #2
		ret = 1;
   2cbb4:	2601      	movpl	r6, #1
	if (queue == NULL) {
   2cbb6:	2d00      	cmp	r5, #0
   2cbb8:	d03a      	beq.n	2cc30 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2cbba:	4b1f      	ldr	r3, [pc, #124]	; (2cc38 <submit_to_queue_locked+0xb0>)
   2cbbc:	689b      	ldr	r3, [r3, #8]
   2cbbe:	42ab      	cmp	r3, r5
   2cbc0:	d00a      	beq.n	2cbd8 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   2cbc2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2cbc6:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2cbc8:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2cbcc:	d414      	bmi.n	2cbf8 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   2cbce:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   2cbd2:	2300      	movs	r3, #0
   2cbd4:	603b      	str	r3, [r7, #0]
	return ret;
   2cbd6:	e025      	b.n	2cc24 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2cbd8:	f002 f8c9 	bl	2ed6e <k_is_in_isr>
   2cbdc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2cbe0:	2800      	cmp	r0, #0
   2cbe2:	d1f0      	bne.n	2cbc6 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2cbe4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2cbe6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2cbea:	d5f0      	bpl.n	2cbce <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   2cbec:	b152      	cbz	r2, 2cc04 <submit_to_queue_locked+0x7c>
   2cbee:	075b      	lsls	r3, r3, #29
   2cbf0:	d408      	bmi.n	2cc04 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   2cbf2:	f06f 060f 	mvn.w	r6, #15
   2cbf6:	e7ec      	b.n	2cbd2 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   2cbf8:	2a00      	cmp	r2, #0
   2cbfa:	d1fa      	bne.n	2cbf2 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   2cbfc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   2cc00:	2b00      	cmp	r3, #0
   2cc02:	d1f6      	bne.n	2cbf2 <submit_to_queue_locked+0x6a>
	parent->next = child;
   2cc04:	2300      	movs	r3, #0
   2cc06:	6023      	str	r3, [r4, #0]
	return list->tail;
   2cc08:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   2cc0c:	b963      	cbnz	r3, 2cc28 <submit_to_queue_locked+0xa0>
	list->head = node;
   2cc0e:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   2cc12:	4628      	mov	r0, r5
   2cc14:	f002 f95c 	bl	2eed0 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   2cc18:	68e3      	ldr	r3, [r4, #12]
   2cc1a:	f043 0304 	orr.w	r3, r3, #4
   2cc1e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2cc20:	683b      	ldr	r3, [r7, #0]
   2cc22:	60a3      	str	r3, [r4, #8]
}
   2cc24:	4630      	mov	r0, r6
   2cc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   2cc28:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2cc2a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   2cc2e:	e7f0      	b.n	2cc12 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   2cc30:	f06f 0615 	mvn.w	r6, #21
   2cc34:	e7cd      	b.n	2cbd2 <submit_to_queue_locked+0x4a>
   2cc36:	bf00      	nop
   2cc38:	20001430 	.word	0x20001430

0002cc3c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   2cc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cc3e:	b089      	sub	sp, #36	; 0x24
   2cc40:	4604      	mov	r4, r0
	list->head = NULL;
   2cc42:	2000      	movs	r0, #0
	list->tail = NULL;
   2cc44:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   2cc48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2cc4a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2cc4e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   2cc52:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2cc56:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   2cc5a:	b31d      	cbz	r5, 2cca4 <k_work_queue_start+0x68>
   2cc5c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2cc5e:	2800      	cmp	r0, #0
   2cc60:	f240 1001 	movw	r0, #257	; 0x101
   2cc64:	bf08      	it	eq
   2cc66:	2001      	moveq	r0, #1
	*flagp = flags;
   2cc68:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2cc6c:	2000      	movs	r0, #0
   2cc6e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2cc72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2cc76:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2cc7a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2cc7e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2cc82:	4b09      	ldr	r3, [pc, #36]	; (2cca8 <k_work_queue_start+0x6c>)
   2cc84:	9400      	str	r4, [sp, #0]
   2cc86:	4620      	mov	r0, r4
   2cc88:	f7ff fd08 	bl	2c69c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   2cc8c:	b125      	cbz	r5, 2cc98 <k_work_queue_start+0x5c>
   2cc8e:	6829      	ldr	r1, [r5, #0]
   2cc90:	b111      	cbz	r1, 2cc98 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   2cc92:	4620      	mov	r0, r4
   2cc94:	f002 f871 	bl	2ed7a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2cc98:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2cc9a:	b009      	add	sp, #36	; 0x24
   2cc9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2cca0:	f002 b86e 	b.w	2ed80 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2cca4:	2001      	movs	r0, #1
   2cca6:	e7df      	b.n	2cc68 <k_work_queue_start+0x2c>
   2cca8:	0002ca51 	.word	0x0002ca51

0002ccac <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2ccac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ccae:	9001      	str	r0, [sp, #4]
   2ccb0:	4608      	mov	r0, r1
	__asm__ volatile(
   2ccb2:	f04f 0120 	mov.w	r1, #32
   2ccb6:	f3ef 8411 	mrs	r4, BASEPRI
   2ccba:	f381 8812 	msr	BASEPRI_MAX, r1
   2ccbe:	f3bf 8f6f 	isb	sy
	return *flagp;
   2ccc2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2ccc4:	f011 0f0e 	tst.w	r1, #14
   2ccc8:	d116      	bne.n	2ccf8 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2ccca:	ea53 0502 	orrs.w	r5, r3, r2
   2ccce:	d108      	bne.n	2cce2 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   2ccd0:	a901      	add	r1, sp, #4
   2ccd2:	f7ff ff59 	bl	2cb88 <submit_to_queue_locked>
	__asm__ volatile(
   2ccd6:	f384 8811 	msr	BASEPRI, r4
   2ccda:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2ccde:	b003      	add	sp, #12
   2cce0:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   2cce2:	f041 0108 	orr.w	r1, r1, #8
   2cce6:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   2cce8:	9901      	ldr	r1, [sp, #4]
   2ccea:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2ccec:	3010      	adds	r0, #16
   2ccee:	4903      	ldr	r1, [pc, #12]	; (2ccfc <k_work_schedule_for_queue+0x50>)
   2ccf0:	f000 fbd4 	bl	2d49c <z_add_timeout>
	return ret;
   2ccf4:	2001      	movs	r0, #1
   2ccf6:	e7ee      	b.n	2ccd6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   2ccf8:	2000      	movs	r0, #0
   2ccfa:	e7ec      	b.n	2ccd6 <k_work_schedule_for_queue+0x2a>
   2ccfc:	0002eedf 	.word	0x0002eedf

0002cd00 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   2cd00:	89c3      	ldrh	r3, [r0, #14]
   2cd02:	2b7f      	cmp	r3, #127	; 0x7f
   2cd04:	d812      	bhi.n	2cd2c <sliceable+0x2c>
	int ret = slice_ticks;
   2cd06:	4b0a      	ldr	r3, [pc, #40]	; (2cd30 <sliceable+0x30>)
   2cd08:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   2cd0a:	b163      	cbz	r3, 2cd26 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2cd0c:	4b09      	ldr	r3, [pc, #36]	; (2cd34 <sliceable+0x34>)
   2cd0e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2cd12:	681b      	ldr	r3, [r3, #0]
   2cd14:	429a      	cmp	r2, r3
   2cd16:	db09      	blt.n	2cd2c <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   2cd18:	7b43      	ldrb	r3, [r0, #13]
   2cd1a:	06db      	lsls	r3, r3, #27
   2cd1c:	d106      	bne.n	2cd2c <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   2cd1e:	4b06      	ldr	r3, [pc, #24]	; (2cd38 <sliceable+0x38>)
   2cd20:	1ac3      	subs	r3, r0, r3
   2cd22:	bf18      	it	ne
   2cd24:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   2cd26:	f003 0001 	and.w	r0, r3, #1
   2cd2a:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   2cd2c:	2300      	movs	r3, #0
   2cd2e:	e7fa      	b.n	2cd26 <sliceable+0x26>
   2cd30:	20001464 	.word	0x20001464
   2cd34:	20001460 	.word	0x20001460
   2cd38:	20000500 	.word	0x20000500

0002cd3c <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   2cd3c:	4b04      	ldr	r3, [pc, #16]	; (2cd50 <slice_timeout+0x14>)
   2cd3e:	1ac0      	subs	r0, r0, r3
   2cd40:	4b04      	ldr	r3, [pc, #16]	; (2cd54 <slice_timeout+0x18>)
   2cd42:	10c0      	asrs	r0, r0, #3
   2cd44:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   2cd46:	4b04      	ldr	r3, [pc, #16]	; (2cd58 <slice_timeout+0x1c>)
   2cd48:	2201      	movs	r2, #1
   2cd4a:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   2cd4c:	4770      	bx	lr
   2cd4e:	bf00      	nop
   2cd50:	20000600 	.word	0x20000600
   2cd54:	aaaaaaab 	.word	0xaaaaaaab
   2cd58:	200014a8 	.word	0x200014a8

0002cd5c <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   2cd5c:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   2cd5e:	4b0e      	ldr	r3, [pc, #56]	; (2cd98 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   2cd60:	4c0e      	ldr	r4, [pc, #56]	; (2cd9c <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   2cd62:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   2cd64:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   2cd68:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   2cd6c:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   2cd6e:	4620      	mov	r0, r4
   2cd70:	f002 fa24 	bl	2f1bc <z_abort_timeout>
	slice_expired[cpu] = false;
   2cd74:	4b0a      	ldr	r3, [pc, #40]	; (2cda0 <z_reset_time_slice+0x44>)
   2cd76:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   2cd78:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   2cd7a:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   2cd7c:	f7ff ffc0 	bl	2cd00 <sliceable>
   2cd80:	b148      	cbz	r0, 2cd96 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   2cd82:	4b08      	ldr	r3, [pc, #32]	; (2cda4 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2cd84:	4908      	ldr	r1, [pc, #32]	; (2cda8 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   2cd86:	681a      	ldr	r2, [r3, #0]
   2cd88:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2cd8a:	4620      	mov	r0, r4
   2cd8c:	17d3      	asrs	r3, r2, #31
	}
}
   2cd8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2cd92:	f000 bb83 	b.w	2d49c <z_add_timeout>
}
   2cd96:	bd70      	pop	{r4, r5, r6, pc}
   2cd98:	20001430 	.word	0x20001430
   2cd9c:	20000600 	.word	0x20000600
   2cda0:	200014a8 	.word	0x200014a8
   2cda4:	20001464 	.word	0x20001464
   2cda8:	0002cd3d 	.word	0x0002cd3d

0002cdac <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   2cdac:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2cdae:	4d0d      	ldr	r5, [pc, #52]	; (2cde4 <update_cache+0x38>)
   2cdb0:	462b      	mov	r3, r5
   2cdb2:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2cdb6:	429c      	cmp	r4, r3
   2cdb8:	d000      	beq.n	2cdbc <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2cdba:	b904      	cbnz	r4, 2cdbe <update_cache+0x12>
   2cdbc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   2cdbe:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   2cdc0:	b938      	cbnz	r0, 2cdd2 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   2cdc2:	7b5a      	ldrb	r2, [r3, #13]
   2cdc4:	06d2      	lsls	r2, r2, #27
   2cdc6:	d104      	bne.n	2cdd2 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2cdc8:	69a2      	ldr	r2, [r4, #24]
   2cdca:	b912      	cbnz	r2, 2cdd2 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   2cdcc:	89da      	ldrh	r2, [r3, #14]
   2cdce:	2a7f      	cmp	r2, #127	; 0x7f
   2cdd0:	d805      	bhi.n	2cdde <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   2cdd2:	429c      	cmp	r4, r3
   2cdd4:	d002      	beq.n	2cddc <update_cache+0x30>
			z_reset_time_slice(thread);
   2cdd6:	4620      	mov	r0, r4
   2cdd8:	f7ff ffc0 	bl	2cd5c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   2cddc:	4623      	mov	r3, r4
   2cdde:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   2cde0:	bd38      	pop	{r3, r4, r5, pc}
   2cde2:	bf00      	nop
   2cde4:	20001430 	.word	0x20001430

0002cde8 <move_thread_to_end_of_prio_q>:
{
   2cde8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2cdea:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2cdee:	7b43      	ldrb	r3, [r0, #13]
   2cdf0:	2a00      	cmp	r2, #0
{
   2cdf2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2cdf4:	da04      	bge.n	2ce00 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2cdf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2cdfa:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   2cdfc:	f002 f8c8 	bl	2ef90 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2ce00:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2ce02:	4a15      	ldr	r2, [pc, #84]	; (2ce58 <move_thread_to_end_of_prio_q+0x70>)
   2ce04:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2ce08:	4610      	mov	r0, r2
   2ce0a:	734b      	strb	r3, [r1, #13]
   2ce0c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2ce10:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ce12:	4283      	cmp	r3, r0
   2ce14:	bf08      	it	eq
   2ce16:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ce18:	b923      	cbnz	r3, 2ce24 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   2ce1a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   2ce1e:	6021      	str	r1, [r4, #0]
	list->tail = node;
   2ce20:	6211      	str	r1, [r2, #32]
}
   2ce22:	e00c      	b.n	2ce3e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   2ce24:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   2ce28:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2ce2c:	42b5      	cmp	r5, r6
   2ce2e:	d00e      	beq.n	2ce4e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2ce30:	42ae      	cmp	r6, r5
   2ce32:	dd0c      	ble.n	2ce4e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2ce34:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2ce36:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   2ce3a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   2ce3c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   2ce3e:	6890      	ldr	r0, [r2, #8]
   2ce40:	1a43      	subs	r3, r0, r1
   2ce42:	4258      	negs	r0, r3
}
   2ce44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2ce48:	4158      	adcs	r0, r3
   2ce4a:	f7ff bfaf 	b.w	2cdac <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2ce4e:	429c      	cmp	r4, r3
   2ce50:	d0e3      	beq.n	2ce1a <move_thread_to_end_of_prio_q+0x32>
   2ce52:	681b      	ldr	r3, [r3, #0]
   2ce54:	e7e0      	b.n	2ce18 <move_thread_to_end_of_prio_q+0x30>
   2ce56:	bf00      	nop
   2ce58:	20001430 	.word	0x20001430

0002ce5c <ready_thread>:
{
   2ce5c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2ce5e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2ce62:	7b42      	ldrb	r2, [r0, #13]
   2ce64:	2b00      	cmp	r3, #0
   2ce66:	db29      	blt.n	2cebc <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2ce68:	06d3      	lsls	r3, r2, #27
   2ce6a:	d127      	bne.n	2cebc <ready_thread+0x60>
	return node->next != NULL;
   2ce6c:	6983      	ldr	r3, [r0, #24]
   2ce6e:	bb2b      	cbnz	r3, 2cebc <ready_thread+0x60>
	return list->head == list;
   2ce70:	4913      	ldr	r1, [pc, #76]	; (2cec0 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2ce72:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2ce76:	7342      	strb	r2, [r0, #13]
   2ce78:	460a      	mov	r2, r1
   2ce7a:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ce7e:	4294      	cmp	r4, r2
   2ce80:	bf18      	it	ne
   2ce82:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   2ce84:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ce86:	b923      	cbnz	r3, 2ce92 <ready_thread+0x36>
	node->prev = tail;
   2ce88:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   2ce8c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2ce8e:	6208      	str	r0, [r1, #32]
}
   2ce90:	e00c      	b.n	2ceac <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   2ce92:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2ce96:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2ce9a:	42b5      	cmp	r5, r6
   2ce9c:	d00a      	beq.n	2ceb4 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2ce9e:	42ae      	cmp	r6, r5
   2cea0:	dd08      	ble.n	2ceb4 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   2cea2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2cea4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2cea8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2ceaa:	6058      	str	r0, [r3, #4]
}
   2ceac:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   2ceae:	2000      	movs	r0, #0
   2ceb0:	f7ff bf7c 	b.w	2cdac <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2ceb4:	42a3      	cmp	r3, r4
   2ceb6:	d0e7      	beq.n	2ce88 <ready_thread+0x2c>
   2ceb8:	681b      	ldr	r3, [r3, #0]
   2ceba:	e7e4      	b.n	2ce86 <ready_thread+0x2a>
}
   2cebc:	bc70      	pop	{r4, r5, r6}
   2cebe:	4770      	bx	lr
   2cec0:	20001430 	.word	0x20001430

0002cec4 <unready_thread>:
{
   2cec4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2cec6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2ceca:	7b43      	ldrb	r3, [r0, #13]
   2cecc:	2a00      	cmp	r2, #0
{
   2cece:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2ced0:	da04      	bge.n	2cedc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ced2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2ced6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2ced8:	f002 f85a 	bl	2ef90 <sys_dlist_remove>
	update_cache(thread == _current);
   2cedc:	4b04      	ldr	r3, [pc, #16]	; (2cef0 <unready_thread+0x2c>)
   2cede:	6898      	ldr	r0, [r3, #8]
   2cee0:	1a43      	subs	r3, r0, r1
   2cee2:	4258      	negs	r0, r3
   2cee4:	4158      	adcs	r0, r3
}
   2cee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   2ceea:	f7ff bf5f 	b.w	2cdac <update_cache>
   2ceee:	bf00      	nop
   2cef0:	20001430 	.word	0x20001430

0002cef4 <pend_locked>:
{
   2cef4:	b570      	push	{r4, r5, r6, lr}
   2cef6:	4615      	mov	r5, r2
   2cef8:	461c      	mov	r4, r3
   2cefa:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   2cefc:	f002 f85a 	bl	2efb4 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2cf00:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2cf04:	bf08      	it	eq
   2cf06:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   2cf0a:	d008      	beq.n	2cf1e <pend_locked+0x2a>
   2cf0c:	462a      	mov	r2, r5
   2cf0e:	4623      	mov	r3, r4
   2cf10:	f106 0018 	add.w	r0, r6, #24
   2cf14:	4902      	ldr	r1, [pc, #8]	; (2cf20 <pend_locked+0x2c>)
}
   2cf16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2cf1a:	f000 babf 	b.w	2d49c <z_add_timeout>
   2cf1e:	bd70      	pop	{r4, r5, r6, pc}
   2cf20:	0002f08d 	.word	0x0002f08d

0002cf24 <z_time_slice>:
{
   2cf24:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2cf26:	f04f 0320 	mov.w	r3, #32
   2cf2a:	f3ef 8511 	mrs	r5, BASEPRI
   2cf2e:	f383 8812 	msr	BASEPRI_MAX, r3
   2cf32:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   2cf36:	4b10      	ldr	r3, [pc, #64]	; (2cf78 <z_time_slice+0x54>)
	if (pending_current == curr) {
   2cf38:	4a10      	ldr	r2, [pc, #64]	; (2cf7c <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   2cf3a:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   2cf3c:	6810      	ldr	r0, [r2, #0]
   2cf3e:	42a0      	cmp	r0, r4
   2cf40:	d106      	bne.n	2cf50 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   2cf42:	f7ff ff0b 	bl	2cd5c <z_reset_time_slice>
	__asm__ volatile(
   2cf46:	f385 8811 	msr	BASEPRI, r5
   2cf4a:	f3bf 8f6f 	isb	sy
}
   2cf4e:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   2cf50:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   2cf52:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   2cf54:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   2cf56:	4a0a      	ldr	r2, [pc, #40]	; (2cf80 <z_time_slice+0x5c>)
   2cf58:	5cd3      	ldrb	r3, [r2, r3]
   2cf5a:	2b00      	cmp	r3, #0
   2cf5c:	d0f3      	beq.n	2cf46 <z_time_slice+0x22>
   2cf5e:	4620      	mov	r0, r4
   2cf60:	f7ff fece 	bl	2cd00 <sliceable>
   2cf64:	2800      	cmp	r0, #0
   2cf66:	d0ee      	beq.n	2cf46 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   2cf68:	7b63      	ldrb	r3, [r4, #13]
   2cf6a:	06db      	lsls	r3, r3, #27
   2cf6c:	d102      	bne.n	2cf74 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   2cf6e:	4620      	mov	r0, r4
   2cf70:	f7ff ff3a 	bl	2cde8 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   2cf74:	4620      	mov	r0, r4
   2cf76:	e7e4      	b.n	2cf42 <z_time_slice+0x1e>
   2cf78:	20001430 	.word	0x20001430
   2cf7c:	2000145c 	.word	0x2000145c
   2cf80:	200014a8 	.word	0x200014a8

0002cf84 <z_pend_curr>:
{
   2cf84:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   2cf86:	480c      	ldr	r0, [pc, #48]	; (2cfb8 <z_pend_curr+0x34>)
   2cf88:	4d0c      	ldr	r5, [pc, #48]	; (2cfbc <z_pend_curr+0x38>)
   2cf8a:	6886      	ldr	r6, [r0, #8]
   2cf8c:	602e      	str	r6, [r5, #0]
{
   2cf8e:	460c      	mov	r4, r1
   2cf90:	4611      	mov	r1, r2
   2cf92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   2cf96:	f04f 0620 	mov.w	r6, #32
   2cf9a:	f3ef 8511 	mrs	r5, BASEPRI
   2cf9e:	f386 8812 	msr	BASEPRI_MAX, r6
   2cfa2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   2cfa6:	6880      	ldr	r0, [r0, #8]
   2cfa8:	f7ff ffa4 	bl	2cef4 <pend_locked>
	ret = arch_swap(key);
   2cfac:	4620      	mov	r0, r4
}
   2cfae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2cfb2:	f7fb baed 	b.w	28590 <arch_swap>
   2cfb6:	bf00      	nop
   2cfb8:	20001430 	.word	0x20001430
   2cfbc:	2000145c 	.word	0x2000145c

0002cfc0 <z_set_prio>:
{
   2cfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cfc2:	4604      	mov	r4, r0
   2cfc4:	f04f 0320 	mov.w	r3, #32
   2cfc8:	f3ef 8611 	mrs	r6, BASEPRI
   2cfcc:	f383 8812 	msr	BASEPRI_MAX, r3
   2cfd0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   2cfd4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2cfd6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   2cfd8:	b249      	sxtb	r1, r1
   2cfda:	d119      	bne.n	2d010 <z_set_prio+0x50>
	return node->next != NULL;
   2cfdc:	6985      	ldr	r5, [r0, #24]
   2cfde:	b9bd      	cbnz	r5, 2d010 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2cfe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2cfe4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2cfe6:	f001 ffd3 	bl	2ef90 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2cfea:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   2cfec:	4a16      	ldr	r2, [pc, #88]	; (2d048 <z_set_prio+0x88>)
				thread->base.prio = prio;
   2cfee:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2cff0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2cff4:	7343      	strb	r3, [r0, #13]
   2cff6:	4613      	mov	r3, r2
   2cff8:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2cffc:	4298      	cmp	r0, r3
   2cffe:	bf18      	it	ne
   2d000:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   2d002:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d004:	b95d      	cbnz	r5, 2d01e <z_set_prio+0x5e>
	node->prev = tail;
   2d006:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   2d00a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   2d00c:	6214      	str	r4, [r2, #32]
}
   2d00e:	e011      	b.n	2d034 <z_set_prio+0x74>
			thread->base.prio = prio;
   2d010:	73a1      	strb	r1, [r4, #14]
   2d012:	2000      	movs	r0, #0
	__asm__ volatile(
   2d014:	f386 8811 	msr	BASEPRI, r6
   2d018:	f3bf 8f6f 	isb	sy
}
   2d01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   2d01e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   2d022:	42b9      	cmp	r1, r7
   2d024:	d00b      	beq.n	2d03e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2d026:	428f      	cmp	r7, r1
   2d028:	dd09      	ble.n	2d03e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   2d02a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   2d02c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   2d030:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2d032:	606c      	str	r4, [r5, #4]
			update_cache(1);
   2d034:	2001      	movs	r0, #1
   2d036:	f7ff feb9 	bl	2cdac <update_cache>
   2d03a:	2001      	movs	r0, #1
   2d03c:	e7ea      	b.n	2d014 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   2d03e:	42a8      	cmp	r0, r5
   2d040:	d0e1      	beq.n	2d006 <z_set_prio+0x46>
   2d042:	682d      	ldr	r5, [r5, #0]
   2d044:	e7de      	b.n	2d004 <z_set_prio+0x44>
   2d046:	bf00      	nop
   2d048:	20001430 	.word	0x20001430

0002d04c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2d04c:	b949      	cbnz	r1, 2d062 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2d04e:	f3ef 8005 	mrs	r0, IPSR
   2d052:	b930      	cbnz	r0, 2d062 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   2d054:	4b05      	ldr	r3, [pc, #20]	; (2d06c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   2d056:	699a      	ldr	r2, [r3, #24]
   2d058:	689b      	ldr	r3, [r3, #8]
   2d05a:	429a      	cmp	r2, r3
   2d05c:	d001      	beq.n	2d062 <z_reschedule+0x16>
   2d05e:	f7fb ba97 	b.w	28590 <arch_swap>
   2d062:	f381 8811 	msr	BASEPRI, r1
   2d066:	f3bf 8f6f 	isb	sy
}
   2d06a:	4770      	bx	lr
   2d06c:	20001430 	.word	0x20001430

0002d070 <z_sched_start>:
{
   2d070:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d072:	f04f 0220 	mov.w	r2, #32
   2d076:	f3ef 8411 	mrs	r4, BASEPRI
   2d07a:	f382 8812 	msr	BASEPRI_MAX, r2
   2d07e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2d082:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   2d084:	0751      	lsls	r1, r2, #29
   2d086:	d404      	bmi.n	2d092 <z_sched_start+0x22>
	__asm__ volatile(
   2d088:	f384 8811 	msr	BASEPRI, r4
   2d08c:	f3bf 8f6f 	isb	sy
}
   2d090:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2d092:	f022 0204 	bic.w	r2, r2, #4
   2d096:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   2d098:	f7ff fee0 	bl	2ce5c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2d09c:	4621      	mov	r1, r4
   2d09e:	4802      	ldr	r0, [pc, #8]	; (2d0a8 <z_sched_start+0x38>)
}
   2d0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   2d0a4:	f7ff bfd2 	b.w	2d04c <z_reschedule>
   2d0a8:	200014a9 	.word	0x200014a9

0002d0ac <z_impl_k_thread_suspend>:
{
   2d0ac:	b570      	push	{r4, r5, r6, lr}
   2d0ae:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2d0b0:	3018      	adds	r0, #24
   2d0b2:	f002 f883 	bl	2f1bc <z_abort_timeout>
	__asm__ volatile(
   2d0b6:	f04f 0320 	mov.w	r3, #32
   2d0ba:	f3ef 8611 	mrs	r6, BASEPRI
   2d0be:	f383 8812 	msr	BASEPRI_MAX, r3
   2d0c2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2d0c6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2d0ca:	7b63      	ldrb	r3, [r4, #13]
   2d0cc:	2a00      	cmp	r2, #0
   2d0ce:	da05      	bge.n	2d0dc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2d0d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2d0d4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2d0d6:	4620      	mov	r0, r4
   2d0d8:	f001 ff5a 	bl	2ef90 <sys_dlist_remove>
		update_cache(thread == _current);
   2d0dc:	4d0b      	ldr	r5, [pc, #44]	; (2d10c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2d0de:	7b63      	ldrb	r3, [r4, #13]
   2d0e0:	68a8      	ldr	r0, [r5, #8]
   2d0e2:	f043 0310 	orr.w	r3, r3, #16
   2d0e6:	7363      	strb	r3, [r4, #13]
   2d0e8:	1b03      	subs	r3, r0, r4
   2d0ea:	4258      	negs	r0, r3
   2d0ec:	4158      	adcs	r0, r3
   2d0ee:	f7ff fe5d 	bl	2cdac <update_cache>
	__asm__ volatile(
   2d0f2:	f386 8811 	msr	BASEPRI, r6
   2d0f6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2d0fa:	68ab      	ldr	r3, [r5, #8]
   2d0fc:	42a3      	cmp	r3, r4
   2d0fe:	d103      	bne.n	2d108 <z_impl_k_thread_suspend+0x5c>
}
   2d100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2d104:	f002 b81d 	b.w	2f142 <z_reschedule_unlocked>
}
   2d108:	bd70      	pop	{r4, r5, r6, pc}
   2d10a:	bf00      	nop
   2d10c:	20001430 	.word	0x20001430

0002d110 <k_sched_lock>:
	__asm__ volatile(
   2d110:	f04f 0320 	mov.w	r3, #32
   2d114:	f3ef 8111 	mrs	r1, BASEPRI
   2d118:	f383 8812 	msr	BASEPRI_MAX, r3
   2d11c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   2d120:	4b04      	ldr	r3, [pc, #16]	; (2d134 <k_sched_lock+0x24>)
   2d122:	689a      	ldr	r2, [r3, #8]
   2d124:	7bd3      	ldrb	r3, [r2, #15]
   2d126:	3b01      	subs	r3, #1
   2d128:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2d12a:	f381 8811 	msr	BASEPRI, r1
   2d12e:	f3bf 8f6f 	isb	sy
}
   2d132:	4770      	bx	lr
   2d134:	20001430 	.word	0x20001430

0002d138 <k_sched_unlock>:
{
   2d138:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d13a:	f04f 0320 	mov.w	r3, #32
   2d13e:	f3ef 8411 	mrs	r4, BASEPRI
   2d142:	f383 8812 	msr	BASEPRI_MAX, r3
   2d146:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2d14a:	4b08      	ldr	r3, [pc, #32]	; (2d16c <k_sched_unlock+0x34>)
   2d14c:	689a      	ldr	r2, [r3, #8]
   2d14e:	7bd3      	ldrb	r3, [r2, #15]
   2d150:	3301      	adds	r3, #1
   2d152:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2d154:	2000      	movs	r0, #0
   2d156:	f7ff fe29 	bl	2cdac <update_cache>
	__asm__ volatile(
   2d15a:	f384 8811 	msr	BASEPRI, r4
   2d15e:	f3bf 8f6f 	isb	sy
}
   2d162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2d166:	f001 bfec 	b.w	2f142 <z_reschedule_unlocked>
   2d16a:	bf00      	nop
   2d16c:	20001430 	.word	0x20001430

0002d170 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   2d170:	4b02      	ldr	r3, [pc, #8]	; (2d17c <z_sched_init+0xc>)
   2d172:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   2d176:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   2d17a:	4770      	bx	lr
   2d17c:	20001430 	.word	0x20001430

0002d180 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2d180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2d182:	f04f 0320 	mov.w	r3, #32
   2d186:	f3ef 8511 	mrs	r5, BASEPRI
   2d18a:	f383 8812 	msr	BASEPRI_MAX, r3
   2d18e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2d192:	4919      	ldr	r1, [pc, #100]	; (2d1f8 <z_impl_k_yield+0x78>)
   2d194:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2d196:	7b43      	ldrb	r3, [r0, #13]
   2d198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2d19c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2d19e:	f001 fef7 	bl	2ef90 <sys_dlist_remove>
	}
	queue_thread(_current);
   2d1a2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2d1a4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   2d1a6:	4608      	mov	r0, r1
   2d1a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2d1ac:	735a      	strb	r2, [r3, #13]
   2d1ae:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   2d1b2:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d1b4:	4282      	cmp	r2, r0
   2d1b6:	bf08      	it	eq
   2d1b8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d1ba:	b922      	cbnz	r2, 2d1c6 <z_impl_k_yield+0x46>
	node->prev = tail;
   2d1bc:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   2d1c0:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2d1c2:	620b      	str	r3, [r1, #32]
}
   2d1c4:	e00c      	b.n	2d1e0 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   2d1c6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2d1ca:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2d1ce:	42be      	cmp	r6, r7
   2d1d0:	d00e      	beq.n	2d1f0 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2d1d2:	42b7      	cmp	r7, r6
   2d1d4:	dd0c      	ble.n	2d1f0 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   2d1d6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2d1d8:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2d1dc:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2d1de:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2d1e0:	2001      	movs	r0, #1
   2d1e2:	f7ff fde3 	bl	2cdac <update_cache>
   2d1e6:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   2d1e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2d1ec:	f7fb b9d0 	b.w	28590 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2d1f0:	42a2      	cmp	r2, r4
   2d1f2:	d0e3      	beq.n	2d1bc <z_impl_k_yield+0x3c>
   2d1f4:	6812      	ldr	r2, [r2, #0]
   2d1f6:	e7e0      	b.n	2d1ba <z_impl_k_yield+0x3a>
   2d1f8:	20001430 	.word	0x20001430

0002d1fc <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2d1fc:	ea50 0301 	orrs.w	r3, r0, r1
{
   2d200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d204:	4605      	mov	r5, r0
   2d206:	460e      	mov	r6, r1
	if (ticks == 0) {
   2d208:	d103      	bne.n	2d212 <z_tick_sleep+0x16>
	z_impl_k_yield();
   2d20a:	f7ff ffb9 	bl	2d180 <z_impl_k_yield>
		k_yield();
		return 0;
   2d20e:	2000      	movs	r0, #0
   2d210:	e02c      	b.n	2d26c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   2d212:	1c83      	adds	r3, r0, #2
   2d214:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   2d218:	db2a      	blt.n	2d270 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2d21a:	f001 fff5 	bl	2f208 <sys_clock_tick_get_32>
   2d21e:	182c      	adds	r4, r5, r0
   2d220:	f04f 0320 	mov.w	r3, #32
   2d224:	f3ef 8811 	mrs	r8, BASEPRI
   2d228:	f383 8812 	msr	BASEPRI_MAX, r3
   2d22c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   2d230:	4f11      	ldr	r7, [pc, #68]	; (2d278 <z_tick_sleep+0x7c>)
   2d232:	4b12      	ldr	r3, [pc, #72]	; (2d27c <z_tick_sleep+0x80>)
   2d234:	68b8      	ldr	r0, [r7, #8]
   2d236:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   2d238:	f7ff fe44 	bl	2cec4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2d23c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2d23e:	4910      	ldr	r1, [pc, #64]	; (2d280 <z_tick_sleep+0x84>)
   2d240:	462a      	mov	r2, r5
   2d242:	4633      	mov	r3, r6
   2d244:	3018      	adds	r0, #24
   2d246:	f000 f929 	bl	2d49c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2d24a:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2d24c:	7b53      	ldrb	r3, [r2, #13]
   2d24e:	f043 0310 	orr.w	r3, r3, #16
   2d252:	7353      	strb	r3, [r2, #13]
   2d254:	4640      	mov	r0, r8
   2d256:	f7fb f99b 	bl	28590 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2d25a:	f001 ffd5 	bl	2f208 <sys_clock_tick_get_32>
   2d25e:	1a20      	subs	r0, r4, r0
   2d260:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2d264:	2801      	cmp	r0, #1
   2d266:	f173 0300 	sbcs.w	r3, r3, #0
   2d26a:	dbd0      	blt.n	2d20e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   2d26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   2d270:	f06f 0401 	mvn.w	r4, #1
   2d274:	1a24      	subs	r4, r4, r0
   2d276:	e7d3      	b.n	2d220 <z_tick_sleep+0x24>
   2d278:	20001430 	.word	0x20001430
   2d27c:	2000145c 	.word	0x2000145c
   2d280:	0002f08d 	.word	0x0002f08d

0002d284 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d284:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2d288:	bf08      	it	eq
   2d28a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2d28e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d290:	d106      	bne.n	2d2a0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   2d292:	4b08      	ldr	r3, [pc, #32]	; (2d2b4 <z_impl_k_sleep+0x30>)
   2d294:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2d296:	f7ff ff09 	bl	2d0ac <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2d29a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2d29e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   2d2a0:	f7ff ffac 	bl	2d1fc <z_tick_sleep>
   2d2a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2d2a8:	fb80 0303 	smull	r0, r3, r0, r3
   2d2ac:	0bc0      	lsrs	r0, r0, #15
   2d2ae:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2d2b2:	e7f4      	b.n	2d29e <z_impl_k_sleep+0x1a>
   2d2b4:	20001430 	.word	0x20001430

0002d2b8 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   2d2b8:	b538      	push	{r3, r4, r5, lr}
   2d2ba:	4c0a      	ldr	r4, [pc, #40]	; (2d2e4 <z_impl_k_usleep+0x2c>)
   2d2bc:	4a0a      	ldr	r2, [pc, #40]	; (2d2e8 <z_impl_k_usleep+0x30>)
   2d2be:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2d2c2:	2100      	movs	r1, #0
   2d2c4:	fbc0 4105 	smlal	r4, r1, r0, r5
   2d2c8:	2300      	movs	r3, #0
   2d2ca:	4620      	mov	r0, r4
   2d2cc:	f7f8 ff18 	bl	26100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   2d2d0:	17c1      	asrs	r1, r0, #31
   2d2d2:	f7ff ff93 	bl	2d1fc <z_tick_sleep>
   2d2d6:	4b04      	ldr	r3, [pc, #16]	; (2d2e8 <z_impl_k_usleep+0x30>)
   2d2d8:	fb80 0303 	smull	r0, r3, r0, r3
   2d2dc:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
   2d2de:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2d2e2:	bd38      	pop	{r3, r4, r5, pc}
   2d2e4:	000f423f 	.word	0x000f423f
   2d2e8:	000f4240 	.word	0x000f4240

0002d2ec <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2d2ec:	4b01      	ldr	r3, [pc, #4]	; (2d2f4 <z_impl_z_current_get+0x8>)
   2d2ee:	6898      	ldr	r0, [r3, #8]
   2d2f0:	4770      	bx	lr
   2d2f2:	bf00      	nop
   2d2f4:	20001430 	.word	0x20001430

0002d2f8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2d2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d2fc:	4604      	mov	r4, r0
   2d2fe:	f04f 0320 	mov.w	r3, #32
   2d302:	f3ef 8611 	mrs	r6, BASEPRI
   2d306:	f383 8812 	msr	BASEPRI_MAX, r3
   2d30a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2d30e:	7b03      	ldrb	r3, [r0, #12]
   2d310:	07d9      	lsls	r1, r3, #31
   2d312:	d50b      	bpl.n	2d32c <z_thread_abort+0x34>
	__asm__ volatile(
   2d314:	f386 8811 	msr	BASEPRI, r6
   2d318:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   2d31c:	4040      	eors	r0, r0
   2d31e:	f380 8811 	msr	BASEPRI, r0
   2d322:	f04f 0004 	mov.w	r0, #4
   2d326:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2d328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2d32c:	7b43      	ldrb	r3, [r0, #13]
   2d32e:	071a      	lsls	r2, r3, #28
   2d330:	d504      	bpl.n	2d33c <z_thread_abort+0x44>
   2d332:	f386 8811 	msr	BASEPRI, r6
   2d336:	f3bf 8f6f 	isb	sy
   2d33a:	e7f5      	b.n	2d328 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2d33c:	f023 0220 	bic.w	r2, r3, #32
   2d340:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2d344:	09d2      	lsrs	r2, r2, #7
   2d346:	d120      	bne.n	2d38a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2d348:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2d34a:	68a3      	ldr	r3, [r4, #8]
   2d34c:	b113      	cbz	r3, 2d354 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   2d34e:	4620      	mov	r0, r4
   2d350:	f001 fe26 	bl	2efa0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2d354:	f104 0018 	add.w	r0, r4, #24
   2d358:	f001 ff30 	bl	2f1bc <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2d35c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   2d360:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   2d364:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d366:	42bd      	cmp	r5, r7
   2d368:	d000      	beq.n	2d36c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2d36a:	b9b5      	cbnz	r5, 2d39a <z_thread_abort+0xa2>
		update_cache(1);
   2d36c:	2001      	movs	r0, #1
   2d36e:	f7ff fd1d 	bl	2cdac <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2d372:	4b10      	ldr	r3, [pc, #64]	; (2d3b4 <z_thread_abort+0xbc>)
   2d374:	689b      	ldr	r3, [r3, #8]
   2d376:	42a3      	cmp	r3, r4
   2d378:	d1db      	bne.n	2d332 <z_thread_abort+0x3a>
   2d37a:	f3ef 8305 	mrs	r3, IPSR
   2d37e:	2b00      	cmp	r3, #0
   2d380:	d1d7      	bne.n	2d332 <z_thread_abort+0x3a>
   2d382:	4630      	mov	r0, r6
   2d384:	f7fb f904 	bl	28590 <arch_swap>
	return ret;
   2d388:	e7d3      	b.n	2d332 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2d38a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2d38e:	f043 0308 	orr.w	r3, r3, #8
   2d392:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2d394:	f001 fdfc 	bl	2ef90 <sys_dlist_remove>
}
   2d398:	e7d7      	b.n	2d34a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   2d39a:	4628      	mov	r0, r5
   2d39c:	f001 fe00 	bl	2efa0 <unpend_thread_no_timeout>
   2d3a0:	f105 0018 	add.w	r0, r5, #24
   2d3a4:	f001 ff0a 	bl	2f1bc <z_abort_timeout>
   2d3a8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
   2d3ac:	4628      	mov	r0, r5
   2d3ae:	f7ff fd55 	bl	2ce5c <ready_thread>
   2d3b2:	e7d7      	b.n	2d364 <z_thread_abort+0x6c>
   2d3b4:	20001430 	.word	0x20001430

0002d3b8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2d3b8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2d3ba:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2d3be:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2d3c0:	e9cd 6700 	strd	r6, r7, [sp]
   2d3c4:	f7ff fdde 	bl	2cf84 <z_pend_curr>

	if (data != NULL) {
   2d3c8:	b11c      	cbz	r4, 2d3d2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2d3ca:	4b03      	ldr	r3, [pc, #12]	; (2d3d8 <z_sched_wait+0x20>)
   2d3cc:	689b      	ldr	r3, [r3, #8]
   2d3ce:	695b      	ldr	r3, [r3, #20]
   2d3d0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2d3d2:	b002      	add	sp, #8
   2d3d4:	bdd0      	pop	{r4, r6, r7, pc}
   2d3d6:	bf00      	nop
   2d3d8:	20001430 	.word	0x20001430

0002d3dc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2d3dc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2d3de:	4806      	ldr	r0, [pc, #24]	; (2d3f8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   2d3e0:	4a06      	ldr	r2, [pc, #24]	; (2d3fc <z_data_copy+0x20>)
   2d3e2:	4907      	ldr	r1, [pc, #28]	; (2d400 <z_data_copy+0x24>)
   2d3e4:	1a12      	subs	r2, r2, r0
   2d3e6:	f001 fc81 	bl	2ecec <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2d3ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2d3ee:	4a05      	ldr	r2, [pc, #20]	; (2d404 <z_data_copy+0x28>)
   2d3f0:	4905      	ldr	r1, [pc, #20]	; (2d408 <z_data_copy+0x2c>)
   2d3f2:	4806      	ldr	r0, [pc, #24]	; (2d40c <z_data_copy+0x30>)
   2d3f4:	f001 bc7a 	b.w	2ecec <z_early_memcpy>
   2d3f8:	20000000 	.word	0x20000000
   2d3fc:	200003a0 	.word	0x200003a0
   2d400:	0002fbe4 	.word	0x0002fbe4
   2d404:	00000000 	.word	0x00000000
   2d408:	0002fbe4 	.word	0x0002fbe4
   2d40c:	20000000 	.word	0x20000000

0002d410 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2d410:	4b03      	ldr	r3, [pc, #12]	; (2d420 <elapsed+0x10>)
   2d412:	681b      	ldr	r3, [r3, #0]
   2d414:	b90b      	cbnz	r3, 2d41a <elapsed+0xa>
   2d416:	f7fd ba61 	b.w	2a8dc <sys_clock_elapsed>
}
   2d41a:	2000      	movs	r0, #0
   2d41c:	4770      	bx	lr
   2d41e:	bf00      	nop
   2d420:	20001468 	.word	0x20001468

0002d424 <next_timeout>:

static int32_t next_timeout(void)
{
   2d424:	b510      	push	{r4, lr}
	return list->head == list;
   2d426:	4b0e      	ldr	r3, [pc, #56]	; (2d460 <next_timeout+0x3c>)
   2d428:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d42a:	429c      	cmp	r4, r3
   2d42c:	d104      	bne.n	2d438 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2d42e:	f7ff ffef 	bl	2d410 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   2d432:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   2d436:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   2d438:	f7ff ffea 	bl	2d410 <elapsed>
	if ((to == NULL) ||
   2d43c:	2c00      	cmp	r4, #0
   2d43e:	d0f8      	beq.n	2d432 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2d440:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2d444:	1a1b      	subs	r3, r3, r0
   2d446:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2d44a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2d44e:	f172 0100 	sbcs.w	r1, r2, #0
   2d452:	daee      	bge.n	2d432 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   2d454:	2a00      	cmp	r2, #0
   2d456:	bfac      	ite	ge
   2d458:	4618      	movge	r0, r3
   2d45a:	2000      	movlt	r0, #0
	return ret;
   2d45c:	e7eb      	b.n	2d436 <next_timeout+0x12>
   2d45e:	bf00      	nop
   2d460:	20000270 	.word	0x20000270

0002d464 <remove_timeout>:
{
   2d464:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2d466:	b170      	cbz	r0, 2d486 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2d468:	4b0b      	ldr	r3, [pc, #44]	; (2d498 <remove_timeout+0x34>)
   2d46a:	685b      	ldr	r3, [r3, #4]
   2d46c:	4298      	cmp	r0, r3
   2d46e:	d00a      	beq.n	2d486 <remove_timeout+0x22>
   2d470:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   2d472:	b143      	cbz	r3, 2d486 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2d474:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2d478:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2d47c:	1912      	adds	r2, r2, r4
   2d47e:	eb41 0105 	adc.w	r1, r1, r5
   2d482:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2d486:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   2d48a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2d48c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2d48e:	2300      	movs	r3, #0
	node->prev = NULL;
   2d490:	e9c0 3300 	strd	r3, r3, [r0]
}
   2d494:	bd30      	pop	{r4, r5, pc}
   2d496:	bf00      	nop
   2d498:	20000270 	.word	0x20000270

0002d49c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d49c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2d4a0:	bf08      	it	eq
   2d4a2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   2d4a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d4a8:	4604      	mov	r4, r0
   2d4aa:	461d      	mov	r5, r3
   2d4ac:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d4ae:	d05c      	beq.n	2d56a <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   2d4b0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2d4b2:	f04f 0320 	mov.w	r3, #32
   2d4b6:	f3ef 8711 	mrs	r7, BASEPRI
   2d4ba:	f383 8812 	msr	BASEPRI_MAX, r3
   2d4be:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2d4c2:	3201      	adds	r2, #1
   2d4c4:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   2d4c8:	da24      	bge.n	2d514 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2d4ca:	492d      	ldr	r1, [pc, #180]	; (2d580 <z_add_timeout+0xe4>)
   2d4cc:	e9d1 2000 	ldrd	r2, r0, [r1]
   2d4d0:	f06f 0301 	mvn.w	r3, #1
   2d4d4:	1a9b      	subs	r3, r3, r2
   2d4d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d4da:	eb62 0000 	sbc.w	r0, r2, r0
   2d4de:	1b9e      	subs	r6, r3, r6
   2d4e0:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   2d4e4:	2e01      	cmp	r6, #1
   2d4e6:	f170 0300 	sbcs.w	r3, r0, #0
   2d4ea:	da01      	bge.n	2d4f0 <z_add_timeout+0x54>
   2d4ec:	2601      	movs	r6, #1
   2d4ee:	2000      	movs	r0, #0
   2d4f0:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   2d4f4:	4e23      	ldr	r6, [pc, #140]	; (2d584 <z_add_timeout+0xe8>)
   2d4f6:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   2d4fa:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d4fc:	45b4      	cmp	ip, r6
   2d4fe:	bf08      	it	eq
   2d500:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   2d504:	f1bc 0f00 	cmp.w	ip, #0
   2d508:	d10d      	bne.n	2d526 <z_add_timeout+0x8a>
	node->prev = tail;
   2d50a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   2d50e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2d510:	6074      	str	r4, [r6, #4]
}
   2d512:	e01c      	b.n	2d54e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   2d514:	f7ff ff7c 	bl	2d410 <elapsed>
   2d518:	3601      	adds	r6, #1
   2d51a:	f145 0500 	adc.w	r5, r5, #0
   2d51e:	1836      	adds	r6, r6, r0
   2d520:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   2d524:	e7e4      	b.n	2d4f0 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   2d526:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   2d52a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   2d52e:	4293      	cmp	r3, r2
   2d530:	eb71 0e00 	sbcs.w	lr, r1, r0
   2d534:	da1a      	bge.n	2d56c <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   2d536:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   2d538:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2d53c:	eb60 0001 	sbc.w	r0, r0, r1
   2d540:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   2d544:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   2d548:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2d54a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   2d54e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d550:	42b3      	cmp	r3, r6
   2d552:	d006      	beq.n	2d562 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2d554:	429c      	cmp	r4, r3
   2d556:	d104      	bne.n	2d562 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   2d558:	f7ff ff64 	bl	2d424 <next_timeout>
   2d55c:	2100      	movs	r1, #0
   2d55e:	f7fd f989 	bl	2a874 <sys_clock_set_timeout>
	__asm__ volatile(
   2d562:	f387 8811 	msr	BASEPRI, r7
   2d566:	f3bf 8f6f 	isb	sy
		}
	}
}
   2d56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   2d56c:	1a9b      	subs	r3, r3, r2
   2d56e:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   2d572:	45ac      	cmp	ip, r5
   2d574:	e9c4 3104 	strd	r3, r1, [r4, #16]
   2d578:	d0c7      	beq.n	2d50a <z_add_timeout+0x6e>
   2d57a:	f8dc c000 	ldr.w	ip, [ip]
   2d57e:	e7c1      	b.n	2d504 <z_add_timeout+0x68>
   2d580:	20000618 	.word	0x20000618
   2d584:	20000270 	.word	0x20000270

0002d588 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   2d588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   2d58c:	f04f 0320 	mov.w	r3, #32
   2d590:	f3ef 8c11 	mrs	ip, BASEPRI
   2d594:	f383 8812 	msr	BASEPRI_MAX, r3
   2d598:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2d59c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2d650 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2d5a0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 2d654 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   2d5a4:	4f2c      	ldr	r7, [pc, #176]	; (2d658 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   2d5a6:	f8c9 0000 	str.w	r0, [r9]
   2d5aa:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   2d5ae:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d5b0:	4550      	cmp	r0, sl
   2d5b2:	bf08      	it	eq
   2d5b4:	2000      	moveq	r0, #0
   2d5b6:	2500      	movs	r5, #0
		curr_tick += dt;
   2d5b8:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   2d5bc:	f8d9 3000 	ldr.w	r3, [r9]
   2d5c0:	46e0      	mov	r8, ip
   2d5c2:	b380      	cbz	r0, 2d626 <sys_clock_announce+0x9e>
   2d5c4:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   2d5c8:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   2d5cc:	42b3      	cmp	r3, r6
   2d5ce:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   2d5d2:	da05      	bge.n	2d5e0 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   2d5d4:	1af6      	subs	r6, r6, r3
   2d5d6:	eb6c 040e 	sbc.w	r4, ip, lr
   2d5da:	e9c0 6404 	strd	r6, r4, [r0, #16]
   2d5de:	e022      	b.n	2d626 <sys_clock_announce+0x9e>
		curr_tick += dt;
   2d5e0:	18b2      	adds	r2, r6, r2
   2d5e2:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   2d5e6:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   2d5ea:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   2d5ee:	f7ff ff39 	bl	2d464 <remove_timeout>
	__asm__ volatile(
   2d5f2:	f388 8811 	msr	BASEPRI, r8
   2d5f6:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2d5fa:	6883      	ldr	r3, [r0, #8]
   2d5fc:	4798      	blx	r3
	__asm__ volatile(
   2d5fe:	f04f 0320 	mov.w	r3, #32
   2d602:	f3ef 8811 	mrs	r8, BASEPRI
   2d606:	f383 8812 	msr	BASEPRI_MAX, r3
   2d60a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   2d60e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   2d612:	f8da 0000 	ldr.w	r0, [sl]
   2d616:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d618:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   2d61a:	46c4      	mov	ip, r8
   2d61c:	f8c9 3000 	str.w	r3, [r9]
   2d620:	d1ca      	bne.n	2d5b8 <sys_clock_announce+0x30>
		curr_tick += dt;
   2d622:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   2d626:	189a      	adds	r2, r3, r2
   2d628:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   2d62c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2d62e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   2d632:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   2d636:	f7ff fef5 	bl	2d424 <next_timeout>
   2d63a:	4621      	mov	r1, r4
   2d63c:	f7fd f91a 	bl	2a874 <sys_clock_set_timeout>
	__asm__ volatile(
   2d640:	f388 8811 	msr	BASEPRI, r8
   2d644:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   2d648:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   2d64c:	f7ff bc6a 	b.w	2cf24 <z_time_slice>
   2d650:	20000270 	.word	0x20000270
   2d654:	20001468 	.word	0x20001468
   2d658:	20000618 	.word	0x20000618

0002d65c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2d65c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d65e:	f04f 0320 	mov.w	r3, #32
   2d662:	f3ef 8411 	mrs	r4, BASEPRI
   2d666:	f383 8812 	msr	BASEPRI_MAX, r3
   2d66a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   2d66e:	f7ff fecf 	bl	2d410 <elapsed>
   2d672:	4a06      	ldr	r2, [pc, #24]	; (2d68c <sys_clock_tick_get+0x30>)
   2d674:	4603      	mov	r3, r0
   2d676:	e9d2 0100 	ldrd	r0, r1, [r2]
   2d67a:	1818      	adds	r0, r3, r0
   2d67c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   2d680:	f384 8811 	msr	BASEPRI, r4
   2d684:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2d688:	bd10      	pop	{r4, pc}
   2d68a:	bf00      	nop
   2d68c:	20000618 	.word	0x20000618

0002d690 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   2d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d692:	4604      	mov	r4, r0
	__asm__ volatile(
   2d694:	f04f 0320 	mov.w	r3, #32
   2d698:	f3ef 8711 	mrs	r7, BASEPRI
   2d69c:	f383 8812 	msr	BASEPRI_MAX, r3
   2d6a0:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   2d6a4:	6802      	ldr	r2, [r0, #0]
   2d6a6:	b122      	cbz	r2, 2d6b2 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   2d6a8:	f387 8811 	msr	BASEPRI, r7
   2d6ac:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   2d6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2d6b2:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   2d6b6:	1c58      	adds	r0, r3, #1
   2d6b8:	f146 0100 	adc.w	r1, r6, #0
   2d6bc:	2802      	cmp	r0, #2
   2d6be:	f171 0100 	sbcs.w	r1, r1, #0
   2d6c2:	d327      	bcc.n	2d714 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   2d6c4:	2b01      	cmp	r3, #1
   2d6c6:	f176 0100 	sbcs.w	r1, r6, #0
   2d6ca:	bfbc      	itt	lt
   2d6cc:	2301      	movlt	r3, #1
   2d6ce:	4616      	movlt	r6, r2
   2d6d0:	1e5d      	subs	r5, r3, #1
   2d6d2:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
   2d6d6:	f001 fd9b 	bl	2f210 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2d6da:	3001      	adds	r0, #1
   2d6dc:	f141 0100 	adc.w	r1, r1, #0
   2d6e0:	1940      	adds	r0, r0, r5
   2d6e2:	eb46 0101 	adc.w	r1, r6, r1
   2d6e6:	2801      	cmp	r0, #1
   2d6e8:	f171 0100 	sbcs.w	r1, r1, #0
   2d6ec:	db3a      	blt.n	2d764 <z_timer_expiration_handler+0xd4>
   2d6ee:	f001 fd8f 	bl	2f210 <z_impl_k_uptime_ticks>
   2d6f2:	3001      	adds	r0, #1
   2d6f4:	f141 0100 	adc.w	r1, r1, #0
   2d6f8:	f06f 0201 	mvn.w	r2, #1
   2d6fc:	1940      	adds	r0, r0, r5
   2d6fe:	eb46 0301 	adc.w	r3, r6, r1
   2d702:	1a12      	subs	r2, r2, r0
   2d704:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2d708:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2d70c:	4918      	ldr	r1, [pc, #96]	; (2d770 <z_timer_expiration_handler+0xe0>)
   2d70e:	4620      	mov	r0, r4
   2d710:	f7ff fec4 	bl	2d49c <z_add_timeout>
	timer->status += 1U;
   2d714:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2d716:	3301      	adds	r3, #1
   2d718:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   2d71a:	6a23      	ldr	r3, [r4, #32]
   2d71c:	b173      	cbz	r3, 2d73c <z_timer_expiration_handler+0xac>
   2d71e:	f387 8811 	msr	BASEPRI, r7
   2d722:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   2d726:	6a23      	ldr	r3, [r4, #32]
   2d728:	4620      	mov	r0, r4
   2d72a:	4798      	blx	r3
	__asm__ volatile(
   2d72c:	f04f 0320 	mov.w	r3, #32
   2d730:	f3ef 8711 	mrs	r7, BASEPRI
   2d734:	f383 8812 	msr	BASEPRI_MAX, r3
   2d738:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2d73c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d740:	42a5      	cmp	r5, r4
   2d742:	d0b1      	beq.n	2d6a8 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   2d744:	2d00      	cmp	r5, #0
   2d746:	d0af      	beq.n	2d6a8 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   2d748:	4628      	mov	r0, r5
   2d74a:	f001 fc6b 	bl	2f024 <z_unpend_thread_no_timeout>
   2d74e:	2300      	movs	r3, #0
   2d750:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
   2d752:	f387 8811 	msr	BASEPRI, r7
   2d756:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   2d75a:	4628      	mov	r0, r5
}
   2d75c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   2d760:	f001 bc50 	b.w	2f004 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2d764:	f06f 0201 	mvn.w	r2, #1
   2d768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d76c:	e7ce      	b.n	2d70c <z_timer_expiration_handler+0x7c>
   2d76e:	bf00      	nop
   2d770:	0002d691 	.word	0x0002d691

0002d774 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   2d774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2d778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2d77c:	bf08      	it	eq
   2d77e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   2d782:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   2d786:	4605      	mov	r5, r0
   2d788:	461c      	mov	r4, r3
   2d78a:	4691      	mov	r9, r2
   2d78c:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2d78e:	d01c      	beq.n	2d7ca <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2d790:	1c53      	adds	r3, r2, #1
   2d792:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   2d796:	db09      	blt.n	2d7ac <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2d798:	2a01      	cmp	r2, #1
   2d79a:	f174 0300 	sbcs.w	r3, r4, #0
   2d79e:	bfbc      	itt	lt
   2d7a0:	2201      	movlt	r2, #1
   2d7a2:	2400      	movlt	r4, #0
   2d7a4:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   2d7a8:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   2d7ac:	4628      	mov	r0, r5
   2d7ae:	f001 fd05 	bl	2f1bc <z_abort_timeout>
	timer->period = period;
   2d7b2:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   2d7b6:	2300      	movs	r3, #0
   2d7b8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2d7ba:	464a      	mov	r2, r9
   2d7bc:	4643      	mov	r3, r8
   2d7be:	4628      	mov	r0, r5
   2d7c0:	4903      	ldr	r1, [pc, #12]	; (2d7d0 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   2d7c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2d7c6:	f7ff be69 	b.w	2d49c <z_add_timeout>
}
   2d7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d7ce:	bf00      	nop
   2d7d0:	0002d691 	.word	0x0002d691

0002d7d4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   2d7d4:	4b01      	ldr	r3, [pc, #4]	; (2d7dc <k_thread_system_pool_assign+0x8>)
   2d7d6:	6703      	str	r3, [r0, #112]	; 0x70
}
   2d7d8:	4770      	bx	lr
   2d7da:	bf00      	nop
   2d7dc:	200002a0 	.word	0x200002a0

0002d7e0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2d7e0:	b538      	push	{r3, r4, r5, lr}
   2d7e2:	4604      	mov	r4, r0
   2d7e4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2d7e6:	f001 fac2 	bl	2ed6e <k_is_in_isr>
   2d7ea:	b920      	cbnz	r0, 2d7f6 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2d7ec:	4b06      	ldr	r3, [pc, #24]	; (2d808 <z_thread_aligned_alloc+0x28>)
   2d7ee:	689b      	ldr	r3, [r3, #8]
   2d7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
   2d7f2:	b90b      	cbnz	r3, 2d7f8 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   2d7f4:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   2d7f6:	4b05      	ldr	r3, [pc, #20]	; (2d80c <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   2d7f8:	462a      	mov	r2, r5
   2d7fa:	4621      	mov	r1, r4
   2d7fc:	4618      	mov	r0, r3
}
   2d7fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2d802:	f001 bd4a 	b.w	2f29a <z_heap_aligned_alloc>
   2d806:	bf00      	nop
   2d808:	20001430 	.word	0x20001430
   2d80c:	200002a0 	.word	0x200002a0

0002d810 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2d810:	4801      	ldr	r0, [pc, #4]	; (2d818 <boot_banner+0x8>)
   2d812:	f000 b859 	b.w	2d8c8 <printk>
   2d816:	bf00      	nop
   2d818:	0002fb9a 	.word	0x0002fb9a

0002d81c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   2d81c:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2d81e:	4c06      	ldr	r4, [pc, #24]	; (2d838 <statics_init+0x1c>)
   2d820:	4d06      	ldr	r5, [pc, #24]	; (2d83c <statics_init+0x20>)
   2d822:	42ac      	cmp	r4, r5
   2d824:	d301      	bcc.n	2d82a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2d826:	2000      	movs	r0, #0
   2d828:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2d82a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2d82e:	4620      	mov	r0, r4
   2d830:	f001 fd4d 	bl	2f2ce <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2d834:	3414      	adds	r4, #20
   2d836:	e7f4      	b.n	2d822 <statics_init+0x6>
   2d838:	200002a0 	.word	0x200002a0
   2d83c:	200002b4 	.word	0x200002b4

0002d840 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   2d840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   2d842:	4b09      	ldr	r3, [pc, #36]	; (2d868 <k_sys_work_q_init+0x28>)
   2d844:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2d846:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   2d848:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   2d84a:	9300      	str	r3, [sp, #0]
   2d84c:	4907      	ldr	r1, [pc, #28]	; (2d86c <k_sys_work_q_init+0x2c>)
   2d84e:	4808      	ldr	r0, [pc, #32]	; (2d870 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2d850:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   2d854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d858:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2d85c:	f7ff f9ee 	bl	2cc3c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2d860:	4620      	mov	r0, r4
   2d862:	b004      	add	sp, #16
   2d864:	bd10      	pop	{r4, pc}
   2d866:	bf00      	nop
   2d868:	0002fbdb 	.word	0x0002fbdb
   2d86c:	20002df0 	.word	0x20002df0
   2d870:	20000620 	.word	0x20000620

0002d874 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2d874:	4770      	bx	lr

0002d876 <gpio_pin_configure_dt.constprop.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   2d876:	b4f0      	push	{r4, r5, r6, r7}
   2d878:	4603      	mov	r3, r0
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
   2d87a:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2d87c:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2d87e:	88db      	ldrh	r3, [r3, #6]
	struct gpio_driver_data *data =
   2d880:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   2d882:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2d884:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2d886:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   2d888:	bf54      	ite	pl
   2d88a:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2d88e:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2d892:	2501      	movs	r5, #1
   2d894:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2d896:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2d89a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2d89c:	bf4c      	ite	mi
   2d89e:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2d8a0:	43ac      	bicpl	r4, r5
   2d8a2:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   2d8a4:	683b      	ldr	r3, [r7, #0]
}
   2d8a6:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   2d8a8:	4718      	bx	r3

0002d8aa <gpio_pin_toggle_dt.isra.0>:
 *     gpio_pin_toggle(spec->port, spec->pin);
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
   2d8aa:	4603      	mov	r3, r0
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   2d8ac:	2101      	movs	r1, #1
   2d8ae:	791b      	ldrb	r3, [r3, #4]
{
	return gpio_pin_toggle(spec->port, spec->pin);
   2d8b0:	6800      	ldr	r0, [r0, #0]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   2d8b2:	4099      	lsls	r1, r3
	return api->port_toggle_bits(port, pins);
   2d8b4:	6883      	ldr	r3, [r0, #8]
   2d8b6:	695b      	ldr	r3, [r3, #20]
   2d8b8:	4718      	bx	r3

0002d8ba <k_msleep.constprop.0.isra.0>:
	return z_impl_k_sleep(timeout);
   2d8ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   2d8be:	2100      	movs	r1, #0
   2d8c0:	f7ff bce0 	b.w	2d284 <z_impl_k_sleep>

0002d8c4 <arch_printk_char_out>:
}
   2d8c4:	2000      	movs	r0, #0
   2d8c6:	4770      	bx	lr

0002d8c8 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   2d8c8:	b40f      	push	{r0, r1, r2, r3}
   2d8ca:	b507      	push	{r0, r1, r2, lr}
   2d8cc:	a904      	add	r1, sp, #16
   2d8ce:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2d8d2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2d8d4:	f7f8 feac 	bl	26630 <vprintk>

	va_end(ap);
}
   2d8d8:	b003      	add	sp, #12
   2d8da:	f85d eb04 	ldr.w	lr, [sp], #4
   2d8de:	b004      	add	sp, #16
   2d8e0:	4770      	bx	lr

0002d8e2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2d8e2:	4604      	mov	r4, r0
   2d8e4:	b508      	push	{r3, lr}
   2d8e6:	4608      	mov	r0, r1
   2d8e8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2d8ea:	461a      	mov	r2, r3
   2d8ec:	47a0      	blx	r4
	return z_impl_z_current_get();
   2d8ee:	f7ff fcfd 	bl	2d2ec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2d8f2:	f7fb f855 	bl	289a0 <z_impl_k_thread_abort>

0002d8f6 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2d8f6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2d8fa:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2d8fc:	0840      	lsrs	r0, r0, #1
   2d8fe:	4770      	bx	lr

0002d900 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2d900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d902:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2d904:	f7ff fff7 	bl	2d8f6 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2d908:	fab0 f080 	clz	r0, r0
   2d90c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2d910:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   2d914:	00ca      	lsls	r2, r1, #3
   2d916:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2d91a:	1d17      	adds	r7, r2, #4
{
   2d91c:	460c      	mov	r4, r1
   2d91e:	3206      	adds	r2, #6
   2d920:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2d922:	b956      	cbnz	r6, 2d93a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2d924:	2101      	movs	r1, #1
   2d926:	fa01 f000 	lsl.w	r0, r1, r0
   2d92a:	68d9      	ldr	r1, [r3, #12]
   2d92c:	4301      	orrs	r1, r0
   2d92e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2d930:	f8cc 4010 	str.w	r4, [ip, #16]
   2d934:	53dd      	strh	r5, [r3, r7]
   2d936:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2d938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2d93a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2d93c:	3104      	adds	r1, #4
   2d93e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2d940:	53d8      	strh	r0, [r3, r7]
   2d942:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2d946:	529e      	strh	r6, [r3, r2]
   2d948:	80c5      	strh	r5, [r0, #6]
   2d94a:	525d      	strh	r5, [r3, r1]
   2d94c:	e7f4      	b.n	2d938 <free_list_add+0x38>

0002d94e <free_list_remove_bidx>:
{
   2d94e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2d950:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2d954:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2d956:	4299      	cmp	r1, r3
   2d958:	f102 0104 	add.w	r1, r2, #4
   2d95c:	d10a      	bne.n	2d974 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2d95e:	2301      	movs	r3, #1
   2d960:	fa03 f202 	lsl.w	r2, r3, r2
   2d964:	68c3      	ldr	r3, [r0, #12]
   2d966:	ea23 0302 	bic.w	r3, r3, r2
   2d96a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2d96c:	2300      	movs	r3, #0
   2d96e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2d972:	bd10      	pop	{r4, pc}
   2d974:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2d976:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2d97a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2d97e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2d982:	80cb      	strh	r3, [r1, #6]
   2d984:	8082      	strh	r2, [r0, #4]
}
   2d986:	e7f4      	b.n	2d972 <free_list_remove_bidx+0x24>

0002d988 <free_list_remove>:
{
   2d988:	b508      	push	{r3, lr}
   2d98a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2d98c:	f7ff ffb3 	bl	2d8f6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2d990:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2d994:	f1c2 021f 	rsb	r2, r2, #31
   2d998:	4618      	mov	r0, r3
}
   2d99a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2d99e:	f7ff bfd6 	b.w	2d94e <free_list_remove_bidx>

0002d9a2 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2d9a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d9a6:	fab1 f581 	clz	r5, r1
   2d9aa:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2d9ae:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   2d9b2:	4603      	mov	r3, r0
	if (b->next) {
   2d9b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2d9b8:	460e      	mov	r6, r1
	if (b->next) {
   2d9ba:	b1c2      	cbz	r2, 2d9ee <alloc_chunk+0x4c>
   2d9bc:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2d9be:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2d9c2:	4618      	mov	r0, r3
   2d9c4:	4621      	mov	r1, r4
   2d9c6:	f7ff ff96 	bl	2d8f6 <chunk_size>
   2d9ca:	42b0      	cmp	r0, r6
   2d9cc:	d306      	bcc.n	2d9dc <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2d9ce:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2d9d0:	4618      	mov	r0, r3
   2d9d2:	f7ff ffbc 	bl	2d94e <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2d9d6:	4620      	mov	r0, r4
   2d9d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2d9dc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   2d9e0:	3f01      	subs	r7, #1
   2d9e2:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   2d9e4:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2d9e8:	d001      	beq.n	2d9ee <alloc_chunk+0x4c>
   2d9ea:	4282      	cmp	r2, r0
   2d9ec:	d1e7      	bne.n	2d9be <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2d9ee:	f1c5 0220 	rsb	r2, r5, #32
   2d9f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d9f6:	4094      	lsls	r4, r2
   2d9f8:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2d9fa:	4014      	ands	r4, r2
   2d9fc:	d0eb      	beq.n	2d9d6 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2d9fe:	fa94 f2a4 	rbit	r2, r4
   2da02:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2da06:	1d11      	adds	r1, r2, #4
   2da08:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2da0c:	4621      	mov	r1, r4
   2da0e:	e7df      	b.n	2d9d0 <alloc_chunk+0x2e>

0002da10 <merge_chunks>:
{
   2da10:	b538      	push	{r3, r4, r5, lr}
   2da12:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2da14:	f7ff ff6f 	bl	2d8f6 <chunk_size>
{
   2da18:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2da1a:	4604      	mov	r4, r0
   2da1c:	4611      	mov	r1, r2
   2da1e:	4618      	mov	r0, r3
   2da20:	f7ff ff69 	bl	2d8f6 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   2da24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2da28:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2da2a:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2da2c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2da2e:	4618      	mov	r0, r3
   2da30:	f7ff ff61 	bl	2d8f6 <chunk_size>
	void *cmem = &buf[c];
   2da34:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2da36:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2da3a:	bd38      	pop	{r3, r4, r5, pc}

0002da3c <split_chunks>:
{
   2da3c:	b538      	push	{r3, r4, r5, lr}
   2da3e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2da40:	f7ff ff59 	bl	2d8f6 <chunk_size>
{
   2da44:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   2da46:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2da48:	1a51      	subs	r1, r2, r1
   2da4a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   2da4e:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2da50:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2da52:	8060      	strh	r0, [r4, #2]
   2da54:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2da58:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2da5a:	8044      	strh	r4, [r0, #2]
   2da5c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2da60:	4618      	mov	r0, r3
   2da62:	4611      	mov	r1, r2
   2da64:	f7ff ff47 	bl	2d8f6 <chunk_size>
	void *cmem = &buf[c];
   2da68:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2da6a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2da6e:	bd38      	pop	{r3, r4, r5, pc}

0002da70 <free_chunk>:
{
   2da70:	b538      	push	{r3, r4, r5, lr}
   2da72:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2da74:	f7ff ff3f 	bl	2d8f6 <chunk_size>
   2da78:	460c      	mov	r4, r1
   2da7a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2da7c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2da80:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2da82:	07da      	lsls	r2, r3, #31
   2da84:	d40a      	bmi.n	2da9c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2da86:	4628      	mov	r0, r5
   2da88:	f7ff ff7e 	bl	2d988 <free_list_remove>
	return c + chunk_size(h, c);
   2da8c:	4621      	mov	r1, r4
   2da8e:	4628      	mov	r0, r5
   2da90:	f7ff ff31 	bl	2d8f6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2da94:	1822      	adds	r2, r4, r0
   2da96:	4628      	mov	r0, r5
   2da98:	f7ff ffba 	bl	2da10 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2da9c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2daa0:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2daa2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2daa6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2daa8:	07db      	lsls	r3, r3, #31
   2daaa:	d40c      	bmi.n	2dac6 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2daac:	4628      	mov	r0, r5
   2daae:	f7ff ff6b 	bl	2d988 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2dab2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2dab6:	4622      	mov	r2, r4
   2dab8:	1a61      	subs	r1, r4, r1
   2daba:	4628      	mov	r0, r5
   2dabc:	f7ff ffa8 	bl	2da10 <merge_chunks>
   2dac0:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2dac4:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2dac6:	4621      	mov	r1, r4
   2dac8:	4628      	mov	r0, r5
}
   2daca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2dace:	f7ff bf17 	b.w	2d900 <free_list_add>

0002dad2 <sys_heap_free>:
	if (mem == NULL) {
   2dad2:	b161      	cbz	r1, 2daee <sys_heap_free+0x1c>
   2dad4:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2dad6:	3904      	subs	r1, #4
   2dad8:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2dada:	f021 0307 	bic.w	r3, r1, #7
   2dade:	4403      	add	r3, r0
	free_chunk(h, c);
   2dae0:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2dae2:	885a      	ldrh	r2, [r3, #2]
   2dae4:	f022 0201 	bic.w	r2, r2, #1
   2dae8:	805a      	strh	r2, [r3, #2]
   2daea:	f7ff bfc1 	b.w	2da70 <free_chunk>
}
   2daee:	4770      	bx	lr

0002daf0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2daf0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2daf2:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2daf4:	b909      	cbnz	r1, 2dafa <sys_heap_alloc+0xa>
		return NULL;
   2daf6:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2daf8:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2dafa:	68ab      	ldr	r3, [r5, #8]
   2dafc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2db00:	d9f9      	bls.n	2daf6 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2db02:	310b      	adds	r1, #11
   2db04:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2db06:	4621      	mov	r1, r4
   2db08:	4628      	mov	r0, r5
   2db0a:	f7ff ff4a 	bl	2d9a2 <alloc_chunk>
	if (c == 0U) {
   2db0e:	4606      	mov	r6, r0
   2db10:	2800      	cmp	r0, #0
   2db12:	d0f0      	beq.n	2daf6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2db14:	4601      	mov	r1, r0
   2db16:	4628      	mov	r0, r5
   2db18:	f7ff feed 	bl	2d8f6 <chunk_size>
   2db1c:	42a0      	cmp	r0, r4
   2db1e:	d907      	bls.n	2db30 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2db20:	1932      	adds	r2, r6, r4
   2db22:	4628      	mov	r0, r5
   2db24:	f7ff ff8a 	bl	2da3c <split_chunks>
		free_list_add(h, c + chunk_sz);
   2db28:	4611      	mov	r1, r2
   2db2a:	4628      	mov	r0, r5
   2db2c:	f7ff fee8 	bl	2d900 <free_list_add>
	void *cmem = &buf[c];
   2db30:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2db34:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2db36:	8853      	ldrh	r3, [r2, #2]
   2db38:	f043 0301 	orr.w	r3, r3, #1
   2db3c:	8053      	strh	r3, [r2, #2]
   2db3e:	3004      	adds	r0, #4
	return mem;
   2db40:	e7da      	b.n	2daf8 <sys_heap_alloc+0x8>

0002db42 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2db42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2db46:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   2db4a:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   2db4e:	6806      	ldr	r6, [r0, #0]
{
   2db50:	460f      	mov	r7, r1
   2db52:	4614      	mov	r4, r2
	if (align != rew) {
   2db54:	d00c      	beq.n	2db70 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   2db56:	424b      	negs	r3, r1
   2db58:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   2db5a:	2b04      	cmp	r3, #4
   2db5c:	461a      	mov	r2, r3
   2db5e:	464f      	mov	r7, r9
   2db60:	bf28      	it	cs
   2db62:	2204      	movcs	r2, #4
	rew = align & -align;
   2db64:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2db66:	b964      	cbnz	r4, 2db82 <sys_heap_aligned_alloc+0x40>
		return NULL;
   2db68:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2db6a:	4628      	mov	r0, r5
   2db6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2db70:	2904      	cmp	r1, #4
   2db72:	d804      	bhi.n	2db7e <sys_heap_aligned_alloc+0x3c>
}
   2db74:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2db78:	4611      	mov	r1, r2
   2db7a:	f7ff bfb9 	b.w	2daf0 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   2db7e:	2204      	movs	r2, #4
   2db80:	e7f1      	b.n	2db66 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   2db82:	68b3      	ldr	r3, [r6, #8]
   2db84:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2db88:	d9ee      	bls.n	2db68 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2db8a:	f104 010b 	add.w	r1, r4, #11
   2db8e:	4439      	add	r1, r7
   2db90:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2db92:	08c9      	lsrs	r1, r1, #3
   2db94:	4630      	mov	r0, r6
   2db96:	f7ff ff04 	bl	2d9a2 <alloc_chunk>
	if (c0 == 0) {
   2db9a:	4680      	mov	r8, r0
   2db9c:	2800      	cmp	r0, #0
   2db9e:	d0e3      	beq.n	2db68 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2dba0:	f109 0504 	add.w	r5, r9, #4
   2dba4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2dba8:	1e7b      	subs	r3, r7, #1
   2dbaa:	4435      	add	r5, r6
   2dbac:	441d      	add	r5, r3
   2dbae:	427f      	negs	r7, r7
   2dbb0:	403d      	ands	r5, r7
   2dbb2:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2dbb6:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2dbb8:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2dbba:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2dbbc:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2dbbe:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2dbc2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2dbc4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2dbc8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2dbcc:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2dbd0:	d208      	bcs.n	2dbe4 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   2dbd2:	4601      	mov	r1, r0
   2dbd4:	463a      	mov	r2, r7
   2dbd6:	4630      	mov	r0, r6
   2dbd8:	f7ff ff30 	bl	2da3c <split_chunks>
		free_list_add(h, c0);
   2dbdc:	4641      	mov	r1, r8
   2dbde:	4630      	mov	r0, r6
   2dbe0:	f7ff fe8e 	bl	2d900 <free_list_add>
	return c + chunk_size(h, c);
   2dbe4:	4639      	mov	r1, r7
   2dbe6:	4630      	mov	r0, r6
   2dbe8:	f7ff fe85 	bl	2d8f6 <chunk_size>
   2dbec:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2dbee:	4284      	cmp	r4, r0
   2dbf0:	d207      	bcs.n	2dc02 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   2dbf2:	4630      	mov	r0, r6
   2dbf4:	4622      	mov	r2, r4
   2dbf6:	f7ff ff21 	bl	2da3c <split_chunks>
		free_list_add(h, c_end);
   2dbfa:	4621      	mov	r1, r4
   2dbfc:	4630      	mov	r0, r6
   2dbfe:	f7ff fe7f 	bl	2d900 <free_list_add>
	void *cmem = &buf[c];
   2dc02:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2dc06:	8873      	ldrh	r3, [r6, #2]
   2dc08:	f043 0301 	orr.w	r3, r3, #1
   2dc0c:	8073      	strh	r3, [r6, #2]
   2dc0e:	e7ac      	b.n	2db6a <sys_heap_aligned_alloc+0x28>

0002dc10 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2dc10:	3a04      	subs	r2, #4
{
   2dc12:	b4f0      	push	{r4, r5, r6, r7}
   2dc14:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2dc16:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2dc18:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2dc1a:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2dc1e:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2dc22:	1a0e      	subs	r6, r1, r0
   2dc24:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2dc26:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   2dc28:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   2dc2c:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2dc2e:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   2dc32:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   2dc34:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2dc36:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   2dc38:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2dc3c:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2dc3e:	f1c2 0220 	rsb	r2, r2, #32
   2dc42:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2dc44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   2dc48:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   2dc4c:	4294      	cmp	r4, r2
   2dc4e:	d1fb      	bne.n	2dc48 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2dc50:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2dc52:	f042 0201 	orr.w	r2, r2, #1
   2dc56:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   2dc58:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2dc5c:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2dc5e:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   2dc60:	8007      	strh	r7, [r0, #0]
   2dc62:	8065      	strh	r5, [r4, #2]
   2dc64:	1984      	adds	r4, r0, r6
   2dc66:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   2dc6a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   2dc6e:	8067      	strh	r7, [r4, #2]
   2dc70:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2dc72:	885a      	ldrh	r2, [r3, #2]
   2dc74:	f042 0201 	orr.w	r2, r2, #1
   2dc78:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   2dc7a:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   2dc7c:	f7ff be40 	b.w	2d900 <free_list_add>

0002dc80 <sys_slist_find_and_remove>:
	return list->head;
   2dc80:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2dc82:	2200      	movs	r2, #0
   2dc84:	b90b      	cbnz	r3, 2dc8a <sys_slist_find_and_remove+0xa>
   2dc86:	4618      	mov	r0, r3
   2dc88:	4770      	bx	lr
   2dc8a:	428b      	cmp	r3, r1
   2dc8c:	d110      	bne.n	2dcb0 <sys_slist_find_and_remove+0x30>
	return node->next;
   2dc8e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2dc90:	b942      	cbnz	r2, 2dca4 <sys_slist_find_and_remove+0x24>
   2dc92:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2dc94:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2dc96:	4291      	cmp	r1, r2
   2dc98:	d100      	bne.n	2dc9c <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2dc9a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2dc9c:	2300      	movs	r3, #0
   2dc9e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2dca0:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2dca2:	4770      	bx	lr
	parent->next = child;
   2dca4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2dca6:	6843      	ldr	r3, [r0, #4]
   2dca8:	4299      	cmp	r1, r3
	list->tail = node;
   2dcaa:	bf08      	it	eq
   2dcac:	6042      	streq	r2, [r0, #4]
}
   2dcae:	e7f5      	b.n	2dc9c <sys_slist_find_and_remove+0x1c>
	return node->next;
   2dcb0:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2dcb2:	681b      	ldr	r3, [r3, #0]
   2dcb4:	e7e6      	b.n	2dc84 <sys_slist_find_and_remove+0x4>

0002dcb6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2dcb6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2dcb8:	f013 0307 	ands.w	r3, r3, #7
   2dcbc:	d105      	bne.n	2dcca <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2dcbe:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2dcc0:	2b00      	cmp	r3, #0
   2dcc2:	bf0c      	ite	eq
   2dcc4:	2000      	moveq	r0, #0
   2dcc6:	2003      	movne	r0, #3
   2dcc8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2dcca:	2b02      	cmp	r3, #2
   2dccc:	d105      	bne.n	2dcda <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2dcce:	8b40      	ldrh	r0, [r0, #26]
   2dcd0:	fab0 f080 	clz	r0, r0
   2dcd4:	0940      	lsrs	r0, r0, #5
   2dcd6:	0080      	lsls	r0, r0, #2
   2dcd8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2dcda:	2b01      	cmp	r3, #1
   2dcdc:	d105      	bne.n	2dcea <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2dcde:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2dce0:	2b00      	cmp	r3, #0
   2dce2:	bf0c      	ite	eq
   2dce4:	2000      	moveq	r0, #0
   2dce6:	2005      	movne	r0, #5
   2dce8:	4770      	bx	lr
	int evt = EVT_NOP;
   2dcea:	2000      	movs	r0, #0
}
   2dcec:	4770      	bx	lr

0002dcee <validate_args>:
{
   2dcee:	b510      	push	{r4, lr}
   2dcf0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2dcf2:	b100      	cbz	r0, 2dcf6 <validate_args+0x8>
   2dcf4:	b911      	cbnz	r1, 2dcfc <validate_args+0xe>
		return -EINVAL;
   2dcf6:	f06f 0015 	mvn.w	r0, #21
}
   2dcfa:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2dcfc:	1d08      	adds	r0, r1, #4
   2dcfe:	f000 f8d6 	bl	2deae <sys_notify_validate>
	if ((rv == 0)
   2dd02:	2800      	cmp	r0, #0
   2dd04:	d1f9      	bne.n	2dcfa <validate_args+0xc>
	    && ((cli->notify.flags
   2dd06:	68a3      	ldr	r3, [r4, #8]
   2dd08:	2b03      	cmp	r3, #3
   2dd0a:	d9f6      	bls.n	2dcfa <validate_args+0xc>
   2dd0c:	e7f3      	b.n	2dcf6 <validate_args+0x8>

0002dd0e <notify_one>:
{
   2dd0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dd12:	460d      	mov	r5, r1
   2dd14:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2dd16:	4619      	mov	r1, r3
   2dd18:	1d28      	adds	r0, r5, #4
{
   2dd1a:	4690      	mov	r8, r2
   2dd1c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2dd1e:	f000 f8d7 	bl	2ded0 <sys_notify_finalize>
	if (cb) {
   2dd22:	4604      	mov	r4, r0
   2dd24:	b138      	cbz	r0, 2dd36 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2dd26:	4633      	mov	r3, r6
   2dd28:	4642      	mov	r2, r8
   2dd2a:	4629      	mov	r1, r5
   2dd2c:	4638      	mov	r0, r7
   2dd2e:	46a4      	mov	ip, r4
}
   2dd30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2dd34:	4760      	bx	ip
}
   2dd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002dd3a <transition_complete>:
{
   2dd3a:	b410      	push	{r4}
	__asm__ volatile(
   2dd3c:	f04f 0420 	mov.w	r4, #32
   2dd40:	f3ef 8211 	mrs	r2, BASEPRI
   2dd44:	f384 8812 	msr	BASEPRI_MAX, r4
   2dd48:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2dd4c:	6141      	str	r1, [r0, #20]
}
   2dd4e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   2dd50:	2101      	movs	r1, #1
   2dd52:	f7f8 bc7b 	b.w	2664c <process_event>

0002dd56 <onoff_manager_init>:
{
   2dd56:	b538      	push	{r3, r4, r5, lr}
   2dd58:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2dd5a:	4605      	mov	r5, r0
   2dd5c:	b158      	cbz	r0, 2dd76 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2dd5e:	b151      	cbz	r1, 2dd76 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2dd60:	680b      	ldr	r3, [r1, #0]
   2dd62:	b143      	cbz	r3, 2dd76 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2dd64:	684b      	ldr	r3, [r1, #4]
   2dd66:	b133      	cbz	r3, 2dd76 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2dd68:	221c      	movs	r2, #28
   2dd6a:	2100      	movs	r1, #0
   2dd6c:	f000 fae1 	bl	2e332 <memset>
   2dd70:	612c      	str	r4, [r5, #16]
	return 0;
   2dd72:	2000      	movs	r0, #0
}
   2dd74:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2dd76:	f06f 0015 	mvn.w	r0, #21
   2dd7a:	e7fb      	b.n	2dd74 <onoff_manager_init+0x1e>

0002dd7c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2dd7c:	b570      	push	{r4, r5, r6, lr}
   2dd7e:	4605      	mov	r5, r0
   2dd80:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2dd82:	f7ff ffb4 	bl	2dcee <validate_args>

	if (rv < 0) {
   2dd86:	1e04      	subs	r4, r0, #0
   2dd88:	db15      	blt.n	2ddb6 <onoff_request+0x3a>
   2dd8a:	f04f 0320 	mov.w	r3, #32
   2dd8e:	f3ef 8211 	mrs	r2, BASEPRI
   2dd92:	f383 8812 	msr	BASEPRI_MAX, r3
   2dd96:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2dd9a:	8b6b      	ldrh	r3, [r5, #26]
   2dd9c:	8b2c      	ldrh	r4, [r5, #24]
   2dd9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2dda2:	428b      	cmp	r3, r1
   2dda4:	f004 0407 	and.w	r4, r4, #7
   2dda8:	d107      	bne.n	2ddba <onoff_request+0x3e>
	__asm__ volatile(
   2ddaa:	f382 8811 	msr	BASEPRI, r2
   2ddae:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   2ddb2:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2ddb6:	4620      	mov	r0, r4
   2ddb8:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   2ddba:	2c02      	cmp	r4, #2
   2ddbc:	d10c      	bne.n	2ddd8 <onoff_request+0x5c>
		mgr->refs += 1U;
   2ddbe:	3301      	adds	r3, #1
   2ddc0:	836b      	strh	r3, [r5, #26]
   2ddc2:	f382 8811 	msr	BASEPRI, r2
   2ddc6:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   2ddca:	2300      	movs	r3, #0
   2ddcc:	4622      	mov	r2, r4
   2ddce:	4631      	mov	r1, r6
   2ddd0:	4628      	mov	r0, r5
   2ddd2:	f7ff ff9c 	bl	2dd0e <notify_one>
   2ddd6:	e7ee      	b.n	2ddb6 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   2ddd8:	2c06      	cmp	r4, #6
   2ddda:	d814      	bhi.n	2de06 <onoff_request+0x8a>
   2dddc:	e8df f004 	tbb	[pc, r4]
   2dde0:	13131304 	.word	0x13131304
   2dde4:	1a04      	.short	0x1a04
   2dde6:	04          	.byte	0x04
   2dde7:	00          	.byte	0x00
	parent->next = child;
   2dde8:	2300      	movs	r3, #0
   2ddea:	6033      	str	r3, [r6, #0]
	return list->tail;
   2ddec:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   2ddee:	b93b      	cbnz	r3, 2de00 <onoff_request+0x84>
	list->head = node;
   2ddf0:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   2ddf4:	b9ac      	cbnz	r4, 2de22 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   2ddf6:	2102      	movs	r1, #2
   2ddf8:	4628      	mov	r0, r5
   2ddfa:	f7f8 fc27 	bl	2664c <process_event>
   2ddfe:	e7da      	b.n	2ddb6 <onoff_request+0x3a>
	parent->next = child;
   2de00:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2de02:	606e      	str	r6, [r5, #4]
}
   2de04:	e7f6      	b.n	2ddf4 <onoff_request+0x78>
   2de06:	f382 8811 	msr	BASEPRI, r2
   2de0a:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   2de0e:	f06f 0404 	mvn.w	r4, #4
   2de12:	e7d0      	b.n	2ddb6 <onoff_request+0x3a>
   2de14:	f382 8811 	msr	BASEPRI, r2
   2de18:	f3bf 8f6f 	isb	sy
   2de1c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2de20:	e7c9      	b.n	2ddb6 <onoff_request+0x3a>
   2de22:	f382 8811 	msr	BASEPRI, r2
   2de26:	f3bf 8f6f 	isb	sy
		if (notify) {
   2de2a:	e7c4      	b.n	2ddb6 <onoff_request+0x3a>

0002de2c <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   2de2c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2de2e:	f04f 0320 	mov.w	r3, #32
   2de32:	f3ef 8211 	mrs	r2, BASEPRI
   2de36:	f383 8812 	msr	BASEPRI_MAX, r3
   2de3a:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2de3e:	8b04      	ldrh	r4, [r0, #24]
   2de40:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   2de44:	2c02      	cmp	r4, #2
   2de46:	d00a      	beq.n	2de5e <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   2de48:	2c01      	cmp	r4, #1
   2de4a:	bf0c      	ite	eq
   2de4c:	f06f 0004 	mvneq.w	r0, #4
   2de50:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   2de54:	f382 8811 	msr	BASEPRI, r2
   2de58:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   2de5c:	e008      	b.n	2de70 <onoff_release+0x44>
	mgr->refs -= 1U;
   2de5e:	8b43      	ldrh	r3, [r0, #26]
   2de60:	3b01      	subs	r3, #1
   2de62:	b29b      	uxth	r3, r3
   2de64:	8343      	strh	r3, [r0, #26]
	if (stop) {
   2de66:	b923      	cbnz	r3, 2de72 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   2de68:	4621      	mov	r1, r4
   2de6a:	f7f8 fbef 	bl	2664c <process_event>
	int rv = state;
   2de6e:	4620      	mov	r0, r4
}
   2de70:	bd10      	pop	{r4, pc}
	int rv = state;
   2de72:	4620      	mov	r0, r4
   2de74:	e7ee      	b.n	2de54 <onoff_release+0x28>

0002de76 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   2de76:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   2de78:	b1b0      	cbz	r0, 2dea8 <onoff_cancel+0x32>
   2de7a:	b1a9      	cbz	r1, 2dea8 <onoff_cancel+0x32>
	__asm__ volatile(
   2de7c:	f04f 0220 	mov.w	r2, #32
   2de80:	f3ef 8511 	mrs	r5, BASEPRI
   2de84:	f382 8812 	msr	BASEPRI_MAX, r2
   2de88:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2de8c:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   2de8e:	f7ff fef7 	bl	2dc80 <sys_slist_find_and_remove>
   2de92:	b130      	cbz	r0, 2dea2 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   2de94:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   2de98:	f385 8811 	msr	BASEPRI, r5
   2de9c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   2dea0:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   2dea2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2dea6:	e7f7      	b.n	2de98 <onoff_cancel+0x22>
		return -EINVAL;
   2dea8:	f06f 0015 	mvn.w	r0, #21
   2deac:	e7f8      	b.n	2dea0 <onoff_cancel+0x2a>

0002deae <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2deae:	4603      	mov	r3, r0
   2deb0:	b158      	cbz	r0, 2deca <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2deb2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2deb4:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2deb8:	2a01      	cmp	r2, #1
   2deba:	d003      	beq.n	2dec4 <sys_notify_validate+0x16>
   2debc:	2a03      	cmp	r2, #3
   2debe:	d104      	bne.n	2deca <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   2dec0:	6802      	ldr	r2, [r0, #0]
   2dec2:	b112      	cbz	r2, 2deca <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   2dec4:	2000      	movs	r0, #0
   2dec6:	6098      	str	r0, [r3, #8]
   2dec8:	4770      	bx	lr
   2deca:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   2dece:	4770      	bx	lr

0002ded0 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2ded0:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   2ded2:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   2ded4:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   2ded8:	2a03      	cmp	r2, #3
   2deda:	f04f 0200 	mov.w	r2, #0
{
   2dede:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2dee0:	bf0c      	ite	eq
   2dee2:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   2dee4:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2dee6:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2dee8:	4770      	bx	lr

0002deea <encode_uint>:
{
   2deea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2deee:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   2def0:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   2def2:	2b6f      	cmp	r3, #111	; 0x6f
{
   2def4:	4680      	mov	r8, r0
   2def6:	460f      	mov	r7, r1
   2def8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2defa:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   2defe:	d029      	beq.n	2df54 <encode_uint+0x6a>
   2df00:	d824      	bhi.n	2df4c <encode_uint+0x62>
		return 10;
   2df02:	2b58      	cmp	r3, #88	; 0x58
   2df04:	bf0c      	ite	eq
   2df06:	2610      	moveq	r6, #16
   2df08:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   2df0a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   2df0e:	4632      	mov	r2, r6
   2df10:	2300      	movs	r3, #0
   2df12:	4640      	mov	r0, r8
   2df14:	4639      	mov	r1, r7
   2df16:	f7f8 f8f3 	bl	26100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2df1a:	2a09      	cmp	r2, #9
   2df1c:	b2d4      	uxtb	r4, r2
   2df1e:	d81e      	bhi.n	2df5e <encode_uint+0x74>
   2df20:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2df22:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2df24:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   2df26:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2df2a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   2df2e:	d301      	bcc.n	2df34 <encode_uint+0x4a>
   2df30:	45d1      	cmp	r9, sl
   2df32:	d811      	bhi.n	2df58 <encode_uint+0x6e>
	if (conv->flag_hash) {
   2df34:	782b      	ldrb	r3, [r5, #0]
   2df36:	069b      	lsls	r3, r3, #26
   2df38:	d505      	bpl.n	2df46 <encode_uint+0x5c>
		if (radix == 8) {
   2df3a:	2e08      	cmp	r6, #8
   2df3c:	d115      	bne.n	2df6a <encode_uint+0x80>
			conv->altform_0 = true;
   2df3e:	78ab      	ldrb	r3, [r5, #2]
   2df40:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2df44:	70ab      	strb	r3, [r5, #2]
}
   2df46:	4648      	mov	r0, r9
   2df48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2df4c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   2df50:	2b70      	cmp	r3, #112	; 0x70
   2df52:	e7d7      	b.n	2df04 <encode_uint+0x1a>
	switch (specifier) {
   2df54:	2608      	movs	r6, #8
   2df56:	e7d8      	b.n	2df0a <encode_uint+0x20>
		value /= radix;
   2df58:	4680      	mov	r8, r0
   2df5a:	460f      	mov	r7, r1
   2df5c:	e7d7      	b.n	2df0e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2df5e:	f1bb 0f19 	cmp.w	fp, #25
   2df62:	bf94      	ite	ls
   2df64:	3437      	addls	r4, #55	; 0x37
   2df66:	3457      	addhi	r4, #87	; 0x57
   2df68:	e7db      	b.n	2df22 <encode_uint+0x38>
		} else if (radix == 16) {
   2df6a:	2e10      	cmp	r6, #16
   2df6c:	d1eb      	bne.n	2df46 <encode_uint+0x5c>
			conv->altform_0c = true;
   2df6e:	78ab      	ldrb	r3, [r5, #2]
   2df70:	f043 0310 	orr.w	r3, r3, #16
   2df74:	e7e6      	b.n	2df44 <encode_uint+0x5a>

0002df76 <outs>:
{
   2df76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2df7a:	4607      	mov	r7, r0
   2df7c:	4688      	mov	r8, r1
   2df7e:	4615      	mov	r5, r2
   2df80:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2df82:	4614      	mov	r4, r2
   2df84:	42b4      	cmp	r4, r6
   2df86:	d305      	bcc.n	2df94 <outs+0x1e>
   2df88:	b10e      	cbz	r6, 2df8e <outs+0x18>
	return (int)count;
   2df8a:	1b60      	subs	r0, r4, r5
   2df8c:	e008      	b.n	2dfa0 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2df8e:	7823      	ldrb	r3, [r4, #0]
   2df90:	2b00      	cmp	r3, #0
   2df92:	d0fa      	beq.n	2df8a <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2df94:	f814 0b01 	ldrb.w	r0, [r4], #1
   2df98:	4641      	mov	r1, r8
   2df9a:	47b8      	blx	r7
		if (rc < 0) {
   2df9c:	2800      	cmp	r0, #0
   2df9e:	daf1      	bge.n	2df84 <outs+0xe>
}
   2dfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002dfa4 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2dfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
   2dfa6:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
   2dfa8:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
   2dfaa:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
   2dfac:	1baf      	subs	r7, r5, r6
{
   2dfae:	4604      	mov	r4, r0
   2dfb0:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
   2dfb2:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
   2dfb4:	bf98      	it	ls
   2dfb6:	1aff      	subls	r7, r7, r3
   2dfb8:	eba5 0000 	sub.w	r0, r5, r0
{
   2dfbc:	4694      	mov	ip, r2
		base += buf->size;
   2dfbe:	bf98      	it	ls
   2dfc0:	18f6      	addls	r6, r6, r3
   2dfc2:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
   2dfc4:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
   2dfc6:	6823      	ldr	r3, [r4, #0]
   2dfc8:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
   2dfca:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
   2dfcc:	442b      	add	r3, r5
	size = MIN(size, free_space);
   2dfce:	bf28      	it	cs
   2dfd0:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
   2dfd2:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
   2dfd4:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
   2dfd6:	4290      	cmp	r0, r2
   2dfd8:	bf28      	it	cs
   2dfda:	4610      	movcs	r0, r2
	buf->put_head += size;
   2dfdc:	4403      	add	r3, r0
   2dfde:	6063      	str	r3, [r4, #4]

	return size;
}
   2dfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002dfe2 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
   2dfe2:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2dfe6:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
   2dfe8:	428a      	cmp	r2, r1
   2dfea:	d30c      	bcc.n	2e006 <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
   2dfec:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
   2dfee:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
   2dff0:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
   2dff2:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
   2dff6:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
   2dff8:	428a      	cmp	r2, r1
   2dffa:	d901      	bls.n	2e000 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
   2dffc:	2000      	movs	r0, #0
   2dffe:	4770      	bx	lr
		buf->put_base += buf->size;
   2e000:	4413      	add	r3, r2
   2e002:	60c3      	str	r3, [r0, #12]
   2e004:	e7fa      	b.n	2dffc <ring_buf_put_finish+0x1a>
		return -EINVAL;
   2e006:	f06f 0015 	mvn.w	r0, #21
}
   2e00a:	4770      	bx	lr

0002e00c <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   2e00c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2e010:	4680      	mov	r8, r0
   2e012:	460e      	mov	r6, r1
   2e014:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2e016:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   2e018:	462a      	mov	r2, r5
   2e01a:	a901      	add	r1, sp, #4
   2e01c:	4640      	mov	r0, r8
   2e01e:	f7ff ffc1 	bl	2dfa4 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   2e022:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   2e024:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   2e026:	4602      	mov	r2, r0
   2e028:	9801      	ldr	r0, [sp, #4]
   2e02a:	f000 f977 	bl	2e31c <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   2e02e:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   2e030:	4427      	add	r7, r4
		data += partial_size;
   2e032:	4426      	add	r6, r4
	} while (size && partial_size);
   2e034:	d001      	beq.n	2e03a <ring_buf_put+0x2e>
   2e036:	2c00      	cmp	r4, #0
   2e038:	d1ee      	bne.n	2e018 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   2e03a:	4639      	mov	r1, r7
   2e03c:	4640      	mov	r0, r8
   2e03e:	f7ff ffd0 	bl	2dfe2 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   2e042:	4638      	mov	r0, r7
   2e044:	b002      	add	sp, #8
   2e046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e04a <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2e04a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e04c:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
   2e04e:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
   2e050:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
   2e052:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
   2e054:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
   2e056:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
   2e058:	42b8      	cmp	r0, r7
{
   2e05a:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
   2e05c:	bf98      	it	ls
   2e05e:	1836      	addls	r6, r6, r0
   2e060:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
   2e064:	6823      	ldr	r3, [r4, #0]
   2e066:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
   2e06a:	bf98      	it	ls
   2e06c:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
   2e06e:	442b      	add	r3, r5
	size = MIN(size, available_size);
   2e070:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
   2e072:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
   2e076:	bf28      	it	cs
   2e078:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
   2e07a:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
   2e07c:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
   2e07e:	4290      	cmp	r0, r2
   2e080:	bf28      	it	cs
   2e082:	4610      	movcs	r0, r2
	buf->get_head += size;
   2e084:	4403      	add	r3, r0
   2e086:	6123      	str	r3, [r4, #16]

	return size;
}
   2e088:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e08a <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
   2e08a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   2e08e:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
   2e090:	428a      	cmp	r2, r1
   2e092:	d30c      	bcc.n	2e0ae <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
   2e094:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
   2e096:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
   2e09a:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
   2e09e:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
   2e0a0:	428a      	cmp	r2, r1
   2e0a2:	d901      	bls.n	2e0a8 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
   2e0a4:	2000      	movs	r0, #0
   2e0a6:	4770      	bx	lr
		buf->get_base += buf->size;
   2e0a8:	4413      	add	r3, r2
   2e0aa:	6183      	str	r3, [r0, #24]
   2e0ac:	e7fa      	b.n	2e0a4 <ring_buf_get_finish+0x1a>
		return -EINVAL;
   2e0ae:	f06f 0015 	mvn.w	r0, #21
}
   2e0b2:	4770      	bx	lr

0002e0b4 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   2e0b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2e0b8:	4680      	mov	r8, r0
   2e0ba:	460d      	mov	r5, r1
   2e0bc:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2e0be:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   2e0c0:	4632      	mov	r2, r6
   2e0c2:	a901      	add	r1, sp, #4
   2e0c4:	4640      	mov	r0, r8
   2e0c6:	f7ff ffc0 	bl	2e04a <ring_buf_get_claim>
   2e0ca:	4604      	mov	r4, r0
		if (data) {
   2e0cc:	b12d      	cbz	r5, 2e0da <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   2e0ce:	4602      	mov	r2, r0
   2e0d0:	9901      	ldr	r1, [sp, #4]
   2e0d2:	4628      	mov	r0, r5
   2e0d4:	f000 f922 	bl	2e31c <memcpy>
			data += partial_size;
   2e0d8:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   2e0da:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   2e0dc:	4427      	add	r7, r4
	} while (size && partial_size);
   2e0de:	d001      	beq.n	2e0e4 <ring_buf_get+0x30>
   2e0e0:	2c00      	cmp	r4, #0
   2e0e2:	d1ed      	bne.n	2e0c0 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   2e0e4:	4639      	mov	r1, r7
   2e0e6:	4640      	mov	r0, r8
   2e0e8:	f7ff ffcf 	bl	2e08a <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   2e0ec:	4638      	mov	r0, r7
   2e0ee:	b002      	add	sp, #8
   2e0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e0f4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2e0f4:	4770      	bx	lr

0002e0f6 <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
   2e0f6:	f010 0f70 	tst.w	r0, #112	; 0x70
   2e0fa:	d108      	bne.n	2e10e <get_ep_bm_from_addr+0x18>
	ep_idx = ep & (~USB_EP_DIR_IN);
   2e0fc:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep & USB_EP_DIR_IN) {
   2e100:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
   2e104:	bf18      	it	ne
   2e106:	3310      	addne	r3, #16
   2e108:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
   2e10a:	4098      	lsls	r0, r3
   2e10c:	4770      	bx	lr
	uint32_t ep_bm = 0;
   2e10e:	2000      	movs	r0, #0
}
   2e110:	4770      	bx	lr

0002e112 <usb_write>:
{
   2e112:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e116:	4606      	mov	r6, r0
   2e118:	460f      	mov	r7, r1
   2e11a:	4690      	mov	r8, r2
   2e11c:	4699      	mov	r9, r3
   2e11e:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   2e120:	464b      	mov	r3, r9
   2e122:	4642      	mov	r2, r8
   2e124:	4639      	mov	r1, r7
   2e126:	4630      	mov	r0, r6
   2e128:	f7fb f998 	bl	2945c <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   2e12c:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   2e130:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   2e132:	d103      	bne.n	2e13c <usb_write+0x2a>
	z_impl_k_yield();
   2e134:	f7ff f824 	bl	2d180 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   2e138:	3d01      	subs	r5, #1
   2e13a:	d1f1      	bne.n	2e120 <usb_write+0xe>
}
   2e13c:	4620      	mov	r0, r4
   2e13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002e142 <usb_get_dev_data_by_cfg>:
	return list->head;
   2e142:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2e144:	b140      	cbz	r0, 2e158 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   2e146:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   2e14a:	685b      	ldr	r3, [r3, #4]
   2e14c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2e14e:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   2e152:	d001      	beq.n	2e158 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   2e154:	6840      	ldr	r0, [r0, #4]
   2e156:	e7f5      	b.n	2e144 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   2e158:	4770      	bx	lr

0002e15a <usb_get_dev_data_by_iface>:
	return list->head;
   2e15a:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2e15c:	b150      	cbz	r0, 2e174 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   2e15e:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   2e162:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   2e164:	685b      	ldr	r3, [r3, #4]
   2e166:	789b      	ldrb	r3, [r3, #2]
   2e168:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2e16a:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   2e16e:	d001      	beq.n	2e174 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   2e170:	6840      	ldr	r0, [r0, #4]
   2e172:	e7f3      	b.n	2e15c <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   2e174:	4770      	bx	lr

0002e176 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   2e176:	b530      	push	{r4, r5, lr}
	return list->head;
   2e178:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2e17a:	b188      	cbz	r0, 2e1a0 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   2e17c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2e180:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   2e182:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2e184:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2e186:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2e188:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   2e18a:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   2e18c:	b2dc      	uxtb	r4, r3
   2e18e:	42a5      	cmp	r5, r4
   2e190:	d801      	bhi.n	2e196 <usb_get_dev_data_by_ep+0x20>
	return node->next;
   2e192:	6840      	ldr	r0, [r0, #4]
   2e194:	e7f1      	b.n	2e17a <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   2e196:	3301      	adds	r3, #1
   2e198:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   2e19c:	428c      	cmp	r4, r1
   2e19e:	d1f5      	bne.n	2e18c <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   2e1a0:	bd30      	pop	{r4, r5, pc}

0002e1a2 <usb_transfer_is_busy>:
{
   2e1a2:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   2e1a4:	f7f9 fe02 	bl	27dac <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   2e1a8:	b128      	cbz	r0, 2e1b6 <usb_transfer_is_busy+0x14>
   2e1aa:	6840      	ldr	r0, [r0, #4]
   2e1ac:	f110 0f10 	cmn.w	r0, #16
   2e1b0:	bf14      	ite	ne
   2e1b2:	2000      	movne	r0, #0
   2e1b4:	2001      	moveq	r0, #1
}
   2e1b6:	bd08      	pop	{r3, pc}

0002e1b8 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   2e1b8:	1c4b      	adds	r3, r1, #1
   2e1ba:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   2e1bc:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   2e1be:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   2e1c0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   2e1c4:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   2e1c6:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   2e1ca:	4770      	bx	lr

0002e1cc <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   2e1cc:	e950 3102 	ldrd	r3, r1, [r0, #-8]
   2e1d0:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   2e1d4:	4718      	bx	r3

0002e1d6 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2e1d6:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
   2e1d8:	2200      	movs	r2, #0
   2e1da:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
   2e1de:	4770      	bx	lr

0002e1e0 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2e1e0:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   2e1e2:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   2e1e6:	b108      	cbz	r0, 2e1ec <cdc_acm_irq_tx_ready+0xc>
   2e1e8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
   2e1ec:	4770      	bx	lr

0002e1ee <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2e1ee:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
   2e1f0:	2200      	movs	r2, #0
   2e1f2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
   2e1f6:	4770      	bx	lr

0002e1f8 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
   2e1f8:	6903      	ldr	r3, [r0, #16]
}
   2e1fa:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
   2e1fe:	4770      	bx	lr

0002e200 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2e200:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   2e202:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   2e206:	b112      	cbz	r2, 2e20e <cdc_acm_irq_is_pending+0xe>
   2e208:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
   2e20c:	b92a      	cbnz	r2, 2e21a <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   2e20e:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
   2e212:	b118      	cbz	r0, 2e21c <cdc_acm_irq_is_pending+0x1c>
   2e214:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
   2e218:	4770      	bx	lr
		return 1;
   2e21a:	2001      	movs	r0, #1
}
   2e21c:	4770      	bx	lr

0002e21e <cdc_acm_irq_update>:
}
   2e21e:	2001      	movs	r0, #1
   2e220:	4770      	bx	lr

0002e222 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2e222:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
   2e224:	e9c3 1200 	strd	r1, r2, [r3]
}
   2e228:	4770      	bx	lr

0002e22a <cdc_acm_configure>:
}
   2e22a:	2000      	movs	r0, #0
   2e22c:	4770      	bx	lr

0002e22e <cdc_acm_config_get>:
{
   2e22e:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2e230:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   2e232:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   2e236:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
   2e238:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   2e23c:	b16a      	cbz	r2, 2e25a <cdc_acm_config_get+0x2c>
   2e23e:	2a01      	cmp	r2, #1
   2e240:	bf0c      	ite	eq
   2e242:	2202      	moveq	r2, #2
   2e244:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
   2e246:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
   2e248:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
   2e24c:	1e50      	subs	r0, r2, #1
   2e24e:	2803      	cmp	r0, #3
   2e250:	d805      	bhi.n	2e25e <cdc_acm_config_get+0x30>
   2e252:	e8df f000 	tbb	[pc, r0]
   2e256:	0505      	.short	0x0505
   2e258:	0505      	.short	0x0505
	switch (dev_data->line_coding.bCharFormat) {
   2e25a:	2201      	movs	r2, #1
   2e25c:	e7f3      	b.n	2e246 <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
   2e25e:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
   2e260:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
   2e262:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2e266:	2b06      	cmp	r3, #6
   2e268:	d009      	beq.n	2e27e <cdc_acm_config_get+0x50>
   2e26a:	2b07      	cmp	r3, #7
   2e26c:	d009      	beq.n	2e282 <cdc_acm_config_get+0x54>
   2e26e:	2b05      	cmp	r3, #5
   2e270:	bf0c      	ite	eq
   2e272:	2300      	moveq	r3, #0
   2e274:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
   2e276:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
   2e278:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
   2e27a:	71c8      	strb	r0, [r1, #7]
}
   2e27c:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
   2e27e:	2301      	movs	r3, #1
   2e280:	e7f9      	b.n	2e276 <cdc_acm_config_get+0x48>
   2e282:	2302      	movs	r3, #2
   2e284:	e7f7      	b.n	2e276 <cdc_acm_config_get+0x48>

0002e286 <cdc_acm_fifo_read>:
{
   2e286:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2e288:	6904      	ldr	r4, [r0, #16]
{
   2e28a:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   2e28c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   2e290:	f7ff ff10 	bl	2e0b4 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   2e294:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   2e298:	689a      	ldr	r2, [r3, #8]
   2e29a:	6919      	ldr	r1, [r3, #16]
   2e29c:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
   2e29e:	bf04      	itt	eq
   2e2a0:	2200      	moveq	r2, #0
   2e2a2:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
   2e2a6:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   2e2aa:	4606      	mov	r6, r0
	if (dev_data->rx_paused == true) {
   2e2ac:	b19a      	cbz	r2, 2e2d6 <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
   2e2ae:	685a      	ldr	r2, [r3, #4]
   2e2b0:	6959      	ldr	r1, [r3, #20]
   2e2b2:	69db      	ldr	r3, [r3, #28]
   2e2b4:	1a52      	subs	r2, r2, r1
   2e2b6:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
   2e2b8:	2b3f      	cmp	r3, #63	; 0x3f
   2e2ba:	d90c      	bls.n	2e2d6 <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
   2e2bc:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   2e2c0:	b133      	cbz	r3, 2e2d0 <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
   2e2c2:	686b      	ldr	r3, [r5, #4]
   2e2c4:	6a1b      	ldr	r3, [r3, #32]
   2e2c6:	4622      	mov	r2, r4
   2e2c8:	7b18      	ldrb	r0, [r3, #12]
   2e2ca:	2100      	movs	r1, #0
   2e2cc:	f7fa f83c 	bl	28348 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
   2e2d0:	2300      	movs	r3, #0
   2e2d2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   2e2d6:	4630      	mov	r0, r6
   2e2d8:	bd70      	pop	{r4, r5, r6, pc}

0002e2da <cdc_acm_poll_in>:
{
   2e2da:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   2e2dc:	2201      	movs	r2, #1
   2e2de:	f7ff ffd2 	bl	2e286 <cdc_acm_fifo_read>
}
   2e2e2:	3801      	subs	r0, #1
   2e2e4:	bf18      	it	ne
   2e2e6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2e2ea:	bd08      	pop	{r3, pc}

0002e2ec <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   2e2ec:	f000 bce1 	b.w	2ecb2 <z_fatal_error>

0002e2f0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2e2f0:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   2e2f2:	6800      	ldr	r0, [r0, #0]
   2e2f4:	f000 bcdd 	b.w	2ecb2 <z_fatal_error>

0002e2f8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2e2f8:	2100      	movs	r1, #0
   2e2fa:	2001      	movs	r0, #1
   2e2fc:	f7ff bff6 	b.w	2e2ec <z_arm_fatal_error>

0002e300 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2e300:	b508      	push	{r3, lr}
	handler();
   2e302:	f7fa f91d 	bl	28540 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2e306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2e30a:	f7fa b9dd 	b.w	286c8 <z_arm_exc_exit>

0002e30e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2e30e:	4603      	mov	r3, r0
	size_t n = 0;
   2e310:	2000      	movs	r0, #0

	while (*s != '\0') {
   2e312:	5c1a      	ldrb	r2, [r3, r0]
   2e314:	b902      	cbnz	r2, 2e318 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2e316:	4770      	bx	lr
		n++;
   2e318:	3001      	adds	r0, #1
   2e31a:	e7fa      	b.n	2e312 <strlen+0x4>

0002e31c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2e31c:	b510      	push	{r4, lr}
   2e31e:	1e43      	subs	r3, r0, #1
   2e320:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2e322:	4291      	cmp	r1, r2
   2e324:	d100      	bne.n	2e328 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2e326:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2e328:	f811 4b01 	ldrb.w	r4, [r1], #1
   2e32c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2e330:	e7f7      	b.n	2e322 <memcpy+0x6>

0002e332 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2e332:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2e334:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   2e336:	4603      	mov	r3, r0
	while (n > 0) {
   2e338:	4293      	cmp	r3, r2
   2e33a:	d100      	bne.n	2e33e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2e33c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2e33e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2e342:	e7f9      	b.n	2e338 <memset+0x6>

0002e344 <_stdout_hook_default>:
}
   2e344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e348:	4770      	bx	lr

0002e34a <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   2e34a:	684b      	ldr	r3, [r1, #4]
   2e34c:	2b01      	cmp	r3, #1
   2e34e:	dd07      	ble.n	2e360 <sprintf_out+0x16>
		*(p->ptr) = c;
   2e350:	680b      	ldr	r3, [r1, #0]
   2e352:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   2e354:	680b      	ldr	r3, [r1, #0]
   2e356:	3301      	adds	r3, #1
   2e358:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   2e35a:	684b      	ldr	r3, [r1, #4]
   2e35c:	3b01      	subs	r3, #1
   2e35e:	604b      	str	r3, [r1, #4]
}
   2e360:	2000      	movs	r0, #0
   2e362:	4770      	bx	lr

0002e364 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2e364:	4603      	mov	r3, r0
	size_t n = 0;
   2e366:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2e368:	5c1a      	ldrb	r2, [r3, r0]
   2e36a:	b10a      	cbz	r2, 2e370 <strnlen+0xc>
   2e36c:	4288      	cmp	r0, r1
   2e36e:	d100      	bne.n	2e372 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2e370:	4770      	bx	lr
		n++;
   2e372:	3001      	adds	r0, #1
   2e374:	e7f8      	b.n	2e368 <strnlen+0x4>

0002e376 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2e376:	2806      	cmp	r0, #6
   2e378:	d108      	bne.n	2e38c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2e37a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2e37e:	2201      	movs	r2, #1
   2e380:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2e384:	f3bf 8f4f 	dsb	sy
        __WFE();
   2e388:	bf20      	wfe
    while (true)
   2e38a:	e7fd      	b.n	2e388 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2e38c:	4770      	bx	lr

0002e38e <pm_state_exit_post_ops>:
   2e38e:	2300      	movs	r3, #0
   2e390:	f383 8811 	msr	BASEPRI, r3
   2e394:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2e398:	4770      	bx	lr

0002e39a <ep_ctx_reset>:
{
   2e39a:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   2e39c:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   2e39e:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   2e3a2:	2300      	movs	r3, #0
   2e3a4:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   2e3a6:	7f83      	ldrb	r3, [r0, #30]
{
   2e3a8:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   2e3aa:	b113      	cbz	r3, 2e3b2 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2e3ac:	7a40      	ldrb	r0, [r0, #9]
   2e3ae:	f000 fc66 	bl	2ec7e <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   2e3b2:	2301      	movs	r3, #1
   2e3b4:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   2e3b6:	2300      	movs	r3, #0
   2e3b8:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   2e3ba:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   2e3bc:	77a3      	strb	r3, [r4, #30]
}
   2e3be:	bd10      	pop	{r4, pc}

0002e3c0 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2e3c0:	f7fe ba10 	b.w	2c7e4 <z_impl_k_mutex_lock>

0002e3c4 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2e3c4:	f7fe ba88 	b.w	2c8d8 <z_impl_k_mutex_unlock>

0002e3c8 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   2e3c8:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   2e3ca:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   2e3cc:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   2e3d0:	b921      	cbnz	r1, 2e3dc <usb_dc_ep_check_cap+0x14>
   2e3d2:	3a00      	subs	r2, #0
   2e3d4:	bf18      	it	ne
   2e3d6:	2201      	movne	r2, #1
   2e3d8:	4250      	negs	r0, r2
   2e3da:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   2e3dc:	2a08      	cmp	r2, #8
   2e3de:	d806      	bhi.n	2e3ee <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   2e3e0:	2901      	cmp	r1, #1
   2e3e2:	d107      	bne.n	2e3f4 <usb_dc_ep_check_cap+0x2c>
   2e3e4:	f083 0008 	eor.w	r0, r3, #8
   2e3e8:	f340 00c0 	sbfx	r0, r0, #3, #1
   2e3ec:	4770      	bx	lr
		return -1;
   2e3ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e3f2:	4770      	bx	lr
	return 0;
   2e3f4:	2000      	movs	r0, #0
}
   2e3f6:	4770      	bx	lr

0002e3f8 <usb_dc_ep_disable>:
{
   2e3f8:	b538      	push	{r3, r4, r5, lr}
   2e3fa:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
   2e3fc:	f7fa fbc8 	bl	28b90 <endpoint_ctx>
	if (!ep_ctx) {
   2e400:	4605      	mov	r5, r0
   2e402:	b160      	cbz	r0, 2e41e <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
   2e404:	7a03      	ldrb	r3, [r0, #8]
   2e406:	b16b      	cbz	r3, 2e424 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   2e408:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
   2e40a:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   2e40c:	f7fd ff4a 	bl	2c2a4 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   2e410:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   2e412:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   2e414:	f7ff ffc1 	bl	2e39a <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   2e418:	722c      	strb	r4, [r5, #8]
	return 0;
   2e41a:	4620      	mov	r0, r4
}
   2e41c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2e41e:	f06f 0015 	mvn.w	r0, #21
   2e422:	e7fb      	b.n	2e41c <usb_dc_ep_disable+0x24>
		return -EALREADY;
   2e424:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2e428:	e7f8      	b.n	2e41c <usb_dc_ep_disable+0x24>

0002e42a <usb_dc_ep_read>:
{
   2e42a:	b570      	push	{r4, r5, r6, lr}
   2e42c:	4604      	mov	r4, r0
   2e42e:	460e      	mov	r6, r1
   2e430:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   2e432:	f7fb f88f 	bl	29554 <usb_dc_ep_read_wait>
	if (ret) {
   2e436:	b930      	cbnz	r0, 2e446 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   2e438:	b906      	cbnz	r6, 2e43c <usb_dc_ep_read+0x12>
   2e43a:	b125      	cbz	r5, 2e446 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   2e43c:	4620      	mov	r0, r4
}
   2e43e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   2e442:	f7fb b8cf 	b.w	295e4 <usb_dc_ep_read_continue>
}
   2e446:	bd70      	pop	{r4, r5, r6, pc}

0002e448 <adc_context_on_timer_expired>:
{
   2e448:	b410      	push	{r4}
   2e44a:	4603      	mov	r3, r0
   2e44c:	3808      	subs	r0, #8
   2e44e:	f3bf 8f5b 	dmb	ish
   2e452:	e850 2f00 	ldrex	r2, [r0]
   2e456:	1c51      	adds	r1, r2, #1
   2e458:	e840 1400 	strex	r4, r1, [r0]
   2e45c:	2c00      	cmp	r4, #0
   2e45e:	d1f8      	bne.n	2e452 <adc_context_on_timer_expired+0xa>
   2e460:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2e464:	b912      	cbnz	r2, 2e46c <adc_context_on_timer_expired+0x24>
}
   2e466:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   2e468:	f7fb b940 	b.w	296ec <adc_context_start_sampling>
		ctx->status = -EBUSY;
   2e46c:	f06f 020f 	mvn.w	r2, #15
}
   2e470:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   2e472:	659a      	str	r2, [r3, #88]	; 0x58
}
   2e474:	4770      	bx	lr

0002e476 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2e476:	6903      	ldr	r3, [r0, #16]
   2e478:	b2c9      	uxtb	r1, r1
   2e47a:	220c      	movs	r2, #12
   2e47c:	fb01 3302 	mla	r3, r1, r2, r3
   2e480:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2e482:	f000 0007 	and.w	r0, r0, #7
   2e486:	4770      	bx	lr

0002e488 <set_on_state>:
	__asm__ volatile(
   2e488:	f04f 0320 	mov.w	r3, #32
   2e48c:	f3ef 8211 	mrs	r2, BASEPRI
   2e490:	f383 8812 	msr	BASEPRI_MAX, r3
   2e494:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2e498:	6803      	ldr	r3, [r0, #0]
   2e49a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2e49e:	f043 0302 	orr.w	r3, r3, #2
   2e4a2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2e4a4:	f382 8811 	msr	BASEPRI, r2
   2e4a8:	f3bf 8f6f 	isb	sy
}
   2e4ac:	4770      	bx	lr

0002e4ae <stop>:
{
   2e4ae:	b570      	push	{r4, r5, r6, lr}
   2e4b0:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   2e4b2:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   2e4b4:	f04f 0420 	mov.w	r4, #32
   2e4b8:	f3ef 8511 	mrs	r5, BASEPRI
   2e4bc:	f384 8812 	msr	BASEPRI_MAX, r4
   2e4c0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2e4c4:	260c      	movs	r6, #12
   2e4c6:	fb06 3401 	mla	r4, r6, r1, r3
   2e4ca:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2e4cc:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2e4d0:	d008      	beq.n	2e4e4 <stop+0x36>
   2e4d2:	42a2      	cmp	r2, r4
   2e4d4:	d006      	beq.n	2e4e4 <stop+0x36>
	__asm__ volatile(
   2e4d6:	f385 8811 	msr	BASEPRI, r5
   2e4da:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2e4de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2e4e2:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2e4e4:	fb06 3301 	mla	r3, r6, r1, r3
   2e4e8:	2201      	movs	r2, #1
   2e4ea:	641a      	str	r2, [r3, #64]	; 0x40
   2e4ec:	f385 8811 	msr	BASEPRI, r5
   2e4f0:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2e4f4:	6843      	ldr	r3, [r0, #4]
   2e4f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   2e4fa:	685b      	ldr	r3, [r3, #4]
   2e4fc:	4798      	blx	r3
	return 0;
   2e4fe:	2000      	movs	r0, #0
   2e500:	e7ef      	b.n	2e4e2 <stop+0x34>

0002e502 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2e502:	2280      	movs	r2, #128	; 0x80
   2e504:	f7ff bfd3 	b.w	2e4ae <stop>

0002e508 <async_start>:
{
   2e508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e50a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2e50c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2e50e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2e510:	f04f 0520 	mov.w	r5, #32
   2e514:	f3ef 8611 	mrs	r6, BASEPRI
   2e518:	f385 8812 	msr	BASEPRI_MAX, r5
   2e51c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2e520:	250c      	movs	r5, #12
   2e522:	fb05 4401 	mla	r4, r5, r1, r4
   2e526:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2e528:	f005 0c07 	and.w	ip, r5, #7
   2e52c:	f1bc 0f01 	cmp.w	ip, #1
   2e530:	d10c      	bne.n	2e54c <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2e532:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   2e534:	f386 8811 	msr	BASEPRI, r6
   2e538:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2e53c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2e540:	6843      	ldr	r3, [r0, #4]
   2e542:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   2e546:	4798      	blx	r3
	return 0;
   2e548:	2000      	movs	r0, #0
}
   2e54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2e54c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2e550:	42af      	cmp	r7, r5
   2e552:	f386 8811 	msr	BASEPRI, r6
   2e556:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2e55a:	bf0c      	ite	eq
   2e55c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2e560:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2e564:	e7f1      	b.n	2e54a <async_start+0x42>

0002e566 <api_start>:
{
   2e566:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2e568:	2480      	movs	r4, #128	; 0x80
   2e56a:	9400      	str	r4, [sp, #0]
   2e56c:	f7ff ffcc 	bl	2e508 <async_start>
}
   2e570:	b002      	add	sp, #8
   2e572:	bd10      	pop	{r4, pc}

0002e574 <onoff_started_callback>:
{
   2e574:	b410      	push	{r4}
	return &data->mgr[type];
   2e576:	6900      	ldr	r0, [r0, #16]
   2e578:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2e57a:	241c      	movs	r4, #28
   2e57c:	fb03 0004 	mla	r0, r3, r4, r0
   2e580:	2100      	movs	r1, #0
}
   2e582:	bc10      	pop	{r4}
	notify(mgr, 0);
   2e584:	4710      	bx	r2

0002e586 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2e586:	2000      	movs	r0, #0
   2e588:	f000 ba1b 	b.w	2e9c2 <nrfx_clock_start>

0002e58c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2e58c:	2000      	movs	r0, #0
   2e58e:	f000 ba54 	b.w	2ea3a <nrfx_clock_stop>

0002e592 <blocking_start_callback>:
{
   2e592:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2e594:	f7fe ba10 	b.w	2c9b8 <z_impl_k_sem_give>

0002e598 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e598:	6843      	ldr	r3, [r0, #4]
   2e59a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2e59c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2e5a0:	600b      	str	r3, [r1, #0]
}
   2e5a2:	2000      	movs	r0, #0
   2e5a4:	4770      	bx	lr

0002e5a6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e5a6:	6843      	ldr	r3, [r0, #4]
   2e5a8:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2e5aa:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2e5ae:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2e5b2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2e5b6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2e5ba:	2000      	movs	r0, #0
   2e5bc:	4770      	bx	lr

0002e5be <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e5be:	6843      	ldr	r3, [r0, #4]
   2e5c0:	685b      	ldr	r3, [r3, #4]
}
   2e5c2:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2e5c4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2e5c8:	4770      	bx	lr

0002e5ca <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e5ca:	6843      	ldr	r3, [r0, #4]
   2e5cc:	685b      	ldr	r3, [r3, #4]
}
   2e5ce:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e5d0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2e5d4:	4770      	bx	lr

0002e5d6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e5d6:	6843      	ldr	r3, [r0, #4]
   2e5d8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2e5da:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2e5de:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2e5e2:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2e5e4:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2e5e8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2e5ec:	2000      	movs	r0, #0
   2e5ee:	4770      	bx	lr

0002e5f0 <gpio_nrfx_manage_callback>:
{
   2e5f0:	b510      	push	{r4, lr}
	return port->data;
   2e5f2:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2e5f4:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2e5f6:	b1f8      	cbz	r0, 2e638 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e5f8:	4288      	cmp	r0, r1
   2e5fa:	d119      	bne.n	2e630 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   2e5fc:	689c      	ldr	r4, [r3, #8]
	return node->next;
   2e5fe:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   2e600:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2e602:	42a1      	cmp	r1, r4
   2e604:	d100      	bne.n	2e608 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2e606:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2e608:	2000      	movs	r0, #0
   2e60a:	6008      	str	r0, [r1, #0]
	if (set) {
   2e60c:	b12a      	cbz	r2, 2e61a <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   2e60e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2e610:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e612:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2e614:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e616:	b902      	cbnz	r2, 2e61a <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   2e618:	6099      	str	r1, [r3, #8]
	return 0;
   2e61a:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2e61c:	e010      	b.n	2e640 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e61e:	4281      	cmp	r1, r0
   2e620:	d106      	bne.n	2e630 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2e622:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2e624:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e626:	6898      	ldr	r0, [r3, #8]
   2e628:	4281      	cmp	r1, r0
   2e62a:	d1ed      	bne.n	2e608 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2e62c:	609c      	str	r4, [r3, #8]
}
   2e62e:	e7eb      	b.n	2e608 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   2e630:	4604      	mov	r4, r0
   2e632:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e634:	2800      	cmp	r0, #0
   2e636:	d1f2      	bne.n	2e61e <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   2e638:	2a00      	cmp	r2, #0
   2e63a:	d1e8      	bne.n	2e60e <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   2e63c:	f06f 0015 	mvn.w	r0, #21
}
   2e640:	bd10      	pop	{r4, pc}

0002e642 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   2e642:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   2e644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
   2e648:	2908      	cmp	r1, #8
   2e64a:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2e64c:	6e52      	ldr	r2, [r2, #100]	; 0x64
   2e64e:	bf28      	it	cs
   2e650:	2108      	movcs	r1, #8
   2e652:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
   2e654:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   2e656:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
   2e658:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   2e65a:	460a      	mov	r2, r1
   2e65c:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   2e65e:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   2e660:	f7ff fe5c 	bl	2e31c <memcpy>

	return length;
}
   2e664:	4620      	mov	r0, r4
   2e666:	b002      	add	sp, #8
   2e668:	bd10      	pop	{r4, pc}

0002e66a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2e66a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2e66c:	6843      	ldr	r3, [r0, #4]
   2e66e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2e670:	7a05      	ldrb	r5, [r0, #8]
   2e672:	6844      	ldr	r4, [r0, #4]
   2e674:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2e678:	42a3      	cmp	r3, r4
   2e67a:	d302      	bcc.n	2e682 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2e67c:	f06f 0001 	mvn.w	r0, #1
}
   2e680:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2e682:	795c      	ldrb	r4, [r3, #5]
   2e684:	428c      	cmp	r4, r1
   2e686:	d001      	beq.n	2e68c <pinctrl_lookup_state+0x22>
		(*state)++;
   2e688:	3308      	adds	r3, #8
   2e68a:	e7f0      	b.n	2e66e <pinctrl_lookup_state+0x4>
			return 0;
   2e68c:	2000      	movs	r0, #0
   2e68e:	e7f7      	b.n	2e680 <pinctrl_lookup_state+0x16>

0002e690 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   2e690:	6902      	ldr	r2, [r0, #16]
{
   2e692:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2e694:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2e698:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2e69c:	2000      	movs	r0, #0
   2e69e:	4770      	bx	lr

0002e6a0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2e6a0:	6843      	ldr	r3, [r0, #4]
   2e6a2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2e6a4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2e6a8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2e6ac:	4770      	bx	lr

0002e6ae <tx_start>:
{
   2e6ae:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2e6b0:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2e6b2:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2e6b4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2e6b8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e6bc:	2200      	movs	r2, #0
   2e6be:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2e6c2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2e6c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2e6ca:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2e6ce:	6862      	ldr	r2, [r4, #4]
   2e6d0:	06d2      	lsls	r2, r2, #27
   2e6d2:	d508      	bpl.n	2e6e6 <tx_start+0x38>
	return config->uarte_regs;
   2e6d4:	6842      	ldr	r2, [r0, #4]
   2e6d6:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2e6d8:	2108      	movs	r1, #8
   2e6da:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2e6de:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2e6e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e6e6:	2201      	movs	r2, #1
   2e6e8:	609a      	str	r2, [r3, #8]
}
   2e6ea:	bd10      	pop	{r4, pc}

0002e6ec <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2e6ec:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2e6ee:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2e6f0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e6f2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e6f6:	b150      	cbz	r0, 2e70e <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   2e6f8:	6992      	ldr	r2, [r2, #24]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e6fa:	2000      	movs	r0, #0
   2e6fc:	7812      	ldrb	r2, [r2, #0]
   2e6fe:	700a      	strb	r2, [r1, #0]
   2e700:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2e704:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e708:	2201      	movs	r2, #1
   2e70a:	601a      	str	r2, [r3, #0]
	return 0;
   2e70c:	4770      	bx	lr
		return -1;
   2e70e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2e712:	4770      	bx	lr

0002e714 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e714:	2a00      	cmp	r2, #0
{
   2e716:	b510      	push	{r4, lr}
   2e718:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e71a:	dd10      	ble.n	2e73e <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   2e71c:	6843      	ldr	r3, [r0, #4]
   2e71e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e720:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e724:	b150      	cbz	r0, 2e73c <uarte_nrfx_fifo_read+0x28>
	const struct uarte_nrfx_data *data = dev->data;
   2e726:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e728:	2000      	movs	r0, #0
   2e72a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
   2e72e:	6992      	ldr	r2, [r2, #24]
   2e730:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   2e734:	7812      	ldrb	r2, [r2, #0]
   2e736:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e738:	2001      	movs	r0, #1
   2e73a:	6018      	str	r0, [r3, #0]
}
   2e73c:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2e73e:	2000      	movs	r0, #0
   2e740:	e7fc      	b.n	2e73c <uarte_nrfx_fifo_read+0x28>

0002e742 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   2e742:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e744:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   2e746:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2e748:	f04f 0020 	mov.w	r0, #32
   2e74c:	f3ef 8311 	mrs	r3, BASEPRI
   2e750:	f380 8812 	msr	BASEPRI_MAX, r0
   2e754:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2e758:	68c9      	ldr	r1, [r1, #12]
   2e75a:	2000      	movs	r0, #0
   2e75c:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2e75e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2e762:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2e766:	f383 8811 	msr	BASEPRI, r3
   2e76a:	f3bf 8f6f 	isb	sy
}
   2e76e:	4770      	bx	lr

0002e770 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2e770:	6903      	ldr	r3, [r0, #16]
   2e772:	68db      	ldr	r3, [r3, #12]
   2e774:	2201      	movs	r2, #1
   2e776:	739a      	strb	r2, [r3, #14]
}
   2e778:	4770      	bx	lr

0002e77a <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   2e77a:	6903      	ldr	r3, [r0, #16]
   2e77c:	68db      	ldr	r3, [r3, #12]
   2e77e:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2e780:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2e784:	b962      	cbnz	r2, 2e7a0 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   2e786:	6842      	ldr	r2, [r0, #4]
   2e788:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e78a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2e78e:	b140      	cbz	r0, 2e7a2 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   2e790:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2e794:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2e798:	d003      	beq.n	2e7a2 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   2e79a:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2e79c:	2001      	movs	r0, #1
   2e79e:	4770      	bx	lr
   2e7a0:	2000      	movs	r0, #0
}
   2e7a2:	4770      	bx	lr

0002e7a4 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2e7a4:	6843      	ldr	r3, [r0, #4]
   2e7a6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e7a8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2e7ac:	3800      	subs	r0, #0
   2e7ae:	bf18      	it	ne
   2e7b0:	2001      	movne	r0, #1
   2e7b2:	4770      	bx	lr

0002e7b4 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   2e7b4:	6843      	ldr	r3, [r0, #4]
   2e7b6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2e7b8:	2210      	movs	r2, #16
   2e7ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2e7be:	4770      	bx	lr

0002e7c0 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2e7c0:	6843      	ldr	r3, [r0, #4]
   2e7c2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2e7c4:	2210      	movs	r2, #16
   2e7c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2e7ca:	4770      	bx	lr

0002e7cc <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   2e7cc:	6843      	ldr	r3, [r0, #4]
   2e7ce:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2e7d0:	f44f 7200 	mov.w	r2, #512	; 0x200
   2e7d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2e7d8:	4770      	bx	lr

0002e7da <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   2e7da:	6843      	ldr	r3, [r0, #4]
   2e7dc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2e7de:	f44f 7200 	mov.w	r2, #512	; 0x200
   2e7e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2e7e6:	4770      	bx	lr

0002e7e8 <uarte_nrfx_irq_is_pending>:
{
   2e7e8:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2e7ea:	6843      	ldr	r3, [r0, #4]
   2e7ec:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2e7ee:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2e7f2:	025b      	lsls	r3, r3, #9
{
   2e7f4:	4604      	mov	r4, r0
		||
   2e7f6:	d405      	bmi.n	2e804 <uarte_nrfx_irq_is_pending+0x1c>
   2e7f8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   2e7fc:	f010 0010 	ands.w	r0, r0, #16
   2e800:	d106      	bne.n	2e810 <uarte_nrfx_irq_is_pending+0x28>
}
   2e802:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2e804:	f7ff ffb9 	bl	2e77a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2e808:	2800      	cmp	r0, #0
   2e80a:	d0f5      	beq.n	2e7f8 <uarte_nrfx_irq_is_pending+0x10>
		||
   2e80c:	2001      	movs	r0, #1
   2e80e:	e7f8      	b.n	2e802 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2e810:	4620      	mov	r0, r4
   2e812:	f7ff ffc7 	bl	2e7a4 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2e816:	3800      	subs	r0, #0
   2e818:	bf18      	it	ne
   2e81a:	2001      	movne	r0, #1
   2e81c:	e7f1      	b.n	2e802 <uarte_nrfx_irq_is_pending+0x1a>

0002e81e <uarte_nrfx_irq_update>:
}
   2e81e:	2001      	movs	r0, #1
   2e820:	4770      	bx	lr

0002e822 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2e822:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   2e824:	68d8      	ldr	r0, [r3, #12]
   2e826:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   2e828:	68db      	ldr	r3, [r3, #12]
   2e82a:	605a      	str	r2, [r3, #4]
}
   2e82c:	4770      	bx	lr

0002e82e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2e82e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2e830:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e832:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e836:	b940      	cbnz	r0, 2e84a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2e838:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e83a:	079b      	lsls	r3, r3, #30
   2e83c:	d406      	bmi.n	2e84c <is_tx_ready.isra.0+0x1e>
   2e83e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2e842:	3800      	subs	r0, #0
   2e844:	bf18      	it	ne
   2e846:	2001      	movne	r0, #1
   2e848:	4770      	bx	lr
   2e84a:	2001      	movs	r0, #1
}
   2e84c:	4770      	bx	lr

0002e84e <uarte_nrfx_fifo_fill>:
{
   2e84e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   2e850:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2e852:	68f3      	ldr	r3, [r6, #12]
   2e854:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2e856:	f3bf 8f5b 	dmb	ish
   2e85a:	4294      	cmp	r4, r2
   2e85c:	bfa8      	it	ge
   2e85e:	4614      	movge	r4, r2
{
   2e860:	4605      	mov	r5, r0
   2e862:	3310      	adds	r3, #16
   2e864:	2201      	movs	r2, #1
   2e866:	e853 0f00 	ldrex	r0, [r3]
   2e86a:	2800      	cmp	r0, #0
   2e86c:	d103      	bne.n	2e876 <uarte_nrfx_fifo_fill+0x28>
   2e86e:	e843 2700 	strex	r7, r2, [r3]
   2e872:	2f00      	cmp	r7, #0
   2e874:	d1f7      	bne.n	2e866 <uarte_nrfx_fifo_fill+0x18>
   2e876:	f3bf 8f5b 	dmb	ish
   2e87a:	bf0c      	ite	eq
   2e87c:	4613      	moveq	r3, r2
   2e87e:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2e880:	d11f      	bne.n	2e8c2 <uarte_nrfx_fifo_fill+0x74>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   2e882:	68f3      	ldr	r3, [r6, #12]
   2e884:	4622      	mov	r2, r4
   2e886:	6898      	ldr	r0, [r3, #8]
   2e888:	f7ff fd48 	bl	2e31c <memcpy>
	__asm__ volatile(
   2e88c:	f04f 0320 	mov.w	r3, #32
   2e890:	f3ef 8711 	mrs	r7, BASEPRI
   2e894:	f383 8812 	msr	BASEPRI_MAX, r3
   2e898:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   2e89c:	6868      	ldr	r0, [r5, #4]
   2e89e:	f7ff ffc6 	bl	2e82e <is_tx_ready.isra.0>
   2e8a2:	68f3      	ldr	r3, [r6, #12]
   2e8a4:	b938      	cbnz	r0, 2e8b6 <uarte_nrfx_fifo_fill+0x68>
		data->int_driven->fifo_fill_lock = 0;
   2e8a6:	6118      	str	r0, [r3, #16]
		len = 0;
   2e8a8:	4604      	mov	r4, r0
	__asm__ volatile(
   2e8aa:	f387 8811 	msr	BASEPRI, r7
   2e8ae:	f3bf 8f6f 	isb	sy
}
   2e8b2:	4620      	mov	r0, r4
   2e8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   2e8b6:	6899      	ldr	r1, [r3, #8]
   2e8b8:	4622      	mov	r2, r4
   2e8ba:	4628      	mov	r0, r5
   2e8bc:	f7ff fef7 	bl	2e6ae <tx_start>
   2e8c0:	e7f3      	b.n	2e8aa <uarte_nrfx_fifo_fill+0x5c>
		return 0;
   2e8c2:	461c      	mov	r4, r3
   2e8c4:	e7f5      	b.n	2e8b2 <uarte_nrfx_fifo_fill+0x64>

0002e8c6 <uarte_nrfx_isr_int>:
{
   2e8c6:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
   2e8c8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2e8ca:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2e8cc:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2e8d0:	05c9      	lsls	r1, r1, #23
   2e8d2:	d518      	bpl.n	2e906 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e8d4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2e8d8:	b1a9      	cbz	r1, 2e906 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   2e8da:	f04f 0420 	mov.w	r4, #32
   2e8de:	f3ef 8111 	mrs	r1, BASEPRI
   2e8e2:	f384 8812 	msr	BASEPRI_MAX, r4
   2e8e6:	f3bf 8f6f 	isb	sy
   2e8ea:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2e8ee:	b134      	cbz	r4, 2e8fe <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e8f0:	2400      	movs	r4, #0
   2e8f2:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   2e8f6:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e8fa:	2401      	movs	r4, #1
   2e8fc:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   2e8fe:	f381 8811 	msr	BASEPRI, r1
   2e902:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2e906:	6852      	ldr	r2, [r2, #4]
   2e908:	06d2      	lsls	r2, r2, #27
   2e90a:	d51a      	bpl.n	2e942 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   2e90c:	f04f 0220 	mov.w	r2, #32
   2e910:	f3ef 8111 	mrs	r1, BASEPRI
   2e914:	f382 8812 	msr	BASEPRI_MAX, r2
   2e918:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e91c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2e920:	b112      	cbz	r2, 2e928 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2e922:	2200      	movs	r2, #0
   2e924:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2e928:	6902      	ldr	r2, [r0, #16]
   2e92a:	68d2      	ldr	r2, [r2, #12]
   2e92c:	b10a      	cbz	r2, 2e932 <uarte_nrfx_isr_int+0x6c>
   2e92e:	6912      	ldr	r2, [r2, #16]
   2e930:	b91a      	cbnz	r2, 2e93a <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   2e932:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2e936:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   2e93a:	f381 8811 	msr	BASEPRI, r1
   2e93e:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   2e942:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
   2e944:	68d4      	ldr	r4, [r2, #12]
   2e946:	b16c      	cbz	r4, 2e964 <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e948:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2e94c:	b161      	cbz	r1, 2e968 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
   2e94e:	2100      	movs	r1, #0
   2e950:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
   2e952:	68d4      	ldr	r4, [r2, #12]
   2e954:	7ba4      	ldrb	r4, [r4, #14]
   2e956:	b13c      	cbz	r4, 2e968 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
   2e958:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   2e95c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   2e960:	68d3      	ldr	r3, [r2, #12]
   2e962:	7399      	strb	r1, [r3, #14]
}
   2e964:	bc10      	pop	{r4}
   2e966:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e968:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2e96c:	b121      	cbz	r1, 2e978 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e96e:	2100      	movs	r1, #0
   2e970:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2e974:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2e978:	68d2      	ldr	r2, [r2, #12]
   2e97a:	6813      	ldr	r3, [r2, #0]
   2e97c:	2b00      	cmp	r3, #0
   2e97e:	d0f1      	beq.n	2e964 <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2e980:	6851      	ldr	r1, [r2, #4]
}
   2e982:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2e984:	4718      	bx	r3

0002e986 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2e986:	4770      	bx	lr

0002e988 <event_clear>:
	nrf_rtc_event_clear(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
   2e988:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2e98c:	009b      	lsls	r3, r3, #2
   2e98e:	b29b      	uxth	r3, r3
   2e990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2e994:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2e998:	2200      	movs	r2, #0
   2e99a:	601a      	str	r2, [r3, #0]
   2e99c:	681b      	ldr	r3, [r3, #0]
}
   2e99e:	4770      	bx	lr

0002e9a0 <sys_clock_cycle_get_32>:
{
   2e9a0:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2e9a2:	f7fb fdfb 	bl	2a59c <z_nrf_rtc_timer_read>
}
   2e9a6:	bd08      	pop	{r3, pc}

0002e9a8 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2e9a8:	4700      	bx	r0

0002e9aa <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2e9aa:	f000 bc33 	b.w	2f214 <z_impl_k_busy_wait>

0002e9ae <nrfx_gppi_channel_endpoints_setup>:
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2e9ae:	00c0      	lsls	r0, r0, #3
   2e9b0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   2e9b4:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
   2e9b8:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2e9bc:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
}

void nrfx_gppi_channel_endpoints_setup(uint8_t  channel, uint32_t eep, uint32_t tep)
{
    nrf_ppi_channel_endpoint_setup(NRF_PPI, (nrf_ppi_channel_t)channel, eep, tep);
}
   2e9c0:	4770      	bx	lr

0002e9c2 <nrfx_clock_start>:
{
   2e9c2:	b508      	push	{r3, lr}
    switch (domain)
   2e9c4:	b110      	cbz	r0, 2e9cc <nrfx_clock_start+0xa>
   2e9c6:	2801      	cmp	r0, #1
   2e9c8:	d02c      	beq.n	2ea24 <nrfx_clock_start+0x62>
}
   2e9ca:	bd08      	pop	{r3, pc}
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   2e9cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2e9d0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   2e9d4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc))
   2e9d8:	03c8      	lsls	r0, r1, #15
   2e9da:	d517      	bpl.n	2ea0c <nrfx_clock_start+0x4a>
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
   2e9dc:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   2e9e0:	2b01      	cmp	r3, #1
   2e9e2:	d004      	beq.n	2e9ee <nrfx_clock_start+0x2c>
   2e9e4:	b113      	cbz	r3, 2e9ec <nrfx_clock_start+0x2a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2e9e6:	2000      	movs	r0, #0
   2e9e8:	f7fc f8c4 	bl	2ab74 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   2e9ec:	2300      	movs	r3, #0
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   2e9ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2e9f2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e9f6:	2300      	movs	r3, #0
   2e9f8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   2e9fc:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   2ea00:	2302      	movs	r3, #2
   2ea02:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ea06:	2301      	movs	r3, #1
   2ea08:	6093      	str	r3, [r2, #8]
}
   2ea0a:	e7de      	b.n	2e9ca <nrfx_clock_start+0x8>
            return ((p_reg->NRF_LFCLKRUN & NRF_CLOCK_LFCLKRUN_STATUS_Msk)
   2ea0c:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   2ea10:	07d9      	lsls	r1, r3, #31
   2ea12:	d5eb      	bpl.n	2e9ec <nrfx_clock_start+0x2a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2ea14:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   2ea18:	079b      	lsls	r3, r3, #30
   2ea1a:	d4e4      	bmi.n	2e9e6 <nrfx_clock_start+0x24>
    p_reg->INTENSET = mask;
   2ea1c:	2302      	movs	r3, #2
   2ea1e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   2ea22:	e7d2      	b.n	2e9ca <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ea24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ea28:	2200      	movs	r2, #0
   2ea2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2ea2e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2ea32:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ea36:	6018      	str	r0, [r3, #0]
}
   2ea38:	e7c7      	b.n	2e9ca <nrfx_clock_start+0x8>

0002ea3a <nrfx_clock_stop>:
    clock_stop(domain);
   2ea3a:	f7fc b89b 	b.w	2ab74 <clock_stop>

0002ea3e <nrf_gpio_reconfigure>:
{
   2ea3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ea40:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ea42:	a801      	add	r0, sp, #4
{
   2ea44:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2ea48:	4616      	mov	r6, r2
   2ea4a:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ea4c:	f7fc f94a 	bl	2ace4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ea50:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
   2ea52:	f1b6 0c00 	subs.w	ip, r6, #0
   2ea56:	bf18      	it	ne
   2ea58:	f04f 0c01 	movne.w	ip, #1
   2ea5c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   2ea60:	1e0b      	subs	r3, r1, #0
   2ea62:	bf18      	it	ne
   2ea64:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   2ea66:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   2ea68:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   2ea6c:	bf14      	ite	ne
   2ea6e:	f04f 0c0c 	movne.w	ip, #12
   2ea72:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
   2ea76:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
   2ea78:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
   2ea7c:	bf14      	ite	ne
   2ea7e:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2ea82:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
   2ea86:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   2ea88:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ea8c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
   2ea90:	bf14      	ite	ne
   2ea92:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2ea96:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   2ea9a:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2ea9e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
   2eaa2:	b101      	cbz	r1, 2eaa6 <nrf_gpio_reconfigure+0x68>
   2eaa4:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos)  |
   2eaa6:	b10e      	cbz	r6, 2eaac <nrf_gpio_reconfigure+0x6e>
   2eaa8:	7836      	ldrb	r6, [r6, #0]
   2eaaa:	0076      	lsls	r6, r6, #1
   2eaac:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)   |
   2eaae:	b10d      	cbz	r5, 2eab4 <nrf_gpio_reconfigure+0x76>
   2eab0:	782d      	ldrb	r5, [r5, #0]
   2eab2:	00ad      	lsls	r5, r5, #2
   2eab4:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos)  |
   2eab6:	b10c      	cbz	r4, 2eabc <nrf_gpio_reconfigure+0x7e>
   2eab8:	7824      	ldrb	r4, [r4, #0]
   2eaba:	0224      	lsls	r4, r4, #8
   2eabc:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2eabe:	b10f      	cbz	r7, 2eac4 <nrf_gpio_reconfigure+0x86>
   2eac0:	783f      	ldrb	r7, [r7, #0]
   2eac2:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
   2eac4:	430c      	orrs	r4, r1
   2eac6:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2eac8:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2eacc:	b003      	add	sp, #12
   2eace:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ead0 <nrf_gpio_cfg_sense_set>:
{
   2ead0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2ead2:	f10d 030f 	add.w	r3, sp, #15
   2ead6:	9301      	str	r3, [sp, #4]
   2ead8:	2300      	movs	r3, #0
{
   2eada:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2eade:	9300      	str	r3, [sp, #0]
   2eae0:	461a      	mov	r2, r3
   2eae2:	4619      	mov	r1, r3
   2eae4:	f7ff ffab 	bl	2ea3e <nrf_gpio_reconfigure>
}
   2eae8:	b005      	add	sp, #20
   2eaea:	f85d fb04 	ldr.w	pc, [sp], #4

0002eaee <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2eaee:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2eaf2:	681a      	ldr	r2, [r3, #0]
   2eaf4:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2eaf6:	bf1f      	itttt	ne
   2eaf8:	2200      	movne	r2, #0
   2eafa:	601a      	strne	r2, [r3, #0]
   2eafc:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2eafe:	2001      	movne	r0, #1
   2eb00:	bf08      	it	eq
   2eb02:	2000      	moveq	r0, #0
}
   2eb04:	4770      	bx	lr

0002eb06 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   2eb06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2eb0a:	f44f 7260 	mov.w	r2, #896	; 0x380
   2eb0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2eb12:	4770      	bx	lr

0002eb14 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   2eb14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2eb18:	f44f 7260 	mov.w	r2, #896	; 0x380
   2eb1c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2eb20:	4770      	bx	lr

0002eb22 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   2eb22:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   2eb24:	f7fc fc92 	bl	2b44c <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   2eb28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   2eb2c:	f7fc b8a6 	b.w	2ac7c <nrfx_clock_irq_handler>

0002eb30 <nrfx_usbd_consumer>:
{
   2eb30:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   2eb32:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   2eb34:	429c      	cmp	r4, r3
   2eb36:	d209      	bcs.n	2eb4c <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
   2eb38:	2500      	movs	r5, #0
   2eb3a:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   2eb3c:	6809      	ldr	r1, [r1, #0]
   2eb3e:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   2eb40:	429a      	cmp	r2, r3
   2eb42:	d10c      	bne.n	2eb5e <nrfx_usbd_consumer+0x2e>
   2eb44:	1e20      	subs	r0, r4, #0
   2eb46:	bf18      	it	ne
   2eb48:	2001      	movne	r0, #1
}
   2eb4a:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
   2eb4c:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   2eb4e:	680d      	ldr	r5, [r1, #0]
   2eb50:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
   2eb52:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
   2eb54:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   2eb56:	4418      	add	r0, r3
        p_transfer->size = size;
   2eb58:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   2eb5a:	6008      	str	r0, [r1, #0]
   2eb5c:	e7f0      	b.n	2eb40 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   2eb5e:	2000      	movs	r0, #0
   2eb60:	e7f3      	b.n	2eb4a <nrfx_usbd_consumer+0x1a>

0002eb62 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
   2eb62:	684b      	ldr	r3, [r1, #4]
   2eb64:	429a      	cmp	r2, r3
   2eb66:	bf28      	it	cs
   2eb68:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
   2eb6a:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
   2eb6c:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
   2eb70:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2eb72:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   2eb74:	1a80      	subs	r0, r0, r2
   2eb76:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2eb78:	4413      	add	r3, r2
}
   2eb7a:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   2eb7c:	600b      	str	r3, [r1, #0]
}
   2eb7e:	bf18      	it	ne
   2eb80:	2001      	movne	r0, #1
   2eb82:	4770      	bx	lr

0002eb84 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
   2eb84:	684b      	ldr	r3, [r1, #4]
   2eb86:	429a      	cmp	r2, r3
   2eb88:	bf28      	it	cs
   2eb8a:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2eb8c:	b162      	cbz	r2, 2eba8 <nrfx_usbd_feeder_ram_zlp+0x24>
   2eb8e:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
   2eb90:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
   2eb94:	684b      	ldr	r3, [r1, #4]
   2eb96:	1a9b      	subs	r3, r3, r2
   2eb98:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2eb9a:	680b      	ldr	r3, [r1, #0]
}
   2eb9c:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
   2eb9e:	4413      	add	r3, r2
   2eba0:	600b      	str	r3, [r1, #0]
}
   2eba2:	bf18      	it	ne
   2eba4:	2001      	movne	r0, #1
   2eba6:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2eba8:	4613      	mov	r3, r2
   2ebaa:	e7f1      	b.n	2eb90 <nrfx_usbd_feeder_ram_zlp+0xc>

0002ebac <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   2ebac:	43c3      	mvns	r3, r0
   2ebae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   2ebb2:	f000 000f 	and.w	r0, r0, #15
}
   2ebb6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   2ebba:	4770      	bx	lr

0002ebbc <ev_started_handler>:
}
   2ebbc:	4770      	bx	lr

0002ebbe <nrf_usbd_epin_dma_handler>:
{
   2ebbe:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   2ebc0:	f7fc fdb8 	bl	2b734 <usbd_dma_pending_clear>
{
   2ebc4:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2ebc6:	f7fc fcab 	bl	2b520 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2ebca:	7b83      	ldrb	r3, [r0, #14]
   2ebcc:	2b03      	cmp	r3, #3
   2ebce:	d10a      	bne.n	2ebe6 <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2ebd0:	4608      	mov	r0, r1
   2ebd2:	f7ff ffeb 	bl	2ebac <ep2bit>
   2ebd6:	2301      	movs	r3, #1
   2ebd8:	fa03 f000 	lsl.w	r0, r3, r0
   2ebdc:	43c0      	mvns	r0, r0
}
   2ebde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2ebe2:	f7fc bd97 	b.w	2b714 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2ebe6:	6803      	ldr	r3, [r0, #0]
   2ebe8:	2b00      	cmp	r3, #0
   2ebea:	d0f1      	beq.n	2ebd0 <nrf_usbd_epin_dma_handler+0x12>
}
   2ebec:	bd08      	pop	{r3, pc}

0002ebee <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   2ebee:	2087      	movs	r0, #135	; 0x87
   2ebf0:	f7ff bfe5 	b.w	2ebbe <nrf_usbd_epin_dma_handler>

0002ebf4 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   2ebf4:	2086      	movs	r0, #134	; 0x86
   2ebf6:	f7ff bfe2 	b.w	2ebbe <nrf_usbd_epin_dma_handler>

0002ebfa <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   2ebfa:	2085      	movs	r0, #133	; 0x85
   2ebfc:	f7ff bfdf 	b.w	2ebbe <nrf_usbd_epin_dma_handler>

0002ec00 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   2ec00:	2084      	movs	r0, #132	; 0x84
   2ec02:	f7ff bfdc 	b.w	2ebbe <nrf_usbd_epin_dma_handler>

0002ec06 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   2ec06:	2083      	movs	r0, #131	; 0x83
   2ec08:	f7ff bfd9 	b.w	2ebbe <nrf_usbd_epin_dma_handler>

0002ec0c <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   2ec0c:	2082      	movs	r0, #130	; 0x82
   2ec0e:	f7ff bfd6 	b.w	2ebbe <nrf_usbd_epin_dma_handler>

0002ec12 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   2ec12:	2081      	movs	r0, #129	; 0x81
   2ec14:	f7ff bfd3 	b.w	2ebbe <nrf_usbd_epin_dma_handler>

0002ec18 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   2ec18:	f7fc bd9e 	b.w	2b758 <nrf_usbd_ep0in_dma_handler>

0002ec1c <nrfx_usbd_ep_max_packet_size_set>:
{
   2ec1c:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2ec1e:	f7fc fc7f 	bl	2b520 <ep_state_access>
    p_state->max_packet_size = size;
   2ec22:	8181      	strh	r1, [r0, #12]
}
   2ec24:	bd08      	pop	{r3, pc}

0002ec26 <nrfx_usbd_ep_status_get>:
{
   2ec26:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   2ec28:	f7fc fc7a 	bl	2b520 <ep_state_access>
	__asm__ volatile(
   2ec2c:	f04f 0220 	mov.w	r2, #32
   2ec30:	f3ef 8311 	mrs	r3, BASEPRI
   2ec34:	f382 8812 	msr	BASEPRI_MAX, r2
   2ec38:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   2ec3c:	6882      	ldr	r2, [r0, #8]
   2ec3e:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2ec40:	6802      	ldr	r2, [r0, #0]
   2ec42:	b92a      	cbnz	r2, 2ec50 <nrfx_usbd_ep_status_get+0x2a>
   2ec44:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   2ec46:	f383 8811 	msr	BASEPRI, r3
   2ec4a:	f3bf 8f6f 	isb	sy
}
   2ec4e:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2ec50:	2004      	movs	r0, #4
   2ec52:	e7f8      	b.n	2ec46 <nrfx_usbd_ep_status_get+0x20>

0002ec54 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   2ec54:	2007      	movs	r0, #7
   2ec56:	f7fd b8eb 	b.w	2be30 <nrf_usbd_epout_dma_handler>

0002ec5a <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   2ec5a:	2006      	movs	r0, #6
   2ec5c:	f7fd b8e8 	b.w	2be30 <nrf_usbd_epout_dma_handler>

0002ec60 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   2ec60:	2005      	movs	r0, #5
   2ec62:	f7fd b8e5 	b.w	2be30 <nrf_usbd_epout_dma_handler>

0002ec66 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   2ec66:	2004      	movs	r0, #4
   2ec68:	f7fd b8e2 	b.w	2be30 <nrf_usbd_epout_dma_handler>

0002ec6c <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   2ec6c:	2003      	movs	r0, #3
   2ec6e:	f7fd b8df 	b.w	2be30 <nrf_usbd_epout_dma_handler>

0002ec72 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   2ec72:	2002      	movs	r0, #2
   2ec74:	f7fd b8dc 	b.w	2be30 <nrf_usbd_epout_dma_handler>

0002ec78 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   2ec78:	2001      	movs	r0, #1
   2ec7a:	f7fd b8d9 	b.w	2be30 <nrf_usbd_epout_dma_handler>

0002ec7e <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   2ec7e:	f7fd b9cd 	b.w	2c01c <usbd_ep_abort>

0002ec82 <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		z_object_init(dev);
	}
}
   2ec82:	4770      	bx	lr

0002ec84 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2ec84:	b140      	cbz	r0, 2ec98 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2ec86:	68c3      	ldr	r3, [r0, #12]
   2ec88:	7858      	ldrb	r0, [r3, #1]
   2ec8a:	f010 0001 	ands.w	r0, r0, #1
   2ec8e:	bf1e      	ittt	ne
   2ec90:	7818      	ldrbne	r0, [r3, #0]
   2ec92:	fab0 f080 	clzne	r0, r0
   2ec96:	0940      	lsrne	r0, r0, #5
}
   2ec98:	4770      	bx	lr

0002ec9a <arch_system_halt>:
	__asm__ volatile(
   2ec9a:	f04f 0220 	mov.w	r2, #32
   2ec9e:	f3ef 8311 	mrs	r3, BASEPRI
   2eca2:	f382 8812 	msr	BASEPRI_MAX, r2
   2eca6:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   2ecaa:	e7fe      	b.n	2ecaa <arch_system_halt+0x10>

0002ecac <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   2ecac:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   2ecae:	f7ff fff4 	bl	2ec9a <arch_system_halt>

0002ecb2 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2ecb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ecb4:	4605      	mov	r5, r0
   2ecb6:	460e      	mov	r6, r1
   2ecb8:	f04f 0320 	mov.w	r3, #32
   2ecbc:	f3ef 8711 	mrs	r7, BASEPRI
   2ecc0:	f383 8812 	msr	BASEPRI_MAX, r3
   2ecc4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2ecc8:	f7fe fb10 	bl	2d2ec <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   2eccc:	4631      	mov	r1, r6
   2ecce:	4604      	mov	r4, r0
   2ecd0:	4628      	mov	r0, r5
   2ecd2:	f7ff ffeb 	bl	2ecac <k_sys_fatal_error_handler>
	__asm__ volatile(
   2ecd6:	f387 8811 	msr	BASEPRI, r7
   2ecda:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2ecde:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2ece0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2ece4:	f7f9 be5c 	b.w	289a0 <z_impl_k_thread_abort>

0002ece8 <z_early_memset>:
	(void) memset(dst, c, n);
   2ece8:	f7ff bb23 	b.w	2e332 <memset>

0002ecec <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2ecec:	f7ff bb16 	b.w	2e31c <memcpy>

0002ecf0 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2ecf0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   2ecf4:	4313      	orrs	r3, r2
   2ecf6:	f013 0303 	ands.w	r3, r3, #3
   2ecfa:	d10c      	bne.n	2ed16 <create_free_list+0x26>
	slab->free_list = NULL;
   2ecfc:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2ecfe:	6881      	ldr	r1, [r0, #8]
   2ed00:	4299      	cmp	r1, r3
   2ed02:	d801      	bhi.n	2ed08 <create_free_list+0x18>
	return 0;
   2ed04:	2000      	movs	r0, #0
   2ed06:	4770      	bx	lr
		*(char **)p = slab->free_list;
   2ed08:	6941      	ldr	r1, [r0, #20]
   2ed0a:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2ed0c:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   2ed0e:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2ed10:	3301      	adds	r3, #1
		p += slab->block_size;
   2ed12:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2ed14:	e7f3      	b.n	2ecfe <create_free_list+0xe>
		return -EINVAL;
   2ed16:	f06f 0015 	mvn.w	r0, #21
}
   2ed1a:	4770      	bx	lr

0002ed1c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2ed1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ed1e:	4604      	mov	r4, r0
   2ed20:	460d      	mov	r5, r1
	__asm__ volatile(
   2ed22:	f04f 0320 	mov.w	r3, #32
   2ed26:	f3ef 8611 	mrs	r6, BASEPRI
   2ed2a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ed2e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2ed32:	6947      	ldr	r7, [r0, #20]
   2ed34:	b977      	cbnz	r7, 2ed54 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2ed36:	f000 f9c4 	bl	2f0c2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2ed3a:	b158      	cbz	r0, 2ed54 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2ed3c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2ed3e:	6142      	str	r2, [r0, #20]
   2ed40:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
   2ed42:	f000 f95f 	bl	2f004 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2ed46:	4631      	mov	r1, r6
   2ed48:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2ed4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2ed50:	f7fe b97c 	b.w	2d04c <z_reschedule>
	**(char ***) mem = slab->free_list;
   2ed54:	682b      	ldr	r3, [r5, #0]
   2ed56:	6962      	ldr	r2, [r4, #20]
   2ed58:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2ed5a:	682b      	ldr	r3, [r5, #0]
   2ed5c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2ed5e:	69a3      	ldr	r3, [r4, #24]
   2ed60:	3b01      	subs	r3, #1
   2ed62:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2ed64:	f386 8811 	msr	BASEPRI, r6
   2ed68:	f3bf 8f6f 	isb	sy
}
   2ed6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ed6e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2ed6e:	f3ef 8005 	mrs	r0, IPSR
}
   2ed72:	3800      	subs	r0, #0
   2ed74:	bf18      	it	ne
   2ed76:	2001      	movne	r0, #1
   2ed78:	4770      	bx	lr

0002ed7a <z_impl_k_thread_name_set>:
}
   2ed7a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2ed7e:	4770      	bx	lr

0002ed80 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2ed80:	f7fe b976 	b.w	2d070 <z_sched_start>

0002ed84 <z_pm_save_idle_exit>:
{
   2ed84:	b508      	push	{r3, lr}
	pm_system_resume();
   2ed86:	f7f8 f951 	bl	2702c <pm_system_resume>
}
   2ed8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2ed8e:	f7ff bdfa 	b.w	2e986 <sys_clock_idle_exit>

0002ed92 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2ed92:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2ed96:	428b      	cmp	r3, r1
   2ed98:	d001      	beq.n	2ed9e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2ed9a:	f7fe b911 	b.w	2cfc0 <z_set_prio>
}
   2ed9e:	2000      	movs	r0, #0
   2eda0:	4770      	bx	lr

0002eda2 <z_impl_k_mutex_init>:
{
   2eda2:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2eda4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2eda6:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
   2edaa:	e9c3 3300 	strd	r3, r3, [r3]
}
   2edae:	4770      	bx	lr

0002edb0 <queue_insert>:
{
   2edb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2edb4:	4699      	mov	r9, r3
   2edb6:	4604      	mov	r4, r0
   2edb8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2edbc:	460d      	mov	r5, r1
   2edbe:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2edc0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2edc4:	f04f 0220 	mov.w	r2, #32
   2edc8:	f3ef 8711 	mrs	r7, BASEPRI
   2edcc:	f382 8812 	msr	BASEPRI_MAX, r2
   2edd0:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2edd4:	b103      	cbz	r3, 2edd8 <queue_insert+0x28>
	return list->tail;
   2edd6:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2edd8:	4630      	mov	r0, r6
   2edda:	f000 f972 	bl	2f0c2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2edde:	b158      	cbz	r0, 2edf8 <queue_insert+0x48>
   2ede0:	2300      	movs	r3, #0
   2ede2:	6783      	str	r3, [r0, #120]	; 0x78
   2ede4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2ede8:	f000 f90c 	bl	2f004 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2edec:	4630      	mov	r0, r6
   2edee:	4639      	mov	r1, r7
   2edf0:	f7fe f92c 	bl	2d04c <z_reschedule>
		return 0;
   2edf4:	2000      	movs	r0, #0
   2edf6:	e00c      	b.n	2ee12 <queue_insert+0x62>
	if (alloc) {
   2edf8:	f1b9 0f00 	cmp.w	r9, #0
   2edfc:	d01c      	beq.n	2ee38 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   2edfe:	2108      	movs	r1, #8
   2ee00:	f7fe fcee 	bl	2d7e0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2ee04:	b938      	cbnz	r0, 2ee16 <queue_insert+0x66>
	__asm__ volatile(
   2ee06:	f387 8811 	msr	BASEPRI, r7
   2ee0a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2ee0e:	f06f 000b 	mvn.w	r0, #11
}
   2ee12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2ee16:	2201      	movs	r2, #1
		anode->data = data;
   2ee18:	f8c0 8004 	str.w	r8, [r0, #4]
   2ee1c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ee1e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ee20:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2ee24:	b965      	cbnz	r5, 2ee40 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ee26:	6822      	ldr	r2, [r4, #0]
   2ee28:	430a      	orrs	r2, r1
   2ee2a:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ee2c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2ee2e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2ee30:	2a00      	cmp	r2, #0
   2ee32:	d1db      	bne.n	2edec <queue_insert+0x3c>
	list->tail = node;
   2ee34:	6060      	str	r0, [r4, #4]
}
   2ee36:	e7d9      	b.n	2edec <queue_insert+0x3c>
	node->next_and_flags = flags;
   2ee38:	f8c8 9000 	str.w	r9, [r8]
}
   2ee3c:	4640      	mov	r0, r8
   2ee3e:	e7ee      	b.n	2ee1e <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2ee40:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2ee42:	2a03      	cmp	r2, #3
   2ee44:	d80b      	bhi.n	2ee5e <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ee46:	6001      	str	r1, [r0, #0]
	return list->tail;
   2ee48:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2ee4a:	b911      	cbnz	r1, 2ee52 <queue_insert+0xa2>
	list->head = node;
   2ee4c:	e9c4 0000 	strd	r0, r0, [r4]
}
   2ee50:	e7cc      	b.n	2edec <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ee52:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ee54:	f002 0203 	and.w	r2, r2, #3
   2ee58:	4302      	orrs	r2, r0
   2ee5a:	600a      	str	r2, [r1, #0]
   2ee5c:	e7ea      	b.n	2ee34 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2ee5e:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ee62:	430a      	orrs	r2, r1
   2ee64:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ee66:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2ee68:	f002 0203 	and.w	r2, r2, #3
   2ee6c:	ea40 0302 	orr.w	r3, r0, r2
   2ee70:	602b      	str	r3, [r5, #0]
}
   2ee72:	e7bb      	b.n	2edec <queue_insert+0x3c>

0002ee74 <z_queue_node_peek>:
{
   2ee74:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2ee76:	4604      	mov	r4, r0
   2ee78:	b130      	cbz	r0, 2ee88 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2ee7a:	6802      	ldr	r2, [r0, #0]
   2ee7c:	0793      	lsls	r3, r2, #30
   2ee7e:	d003      	beq.n	2ee88 <z_queue_node_peek+0x14>
		ret = anode->data;
   2ee80:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2ee82:	b109      	cbz	r1, 2ee88 <z_queue_node_peek+0x14>
			k_free(anode);
   2ee84:	f000 fa1c 	bl	2f2c0 <k_free>
}
   2ee88:	4620      	mov	r0, r4
   2ee8a:	bd10      	pop	{r4, pc}

0002ee8c <k_queue_append>:
{
   2ee8c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2ee8e:	2301      	movs	r3, #1
   2ee90:	9300      	str	r3, [sp, #0]
   2ee92:	2300      	movs	r3, #0
{
   2ee94:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2ee96:	4619      	mov	r1, r3
   2ee98:	f7ff ff8a 	bl	2edb0 <queue_insert>
}
   2ee9c:	b003      	add	sp, #12
   2ee9e:	f85d fb04 	ldr.w	pc, [sp], #4

0002eea2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2eea2:	b13a      	cbz	r2, 2eeb4 <z_impl_k_sem_init+0x12>
   2eea4:	428a      	cmp	r2, r1
   2eea6:	d305      	bcc.n	2eeb4 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   2eea8:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2eeac:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   2eeb0:	2000      	movs	r0, #0
   2eeb2:	4770      	bx	lr
		return -EINVAL;
   2eeb4:	f06f 0015 	mvn.w	r0, #21
}
   2eeb8:	4770      	bx	lr

0002eeba <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2eeba:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2eebc:	2301      	movs	r3, #1
   2eebe:	408b      	lsls	r3, r1
   2eec0:	ea22 0303 	bic.w	r3, r2, r3
   2eec4:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2eec6:	fa22 f001 	lsr.w	r0, r2, r1
}
   2eeca:	f000 0001 	and.w	r0, r0, #1
   2eece:	4770      	bx	lr

0002eed0 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2eed0:	b120      	cbz	r0, 2eedc <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2eed2:	2200      	movs	r2, #0
   2eed4:	4611      	mov	r1, r2
   2eed6:	3088      	adds	r0, #136	; 0x88
   2eed8:	f000 b94d 	b.w	2f176 <z_sched_wake>
}
   2eedc:	4770      	bx	lr

0002eede <work_timeout>:
{
   2eede:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2eee0:	4604      	mov	r4, r0
	__asm__ volatile(
   2eee2:	f04f 0320 	mov.w	r3, #32
   2eee6:	f3ef 8511 	mrs	r5, BASEPRI
   2eeea:	f383 8812 	msr	BASEPRI_MAX, r3
   2eeee:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2eef2:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2eef4:	f1a0 0610 	sub.w	r6, r0, #16
   2eef8:	2103      	movs	r1, #3
   2eefa:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2eefc:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2eefe:	f7ff ffdc 	bl	2eeba <flag_test_and_clear>
   2ef02:	b128      	cbz	r0, 2ef10 <work_timeout+0x32>
		queue = dw->queue;
   2ef04:	69a3      	ldr	r3, [r4, #24]
   2ef06:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2ef08:	a901      	add	r1, sp, #4
   2ef0a:	4630      	mov	r0, r6
   2ef0c:	f7fd fe3c 	bl	2cb88 <submit_to_queue_locked>
	__asm__ volatile(
   2ef10:	f385 8811 	msr	BASEPRI, r5
   2ef14:	f3bf 8f6f 	isb	sy
}
   2ef18:	b002      	add	sp, #8
   2ef1a:	bd70      	pop	{r4, r5, r6, pc}

0002ef1c <k_work_init>:
{
   2ef1c:	b538      	push	{r3, r4, r5, lr}
   2ef1e:	4604      	mov	r4, r0
   2ef20:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2ef22:	2210      	movs	r2, #16
   2ef24:	2100      	movs	r1, #0
   2ef26:	f7ff fa04 	bl	2e332 <memset>
   2ef2a:	6065      	str	r5, [r4, #4]
}
   2ef2c:	bd38      	pop	{r3, r4, r5, pc}

0002ef2e <z_work_submit_to_queue>:
{
   2ef2e:	b513      	push	{r0, r1, r4, lr}
   2ef30:	9001      	str	r0, [sp, #4]
   2ef32:	4608      	mov	r0, r1
	__asm__ volatile(
   2ef34:	f04f 0320 	mov.w	r3, #32
   2ef38:	f3ef 8411 	mrs	r4, BASEPRI
   2ef3c:	f383 8812 	msr	BASEPRI_MAX, r3
   2ef40:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2ef44:	a901      	add	r1, sp, #4
   2ef46:	f7fd fe1f 	bl	2cb88 <submit_to_queue_locked>
	__asm__ volatile(
   2ef4a:	f384 8811 	msr	BASEPRI, r4
   2ef4e:	f3bf 8f6f 	isb	sy
}
   2ef52:	b002      	add	sp, #8
   2ef54:	bd10      	pop	{r4, pc}

0002ef56 <k_work_submit_to_queue>:
{
   2ef56:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2ef58:	f7ff ffe9 	bl	2ef2e <z_work_submit_to_queue>
	if (ret > 0) {
   2ef5c:	1e04      	subs	r4, r0, #0
   2ef5e:	dd09      	ble.n	2ef74 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2ef60:	f04f 0320 	mov.w	r3, #32
   2ef64:	f3ef 8011 	mrs	r0, BASEPRI
   2ef68:	f383 8812 	msr	BASEPRI_MAX, r3
   2ef6c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ef70:	f000 f8db 	bl	2f12a <z_reschedule_irqlock>
}
   2ef74:	4620      	mov	r0, r4
   2ef76:	bd10      	pop	{r4, pc}

0002ef78 <k_work_init_delayable>:
{
   2ef78:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2ef7a:	2230      	movs	r2, #48	; 0x30
{
   2ef7c:	4604      	mov	r4, r0
   2ef7e:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2ef80:	2100      	movs	r1, #0
   2ef82:	f7ff f9d6 	bl	2e332 <memset>
   2ef86:	f44f 7380 	mov.w	r3, #256	; 0x100
   2ef8a:	6065      	str	r5, [r4, #4]
   2ef8c:	60e3      	str	r3, [r4, #12]
}
   2ef8e:	bd38      	pop	{r3, r4, r5, pc}

0002ef90 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2ef90:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2ef94:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2ef96:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ef98:	2300      	movs	r3, #0
	node->prev = NULL;
   2ef9a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   2ef9e:	4770      	bx	lr

0002efa0 <unpend_thread_no_timeout>:
{
   2efa0:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2efa2:	f7ff fff5 	bl	2ef90 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2efa6:	7b43      	ldrb	r3, [r0, #13]
   2efa8:	f023 0302 	bic.w	r3, r3, #2
   2efac:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2efae:	2300      	movs	r3, #0
   2efb0:	6083      	str	r3, [r0, #8]
}
   2efb2:	bd08      	pop	{r3, pc}

0002efb4 <add_to_waitq_locked>:
{
   2efb4:	b538      	push	{r3, r4, r5, lr}
   2efb6:	4604      	mov	r4, r0
   2efb8:	460d      	mov	r5, r1
	unready_thread(thread);
   2efba:	f7fd ff83 	bl	2cec4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2efbe:	7b63      	ldrb	r3, [r4, #13]
   2efc0:	f043 0302 	orr.w	r3, r3, #2
   2efc4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2efc6:	b1e5      	cbz	r5, 2f002 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   2efc8:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   2efca:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2efcc:	429d      	cmp	r5, r3
   2efce:	d109      	bne.n	2efe4 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   2efd0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2efd2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2efd6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2efd8:	606c      	str	r4, [r5, #4]
}
   2efda:	e012      	b.n	2f002 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   2efdc:	686a      	ldr	r2, [r5, #4]
   2efde:	4293      	cmp	r3, r2
   2efe0:	d0f6      	beq.n	2efd0 <add_to_waitq_locked+0x1c>
   2efe2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2efe4:	2b00      	cmp	r3, #0
   2efe6:	d0f3      	beq.n	2efd0 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   2efe8:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2efec:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2eff0:	428a      	cmp	r2, r1
   2eff2:	d0f3      	beq.n	2efdc <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2eff4:	4291      	cmp	r1, r2
   2eff6:	ddf1      	ble.n	2efdc <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   2eff8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2effa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2effe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2f000:	605c      	str	r4, [r3, #4]
}
   2f002:	bd38      	pop	{r3, r4, r5, pc}

0002f004 <z_ready_thread>:
{
   2f004:	b510      	push	{r4, lr}
   2f006:	f04f 0320 	mov.w	r3, #32
   2f00a:	f3ef 8411 	mrs	r4, BASEPRI
   2f00e:	f383 8812 	msr	BASEPRI_MAX, r3
   2f012:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2f016:	f7fd ff21 	bl	2ce5c <ready_thread>
	__asm__ volatile(
   2f01a:	f384 8811 	msr	BASEPRI, r4
   2f01e:	f3bf 8f6f 	isb	sy
}
   2f022:	bd10      	pop	{r4, pc}

0002f024 <z_unpend_thread_no_timeout>:
{
   2f024:	b508      	push	{r3, lr}
	__asm__ volatile(
   2f026:	f04f 0220 	mov.w	r2, #32
   2f02a:	f3ef 8111 	mrs	r1, BASEPRI
   2f02e:	f382 8812 	msr	BASEPRI_MAX, r2
   2f032:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2f036:	6883      	ldr	r3, [r0, #8]
   2f038:	b10b      	cbz	r3, 2f03e <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   2f03a:	f7ff ffb1 	bl	2efa0 <unpend_thread_no_timeout>
	__asm__ volatile(
   2f03e:	f381 8811 	msr	BASEPRI, r1
   2f042:	f3bf 8f6f 	isb	sy
}
   2f046:	bd08      	pop	{r3, pc}

0002f048 <z_sched_wake_thread>:
{
   2f048:	b538      	push	{r3, r4, r5, lr}
   2f04a:	4604      	mov	r4, r0
	__asm__ volatile(
   2f04c:	f04f 0320 	mov.w	r3, #32
   2f050:	f3ef 8511 	mrs	r5, BASEPRI
   2f054:	f383 8812 	msr	BASEPRI_MAX, r3
   2f058:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2f05c:	7b43      	ldrb	r3, [r0, #13]
   2f05e:	f013 0f28 	tst.w	r3, #40	; 0x28
   2f062:	d10b      	bne.n	2f07c <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   2f064:	6883      	ldr	r3, [r0, #8]
   2f066:	b10b      	cbz	r3, 2f06c <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   2f068:	f7ff ff9a 	bl	2efa0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2f06c:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   2f06e:	b951      	cbnz	r1, 2f086 <z_sched_wake_thread+0x3e>
   2f070:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2f074:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   2f076:	4620      	mov	r0, r4
   2f078:	f7fd fef0 	bl	2ce5c <ready_thread>
	__asm__ volatile(
   2f07c:	f385 8811 	msr	BASEPRI, r5
   2f080:	f3bf 8f6f 	isb	sy
}
   2f084:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2f086:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   2f08a:	e7f3      	b.n	2f074 <z_sched_wake_thread+0x2c>

0002f08c <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   2f08c:	2101      	movs	r1, #1
   2f08e:	3818      	subs	r0, #24
   2f090:	f7ff bfda 	b.w	2f048 <z_sched_wake_thread>

0002f094 <z_unpend1_no_timeout>:
{
   2f094:	b508      	push	{r3, lr}
   2f096:	4603      	mov	r3, r0
	__asm__ volatile(
   2f098:	f04f 0220 	mov.w	r2, #32
   2f09c:	f3ef 8111 	mrs	r1, BASEPRI
   2f0a0:	f382 8812 	msr	BASEPRI_MAX, r2
   2f0a4:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2f0a8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f0aa:	4283      	cmp	r3, r0
   2f0ac:	d007      	beq.n	2f0be <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   2f0ae:	b108      	cbz	r0, 2f0b4 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   2f0b0:	f7ff ff76 	bl	2efa0 <unpend_thread_no_timeout>
	__asm__ volatile(
   2f0b4:	f381 8811 	msr	BASEPRI, r1
   2f0b8:	f3bf 8f6f 	isb	sy
}
   2f0bc:	bd08      	pop	{r3, pc}
   2f0be:	2000      	movs	r0, #0
   2f0c0:	e7f8      	b.n	2f0b4 <z_unpend1_no_timeout+0x20>

0002f0c2 <z_unpend_first_thread>:
{
   2f0c2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2f0c4:	f04f 0320 	mov.w	r3, #32
   2f0c8:	f3ef 8511 	mrs	r5, BASEPRI
   2f0cc:	f383 8812 	msr	BASEPRI_MAX, r3
   2f0d0:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2f0d4:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f0d6:	42a0      	cmp	r0, r4
   2f0d8:	d00d      	beq.n	2f0f6 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   2f0da:	b134      	cbz	r4, 2f0ea <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   2f0dc:	4620      	mov	r0, r4
   2f0de:	f7ff ff5f 	bl	2efa0 <unpend_thread_no_timeout>
   2f0e2:	f104 0018 	add.w	r0, r4, #24
   2f0e6:	f000 f869 	bl	2f1bc <z_abort_timeout>
	__asm__ volatile(
   2f0ea:	f385 8811 	msr	BASEPRI, r5
   2f0ee:	f3bf 8f6f 	isb	sy
}
   2f0f2:	4620      	mov	r0, r4
   2f0f4:	bd38      	pop	{r3, r4, r5, pc}
   2f0f6:	2400      	movs	r4, #0
   2f0f8:	e7f7      	b.n	2f0ea <z_unpend_first_thread+0x28>

0002f0fa <z_unpend_thread>:
{
   2f0fa:	b510      	push	{r4, lr}
   2f0fc:	4601      	mov	r1, r0
	__asm__ volatile(
   2f0fe:	f04f 0320 	mov.w	r3, #32
   2f102:	f3ef 8411 	mrs	r4, BASEPRI
   2f106:	f383 8812 	msr	BASEPRI_MAX, r3
   2f10a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2f10e:	6883      	ldr	r3, [r0, #8]
   2f110:	b10b      	cbz	r3, 2f116 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   2f112:	f7ff ff45 	bl	2efa0 <unpend_thread_no_timeout>
	__asm__ volatile(
   2f116:	f384 8811 	msr	BASEPRI, r4
   2f11a:	f3bf 8f6f 	isb	sy
}
   2f11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f122:	f101 0018 	add.w	r0, r1, #24
   2f126:	f000 b849 	b.w	2f1bc <z_abort_timeout>

0002f12a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2f12a:	4603      	mov	r3, r0
   2f12c:	b920      	cbnz	r0, 2f138 <z_reschedule_irqlock+0xe>
   2f12e:	f3ef 8205 	mrs	r2, IPSR
   2f132:	b90a      	cbnz	r2, 2f138 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2f134:	f7f9 ba2c 	b.w	28590 <arch_swap>
   2f138:	f383 8811 	msr	BASEPRI, r3
   2f13c:	f3bf 8f6f 	isb	sy
}
   2f140:	4770      	bx	lr

0002f142 <z_reschedule_unlocked>:
	__asm__ volatile(
   2f142:	f04f 0320 	mov.w	r3, #32
   2f146:	f3ef 8011 	mrs	r0, BASEPRI
   2f14a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f14e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2f152:	f7ff bfea 	b.w	2f12a <z_reschedule_irqlock>

0002f156 <z_unpend_all>:
{
   2f156:	b538      	push	{r3, r4, r5, lr}
   2f158:	4605      	mov	r5, r0
	int need_sched = 0;
   2f15a:	2000      	movs	r0, #0
	return list->head == list;
   2f15c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f15e:	42a5      	cmp	r5, r4
   2f160:	d000      	beq.n	2f164 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2f162:	b904      	cbnz	r4, 2f166 <z_unpend_all+0x10>
}
   2f164:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2f166:	4620      	mov	r0, r4
   2f168:	f7ff ffc7 	bl	2f0fa <z_unpend_thread>
		z_ready_thread(thread);
   2f16c:	4620      	mov	r0, r4
   2f16e:	f7ff ff49 	bl	2f004 <z_ready_thread>
		need_sched = 1;
   2f172:	2001      	movs	r0, #1
   2f174:	e7f2      	b.n	2f15c <z_unpend_all+0x6>

0002f176 <z_sched_wake>:
{
   2f176:	b538      	push	{r3, r4, r5, lr}
   2f178:	f04f 0320 	mov.w	r3, #32
   2f17c:	f3ef 8511 	mrs	r5, BASEPRI
   2f180:	f383 8812 	msr	BASEPRI_MAX, r3
   2f184:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2f188:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f18a:	42a0      	cmp	r0, r4
   2f18c:	d012      	beq.n	2f1b4 <z_sched_wake+0x3e>
		if (thread != NULL) {
   2f18e:	b19c      	cbz	r4, 2f1b8 <z_sched_wake+0x42>
   2f190:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
   2f192:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   2f194:	4620      	mov	r0, r4
   2f196:	f7ff ff03 	bl	2efa0 <unpend_thread_no_timeout>
   2f19a:	f104 0018 	add.w	r0, r4, #24
   2f19e:	f000 f80d 	bl	2f1bc <z_abort_timeout>
			ready_thread(thread);
   2f1a2:	4620      	mov	r0, r4
   2f1a4:	f7fd fe5a 	bl	2ce5c <ready_thread>
			ret = true;
   2f1a8:	2001      	movs	r0, #1
	__asm__ volatile(
   2f1aa:	f385 8811 	msr	BASEPRI, r5
   2f1ae:	f3bf 8f6f 	isb	sy
}
   2f1b2:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   2f1b4:	2000      	movs	r0, #0
   2f1b6:	e7f8      	b.n	2f1aa <z_sched_wake+0x34>
   2f1b8:	4620      	mov	r0, r4
   2f1ba:	e7f6      	b.n	2f1aa <z_sched_wake+0x34>

0002f1bc <z_abort_timeout>:
{
   2f1bc:	b510      	push	{r4, lr}
	__asm__ volatile(
   2f1be:	f04f 0220 	mov.w	r2, #32
   2f1c2:	f3ef 8411 	mrs	r4, BASEPRI
   2f1c6:	f382 8812 	msr	BASEPRI_MAX, r2
   2f1ca:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2f1ce:	6803      	ldr	r3, [r0, #0]
   2f1d0:	b13b      	cbz	r3, 2f1e2 <z_abort_timeout+0x26>
			remove_timeout(to);
   2f1d2:	f7fe f947 	bl	2d464 <remove_timeout>
			ret = 0;
   2f1d6:	2000      	movs	r0, #0
	__asm__ volatile(
   2f1d8:	f384 8811 	msr	BASEPRI, r4
   2f1dc:	f3bf 8f6f 	isb	sy
}
   2f1e0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2f1e2:	f06f 0015 	mvn.w	r0, #21
   2f1e6:	e7f7      	b.n	2f1d8 <z_abort_timeout+0x1c>

0002f1e8 <z_get_next_timeout_expiry>:
{
   2f1e8:	b510      	push	{r4, lr}
	__asm__ volatile(
   2f1ea:	f04f 0320 	mov.w	r3, #32
   2f1ee:	f3ef 8411 	mrs	r4, BASEPRI
   2f1f2:	f383 8812 	msr	BASEPRI_MAX, r3
   2f1f6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2f1fa:	f7fe f913 	bl	2d424 <next_timeout>
	__asm__ volatile(
   2f1fe:	f384 8811 	msr	BASEPRI, r4
   2f202:	f3bf 8f6f 	isb	sy
}
   2f206:	bd10      	pop	{r4, pc}

0002f208 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2f208:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2f20a:	f7fe fa27 	bl	2d65c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2f20e:	bd08      	pop	{r3, pc}

0002f210 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2f210:	f7fe ba24 	b.w	2d65c <sys_clock_tick_get>

0002f214 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2f214:	b108      	cbz	r0, 2f21a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2f216:	f7f9 bcb1 	b.w	28b7c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2f21a:	4770      	bx	lr

0002f21c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2f21c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2f220:	bf08      	it	eq
   2f222:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2f226:	b538      	push	{r3, r4, r5, lr}
   2f228:	460c      	mov	r4, r1
   2f22a:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2f22c:	d014      	beq.n	2f258 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2f22e:	4308      	orrs	r0, r1
   2f230:	d103      	bne.n	2f23a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2f232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2f236:	f7fe ba11 	b.w	2d65c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2f23a:	f06f 0001 	mvn.w	r0, #1
   2f23e:	1b40      	subs	r0, r0, r5
   2f240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f244:	eb63 0101 	sbc.w	r1, r3, r1
   2f248:	2900      	cmp	r1, #0
   2f24a:	da04      	bge.n	2f256 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2f24c:	f7fe fa06 	bl	2d65c <sys_clock_tick_get>
   2f250:	1940      	adds	r0, r0, r5
   2f252:	eb41 0104 	adc.w	r1, r1, r4
}
   2f256:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2f258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f25c:	4601      	mov	r1, r0
   2f25e:	e7fa      	b.n	2f256 <sys_clock_timeout_end_calc+0x3a>

0002f260 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2f260:	b510      	push	{r4, lr}
   2f262:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2f264:	f7ff ffaa 	bl	2f1bc <z_abort_timeout>

	if (inactive) {
   2f268:	b9b0      	cbnz	r0, 2f298 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2f26a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2f26c:	b10b      	cbz	r3, 2f272 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2f26e:	4620      	mov	r0, r4
   2f270:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2f272:	f104 0018 	add.w	r0, r4, #24
   2f276:	f7ff ff0d 	bl	2f094 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2f27a:	b168      	cbz	r0, 2f298 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2f27c:	f7ff fec2 	bl	2f004 <z_ready_thread>
	__asm__ volatile(
   2f280:	f04f 0320 	mov.w	r3, #32
   2f284:	f3ef 8011 	mrs	r0, BASEPRI
   2f288:	f383 8812 	msr	BASEPRI_MAX, r3
   2f28c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2f290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f294:	f7ff bf49 	b.w	2f12a <z_reschedule_irqlock>
   2f298:	bd10      	pop	{r4, pc}

0002f29a <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2f29a:	3204      	adds	r2, #4
{
   2f29c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   2f29e:	4604      	mov	r4, r0
   2f2a0:	d208      	bcs.n	2f2b4 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2f2a2:	2600      	movs	r6, #0
   2f2a4:	2700      	movs	r7, #0
   2f2a6:	e9cd 6700 	strd	r6, r7, [sp]
   2f2aa:	f041 0104 	orr.w	r1, r1, #4
   2f2ae:	f000 f816 	bl	2f2de <k_heap_aligned_alloc>
	if (mem == NULL) {
   2f2b2:	b910      	cbnz	r0, 2f2ba <z_heap_aligned_alloc+0x20>
		return NULL;
   2f2b4:	2000      	movs	r0, #0
}
   2f2b6:	b002      	add	sp, #8
   2f2b8:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   2f2ba:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   2f2be:	e7fa      	b.n	2f2b6 <z_heap_aligned_alloc+0x1c>

0002f2c0 <k_free>:
	if (ptr != NULL) {
   2f2c0:	b120      	cbz	r0, 2f2cc <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2f2c2:	1f01      	subs	r1, r0, #4
   2f2c4:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2f2c8:	f000 b856 	b.w	2f378 <k_heap_free>
}
   2f2cc:	4770      	bx	lr

0002f2ce <k_heap_init>:
{
   2f2ce:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2f2d0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2f2d4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2f2d8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2f2da:	f7fe bc99 	b.w	2dc10 <sys_heap_init>

0002f2de <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2f2de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f2e2:	b085      	sub	sp, #20
   2f2e4:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   2f2e8:	4607      	mov	r7, r0
   2f2ea:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2f2ec:	4650      	mov	r0, sl
   2f2ee:	4621      	mov	r1, r4
{
   2f2f0:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2f2f2:	f7ff ff93 	bl	2f21c <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2f2f6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2f2fa:	bf08      	it	eq
   2f2fc:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2f300:	4605      	mov	r5, r0
   2f302:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2f304:	bf04      	itt	eq
   2f306:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   2f30a:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2f30e:	f107 0a14 	add.w	sl, r7, #20
   2f312:	f04f 0320 	mov.w	r3, #32
   2f316:	f3ef 8411 	mrs	r4, BASEPRI
   2f31a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f31e:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2f322:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2f326:	464a      	mov	r2, r9
   2f328:	4641      	mov	r1, r8
   2f32a:	4638      	mov	r0, r7
   2f32c:	f7fe fc09 	bl	2db42 <sys_heap_aligned_alloc>
   2f330:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2f332:	f7fe f993 	bl	2d65c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2f336:	9b03      	ldr	r3, [sp, #12]
   2f338:	b13b      	cbz	r3, 2f34a <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   2f33a:	f384 8811 	msr	BASEPRI, r4
   2f33e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2f342:	4618      	mov	r0, r3
   2f344:	b005      	add	sp, #20
   2f346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2f34a:	1a28      	subs	r0, r5, r0
   2f34c:	eb66 0101 	sbc.w	r1, r6, r1
   2f350:	2801      	cmp	r0, #1
   2f352:	f171 0200 	sbcs.w	r2, r1, #0
   2f356:	dbf0      	blt.n	2f33a <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2f358:	e9cd 0100 	strd	r0, r1, [sp]
   2f35c:	465a      	mov	r2, fp
   2f35e:	4621      	mov	r1, r4
   2f360:	4650      	mov	r0, sl
   2f362:	f7fd fe0f 	bl	2cf84 <z_pend_curr>
	__asm__ volatile(
   2f366:	f04f 0320 	mov.w	r3, #32
   2f36a:	f3ef 8411 	mrs	r4, BASEPRI
   2f36e:	f383 8812 	msr	BASEPRI_MAX, r3
   2f372:	f3bf 8f6f 	isb	sy
	return k;
   2f376:	e7d6      	b.n	2f326 <k_heap_aligned_alloc+0x48>

0002f378 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2f378:	b538      	push	{r3, r4, r5, lr}
   2f37a:	4604      	mov	r4, r0
   2f37c:	f04f 0320 	mov.w	r3, #32
   2f380:	f3ef 8511 	mrs	r5, BASEPRI
   2f384:	f383 8812 	msr	BASEPRI_MAX, r3
   2f388:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2f38c:	f7fe fba1 	bl	2dad2 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2f390:	f104 000c 	add.w	r0, r4, #12
   2f394:	f7ff fedf 	bl	2f156 <z_unpend_all>
   2f398:	b130      	cbz	r0, 2f3a8 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2f39a:	4629      	mov	r1, r5
   2f39c:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2f3a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2f3a4:	f7fd be52 	b.w	2d04c <z_reschedule>
	__asm__ volatile(
   2f3a8:	f385 8811 	msr	BASEPRI, r5
   2f3ac:	f3bf 8f6f 	isb	sy
}
   2f3b0:	bd38      	pop	{r3, r4, r5, pc}
	...


zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00026000 <_vector_table>:
   26000:	d0 31 00 20 25 a2 02 00 37 03 03 00 f9 a1 02 00     .1. %...7.......
   26010:	f9 a1 02 00 f9 a1 02 00 f9 a1 02 00 00 00 00 00     ................
	...
   2602c:	61 9b 02 00 f9 a1 02 00 00 00 00 00 19 9b 02 00     a...............
   2603c:	f9 a1 02 00                                         ....

00026040 <_irq_vector_table>:
   26040:	dd 9b 02 00 dd 9b 02 00 dd 9b 02 00 dd 9b 02 00     ................
   26050:	dd 9b 02 00 dd 9b 02 00 dd 9b 02 00 dd 9b 02 00     ................
   26060:	dd 9b 02 00 dd 9b 02 00 dd 9b 02 00 dd 9b 02 00     ................
   26070:	dd 9b 02 00 dd 9b 02 00 dd 9b 02 00 dd 9b 02 00     ................
   26080:	dd 9b 02 00 dd 9b 02 00 dd 9b 02 00 dd 9b 02 00     ................
   26090:	dd 9b 02 00 dd 9b 02 00 dd 9b 02 00 dd 9b 02 00     ................
   260a0:	dd 9b 02 00 dd 9b 02 00 dd 9b 02 00 dd 9b 02 00     ................
   260b0:	dd 9b 02 00 dd 9b 02 00 dd 9b 02 00 dd 9b 02 00     ................
   260c0:	dd 9b 02 00 dd 9b 02 00 dd 9b 02 00 dd 9b 02 00     ................
   260d0:	dd 9b 02 00 dd 9b 02 00 dd 9b 02 00 dd 9b 02 00     ................
   260e0:	dd 9b 02 00 dd 9b 02 00 dd 9b 02 00 dd 9b 02 00     ................
   260f0:	dd 9b 02 00 dd 9b 02 00 dd 9b 02 00 dd 9b 02 00     ................

Disassembly of section text:

00026100 <__aeabi_uldivmod>:
   26100:	b953      	cbnz	r3, 26118 <__aeabi_uldivmod+0x18>
   26102:	b94a      	cbnz	r2, 26118 <__aeabi_uldivmod+0x18>
   26104:	2900      	cmp	r1, #0
   26106:	bf08      	it	eq
   26108:	2800      	cmpeq	r0, #0
   2610a:	bf1c      	itt	ne
   2610c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   26110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26114:	f000 b80c 	b.w	26130 <__aeabi_idiv0>
   26118:	f1ad 0c08 	sub.w	ip, sp, #8
   2611c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   26120:	f000 f808 	bl	26134 <__udivmoddi4>
   26124:	f8dd e004 	ldr.w	lr, [sp, #4]
   26128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2612c:	b004      	add	sp, #16
   2612e:	4770      	bx	lr

00026130 <__aeabi_idiv0>:
   26130:	4770      	bx	lr
   26132:	bf00      	nop

00026134 <__udivmoddi4>:
   26134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26138:	4686      	mov	lr, r0
   2613a:	468c      	mov	ip, r1
   2613c:	4608      	mov	r0, r1
   2613e:	9e08      	ldr	r6, [sp, #32]
   26140:	4615      	mov	r5, r2
   26142:	4674      	mov	r4, lr
   26144:	4619      	mov	r1, r3
   26146:	2b00      	cmp	r3, #0
   26148:	f040 80c2 	bne.w	262d0 <__udivmoddi4+0x19c>
   2614c:	4285      	cmp	r5, r0
   2614e:	fab2 f282 	clz	r2, r2
   26152:	d945      	bls.n	261e0 <__udivmoddi4+0xac>
   26154:	b14a      	cbz	r2, 2616a <__udivmoddi4+0x36>
   26156:	f1c2 0320 	rsb	r3, r2, #32
   2615a:	fa00 fc02 	lsl.w	ip, r0, r2
   2615e:	fa2e f303 	lsr.w	r3, lr, r3
   26162:	4095      	lsls	r5, r2
   26164:	ea43 0c0c 	orr.w	ip, r3, ip
   26168:	4094      	lsls	r4, r2
   2616a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2616e:	b2a8      	uxth	r0, r5
   26170:	fbbc f8fe 	udiv	r8, ip, lr
   26174:	0c23      	lsrs	r3, r4, #16
   26176:	fb0e cc18 	mls	ip, lr, r8, ip
   2617a:	fb08 f900 	mul.w	r9, r8, r0
   2617e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   26182:	4599      	cmp	r9, r3
   26184:	d928      	bls.n	261d8 <__udivmoddi4+0xa4>
   26186:	18eb      	adds	r3, r5, r3
   26188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   2618c:	d204      	bcs.n	26198 <__udivmoddi4+0x64>
   2618e:	4599      	cmp	r9, r3
   26190:	d902      	bls.n	26198 <__udivmoddi4+0x64>
   26192:	f1a8 0702 	sub.w	r7, r8, #2
   26196:	442b      	add	r3, r5
   26198:	eba3 0309 	sub.w	r3, r3, r9
   2619c:	b2a4      	uxth	r4, r4
   2619e:	fbb3 fcfe 	udiv	ip, r3, lr
   261a2:	fb0e 331c 	mls	r3, lr, ip, r3
   261a6:	fb0c f000 	mul.w	r0, ip, r0
   261aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   261ae:	42a0      	cmp	r0, r4
   261b0:	d914      	bls.n	261dc <__udivmoddi4+0xa8>
   261b2:	192c      	adds	r4, r5, r4
   261b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   261b8:	d204      	bcs.n	261c4 <__udivmoddi4+0x90>
   261ba:	42a0      	cmp	r0, r4
   261bc:	d902      	bls.n	261c4 <__udivmoddi4+0x90>
   261be:	f1ac 0302 	sub.w	r3, ip, #2
   261c2:	442c      	add	r4, r5
   261c4:	1a24      	subs	r4, r4, r0
   261c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   261ca:	b11e      	cbz	r6, 261d4 <__udivmoddi4+0xa0>
   261cc:	40d4      	lsrs	r4, r2
   261ce:	2300      	movs	r3, #0
   261d0:	6034      	str	r4, [r6, #0]
   261d2:	6073      	str	r3, [r6, #4]
   261d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   261d8:	4647      	mov	r7, r8
   261da:	e7dd      	b.n	26198 <__udivmoddi4+0x64>
   261dc:	4663      	mov	r3, ip
   261de:	e7f1      	b.n	261c4 <__udivmoddi4+0x90>
   261e0:	bb92      	cbnz	r2, 26248 <__udivmoddi4+0x114>
   261e2:	1b43      	subs	r3, r0, r5
   261e4:	2101      	movs	r1, #1
   261e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   261ea:	b2af      	uxth	r7, r5
   261ec:	fbb3 fcfe 	udiv	ip, r3, lr
   261f0:	0c20      	lsrs	r0, r4, #16
   261f2:	fb0e 331c 	mls	r3, lr, ip, r3
   261f6:	fb0c f807 	mul.w	r8, ip, r7
   261fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   261fe:	4598      	cmp	r8, r3
   26200:	d962      	bls.n	262c8 <__udivmoddi4+0x194>
   26202:	18eb      	adds	r3, r5, r3
   26204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   26208:	d204      	bcs.n	26214 <__udivmoddi4+0xe0>
   2620a:	4598      	cmp	r8, r3
   2620c:	d902      	bls.n	26214 <__udivmoddi4+0xe0>
   2620e:	f1ac 0002 	sub.w	r0, ip, #2
   26212:	442b      	add	r3, r5
   26214:	eba3 0308 	sub.w	r3, r3, r8
   26218:	b2a4      	uxth	r4, r4
   2621a:	fbb3 fcfe 	udiv	ip, r3, lr
   2621e:	fb0e 331c 	mls	r3, lr, ip, r3
   26222:	fb0c f707 	mul.w	r7, ip, r7
   26226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2622a:	42a7      	cmp	r7, r4
   2622c:	d94e      	bls.n	262cc <__udivmoddi4+0x198>
   2622e:	192c      	adds	r4, r5, r4
   26230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   26234:	d204      	bcs.n	26240 <__udivmoddi4+0x10c>
   26236:	42a7      	cmp	r7, r4
   26238:	d902      	bls.n	26240 <__udivmoddi4+0x10c>
   2623a:	f1ac 0302 	sub.w	r3, ip, #2
   2623e:	442c      	add	r4, r5
   26240:	1be4      	subs	r4, r4, r7
   26242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   26246:	e7c0      	b.n	261ca <__udivmoddi4+0x96>
   26248:	f1c2 0320 	rsb	r3, r2, #32
   2624c:	fa20 f103 	lsr.w	r1, r0, r3
   26250:	4095      	lsls	r5, r2
   26252:	4090      	lsls	r0, r2
   26254:	fa2e f303 	lsr.w	r3, lr, r3
   26258:	4303      	orrs	r3, r0
   2625a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2625e:	b2af      	uxth	r7, r5
   26260:	fbb1 fcfe 	udiv	ip, r1, lr
   26264:	fb0e 101c 	mls	r0, lr, ip, r1
   26268:	0c19      	lsrs	r1, r3, #16
   2626a:	fb0c f807 	mul.w	r8, ip, r7
   2626e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   26272:	4588      	cmp	r8, r1
   26274:	fa04 f402 	lsl.w	r4, r4, r2
   26278:	d922      	bls.n	262c0 <__udivmoddi4+0x18c>
   2627a:	1869      	adds	r1, r5, r1
   2627c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   26280:	d204      	bcs.n	2628c <__udivmoddi4+0x158>
   26282:	4588      	cmp	r8, r1
   26284:	d902      	bls.n	2628c <__udivmoddi4+0x158>
   26286:	f1ac 0002 	sub.w	r0, ip, #2
   2628a:	4429      	add	r1, r5
   2628c:	eba1 0108 	sub.w	r1, r1, r8
   26290:	b29b      	uxth	r3, r3
   26292:	fbb1 fcfe 	udiv	ip, r1, lr
   26296:	fb0e 111c 	mls	r1, lr, ip, r1
   2629a:	fb0c f707 	mul.w	r7, ip, r7
   2629e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   262a2:	429f      	cmp	r7, r3
   262a4:	d90e      	bls.n	262c4 <__udivmoddi4+0x190>
   262a6:	18eb      	adds	r3, r5, r3
   262a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   262ac:	d204      	bcs.n	262b8 <__udivmoddi4+0x184>
   262ae:	429f      	cmp	r7, r3
   262b0:	d902      	bls.n	262b8 <__udivmoddi4+0x184>
   262b2:	f1ac 0102 	sub.w	r1, ip, #2
   262b6:	442b      	add	r3, r5
   262b8:	1bdb      	subs	r3, r3, r7
   262ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   262be:	e792      	b.n	261e6 <__udivmoddi4+0xb2>
   262c0:	4660      	mov	r0, ip
   262c2:	e7e3      	b.n	2628c <__udivmoddi4+0x158>
   262c4:	4661      	mov	r1, ip
   262c6:	e7f7      	b.n	262b8 <__udivmoddi4+0x184>
   262c8:	4660      	mov	r0, ip
   262ca:	e7a3      	b.n	26214 <__udivmoddi4+0xe0>
   262cc:	4663      	mov	r3, ip
   262ce:	e7b7      	b.n	26240 <__udivmoddi4+0x10c>
   262d0:	4283      	cmp	r3, r0
   262d2:	d906      	bls.n	262e2 <__udivmoddi4+0x1ae>
   262d4:	b916      	cbnz	r6, 262dc <__udivmoddi4+0x1a8>
   262d6:	2100      	movs	r1, #0
   262d8:	4608      	mov	r0, r1
   262da:	e77b      	b.n	261d4 <__udivmoddi4+0xa0>
   262dc:	e9c6 e000 	strd	lr, r0, [r6]
   262e0:	e7f9      	b.n	262d6 <__udivmoddi4+0x1a2>
   262e2:	fab3 f783 	clz	r7, r3
   262e6:	b98f      	cbnz	r7, 2630c <__udivmoddi4+0x1d8>
   262e8:	4283      	cmp	r3, r0
   262ea:	d301      	bcc.n	262f0 <__udivmoddi4+0x1bc>
   262ec:	4572      	cmp	r2, lr
   262ee:	d808      	bhi.n	26302 <__udivmoddi4+0x1ce>
   262f0:	ebbe 0402 	subs.w	r4, lr, r2
   262f4:	eb60 0303 	sbc.w	r3, r0, r3
   262f8:	2001      	movs	r0, #1
   262fa:	469c      	mov	ip, r3
   262fc:	b91e      	cbnz	r6, 26306 <__udivmoddi4+0x1d2>
   262fe:	2100      	movs	r1, #0
   26300:	e768      	b.n	261d4 <__udivmoddi4+0xa0>
   26302:	4638      	mov	r0, r7
   26304:	e7fa      	b.n	262fc <__udivmoddi4+0x1c8>
   26306:	e9c6 4c00 	strd	r4, ip, [r6]
   2630a:	e7f8      	b.n	262fe <__udivmoddi4+0x1ca>
   2630c:	f1c7 0c20 	rsb	ip, r7, #32
   26310:	40bb      	lsls	r3, r7
   26312:	fa22 f40c 	lsr.w	r4, r2, ip
   26316:	431c      	orrs	r4, r3
   26318:	fa2e f10c 	lsr.w	r1, lr, ip
   2631c:	fa20 f30c 	lsr.w	r3, r0, ip
   26320:	40b8      	lsls	r0, r7
   26322:	4301      	orrs	r1, r0
   26324:	ea4f 4914 	mov.w	r9, r4, lsr #16
   26328:	fa0e f507 	lsl.w	r5, lr, r7
   2632c:	fbb3 f8f9 	udiv	r8, r3, r9
   26330:	fa1f fe84 	uxth.w	lr, r4
   26334:	fb09 3018 	mls	r0, r9, r8, r3
   26338:	0c0b      	lsrs	r3, r1, #16
   2633a:	fb08 fa0e 	mul.w	sl, r8, lr
   2633e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   26342:	459a      	cmp	sl, r3
   26344:	fa02 f207 	lsl.w	r2, r2, r7
   26348:	d940      	bls.n	263cc <__udivmoddi4+0x298>
   2634a:	18e3      	adds	r3, r4, r3
   2634c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   26350:	d204      	bcs.n	2635c <__udivmoddi4+0x228>
   26352:	459a      	cmp	sl, r3
   26354:	d902      	bls.n	2635c <__udivmoddi4+0x228>
   26356:	f1a8 0002 	sub.w	r0, r8, #2
   2635a:	4423      	add	r3, r4
   2635c:	eba3 030a 	sub.w	r3, r3, sl
   26360:	b289      	uxth	r1, r1
   26362:	fbb3 f8f9 	udiv	r8, r3, r9
   26366:	fb09 3318 	mls	r3, r9, r8, r3
   2636a:	fb08 fe0e 	mul.w	lr, r8, lr
   2636e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   26372:	458e      	cmp	lr, r1
   26374:	d92c      	bls.n	263d0 <__udivmoddi4+0x29c>
   26376:	1861      	adds	r1, r4, r1
   26378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2637c:	d204      	bcs.n	26388 <__udivmoddi4+0x254>
   2637e:	458e      	cmp	lr, r1
   26380:	d902      	bls.n	26388 <__udivmoddi4+0x254>
   26382:	f1a8 0302 	sub.w	r3, r8, #2
   26386:	4421      	add	r1, r4
   26388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   2638c:	fba0 9802 	umull	r9, r8, r0, r2
   26390:	eba1 010e 	sub.w	r1, r1, lr
   26394:	4541      	cmp	r1, r8
   26396:	46ce      	mov	lr, r9
   26398:	4643      	mov	r3, r8
   2639a:	d302      	bcc.n	263a2 <__udivmoddi4+0x26e>
   2639c:	d106      	bne.n	263ac <__udivmoddi4+0x278>
   2639e:	454d      	cmp	r5, r9
   263a0:	d204      	bcs.n	263ac <__udivmoddi4+0x278>
   263a2:	ebb9 0e02 	subs.w	lr, r9, r2
   263a6:	eb68 0304 	sbc.w	r3, r8, r4
   263aa:	3801      	subs	r0, #1
   263ac:	2e00      	cmp	r6, #0
   263ae:	d0a6      	beq.n	262fe <__udivmoddi4+0x1ca>
   263b0:	ebb5 020e 	subs.w	r2, r5, lr
   263b4:	eb61 0103 	sbc.w	r1, r1, r3
   263b8:	fa01 fc0c 	lsl.w	ip, r1, ip
   263bc:	fa22 f307 	lsr.w	r3, r2, r7
   263c0:	ea4c 0303 	orr.w	r3, ip, r3
   263c4:	40f9      	lsrs	r1, r7
   263c6:	e9c6 3100 	strd	r3, r1, [r6]
   263ca:	e798      	b.n	262fe <__udivmoddi4+0x1ca>
   263cc:	4640      	mov	r0, r8
   263ce:	e7c5      	b.n	2635c <__udivmoddi4+0x228>
   263d0:	4643      	mov	r3, r8
   263d2:	e7d9      	b.n	26388 <__udivmoddi4+0x254>

000263d4 <main>:
			     DT_SPEC_AND_COMMA)
};


int main(void)
{
   263d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263d8:	b089      	sub	sp, #36	; 0x24
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   263da:	4865      	ldr	r0, [pc, #404]	; (26570 <main+0x19c>)
   263dc:	f00a fab4 	bl	30948 <z_device_is_ready>
	if (!gpio_is_ready_dt(&led0) || !gpio_is_ready_dt(&led1) || !gpio_is_ready_dt(&led2)) {
   263e0:	b358      	cbz	r0, 2643a <main+0x66>
   263e2:	4864      	ldr	r0, [pc, #400]	; (26574 <main+0x1a0>)
   263e4:	f00a fab0 	bl	30948 <z_device_is_ready>
   263e8:	b338      	cbz	r0, 2643a <main+0x66>
   263ea:	4862      	ldr	r0, [pc, #392]	; (26574 <main+0x1a0>)
   263ec:	f00a faac 	bl	30948 <z_device_is_ready>
   263f0:	b318      	cbz	r0, 2643a <main+0x66>
		return 0;
	}



	int ret0 = gpio_pin_configure_dt(&led0, GPIO_OUTPUT_ACTIVE), ret1 = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_ACTIVE), ret2 = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_ACTIVE);
   263f2:	4861      	ldr	r0, [pc, #388]	; (26578 <main+0x1a4>)
   263f4:	f008 fee9 	bl	2f1ca <gpio_pin_configure_dt.constprop.0>
   263f8:	4604      	mov	r4, r0
   263fa:	4860      	ldr	r0, [pc, #384]	; (2657c <main+0x1a8>)
   263fc:	f008 fee5 	bl	2f1ca <gpio_pin_configure_dt.constprop.0>
   26400:	4605      	mov	r5, r0
   26402:	485f      	ldr	r0, [pc, #380]	; (26580 <main+0x1ac>)
   26404:	f008 fee1 	bl	2f1ca <gpio_pin_configure_dt.constprop.0>
	if (ret0 || ret1 || ret2 < 0) {
   26408:	432c      	orrs	r4, r5
   2640a:	d116      	bne.n	2643a <main+0x66>
   2640c:	2800      	cmp	r0, #0
   2640e:	db14      	blt.n	2643a <main+0x66>
	}

        int err;
	uint32_t count = 0;
	uint16_t buf;
	struct adc_sequence sequence = {
   26410:	2214      	movs	r2, #20
   26412:	4621      	mov	r1, r4
   26414:	a803      	add	r0, sp, #12
   26416:	f009 ffaa 	bl	3036e <memset>
   2641a:	f10d 0306 	add.w	r3, sp, #6
   2641e:	9305      	str	r3, [sp, #20]
   26420:	4d58      	ldr	r5, [pc, #352]	; (26584 <main+0x1b0>)
   26422:	2302      	movs	r3, #2
   26424:	9306      	str	r3, [sp, #24]
		.buffer_size = sizeof(buf),
	};

	/* Configure channels individually prior to sampling. */
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
		if (!device_is_ready(adc_channels[i].dev)) {
   26426:	f855 6c06 	ldr.w	r6, [r5, #-6]
   2642a:	4630      	mov	r0, r6
   2642c:	f00a fa8c 	bl	30948 <z_device_is_ready>
   26430:	b938      	cbnz	r0, 26442 <main+0x6e>
			printk("ADC controller device %s not ready\n", adc_channels[i].dev->name);
   26432:	6831      	ldr	r1, [r6, #0]
   26434:	4854      	ldr	r0, [pc, #336]	; (26588 <main+0x1b4>)
   26436:	f008 ff55 	bl	2f2e4 <printk>
			}
		}
		k_msleep(SLEEP_TIME_MS);
	}
	return 0;
}
   2643a:	2000      	movs	r0, #0
   2643c:	b009      	add	sp, #36	; 0x24
   2643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * Devicetree is not valid.
 * @see adc_channel_setup()
 */
static inline int adc_channel_setup_dt(const struct adc_dt_spec *spec)
{
	if (!spec->channel_cfg_dt_node_exists) {
   26442:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   26446:	b163      	cbz	r3, 26462 <main+0x8e>
		return -ENOTSUP;
	}

	return adc_channel_setup(spec->dev, &spec->channel_cfg);
   26448:	f855 0c06 	ldr.w	r0, [r5, #-6]
	return api->channel_setup(dev, channel_cfg);
   2644c:	6883      	ldr	r3, [r0, #8]
   2644e:	4629      	mov	r1, r5
   26450:	681b      	ldr	r3, [r3, #0]
   26452:	4798      	blx	r3
		if (err < 0) {
   26454:	1e02      	subs	r2, r0, #0
   26456:	da07      	bge.n	26468 <main+0x94>
			printk("Could not setup channel #%d (%d)\n", i, err);
   26458:	484c      	ldr	r0, [pc, #304]	; (2658c <main+0x1b8>)
   2645a:	4621      	mov	r1, r4
   2645c:	f008 ff42 	bl	2f2e4 <printk>
			return 0;
   26460:	e7eb      	b.n	2643a <main+0x66>
		return -ENOTSUP;
   26462:	f06f 0285 	mvn.w	r2, #133	; 0x85
   26466:	e7f7      	b.n	26458 <main+0x84>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
   26468:	3401      	adds	r4, #1
   2646a:	2c03      	cmp	r4, #3
   2646c:	f105 0514 	add.w	r5, r5, #20
   26470:	d1d9      	bne.n	26426 <main+0x52>
	uint32_t count = 0;
   26472:	2100      	movs	r1, #0
                printk("ADC reading[%u]:\n", count++);
   26474:	4846      	ldr	r0, [pc, #280]	; (26590 <main+0x1bc>)
   26476:	4c47      	ldr	r4, [pc, #284]	; (26594 <main+0x1c0>)
			printk("%"PRId32, val_mv);
   26478:	f8df a11c 	ldr.w	sl, [pc, #284]	; 26598 <main+0x1c4>
				printk(" = %"PRId32" mV\n", val_mv);
   2647c:	f8df b11c 	ldr.w	fp, [pc, #284]	; 2659c <main+0x1c8>
                printk("ADC reading[%u]:\n", count++);
   26480:	1c4f      	adds	r7, r1, #1
   26482:	f008 ff2f 	bl	2f2e4 <printk>
		gpio_pin_toggle_dt(&led0);
   26486:	483c      	ldr	r0, [pc, #240]	; (26578 <main+0x1a4>)
   26488:	f008 feb9 	bl	2f1fe <gpio_pin_toggle_dt.isra.0>
                gpio_pin_toggle_dt(&led1);
   2648c:	483b      	ldr	r0, [pc, #236]	; (2657c <main+0x1a8>)
   2648e:	f008 feb6 	bl	2f1fe <gpio_pin_toggle_dt.isra.0>
                gpio_pin_toggle_dt(&led2);
   26492:	483b      	ldr	r0, [pc, #236]	; (26580 <main+0x1ac>)
   26494:	f008 feb3 	bl	2f1fe <gpio_pin_toggle_dt.isra.0>
                for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
   26498:	2500      	movs	r5, #0
   2649a:	4626      	mov	r6, r4
			       adc_channels[i].dev->name,
   2649c:	f8d4 8000 	ldr.w	r8, [r4]
			printk("- %s, channel %d: ",
   264a0:	f894 9004 	ldrb.w	r9, [r4, #4]
   264a4:	f8d8 1000 	ldr.w	r1, [r8]
   264a8:	483d      	ldr	r0, [pc, #244]	; (265a0 <main+0x1cc>)
   264aa:	464a      	mov	r2, r9
   264ac:	f008 ff1a 	bl	2f2e4 <printk>
 * @retval -ENOTSUP If @p spec does not have valid channel configuration
 */
static inline int adc_sequence_init_dt(const struct adc_dt_spec *spec,
				       struct adc_sequence *seq)
{
	if (!spec->channel_cfg_dt_node_exists) {
   264b0:	7961      	ldrb	r1, [r4, #5]
   264b2:	b149      	cbz	r1, 264c8 <main+0xf4>
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
	seq->resolution = spec->resolution;
   264b4:	7c22      	ldrb	r2, [r4, #16]
   264b6:	f88d 201c 	strb.w	r2, [sp, #28]
	seq->channels = BIT(spec->channel_id);
   264ba:	2101      	movs	r1, #1
	seq->oversampling = spec->oversampling;
   264bc:	7c62      	ldrb	r2, [r4, #17]
   264be:	f88d 201d 	strb.w	r2, [sp, #29]
	seq->channels = BIT(spec->channel_id);
   264c2:	fa01 f109 	lsl.w	r1, r1, r9
   264c6:	9104      	str	r1, [sp, #16]
	return api->read(dev, sequence);
   264c8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   264cc:	a903      	add	r1, sp, #12
   264ce:	6852      	ldr	r2, [r2, #4]
   264d0:	4640      	mov	r0, r8
   264d2:	4790      	blx	r2
			if (err < 0) {
   264d4:	1e01      	subs	r1, r0, #0
   264d6:	da03      	bge.n	264e0 <main+0x10c>
				printk("Could not read (%d)\n", err);
   264d8:	4832      	ldr	r0, [pc, #200]	; (265a4 <main+0x1d0>)
				printk(" = %"PRId32" mV\n", val_mv);
   264da:	f008 ff03 	bl	2f2e4 <printk>
   264de:	e013      	b.n	26508 <main+0x134>
			if (adc_channels[i].channel_cfg.differential) {
   264e0:	2214      	movs	r2, #20
   264e2:	fb02 6205 	mla	r2, r2, r5, r6
				val_mv = (int32_t)((int16_t)buf);
   264e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
			if (adc_channels[i].channel_cfg.differential) {
   264ea:	7a92      	ldrb	r2, [r2, #10]
   264ec:	0692      	lsls	r2, r2, #26
				val_mv = (int32_t)((int16_t)buf);
   264ee:	bf4c      	ite	mi
   264f0:	fa0f f883 	sxthmi.w	r8, r3
				val_mv = (int32_t)buf;
   264f4:	4698      	movpl	r8, r3
			printk("%"PRId32, val_mv);
   264f6:	4641      	mov	r1, r8
   264f8:	4650      	mov	r0, sl
   264fa:	f008 fef3 	bl	2f2e4 <printk>
	if (!spec->channel_cfg_dt_node_exists) {
   264fe:	7962      	ldrb	r2, [r4, #5]
   26500:	b972      	cbnz	r2, 26520 <main+0x14c>
				printk(" (value in mV not available)\n");
   26502:	4829      	ldr	r0, [pc, #164]	; (265a8 <main+0x1d4>)
   26504:	f008 feee 	bl	2f2e4 <printk>
                for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
   26508:	3501      	adds	r5, #1
   2650a:	2d03      	cmp	r5, #3
   2650c:	f104 0414 	add.w	r4, r4, #20
   26510:	d1c4      	bne.n	2649c <main+0xc8>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   26512:	2100      	movs	r1, #0
   26514:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   26518:	f008 fb5e 	bl	2ebd8 <z_impl_k_sleep>
                printk("ADC reading[%u]:\n", count++);
   2651c:	4639      	mov	r1, r7
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   2651e:	e7a9      	b.n	26474 <main+0xa0>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
   26520:	79e2      	ldrb	r2, [r4, #7]
	resolution = spec->resolution;
   26522:	f894 9010 	ldrb.w	r9, [r4, #16]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
   26526:	2a04      	cmp	r2, #4
	const struct adc_driver_api *api =
   26528:	bf0a      	itet	eq
   2652a:	6822      	ldreq	r2, [r4, #0]
		vref_mv = spec->vref_mv;
   2652c:	89e1      	ldrhne	r1, [r4, #14]
	return api->ref_internal;
   2652e:	6892      	ldreq	r2, [r2, #8]
	if (spec->channel_cfg.differential) {
   26530:	f04f 0014 	mov.w	r0, #20
   26534:	fb00 6005 	mla	r0, r0, r5, r6
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
   26538:	bf08      	it	eq
   2653a:	8911      	ldrheq	r1, [r2, #8]
	if (spec->channel_cfg.differential) {
   2653c:	7a80      	ldrb	r0, [r0, #10]
	int32_t adc_mv = *valp * ref_mv;
   2653e:	fb08 f101 	mul.w	r1, r8, r1
	if (spec->channel_cfg.differential) {
   26542:	0683      	lsls	r3, r0, #26
		resolution -= 1U;
   26544:	bf48      	it	mi
   26546:	f109 32ff 	addmi.w	r2, r9, #4294967295	; 0xffffffff
	int32_t adc_mv = *valp * ref_mv;
   2654a:	9102      	str	r1, [sp, #8]
	int ret = adc_gain_invert(gain, &adc_mv);
   2654c:	79a0      	ldrb	r0, [r4, #6]
   2654e:	a902      	add	r1, sp, #8
		resolution -= 1U;
   26550:	bf48      	it	mi
   26552:	fa5f f982 	uxtbmi.w	r9, r2
	int ret = adc_gain_invert(gain, &adc_mv);
   26556:	f004 fe97 	bl	2b288 <adc_gain_invert>
	if (ret == 0) {
   2655a:	2800      	cmp	r0, #0
   2655c:	d105      	bne.n	2656a <main+0x196>
		*valp = (adc_mv >> resolution);
   2655e:	9b02      	ldr	r3, [sp, #8]
   26560:	fa43 f809 	asr.w	r8, r3, r9
				printk(" = %"PRId32" mV\n", val_mv);
   26564:	4641      	mov	r1, r8
   26566:	4658      	mov	r0, fp
   26568:	e7b7      	b.n	264da <main+0x106>
			if (err < 0) {
   2656a:	dbca      	blt.n	26502 <main+0x12e>
   2656c:	e7fa      	b.n	26564 <main+0x190>
   2656e:	bf00      	nop
   26570:	000310ec 	.word	0x000310ec
   26574:	00031100 	.word	0x00031100
   26578:	000313c4 	.word	0x000313c4
   2657c:	000313bc 	.word	0x000313bc
   26580:	000313b4 	.word	0x000313b4
   26584:	0003137e 	.word	0x0003137e
   26588:	00031608 	.word	0x00031608
   2658c:	0003162c 	.word	0x0003162c
   26590:	0003164e 	.word	0x0003164e
   26594:	00031378 	.word	0x00031378
   26598:	00032021 	.word	0x00032021
   2659c:	000316a6 	.word	0x000316a6
   265a0:	00031660 	.word	0x00031660
   265a4:	00031673 	.word	0x00031673
   265a8:	00031688 	.word	0x00031688

000265ac <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   265ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265b0:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   265b2:	0784      	lsls	r4, r0, #30
{
   265b4:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   265b6:	f002 0304 	and.w	r3, r2, #4
   265ba:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   265bc:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   265c0:	f103 0301 	add.w	r3, r3, #1
   265c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   265c8:	9203      	str	r2, [sp, #12]
   265ca:	4605      	mov	r5, r0
   265cc:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   265ce:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   265d0:	f040 81be 	bne.w	26950 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   265d4:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   265d6:	b130      	cbz	r0, 265e6 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   265d8:	2907      	cmp	r1, #7
   265da:	d809      	bhi.n	265f0 <cbvprintf_package+0x44>
		return -ENOSPC;
   265dc:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   265e0:	b011      	add	sp, #68	; 0x44
   265e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   265e6:	f001 0607 	and.w	r6, r1, #7
   265ea:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   265ec:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   265f0:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   265f2:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   265f6:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   265f8:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   265fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26600:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   26602:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   26606:	464f      	mov	r7, r9
	bool parsing = false;
   26608:	46cb      	mov	fp, r9
	size = sizeof(char *);
   2660a:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   2660c:	b10d      	cbz	r5, 26612 <cbvprintf_package+0x66>
				*(const char **)buf = s;
   2660e:	9a00      	ldr	r2, [sp, #0]
   26610:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   26612:	9805      	ldr	r0, [sp, #20]
   26614:	2800      	cmp	r0, #0
   26616:	f300 80eb 	bgt.w	267f0 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   2661a:	489a      	ldr	r0, [pc, #616]	; (26884 <cbvprintf_package+0x2d8>)
   2661c:	9a00      	ldr	r2, [sp, #0]
   2661e:	4282      	cmp	r2, r0
   26620:	d303      	bcc.n	2662a <cbvprintf_package+0x7e>
   26622:	4899      	ldr	r0, [pc, #612]	; (26888 <cbvprintf_package+0x2dc>)
   26624:	4282      	cmp	r2, r0
   26626:	f0c0 80e3 	bcc.w	267f0 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   2662a:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   2662c:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   26630:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   26632:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   26636:	f100 8106 	bmi.w	26846 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   2663a:	2f0f      	cmp	r7, #15
   2663c:	f200 80b4 	bhi.w	267a8 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   26640:	2d00      	cmp	r5, #0
   26642:	f000 8108 	beq.w	26856 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   26646:	f107 0240 	add.w	r2, r7, #64	; 0x40
   2664a:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   2664e:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   26650:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   26654:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   26658:	9804      	ldr	r0, [sp, #16]
   2665a:	3001      	adds	r0, #1
   2665c:	9004      	str	r0, [sp, #16]
   2665e:	e0ea      	b.n	26836 <cbvprintf_package+0x28a>
			switch (*fmt) {
   26660:	287a      	cmp	r0, #122	; 0x7a
   26662:	d860      	bhi.n	26726 <cbvprintf_package+0x17a>
   26664:	284b      	cmp	r0, #75	; 0x4b
   26666:	d80e      	bhi.n	26686 <cbvprintf_package+0xda>
   26668:	2847      	cmp	r0, #71	; 0x47
   2666a:	d85c      	bhi.n	26726 <cbvprintf_package+0x17a>
   2666c:	2829      	cmp	r0, #41	; 0x29
   2666e:	d82f      	bhi.n	266d0 <cbvprintf_package+0x124>
   26670:	2825      	cmp	r0, #37	; 0x25
   26672:	d055      	beq.n	26720 <cbvprintf_package+0x174>
   26674:	d857      	bhi.n	26726 <cbvprintf_package+0x17a>
   26676:	2820      	cmp	r0, #32
   26678:	d07d      	beq.n	26776 <cbvprintf_package+0x1ca>
   2667a:	3823      	subs	r0, #35	; 0x23
   2667c:	f1d0 0b00 	rsbs	fp, r0, #0
   26680:	eb4b 0b00 	adc.w	fp, fp, r0
   26684:	e077      	b.n	26776 <cbvprintf_package+0x1ca>
   26686:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   2668a:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   2668e:	d84a      	bhi.n	26726 <cbvprintf_package+0x17a>
   26690:	e8df f00c 	tbb	[pc, ip]
   26694:	49494971 	.word	0x49494971
   26698:	49494949 	.word	0x49494949
   2669c:	49494949 	.word	0x49494949
   266a0:	4949494c 	.word	0x4949494c
   266a4:	49494949 	.word	0x49494949
   266a8:	4c495a49 	.word	0x4c495a49
   266ac:	5a5a5a4c 	.word	0x5a5a5a4c
   266b0:	496e4c71 	.word	0x496e4c71
   266b4:	4c184971 	.word	0x4c184971
   266b8:	83494918 	.word	0x83494918
   266bc:	49494c80 	.word	0x49494c80
   266c0:	494c      	.short	0x494c
   266c2:	80          	.byte	0x80
   266c3:	00          	.byte	0x00
   266c4:	2000      	movs	r0, #0
   266c6:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   266ca:	f04f 0a04 	mov.w	sl, #4
   266ce:	e039      	b.n	26744 <cbvprintf_package+0x198>
			switch (*fmt) {
   266d0:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   266d4:	fa5f fc8c 	uxtb.w	ip, ip
   266d8:	2201      	movs	r2, #1
   266da:	fa02 fc0c 	lsl.w	ip, r2, ip
   266de:	ea1c 0f0e 	tst.w	ip, lr
   266e2:	d148      	bne.n	26776 <cbvprintf_package+0x1ca>
   266e4:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   266e8:	d12e      	bne.n	26748 <cbvprintf_package+0x19c>
   266ea:	ea1c 0b02 	ands.w	fp, ip, r2
   266ee:	d042      	beq.n	26776 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   266f0:	3c01      	subs	r4, #1
   266f2:	4454      	add	r4, sl
   266f4:	f1ca 0c00 	rsb	ip, sl, #0
   266f8:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   266fc:	2d00      	cmp	r5, #0
   266fe:	d061      	beq.n	267c4 <cbvprintf_package+0x218>
   26700:	eba3 0c05 	sub.w	ip, r3, r5
   26704:	44a4      	add	ip, r4
   26706:	45b4      	cmp	ip, r6
   26708:	f63f af68 	bhi.w	265dc <cbvprintf_package+0x30>
		if (is_str_arg) {
   2670c:	2800      	cmp	r0, #0
   2670e:	d168      	bne.n	267e2 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   26710:	2b04      	cmp	r3, #4
   26712:	d147      	bne.n	267a4 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   26714:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   26718:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   2671a:	3404      	adds	r4, #4
   2671c:	2304      	movs	r3, #4
   2671e:	e02a      	b.n	26776 <cbvprintf_package+0x1ca>
				arg_idx--;
   26720:	9a01      	ldr	r2, [sp, #4]
   26722:	3a01      	subs	r2, #1
   26724:	9201      	str	r2, [sp, #4]
				parsing = false;
   26726:	f04f 0b00 	mov.w	fp, #0
				continue;
   2672a:	e024      	b.n	26776 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   2672c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   26730:	286c      	cmp	r0, #108	; 0x6c
   26732:	d134      	bne.n	2679e <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   26734:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   26738:	2000      	movs	r0, #0
   2673a:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   2673c:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   2673e:	d1c4      	bne.n	266ca <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   26740:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   26744:	4653      	mov	r3, sl
   26746:	e7d3      	b.n	266f0 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   26748:	f108 0807 	add.w	r8, r8, #7
   2674c:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   26750:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   26752:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   26756:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   2675a:	b135      	cbz	r5, 2676a <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   2675c:	9806      	ldr	r0, [sp, #24]
   2675e:	4420      	add	r0, r4
   26760:	42b0      	cmp	r0, r6
   26762:	f63f af3b 	bhi.w	265dc <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   26766:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   2676a:	3408      	adds	r4, #8
				parsing = false;
   2676c:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   26770:	f04f 0a08 	mov.w	sl, #8
   26774:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   26776:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2677a:	2800      	cmp	r0, #0
   2677c:	d078      	beq.n	26870 <cbvprintf_package+0x2c4>
			if (!parsing) {
   2677e:	f1bb 0f00 	cmp.w	fp, #0
   26782:	f47f af6d 	bne.w	26660 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   26786:	2825      	cmp	r0, #37	; 0x25
   26788:	d1f5      	bne.n	26776 <cbvprintf_package+0x1ca>
					arg_idx++;
   2678a:	9b01      	ldr	r3, [sp, #4]
   2678c:	3301      	adds	r3, #1
   2678e:	9301      	str	r3, [sp, #4]
					parsing = true;
   26790:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   26794:	f04f 0a04 	mov.w	sl, #4
   26798:	e7ec      	b.n	26774 <cbvprintf_package+0x1c8>
			switch (*fmt) {
   2679a:	4658      	mov	r0, fp
   2679c:	e793      	b.n	266c6 <cbvprintf_package+0x11a>
   2679e:	2000      	movs	r0, #0
				parsing = false;
   267a0:	4683      	mov	fp, r0
   267a2:	e7a5      	b.n	266f0 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   267a4:	2b08      	cmp	r3, #8
   267a6:	d002      	beq.n	267ae <cbvprintf_package+0x202>
					return -EINVAL;
   267a8:	f06f 0015 	mvn.w	r0, #21
   267ac:	e718      	b.n	265e0 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   267ae:	f108 0807 	add.w	r8, r8, #7
   267b2:	f028 0807 	bic.w	r8, r8, #7
   267b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   267ba:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   267be:	3408      	adds	r4, #8
   267c0:	2308      	movs	r3, #8
   267c2:	e7d8      	b.n	26776 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   267c4:	b968      	cbnz	r0, 267e2 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   267c6:	2b04      	cmp	r3, #4
   267c8:	d102      	bne.n	267d0 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   267ca:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   267ce:	e7a4      	b.n	2671a <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   267d0:	2b08      	cmp	r3, #8
   267d2:	d1e9      	bne.n	267a8 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   267d4:	f108 0807 	add.w	r8, r8, #7
   267d8:	f028 0807 	bic.w	r8, r8, #7
   267dc:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   267e0:	e7ed      	b.n	267be <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   267e2:	9a05      	ldr	r2, [sp, #20]
   267e4:	3a01      	subs	r2, #1
   267e6:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   267e8:	f858 2b04 	ldr.w	r2, [r8], #4
   267ec:	9200      	str	r2, [sp, #0]
   267ee:	e70d      	b.n	2660c <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   267f0:	9a03      	ldr	r2, [sp, #12]
   267f2:	0790      	lsls	r0, r2, #30
   267f4:	d520      	bpl.n	26838 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   267f6:	eba4 0e05 	sub.w	lr, r4, r5
   267fa:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   267fe:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   26802:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   26806:	d2cf      	bcs.n	267a8 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   26808:	2f0f      	cmp	r7, #15
   2680a:	d8cd      	bhi.n	267a8 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   2680c:	b1f5      	cbz	r5, 2684c <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   2680e:	f107 0240 	add.w	r2, r7, #64	; 0x40
   26812:	eb0d 0e02 	add.w	lr, sp, r2
   26816:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   26818:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   2681a:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   2681e:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   26822:	f1bc 0f00 	cmp.w	ip, #0
   26826:	f43f af17 	beq.w	26658 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   2682a:	f060 007f 	orn	r0, r0, #127	; 0x7f
   2682e:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   26832:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   26836:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   26838:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   2683c:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   2683e:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   26840:	f64f 7eda 	movw	lr, #65498	; 0xffda
   26844:	e797      	b.n	26776 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   26846:	f04f 0c00 	mov.w	ip, #0
   2684a:	e7da      	b.n	26802 <cbvprintf_package+0x256>
				} else if (is_ro) {
   2684c:	f1bc 0f00 	cmp.w	ip, #0
   26850:	d001      	beq.n	26856 <cbvprintf_package+0x2aa>
					len += 1;
   26852:	3601      	adds	r6, #1
   26854:	e7ef      	b.n	26836 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   26856:	9802      	ldr	r0, [sp, #8]
					len += 2;
   26858:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   2685a:	2800      	cmp	r0, #0
   2685c:	d1eb      	bne.n	26836 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   2685e:	9800      	ldr	r0, [sp, #0]
   26860:	e9cd 3106 	strd	r3, r1, [sp, #24]
   26864:	f009 fd71 	bl	3034a <strlen>
   26868:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   2686c:	4406      	add	r6, r0
   2686e:	e7e2      	b.n	26836 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   26870:	1b63      	subs	r3, r4, r5
   26872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   26876:	d297      	bcs.n	267a8 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   26878:	b945      	cbnz	r5, 2688c <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   2687a:	f1a6 0408 	sub.w	r4, r6, #8
   2687e:	18e0      	adds	r0, r4, r3
   26880:	e6ae      	b.n	265e0 <cbvprintf_package+0x34>
   26882:	bf00      	nop
   26884:	00031060 	.word	0x00031060
   26888:	000324d0 	.word	0x000324d0
	if (rws_pos_en) {
   2688c:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   2688e:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   26890:	089b      	lsrs	r3, r3, #2
   26892:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   26894:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   26898:	b1c2      	cbz	r2, 268cc <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   2689a:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   2689c:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   268a0:	f1b9 0f00 	cmp.w	r9, #0
   268a4:	d005      	beq.n	268b2 <cbvprintf_package+0x306>
   268a6:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   268a8:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   268aa:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   268ae:	4297      	cmp	r7, r2
   268b0:	d10e      	bne.n	268d0 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   268b2:	f1c5 0301 	rsb	r3, r5, #1
   268b6:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   268ba:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   268be:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   268c0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   268c4:	4557      	cmp	r7, sl
   268c6:	d112      	bne.n	268ee <cbvprintf_package+0x342>
	return BUF_OFFSET;
   268c8:	1b60      	subs	r0, r4, r5
   268ca:	e689      	b.n	265e0 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   268cc:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   268ce:	e7e5      	b.n	2689c <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   268d0:	f810 3b01 	ldrb.w	r3, [r0], #1
   268d4:	0619      	lsls	r1, r3, #24
   268d6:	d508      	bpl.n	268ea <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   268d8:	eb04 0e0c 	add.w	lr, r4, ip
   268dc:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   268de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   268e2:	f63f ae7b 	bhi.w	265dc <cbvprintf_package+0x30>
			*buf++ = pos;
   268e6:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   268ea:	3201      	adds	r2, #1
   268ec:	e7df      	b.n	268ae <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   268ee:	f1b9 0f00 	cmp.w	r9, #0
   268f2:	d003      	beq.n	268fc <cbvprintf_package+0x350>
   268f4:	f998 2000 	ldrsb.w	r2, [r8]
   268f8:	2a00      	cmp	r2, #0
   268fa:	db17      	blt.n	2692c <cbvprintf_package+0x380>
		if (rws_pos_en) {
   268fc:	9b02      	ldr	r3, [sp, #8]
   268fe:	b1d3      	cbz	r3, 26936 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   26900:	f81a 200b 	ldrb.w	r2, [sl, fp]
   26904:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   26908:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   2690a:	9b01      	ldr	r3, [sp, #4]
   2690c:	1898      	adds	r0, r3, r2
   2690e:	4420      	add	r0, r4
   26910:	42b0      	cmp	r0, r6
   26912:	f63f ae63 	bhi.w	265dc <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   26916:	f898 0000 	ldrb.w	r0, [r8]
   2691a:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   2691e:	9900      	ldr	r1, [sp, #0]
   26920:	9203      	str	r2, [sp, #12]
   26922:	4620      	mov	r0, r4
   26924:	f009 fd18 	bl	30358 <memcpy>
		buf += size;
   26928:	9a03      	ldr	r2, [sp, #12]
   2692a:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   2692c:	f10a 0a01 	add.w	sl, sl, #1
   26930:	f108 0801 	add.w	r8, r8, #1
   26934:	e7c6      	b.n	268c4 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   26936:	f898 2000 	ldrb.w	r2, [r8]
   2693a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   2693e:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   26940:	9b02      	ldr	r3, [sp, #8]
   26942:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   26946:	9800      	ldr	r0, [sp, #0]
   26948:	f009 fcff 	bl	3034a <strlen>
   2694c:	1c42      	adds	r2, r0, #1
   2694e:	e7dc      	b.n	2690a <cbvprintf_package+0x35e>
		return -EFAULT;
   26950:	f06f 000d 	mvn.w	r0, #13
   26954:	e644      	b.n	265e0 <cbvprintf_package+0x34>
   26956:	bf00      	nop

00026958 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   26958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2695c:	b095      	sub	sp, #84	; 0x54
   2695e:	af00      	add	r7, sp, #0
   26960:	4604      	mov	r4, r0
   26962:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   26966:	61bb      	str	r3, [r7, #24]
   26968:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   2696c:	627a      	str	r2, [r7, #36]	; 0x24
   2696e:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   26970:	6239      	str	r1, [r7, #32]
   26972:	b951      	cbnz	r1, 2698a <cbprintf_package_convert+0x32>
	buf += ros_nbr;
   26974:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   26976:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   26978:	7880      	ldrb	r0, [r0, #2]
   2697a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2697e:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
   26980:	6a3b      	ldr	r3, [r7, #32]
   26982:	429e      	cmp	r6, r3
   26984:	d81a      	bhi.n	269bc <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
   26986:	1b03      	subs	r3, r0, r4
   26988:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   2698a:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   2698e:	78e3      	ldrb	r3, [r4, #3]
   26990:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   26992:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
   26994:	f1ba 0f00 	cmp.w	sl, #0
   26998:	d002      	beq.n	269a0 <cbprintf_package_convert+0x48>
   2699a:	f01b 0f01 	tst.w	fp, #1
   2699e:	d117      	bne.n	269d0 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
   269a0:	697b      	ldr	r3, [r7, #20]
   269a2:	bb5b      	cbnz	r3, 269fc <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   269a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   269a6:	b11b      	cbz	r3, 269b0 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
   269a8:	69ba      	ldr	r2, [r7, #24]
   269aa:	6a39      	ldr	r1, [r7, #32]
   269ac:	4620      	mov	r0, r4
   269ae:	4798      	blx	r3
		}

		return in_len;
   269b0:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   269b2:	4628      	mov	r0, r5
   269b4:	3754      	adds	r7, #84	; 0x54
   269b6:	46bd      	mov	sp, r7
   269b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   269bc:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
   269be:	4628      	mov	r0, r5
   269c0:	f009 fcc3 	bl	3034a <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
   269c4:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
   269c6:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
   269c8:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
   269ca:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
   269cc:	623b      	str	r3, [r7, #32]
   269ce:	e7d7      	b.n	26980 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
   269d0:	f894 8000 	ldrb.w	r8, [r4]
   269d4:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   269d6:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   269d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   269da:	ea4f 0288 	mov.w	r2, r8, lsl #2
   269de:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   269e0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   269e4:	2b00      	cmp	r3, #0
   269e6:	f040 8101 	bne.w	26bec <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
   269ea:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   269ec:	46c1      	mov	r9, r8
   269ee:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
   269f2:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   269f4:	454b      	cmp	r3, r9
   269f6:	d14e      	bne.n	26a96 <cbprintf_package_convert+0x13e>
   269f8:	44d0      	add	r8, sl
   269fa:	e013      	b.n	26a24 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
   269fc:	f01b 0f02 	tst.w	fp, #2
   26a00:	d0d0      	beq.n	269a4 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
   26a02:	f894 8000 	ldrb.w	r8, [r4]
   26a06:	ea4f 0388 	mov.w	r3, r8, lsl #2
   26a0a:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   26a0c:	6863      	ldr	r3, [r4, #4]
   26a0e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   26a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   26a12:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   26a16:	2b00      	cmp	r3, #0
   26a18:	d178      	bne.n	26b0c <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
   26a1a:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   26a1c:	f1ba 0f00 	cmp.w	sl, #0
   26a20:	d14e      	bne.n	26ac0 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
   26a22:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
   26a24:	f01b 0f05 	tst.w	fp, #5
   26a28:	bf0c      	ite	eq
   26a2a:	2302      	moveq	r3, #2
   26a2c:	2301      	movne	r3, #1
   26a2e:	627b      	str	r3, [r7, #36]	; 0x24
   26a30:	697b      	ldr	r3, [r7, #20]
   26a32:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   26a36:	f00b 0302 	and.w	r3, fp, #2
   26a3a:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
   26a3c:	45d0      	cmp	r8, sl
   26a3e:	d0b8      	beq.n	269b2 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
   26a40:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
   26a44:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   26a48:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
   26a4c:	4bac      	ldr	r3, [pc, #688]	; (26d00 <cbprintf_package_convert+0x3a8>)
   26a4e:	4599      	cmp	r9, r3
   26a50:	d302      	bcc.n	26a58 <cbprintf_package_convert+0x100>
   26a52:	4bac      	ldr	r3, [pc, #688]	; (26d04 <cbprintf_package_convert+0x3ac>)
   26a54:	4599      	cmp	r9, r3
   26a56:	d339      	bcc.n	26acc <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   26a58:	693b      	ldr	r3, [r7, #16]
   26a5a:	2b00      	cmp	r3, #0
   26a5c:	d043      	beq.n	26ae6 <cbprintf_package_convert+0x18e>
   26a5e:	69f8      	ldr	r0, [r7, #28]
   26a60:	f008 fc06 	bl	2f270 <is_ptr>
   26a64:	2800      	cmp	r0, #0
   26a66:	d03e      	beq.n	26ae6 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   26a68:	46e9      	mov	r9, sp
   26a6a:	b08a      	sub	sp, #40	; 0x28
   26a6c:	466a      	mov	r2, sp
   26a6e:	4ba6      	ldr	r3, [pc, #664]	; (26d08 <cbprintf_package_convert+0x3b0>)
   26a70:	6153      	str	r3, [r2, #20]
   26a72:	69fb      	ldr	r3, [r7, #28]
   26a74:	e9c2 3106 	strd	r3, r1, [r2, #24]
   26a78:	f44f 7300 	mov.w	r3, #512	; 0x200
   26a7c:	8413      	strh	r3, [r2, #32]
   26a7e:	4ba3      	ldr	r3, [pc, #652]	; (26d0c <cbprintf_package_convert+0x3b4>)
   26a80:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   26a84:	48a2      	ldr	r0, [pc, #648]	; (26d10 <cbprintf_package_convert+0x3b8>)
   26a86:	2300      	movs	r3, #0
   26a88:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   26a8c:	f001 f8b6 	bl	27bfc <z_impl_z_log_msg_static_create>
				out_len -= 2;
   26a90:	3d02      	subs	r5, #2
   26a92:	46cd      	mov	sp, r9
				continue;
   26a94:	e7d2      	b.n	26a3c <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
   26a96:	f819 2b01 	ldrb.w	r2, [r9], #1
   26a9a:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   26a9c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   26aa0:	f009 fc53 	bl	3034a <strlen>
				if (strl && strl_cnt < strl_len) {
   26aa4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   26aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   26aa8:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   26aaa:	b13a      	cbz	r2, 26abc <cbprintf_package_convert+0x164>
   26aac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   26ab0:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   26ab2:	bf3e      	ittt	cc
   26ab4:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   26ab6:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   26aba:	3601      	addcc	r6, #1
				out_len += len;
   26abc:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   26abe:	e799      	b.n	269f4 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   26ac0:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   26ac4:	bf1c      	itt	ne
   26ac6:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   26ac8:	44d0      	addne	r8, sl
   26aca:	e7ab      	b.n	26a24 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   26acc:	693b      	ldr	r3, [r7, #16]
   26ace:	b123      	cbz	r3, 26ada <cbprintf_package_convert+0x182>
   26ad0:	69f8      	ldr	r0, [r7, #28]
   26ad2:	f008 fbcd 	bl	2f270 <is_ptr>
   26ad6:	2800      	cmp	r0, #0
   26ad8:	d1c6      	bne.n	26a68 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   26ada:	f01b 0f01 	tst.w	fp, #1
   26ade:	d105      	bne.n	26aec <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
   26ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26ae2:	1aed      	subs	r5, r5, r3
   26ae4:	e7aa      	b.n	26a3c <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   26ae6:	6a3b      	ldr	r3, [r7, #32]
   26ae8:	2b00      	cmp	r3, #0
   26aea:	d0a7      	beq.n	26a3c <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
   26aec:	4648      	mov	r0, r9
   26aee:	f009 fc2c 	bl	3034a <strlen>
				if (strl && strl_cnt < strl_len) {
   26af2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   26af4:	b143      	cbz	r3, 26b08 <cbprintf_package_convert+0x1b0>
   26af6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   26afa:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   26afc:	bf3f      	itttt	cc
   26afe:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   26b00:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   26b02:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   26b06:	3601      	addcc	r6, #1
				out_len += (len - 1);
   26b08:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
   26b0a:	e797      	b.n	26a3c <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   26b0c:	f1ba 0f00 	cmp.w	sl, #0
   26b10:	d071      	beq.n	26bf6 <cbprintf_package_convert+0x29e>
   26b12:	f01b 0604 	ands.w	r6, fp, #4
   26b16:	d071      	beq.n	26bfc <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
   26b18:	46d1      	mov	r9, sl
		scpy_cnt = 0;
   26b1a:	2600      	movs	r6, #0
		dst = keep_str_pos;
   26b1c:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   26b20:	4652      	mov	r2, sl
   26b22:	4641      	mov	r1, r8
   26b24:	f009 fc18 	bl	30358 <memcpy>
	str_pos += ros_nbr;
   26b28:	697b      	ldr	r3, [r7, #20]
   26b2a:	005b      	lsls	r3, r3, #1
   26b2c:	60bb      	str	r3, [r7, #8]
   26b2e:	697b      	ldr	r3, [r7, #20]
   26b30:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
   26b32:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   26b36:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   26b38:	f00b 0302 	and.w	r3, fp, #2
   26b3c:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   26b3e:	697b      	ldr	r3, [r7, #20]
   26b40:	4598      	cmp	r8, r3
   26b42:	d15d      	bne.n	26c00 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
   26b44:	7823      	ldrb	r3, [r4, #0]
   26b46:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   26b48:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   26b4a:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   26b4e:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   26b52:	bf0c      	ite	eq
   26b54:	ea4f 0159 	moveq.w	r1, r9, lsr #1
   26b58:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   26b5a:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   26b5e:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   26b60:	f040 809d 	bne.w	26c9e <cbprintf_package_convert+0x346>
   26b64:	f01b 0f04 	tst.w	fp, #4
   26b68:	bf14      	ite	ne
   26b6a:	4648      	movne	r0, r9
   26b6c:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   26b6e:	f894 b002 	ldrb.w	fp, [r4, #2]
   26b72:	f894 8003 	ldrb.w	r8, [r4, #3]
   26b76:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
   26b78:	7062      	strb	r2, [r4, #1]
   26b7a:	70a0      	strb	r0, [r4, #2]
   26b7c:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   26b7e:	69ba      	ldr	r2, [r7, #24]
   26b80:	68f9      	ldr	r1, [r7, #12]
   26b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26b84:	4620      	mov	r0, r4
   26b86:	4798      	blx	r3
	if (rv < 0) {
   26b88:	1e05      	subs	r5, r0, #0
   26b8a:	f6ff af12 	blt.w	269b2 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
   26b8e:	69fb      	ldr	r3, [r7, #28]
   26b90:	7023      	strb	r3, [r4, #0]
   26b92:	693b      	ldr	r3, [r7, #16]
   26b94:	7063      	strb	r3, [r4, #1]
   26b96:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   26b9a:	69ba      	ldr	r2, [r7, #24]
   26b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   26b9e:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   26ba2:	4649      	mov	r1, r9
   26ba4:	f107 0040 	add.w	r0, r7, #64	; 0x40
   26ba8:	4798      	blx	r3
	if (rv < 0) {
   26baa:	f1b0 0800 	subs.w	r8, r0, #0
   26bae:	f2c0 80a3 	blt.w	26cf8 <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   26bb2:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   26bb4:	69ba      	ldr	r2, [r7, #24]
   26bb6:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   26bb8:	eba3 010a 	sub.w	r1, r3, sl
   26bbc:	68fb      	ldr	r3, [r7, #12]
   26bbe:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   26bc0:	68bb      	ldr	r3, [r7, #8]
   26bc2:	1ac9      	subs	r1, r1, r3
   26bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26bc6:	4798      	blx	r3
	if (rv < 0) {
   26bc8:	2800      	cmp	r0, #0
   26bca:	f2c0 8097 	blt.w	26cfc <cbprintf_package_convert+0x3a4>
	out_len += rv;
   26bce:	44a8      	add	r8, r5
	out_len += rv;
   26bd0:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   26bd4:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   26bd8:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   26bdc:	45b3      	cmp	fp, r6
   26bde:	d360      	bcc.n	26ca2 <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
   26be0:	2100      	movs	r1, #0
   26be2:	69ba      	ldr	r2, [r7, #24]
   26be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26be6:	4608      	mov	r0, r1
   26be8:	4798      	blx	r3
	return out_len;
   26bea:	e6e2      	b.n	269b2 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
   26bec:	f04f 0900 	mov.w	r9, #0
   26bf0:	f107 0030 	add.w	r0, r7, #48	; 0x30
   26bf4:	e794      	b.n	26b20 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
   26bf6:	4656      	mov	r6, sl
		keep_cnt = 0;
   26bf8:	46d1      	mov	r9, sl
   26bfa:	e795      	b.n	26b28 <cbprintf_package_convert+0x1d0>
   26bfc:	46b1      	mov	r9, r6
   26bfe:	e793      	b.n	26b28 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
   26c00:	f818 1b02 	ldrb.w	r1, [r8], #2
   26c04:	4a3e      	ldr	r2, [pc, #248]	; (26d00 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
   26c06:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   26c0a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   26c0e:	4293      	cmp	r3, r2
   26c10:	d302      	bcc.n	26c18 <cbprintf_package_convert+0x2c0>
   26c12:	4a3c      	ldr	r2, [pc, #240]	; (26d04 <cbprintf_package_convert+0x3ac>)
   26c14:	4293      	cmp	r3, r2
   26c16:	d31c      	bcc.n	26c52 <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   26c18:	693b      	ldr	r3, [r7, #16]
   26c1a:	b123      	cbz	r3, 26c26 <cbprintf_package_convert+0x2ce>
   26c1c:	69f8      	ldr	r0, [r7, #28]
   26c1e:	f008 fb27 	bl	2f270 <is_ptr>
   26c22:	2800      	cmp	r0, #0
   26c24:	d18b      	bne.n	26b3e <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   26c26:	687b      	ldr	r3, [r7, #4]
   26c28:	b9f3      	cbnz	r3, 26c68 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
   26c2a:	f109 0228 	add.w	r2, r9, #40	; 0x28
   26c2e:	f107 0028 	add.w	r0, r7, #40	; 0x28
   26c32:	4402      	add	r2, r0
   26c34:	f109 0301 	add.w	r3, r9, #1
   26c38:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   26c3c:	f107 0250 	add.w	r2, r7, #80	; 0x50
   26c40:	fa52 f383 	uxtab	r3, r2, r3
   26c44:	f109 0902 	add.w	r9, r9, #2
   26c48:	fa5f f989 	uxtb.w	r9, r9
   26c4c:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   26c50:	e775      	b.n	26b3e <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   26c52:	693b      	ldr	r3, [r7, #16]
   26c54:	b12b      	cbz	r3, 26c62 <cbprintf_package_convert+0x30a>
   26c56:	69f8      	ldr	r0, [r7, #28]
   26c58:	f008 fb0a 	bl	2f270 <is_ptr>
   26c5c:	2800      	cmp	r0, #0
   26c5e:	f47f af6e 	bne.w	26b3e <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   26c62:	f01b 0f01 	tst.w	fp, #1
   26c66:	d009      	beq.n	26c7c <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   26c68:	f106 0228 	add.w	r2, r6, #40	; 0x28
   26c6c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   26c70:	1c73      	adds	r3, r6, #1
   26c72:	1856      	adds	r6, r2, r1
   26c74:	f806 5c20 	strb.w	r5, [r6, #-32]
   26c78:	b2de      	uxtb	r6, r3
   26c7a:	e760      	b.n	26b3e <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   26c7c:	f01b 0f04 	tst.w	fp, #4
   26c80:	f43f af5d 	beq.w	26b3e <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
   26c84:	f109 0228 	add.w	r2, r9, #40	; 0x28
   26c88:	f107 0128 	add.w	r1, r7, #40	; 0x28
   26c8c:	f109 0301 	add.w	r3, r9, #1
   26c90:	eb02 0901 	add.w	r9, r2, r1
   26c94:	f809 5c10 	strb.w	r5, [r9, #-16]
   26c98:	fa5f f983 	uxtb.w	r9, r3
   26c9c:	e74f      	b.n	26b3e <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   26c9e:	2000      	movs	r0, #0
   26ca0:	e765      	b.n	26b6e <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
   26ca2:	f81b 300a 	ldrb.w	r3, [fp, sl]
   26ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   26caa:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   26cae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   26cb0:	b1fb      	cbz	r3, 26cf2 <cbprintf_package_convert+0x39a>
   26cb2:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   26cb6:	69ba      	ldr	r2, [r7, #24]
   26cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26cba:	2101      	movs	r1, #1
   26cbc:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   26cc0:	4798      	blx	r3
		if (rv < 0) {
   26cc2:	2800      	cmp	r0, #0
   26cc4:	db1a      	blt.n	26cfc <cbprintf_package_convert+0x3a4>
		out_len += rv;
   26cc6:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   26cc8:	f1b8 0f00 	cmp.w	r8, #0
   26ccc:	d106      	bne.n	26cdc <cbprintf_package_convert+0x384>
   26cce:	4648      	mov	r0, r9
   26cd0:	f009 fb3b 	bl	3034a <strlen>
   26cd4:	f100 0801 	add.w	r8, r0, #1
   26cd8:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   26cdc:	69ba      	ldr	r2, [r7, #24]
   26cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26ce0:	4641      	mov	r1, r8
   26ce2:	4648      	mov	r0, r9
   26ce4:	4798      	blx	r3
		if (rv < 0) {
   26ce6:	2800      	cmp	r0, #0
   26ce8:	db08      	blt.n	26cfc <cbprintf_package_convert+0x3a4>
		out_len += rv;
   26cea:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   26cec:	f10b 0b01 	add.w	fp, fp, #1
   26cf0:	e774      	b.n	26bdc <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
   26cf2:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   26cf6:	e7de      	b.n	26cb6 <cbprintf_package_convert+0x35e>
   26cf8:	4645      	mov	r5, r8
   26cfa:	e65a      	b.n	269b2 <cbprintf_package_convert+0x5a>
   26cfc:	4605      	mov	r5, r0
   26cfe:	e658      	b.n	269b2 <cbprintf_package_convert+0x5a>
   26d00:	00031060 	.word	0x00031060
   26d04:	000324d0 	.word	0x000324d0
   26d08:	000316b0 	.word	0x000316b0
   26d0c:	01000004 	.word	0x01000004
   26d10:	000312dc 	.word	0x000312dc

00026d14 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   26d14:	4b01      	ldr	r3, [pc, #4]	; (26d1c <__printk_hook_install+0x8>)
   26d16:	6018      	str	r0, [r3, #0]
}
   26d18:	4770      	bx	lr
   26d1a:	bf00      	nop
   26d1c:	20000150 	.word	0x20000150

00026d20 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   26d20:	b530      	push	{r4, r5, lr}
   26d22:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   26d24:	2500      	movs	r5, #0
   26d26:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   26d2a:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   26d2c:	9500      	str	r5, [sp, #0]
   26d2e:	a903      	add	r1, sp, #12
   26d30:	4805      	ldr	r0, [pc, #20]	; (26d48 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   26d32:	9505      	str	r5, [sp, #20]
   26d34:	f000 f918 	bl	26f68 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   26d38:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   26d3c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   26d3e:	bfb8      	it	lt
   26d40:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   26d42:	b007      	add	sp, #28
   26d44:	bd30      	pop	{r4, r5, pc}
   26d46:	bf00      	nop
   26d48:	0002f2bf 	.word	0x0002f2bf

00026d4c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   26d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26d50:	8b05      	ldrh	r5, [r0, #24]
{
   26d52:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   26d54:	0728      	lsls	r0, r5, #28
{
   26d56:	4690      	mov	r8, r2
	if (processing) {
   26d58:	d411      	bmi.n	26d7e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   26d5a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26d5c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   26d60:	f040 80cd 	bne.w	26efe <process_event+0x1b2>
			evt = process_recheck(mgr);
   26d64:	4620      	mov	r0, r4
   26d66:	f008 fcc1 	bl	2f6ec <process_recheck>
		}

		if (evt == EVT_NOP) {
   26d6a:	b178      	cbz	r0, 26d8c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   26d6c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26d6e:	8b21      	ldrh	r1, [r4, #24]
   26d70:	2804      	cmp	r0, #4
   26d72:	d811      	bhi.n	26d98 <process_event+0x4c>
   26d74:	e8df f000 	tbb	[pc, r0]
   26d78:	856d10c3 	.word	0x856d10c3
   26d7c:	95          	.byte	0x95
   26d7d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   26d7e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   26d80:	bf0c      	ite	eq
   26d82:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   26d86:	f045 0520 	orrne.w	r5, r5, #32
   26d8a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   26d8c:	f388 8811 	msr	BASEPRI, r8
   26d90:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   26d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   26d98:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   26d9c:	45aa      	cmp	sl, r5
   26d9e:	f000 80a6 	beq.w	26eee <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   26da2:	2700      	movs	r7, #0
   26da4:	46b9      	mov	r9, r7
   26da6:	463e      	mov	r6, r7
   26da8:	68a3      	ldr	r3, [r4, #8]
   26daa:	2b00      	cmp	r3, #0
   26dac:	f000 80bd 	beq.w	26f2a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   26db0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   26db4:	8321      	strh	r1, [r4, #24]
   26db6:	f388 8811 	msr	BASEPRI, r8
   26dba:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   26dbe:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   26dc0:	2900      	cmp	r1, #0
   26dc2:	f000 80bb 	beq.w	26f3c <process_event+0x1f0>
	return node->next;
   26dc6:	680d      	ldr	r5, [r1, #0]
   26dc8:	2900      	cmp	r1, #0
   26dca:	f000 80b7 	beq.w	26f3c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   26dce:	f8d1 8004 	ldr.w	r8, [r1, #4]
   26dd2:	4633      	mov	r3, r6
   26dd4:	4652      	mov	r2, sl
   26dd6:	4620      	mov	r0, r4
   26dd8:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   26dda:	2d00      	cmp	r5, #0
   26ddc:	d076      	beq.n	26ecc <process_event+0x180>
   26dde:	682b      	ldr	r3, [r5, #0]
   26de0:	4629      	mov	r1, r5
   26de2:	461d      	mov	r5, r3
   26de4:	e7f0      	b.n	26dc8 <process_event+0x7c>
   26de6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   26dea:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   26dec:	2a01      	cmp	r2, #1
   26dee:	d81b      	bhi.n	26e28 <process_event+0xdc>
	list->head = NULL;
   26df0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26df2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   26df6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   26df8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26dfa:	b289      	uxth	r1, r1
	list->tail = NULL;
   26dfc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   26e00:	d109      	bne.n	26e16 <process_event+0xca>
   26e02:	463b      	mov	r3, r7
   26e04:	e003      	b.n	26e0e <process_event+0xc2>
				mgr->refs += 1U;
   26e06:	8b62      	ldrh	r2, [r4, #26]
   26e08:	3201      	adds	r2, #1
   26e0a:	8362      	strh	r2, [r4, #26]
	return node->next;
   26e0c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   26e0e:	2b00      	cmp	r3, #0
   26e10:	d1f9      	bne.n	26e06 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26e12:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   26e16:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   26e18:	4620      	mov	r0, r4
   26e1a:	f008 fc67 	bl	2f6ec <process_recheck>
   26e1e:	2800      	cmp	r0, #0
   26e20:	d07b      	beq.n	26f1a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   26e22:	f041 0120 	orr.w	r1, r1, #32
   26e26:	e077      	b.n	26f18 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   26e28:	2b04      	cmp	r3, #4
   26e2a:	d10a      	bne.n	26e42 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26e2c:	f021 0107 	bic.w	r1, r1, #7
   26e30:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   26e32:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   26e34:	4620      	mov	r0, r4
   26e36:	f008 fc59 	bl	2f6ec <process_recheck>
   26e3a:	b110      	cbz	r0, 26e42 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   26e3c:	f041 0120 	orr.w	r1, r1, #32
   26e40:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   26e42:	8b21      	ldrh	r1, [r4, #24]
   26e44:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   26e48:	45aa      	cmp	sl, r5
   26e4a:	d050      	beq.n	26eee <process_event+0x1a2>
   26e4c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   26e4e:	46b9      	mov	r9, r7
   26e50:	e7aa      	b.n	26da8 <process_event+0x5c>
			transit = mgr->transitions->start;
   26e52:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26e54:	f021 0107 	bic.w	r1, r1, #7
   26e58:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   26e5c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   26e5e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   26e62:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   26e64:	d12d      	bne.n	26ec2 <process_event+0x176>
		    || (transit != NULL)) {
   26e66:	f1b9 0f00 	cmp.w	r9, #0
   26e6a:	d040      	beq.n	26eee <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   26e6c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   26e70:	8321      	strh	r1, [r4, #24]
   26e72:	f388 8811 	msr	BASEPRI, r8
   26e76:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   26e7a:	493a      	ldr	r1, [pc, #232]	; (26f64 <process_event+0x218>)
   26e7c:	4620      	mov	r0, r4
   26e7e:	47c8      	blx	r9
   26e80:	e029      	b.n	26ed6 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26e82:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   26e86:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26e88:	f041 0104 	orr.w	r1, r1, #4
   26e8c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   26e8e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   26e90:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   26e94:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   26e96:	d0e6      	beq.n	26e66 <process_event+0x11a>
   26e98:	2700      	movs	r7, #0
		res = 0;
   26e9a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   26e9c:	f04f 0a04 	mov.w	sl, #4
   26ea0:	e782      	b.n	26da8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26ea2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   26ea6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26ea8:	f041 0105 	orr.w	r1, r1, #5
   26eac:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   26eae:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   26eb0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   26eb4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   26eb6:	d0d6      	beq.n	26e66 <process_event+0x11a>
   26eb8:	2700      	movs	r7, #0
		res = 0;
   26eba:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   26ebc:	f04f 0a05 	mov.w	sl, #5
   26ec0:	e772      	b.n	26da8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   26ec2:	2700      	movs	r7, #0
		res = 0;
   26ec4:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   26ec6:	f04f 0a06 	mov.w	sl, #6
   26eca:	e76d      	b.n	26da8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   26ecc:	462b      	mov	r3, r5
   26ece:	e787      	b.n	26de0 <process_event+0x94>
			if (transit != NULL) {
   26ed0:	f1b9 0f00 	cmp.w	r9, #0
   26ed4:	d1d1      	bne.n	26e7a <process_event+0x12e>
	__asm__ volatile(
   26ed6:	f04f 0320 	mov.w	r3, #32
   26eda:	f3ef 8811 	mrs	r8, BASEPRI
   26ede:	f383 8812 	msr	BASEPRI_MAX, r3
   26ee2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   26ee6:	8b23      	ldrh	r3, [r4, #24]
   26ee8:	f023 0308 	bic.w	r3, r3, #8
   26eec:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   26eee:	8b25      	ldrh	r5, [r4, #24]
   26ef0:	06ea      	lsls	r2, r5, #27
   26ef2:	d52e      	bpl.n	26f52 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   26ef4:	f025 0310 	bic.w	r3, r5, #16
   26ef8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   26efa:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   26efe:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26f00:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   26f02:	2e00      	cmp	r6, #0
   26f04:	f6bf af6f 	bge.w	26de6 <process_event+0x9a>
	list->head = NULL;
   26f08:	2300      	movs	r3, #0
		*clients = mgr->clients;
   26f0a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   26f0c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   26f10:	f021 0107 	bic.w	r1, r1, #7
   26f14:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   26f18:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   26f1a:	8b21      	ldrh	r1, [r4, #24]
   26f1c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   26f20:	45aa      	cmp	sl, r5
   26f22:	f04f 0900 	mov.w	r9, #0
   26f26:	f47f af3f 	bne.w	26da8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   26f2a:	2f00      	cmp	r7, #0
   26f2c:	d09b      	beq.n	26e66 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   26f2e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   26f32:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   26f34:	f388 8811 	msr	BASEPRI, r8
   26f38:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   26f3c:	2f00      	cmp	r7, #0
   26f3e:	d0c7      	beq.n	26ed0 <process_event+0x184>
	return node->next;
   26f40:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   26f42:	4639      	mov	r1, r7
   26f44:	4633      	mov	r3, r6
   26f46:	4652      	mov	r2, sl
   26f48:	4620      	mov	r0, r4
   26f4a:	f008 fbfb 	bl	2f744 <notify_one>
	list->head = node;
   26f4e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   26f50:	e7f4      	b.n	26f3c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   26f52:	06ab      	lsls	r3, r5, #26
   26f54:	f57f af1a 	bpl.w	26d8c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   26f58:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   26f5c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   26f5e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   26f62:	e6ff      	b.n	26d64 <process_event+0x18>
   26f64:	0002f771 	.word	0x0002f771

00026f68 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   26f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f6c:	4681      	mov	r9, r0
   26f6e:	b095      	sub	sp, #84	; 0x54
   26f70:	468b      	mov	fp, r1
   26f72:	4617      	mov	r7, r2
   26f74:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   26f76:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   26f78:	7838      	ldrb	r0, [r7, #0]
   26f7a:	b908      	cbnz	r0, 26f80 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   26f7c:	4628      	mov	r0, r5
   26f7e:	e358      	b.n	27632 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   26f80:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   26f82:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   26f84:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   26f86:	d006      	beq.n	26f96 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   26f88:	4659      	mov	r1, fp
   26f8a:	47c8      	blx	r9
   26f8c:	2800      	cmp	r0, #0
   26f8e:	f2c0 8350 	blt.w	27632 <z_cbvprintf_impl+0x6ca>
   26f92:	3501      	adds	r5, #1
		if (bps == NULL) {
   26f94:	e1fb      	b.n	2738e <z_cbvprintf_impl+0x426>
		} state = {
   26f96:	2218      	movs	r2, #24
   26f98:	2100      	movs	r1, #0
   26f9a:	a80e      	add	r0, sp, #56	; 0x38
   26f9c:	f009 f9e7 	bl	3036e <memset>
	if (*sp == '%') {
   26fa0:	787b      	ldrb	r3, [r7, #1]
   26fa2:	2b25      	cmp	r3, #37	; 0x25
   26fa4:	d07d      	beq.n	270a2 <z_cbvprintf_impl+0x13a>
   26fa6:	2300      	movs	r3, #0
   26fa8:	1c78      	adds	r0, r7, #1
   26faa:	4698      	mov	r8, r3
   26fac:	469e      	mov	lr, r3
   26fae:	469c      	mov	ip, r3
   26fb0:	461e      	mov	r6, r3
   26fb2:	4601      	mov	r1, r0
		switch (*sp) {
   26fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
   26fb8:	2a2b      	cmp	r2, #43	; 0x2b
   26fba:	f000 80a1 	beq.w	27100 <z_cbvprintf_impl+0x198>
   26fbe:	f200 8098 	bhi.w	270f2 <z_cbvprintf_impl+0x18a>
   26fc2:	2a20      	cmp	r2, #32
   26fc4:	f000 809f 	beq.w	27106 <z_cbvprintf_impl+0x19e>
   26fc8:	2a23      	cmp	r2, #35	; 0x23
   26fca:	f000 809f 	beq.w	2710c <z_cbvprintf_impl+0x1a4>
   26fce:	b12b      	cbz	r3, 26fdc <z_cbvprintf_impl+0x74>
   26fd0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   26fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26fd8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   26fdc:	f1b8 0f00 	cmp.w	r8, #0
   26fe0:	d005      	beq.n	26fee <z_cbvprintf_impl+0x86>
   26fe2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   26fe6:	f043 0320 	orr.w	r3, r3, #32
   26fea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   26fee:	f1be 0f00 	cmp.w	lr, #0
   26ff2:	d005      	beq.n	27000 <z_cbvprintf_impl+0x98>
   26ff4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   26ff8:	f043 0310 	orr.w	r3, r3, #16
   26ffc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   27000:	f1bc 0f00 	cmp.w	ip, #0
   27004:	d005      	beq.n	27012 <z_cbvprintf_impl+0xaa>
   27006:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   2700a:	f043 0308 	orr.w	r3, r3, #8
   2700e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   27012:	b12e      	cbz	r6, 27020 <z_cbvprintf_impl+0xb8>
   27014:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   27018:	f043 0304 	orr.w	r3, r3, #4
   2701c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   27020:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   27024:	f003 0044 	and.w	r0, r3, #68	; 0x44
   27028:	2844      	cmp	r0, #68	; 0x44
   2702a:	d103      	bne.n	27034 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   2702c:	f36f 1386 	bfc	r3, #6, #1
   27030:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   27034:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   27038:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   2703a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2703e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   27042:	d17f      	bne.n	27144 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   27044:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   27048:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   2704c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   2704e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   27052:	781a      	ldrb	r2, [r3, #0]
   27054:	2a2e      	cmp	r2, #46	; 0x2e
   27056:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   2705a:	bf0c      	ite	eq
   2705c:	2101      	moveq	r1, #1
   2705e:	2100      	movne	r1, #0
   27060:	f361 0241 	bfi	r2, r1, #1, #1
   27064:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   27068:	d178      	bne.n	2715c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   2706a:	785a      	ldrb	r2, [r3, #1]
   2706c:	2a2a      	cmp	r2, #42	; 0x2a
   2706e:	d06e      	beq.n	2714e <z_cbvprintf_impl+0x1e6>
	++sp;
   27070:	3301      	adds	r3, #1
	size_t val = 0;
   27072:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   27074:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   27078:	4619      	mov	r1, r3
   2707a:	f811 0b01 	ldrb.w	r0, [r1], #1
   2707e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   27082:	2e09      	cmp	r6, #9
   27084:	f240 8095 	bls.w	271b2 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   27088:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   2708c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   2708e:	f3c1 0040 	ubfx	r0, r1, #1, #1
   27092:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   27096:	460a      	mov	r2, r1
   27098:	f360 0241 	bfi	r2, r0, #1, #1
   2709c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   270a0:	e05c      	b.n	2715c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   270a2:	1cba      	adds	r2, r7, #2
   270a4:	9203      	str	r2, [sp, #12]
   270a6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   270aa:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   270ae:	07da      	lsls	r2, r3, #31
   270b0:	f140 812e 	bpl.w	27310 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   270b4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   270b8:	f1b8 0f00 	cmp.w	r8, #0
   270bc:	da07      	bge.n	270ce <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   270be:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   270c2:	f042 0204 	orr.w	r2, r2, #4
   270c6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   270ca:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   270ce:	075e      	lsls	r6, r3, #29
   270d0:	f140 8127 	bpl.w	27322 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   270d4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   270d8:	f1ba 0f00 	cmp.w	sl, #0
   270dc:	f280 8126 	bge.w	2732c <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   270e0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   270e4:	f36f 0341 	bfc	r3, #1, #1
   270e8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   270ec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   270f0:	e11c      	b.n	2732c <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   270f2:	2a2d      	cmp	r2, #45	; 0x2d
   270f4:	d00d      	beq.n	27112 <z_cbvprintf_impl+0x1aa>
   270f6:	2a30      	cmp	r2, #48	; 0x30
   270f8:	f47f af69 	bne.w	26fce <z_cbvprintf_impl+0x66>
   270fc:	2301      	movs	r3, #1
	} while (loop);
   270fe:	e758      	b.n	26fb2 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   27100:	f04f 0c01 	mov.w	ip, #1
   27104:	e755      	b.n	26fb2 <z_cbvprintf_impl+0x4a>
   27106:	f04f 0e01 	mov.w	lr, #1
   2710a:	e752      	b.n	26fb2 <z_cbvprintf_impl+0x4a>
   2710c:	f04f 0801 	mov.w	r8, #1
   27110:	e74f      	b.n	26fb2 <z_cbvprintf_impl+0x4a>
   27112:	2601      	movs	r6, #1
   27114:	e74d      	b.n	26fb2 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   27116:	fb0e 6202 	mla	r2, lr, r2, r6
   2711a:	3a30      	subs	r2, #48	; 0x30
   2711c:	4603      	mov	r3, r0
   2711e:	4618      	mov	r0, r3
   27120:	f810 6b01 	ldrb.w	r6, [r0], #1
   27124:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   27128:	f1bc 0f09 	cmp.w	ip, #9
   2712c:	d9f3      	bls.n	27116 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   2712e:	4299      	cmp	r1, r3
   27130:	d08f      	beq.n	27052 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   27132:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   27136:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   27138:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   2713a:	f362 0141 	bfi	r1, r2, #1, #1
   2713e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   27142:	e786      	b.n	27052 <z_cbvprintf_impl+0xea>
   27144:	460b      	mov	r3, r1
	size_t val = 0;
   27146:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   27148:	f04f 0e0a 	mov.w	lr, #10
   2714c:	e7e7      	b.n	2711e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   2714e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   27152:	f042 0204 	orr.w	r2, r2, #4
   27156:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   2715a:	3302      	adds	r3, #2
	switch (*sp) {
   2715c:	781a      	ldrb	r2, [r3, #0]
   2715e:	2a6c      	cmp	r2, #108	; 0x6c
   27160:	d047      	beq.n	271f2 <z_cbvprintf_impl+0x28a>
   27162:	d82b      	bhi.n	271bc <z_cbvprintf_impl+0x254>
   27164:	2a68      	cmp	r2, #104	; 0x68
   27166:	d031      	beq.n	271cc <z_cbvprintf_impl+0x264>
   27168:	2a6a      	cmp	r2, #106	; 0x6a
   2716a:	d04b      	beq.n	27204 <z_cbvprintf_impl+0x29c>
   2716c:	2a4c      	cmp	r2, #76	; 0x4c
   2716e:	d051      	beq.n	27214 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   27170:	461a      	mov	r2, r3
   27172:	f812 3b01 	ldrb.w	r3, [r2], #1
   27176:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   27178:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   2717a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   2717e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   27182:	f200 80be 	bhi.w	27302 <z_cbvprintf_impl+0x39a>
   27186:	2b6d      	cmp	r3, #109	; 0x6d
   27188:	d851      	bhi.n	2722e <z_cbvprintf_impl+0x2c6>
   2718a:	2b69      	cmp	r3, #105	; 0x69
   2718c:	f200 80b9 	bhi.w	27302 <z_cbvprintf_impl+0x39a>
   27190:	2b57      	cmp	r3, #87	; 0x57
   27192:	d867      	bhi.n	27264 <z_cbvprintf_impl+0x2fc>
   27194:	2b41      	cmp	r3, #65	; 0x41
   27196:	d003      	beq.n	271a0 <z_cbvprintf_impl+0x238>
   27198:	3b45      	subs	r3, #69	; 0x45
   2719a:	2b02      	cmp	r3, #2
   2719c:	f200 80b1 	bhi.w	27302 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   271a0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   271a4:	2204      	movs	r2, #4
   271a6:	f362 0302 	bfi	r3, r2, #0, #3
   271aa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   271ae:	2301      	movs	r3, #1
			break;
   271b0:	e073      	b.n	2729a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   271b2:	fb0c 0202 	mla	r2, ip, r2, r0
   271b6:	3a30      	subs	r2, #48	; 0x30
   271b8:	460b      	mov	r3, r1
   271ba:	e75d      	b.n	27078 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   271bc:	2a74      	cmp	r2, #116	; 0x74
   271be:	d025      	beq.n	2720c <z_cbvprintf_impl+0x2a4>
   271c0:	2a7a      	cmp	r2, #122	; 0x7a
   271c2:	d1d5      	bne.n	27170 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   271c4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   271c8:	2106      	movs	r1, #6
   271ca:	e00c      	b.n	271e6 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   271cc:	785a      	ldrb	r2, [r3, #1]
   271ce:	2a68      	cmp	r2, #104	; 0x68
   271d0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   271d4:	d106      	bne.n	271e4 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   271d6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   271d8:	f361 02c6 	bfi	r2, r1, #3, #4
   271dc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   271e0:	3302      	adds	r3, #2
   271e2:	e7c5      	b.n	27170 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   271e4:	2102      	movs	r1, #2
   271e6:	f361 02c6 	bfi	r2, r1, #3, #4
   271ea:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   271ee:	3301      	adds	r3, #1
   271f0:	e7be      	b.n	27170 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   271f2:	785a      	ldrb	r2, [r3, #1]
   271f4:	2a6c      	cmp	r2, #108	; 0x6c
   271f6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   271fa:	d101      	bne.n	27200 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   271fc:	2104      	movs	r1, #4
   271fe:	e7eb      	b.n	271d8 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   27200:	2103      	movs	r1, #3
   27202:	e7f0      	b.n	271e6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   27204:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   27208:	2105      	movs	r1, #5
   2720a:	e7ec      	b.n	271e6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   2720c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   27210:	2107      	movs	r1, #7
   27212:	e7e8      	b.n	271e6 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   27214:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   27218:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   2721c:	f022 0202 	bic.w	r2, r2, #2
   27220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   27224:	f042 0202 	orr.w	r2, r2, #2
   27228:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   2722c:	e7df      	b.n	271ee <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   2722e:	3b6e      	subs	r3, #110	; 0x6e
   27230:	b2d9      	uxtb	r1, r3
   27232:	2301      	movs	r3, #1
   27234:	408b      	lsls	r3, r1
   27236:	f240 4182 	movw	r1, #1154	; 0x482
   2723a:	420b      	tst	r3, r1
   2723c:	d137      	bne.n	272ae <z_cbvprintf_impl+0x346>
   2723e:	f013 0f24 	tst.w	r3, #36	; 0x24
   27242:	d151      	bne.n	272e8 <z_cbvprintf_impl+0x380>
   27244:	07d8      	lsls	r0, r3, #31
   27246:	d55c      	bpl.n	27302 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   27248:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   2724c:	2103      	movs	r1, #3
   2724e:	f361 0302 	bfi	r3, r1, #0, #3
   27252:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   27256:	f002 0378 	and.w	r3, r2, #120	; 0x78
   2725a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   2725e:	424b      	negs	r3, r1
   27260:	414b      	adcs	r3, r1
   27262:	e01a      	b.n	2729a <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   27264:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   27268:	b2c9      	uxtb	r1, r1
   2726a:	2001      	movs	r0, #1
   2726c:	fa00 f101 	lsl.w	r1, r0, r1
   27270:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   27274:	d194      	bne.n	271a0 <z_cbvprintf_impl+0x238>
   27276:	f640 0601 	movw	r6, #2049	; 0x801
   2727a:	4231      	tst	r1, r6
   2727c:	d11d      	bne.n	272ba <z_cbvprintf_impl+0x352>
   2727e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   27282:	d03e      	beq.n	27302 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   27284:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   27288:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   2728c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   27290:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   27292:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   27296:	d034      	beq.n	27302 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   27298:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   2729a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   2729e:	f3c2 0140 	ubfx	r1, r2, #1, #1
   272a2:	430b      	orrs	r3, r1
   272a4:	f363 0241 	bfi	r2, r3, #1, #1
   272a8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   272ac:	e6fd      	b.n	270aa <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   272ae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   272b2:	2102      	movs	r1, #2
   272b4:	f361 0302 	bfi	r3, r1, #0, #3
   272b8:	e7e8      	b.n	2728c <z_cbvprintf_impl+0x324>
   272ba:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   272be:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   272c0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   272c4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   272c8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   272ca:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   272ce:	bf02      	ittt	eq
   272d0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   272d4:	f041 0101 	orreq.w	r1, r1, #1
   272d8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   272dc:	2b63      	cmp	r3, #99	; 0x63
   272de:	d1db      	bne.n	27298 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   272e0:	1e13      	subs	r3, r2, #0
   272e2:	bf18      	it	ne
   272e4:	2301      	movne	r3, #1
   272e6:	e7d8      	b.n	2729a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   272e8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   272ec:	2103      	movs	r1, #3
   272ee:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   272f2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   272f6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   272fa:	bf14      	ite	ne
   272fc:	2301      	movne	r3, #1
   272fe:	2300      	moveq	r3, #0
   27300:	e7cb      	b.n	2729a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   27302:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   27306:	f043 0301 	orr.w	r3, r3, #1
   2730a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   2730e:	e7c3      	b.n	27298 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   27310:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   27314:	2a00      	cmp	r2, #0
			width = conv->width_value;
   27316:	bfb4      	ite	lt
   27318:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   2731c:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
   27320:	e6d5      	b.n	270ce <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   27322:	0798      	lsls	r0, r3, #30
   27324:	f57f aee2 	bpl.w	270ec <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   27328:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   2732c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   27330:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   27332:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   27336:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   2733a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   2733e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   27340:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   27344:	d133      	bne.n	273ae <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   27346:	1ecb      	subs	r3, r1, #3
   27348:	2b04      	cmp	r3, #4
   2734a:	d804      	bhi.n	27356 <z_cbvprintf_impl+0x3ee>
   2734c:	e8df f003 	tbb	[pc, r3]
   27350:	21464621 	.word	0x21464621
   27354:	21          	.byte	0x21
   27355:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   27356:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   27358:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   2735a:	ea4f 72e3 	mov.w	r2, r3, asr #31
   2735e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   27362:	d11c      	bne.n	2739e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   27364:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   27368:	17da      	asrs	r2, r3, #31
   2736a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   2736e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   27370:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   27374:	f013 0603 	ands.w	r6, r3, #3
   27378:	d050      	beq.n	2741c <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   2737a:	9b03      	ldr	r3, [sp, #12]
   2737c:	463a      	mov	r2, r7
   2737e:	4659      	mov	r1, fp
   27380:	4648      	mov	r0, r9
   27382:	f008 fb13 	bl	2f9ac <outs>
   27386:	2800      	cmp	r0, #0
   27388:	f2c0 8153 	blt.w	27632 <z_cbvprintf_impl+0x6ca>
   2738c:	4405      	add	r5, r0
			continue;
   2738e:	9f03      	ldr	r7, [sp, #12]
   27390:	e5f2      	b.n	26f78 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   27392:	f854 3b04 	ldr.w	r3, [r4], #4
   27396:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   27398:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   2739c:	e7e8      	b.n	27370 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   2739e:	2902      	cmp	r1, #2
   273a0:	d1e5      	bne.n	2736e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   273a2:	b21a      	sxth	r2, r3
   273a4:	f343 33c0 	sbfx	r3, r3, #15, #1
   273a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   273ac:	e7df      	b.n	2736e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   273ae:	2b02      	cmp	r3, #2
   273b0:	d124      	bne.n	273fc <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   273b2:	1ecb      	subs	r3, r1, #3
   273b4:	2b04      	cmp	r3, #4
   273b6:	d804      	bhi.n	273c2 <z_cbvprintf_impl+0x45a>
   273b8:	e8df f003 	tbb	[pc, r3]
   273bc:	18101018 	.word	0x18101018
   273c0:	18          	.byte	0x18
   273c1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   273c2:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   273c4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   273c8:	f04f 0200 	mov.w	r2, #0
   273cc:	d014      	beq.n	273f8 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   273ce:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   273d0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   273d4:	d1cc      	bne.n	27370 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   273d6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   273d8:	930e      	str	r3, [sp, #56]	; 0x38
   273da:	e7c9      	b.n	27370 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   273dc:	3407      	adds	r4, #7
   273de:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   273e2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   273e6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   273ea:	e7c1      	b.n	27370 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   273ec:	f854 3b04 	ldr.w	r3, [r4], #4
   273f0:	930e      	str	r3, [sp, #56]	; 0x38
   273f2:	2300      	movs	r3, #0
   273f4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   273f6:	e7bb      	b.n	27370 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   273f8:	b2db      	uxtb	r3, r3
   273fa:	e7cd      	b.n	27398 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   273fc:	2b04      	cmp	r3, #4
   273fe:	d108      	bne.n	27412 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   27400:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   27402:	f024 0407 	bic.w	r4, r4, #7
   27406:	e9d4 2300 	ldrd	r2, r3, [r4]
   2740a:	3408      	adds	r4, #8
   2740c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   27410:	e7ae      	b.n	27370 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   27412:	2b03      	cmp	r3, #3
   27414:	d1ac      	bne.n	27370 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   27416:	f854 3b04 	ldr.w	r3, [r4], #4
   2741a:	e7dd      	b.n	273d8 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   2741c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   27420:	2878      	cmp	r0, #120	; 0x78
   27422:	d8b4      	bhi.n	2738e <z_cbvprintf_impl+0x426>
   27424:	2862      	cmp	r0, #98	; 0x62
   27426:	d81c      	bhi.n	27462 <z_cbvprintf_impl+0x4fa>
   27428:	2825      	cmp	r0, #37	; 0x25
   2742a:	f43f adad 	beq.w	26f88 <z_cbvprintf_impl+0x20>
   2742e:	2858      	cmp	r0, #88	; 0x58
   27430:	d1ad      	bne.n	2738e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   27432:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   27436:	9300      	str	r3, [sp, #0]
   27438:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   2743c:	ab08      	add	r3, sp, #32
   2743e:	aa10      	add	r2, sp, #64	; 0x40
   27440:	f008 fa6e 	bl	2f920 <encode_uint>
			if (precision >= 0) {
   27444:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   27448:	4607      	mov	r7, r0
			if (precision >= 0) {
   2744a:	f280 809a 	bge.w	27582 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   2744e:	2f00      	cmp	r7, #0
   27450:	d09d      	beq.n	2738e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   27452:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   27456:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   27458:	2e00      	cmp	r6, #0
   2745a:	f000 80c1 	beq.w	275e0 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   2745e:	3001      	adds	r0, #1
   27460:	e0be      	b.n	275e0 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   27462:	3863      	subs	r0, #99	; 0x63
   27464:	2815      	cmp	r0, #21
   27466:	d892      	bhi.n	2738e <z_cbvprintf_impl+0x426>
   27468:	a201      	add	r2, pc, #4	; (adr r2, 27470 <z_cbvprintf_impl+0x508>)
   2746a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   2746e:	bf00      	nop
   27470:	00027545 	.word	0x00027545
   27474:	00027557 	.word	0x00027557
   27478:	0002738f 	.word	0x0002738f
   2747c:	0002738f 	.word	0x0002738f
   27480:	0002738f 	.word	0x0002738f
   27484:	0002738f 	.word	0x0002738f
   27488:	00027557 	.word	0x00027557
   2748c:	0002738f 	.word	0x0002738f
   27490:	0002738f 	.word	0x0002738f
   27494:	0002738f 	.word	0x0002738f
   27498:	0002738f 	.word	0x0002738f
   2749c:	000275e5 	.word	0x000275e5
   274a0:	0002757d 	.word	0x0002757d
   274a4:	000275a3 	.word	0x000275a3
   274a8:	0002738f 	.word	0x0002738f
   274ac:	0002738f 	.word	0x0002738f
   274b0:	000274c9 	.word	0x000274c9
   274b4:	0002738f 	.word	0x0002738f
   274b8:	0002757d 	.word	0x0002757d
   274bc:	0002738f 	.word	0x0002738f
   274c0:	0002738f 	.word	0x0002738f
   274c4:	0002757d 	.word	0x0002757d
			if (precision >= 0) {
   274c8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   274cc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   274ce:	db35      	blt.n	2753c <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   274d0:	4651      	mov	r1, sl
   274d2:	4638      	mov	r0, r7
   274d4:	f008 ff57 	bl	30386 <strnlen>
			bpe = bps + len;
   274d8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   274dc:	2f00      	cmp	r7, #0
   274de:	f43f af56 	beq.w	2738e <z_cbvprintf_impl+0x426>
		char sign = 0;
   274e2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   274e4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   274e8:	f013 0210 	ands.w	r2, r3, #16
   274ec:	9205      	str	r2, [sp, #20]
   274ee:	f000 8093 	beq.w	27618 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   274f2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   274f4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   274f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   274f8:	bf48      	it	mi
   274fa:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   274fc:	9204      	str	r2, [sp, #16]
   274fe:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   27500:	bf48      	it	mi
   27502:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   27504:	f1b8 0f00 	cmp.w	r8, #0
   27508:	f340 80a0 	ble.w	2764c <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   2750c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   27510:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   27514:	f3c2 0380 	ubfx	r3, r2, #2, #1
   27518:	0750      	lsls	r0, r2, #29
   2751a:	9306      	str	r3, [sp, #24]
   2751c:	f100 8096 	bmi.w	2764c <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   27520:	0651      	lsls	r1, r2, #25
   27522:	f140 8089 	bpl.w	27638 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   27526:	b13e      	cbz	r6, 27538 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   27528:	4659      	mov	r1, fp
   2752a:	4630      	mov	r0, r6
   2752c:	47c8      	blx	r9
   2752e:	2800      	cmp	r0, #0
   27530:	db7f      	blt.n	27632 <z_cbvprintf_impl+0x6ca>
   27532:	9b06      	ldr	r3, [sp, #24]
   27534:	3501      	adds	r5, #1
   27536:	461e      	mov	r6, r3
					pad = '0';
   27538:	2230      	movs	r2, #48	; 0x30
   2753a:	e07e      	b.n	2763a <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   2753c:	4638      	mov	r0, r7
   2753e:	f008 ff04 	bl	3034a <strlen>
   27542:	e7c9      	b.n	274d8 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   27544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27546:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   2754a:	2600      	movs	r6, #0
			bps = buf;
   2754c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   2754e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   27552:	2001      	movs	r0, #1
   27554:	e7c6      	b.n	274e4 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   27556:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   27558:	bf5c      	itt	pl
   2755a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   2755e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   27560:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   27564:	bf48      	it	mi
   27566:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   27568:	2b00      	cmp	r3, #0
   2756a:	f6bf af62 	bge.w	27432 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   2756e:	4252      	negs	r2, r2
   27570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   27574:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   27578:	262d      	movs	r6, #45	; 0x2d
   2757a:	e75a      	b.n	27432 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   2757c:	2600      	movs	r6, #0
   2757e:	e758      	b.n	27432 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   27580:	2600      	movs	r6, #0
				conv->flag_zero = false;
   27582:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   27586:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   2758a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   2758c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   27590:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   27592:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   27596:	f67f af5a 	bls.w	2744e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   2759a:	ebaa 0303 	sub.w	r3, sl, r3
   2759e:	9311      	str	r3, [sp, #68]	; 0x44
   275a0:	e755      	b.n	2744e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   275a2:	980e      	ldr	r0, [sp, #56]	; 0x38
   275a4:	b390      	cbz	r0, 2760c <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   275a6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   275aa:	9300      	str	r3, [sp, #0]
   275ac:	aa10      	add	r2, sp, #64	; 0x40
   275ae:	ab08      	add	r3, sp, #32
   275b0:	2100      	movs	r1, #0
   275b2:	f008 f9b5 	bl	2f920 <encode_uint>
				conv->altform_0c = true;
   275b6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   275ba:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   275be:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   275c2:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   275c6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   275ca:	4607      	mov	r7, r0
				conv->altform_0c = true;
   275cc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   275d0:	dad6      	bge.n	27580 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   275d2:	2800      	cmp	r0, #0
   275d4:	f43f aedb 	beq.w	2738e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   275d8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   275dc:	1a18      	subs	r0, r3, r0
		char sign = 0;
   275de:	2600      	movs	r6, #0
   275e0:	469a      	mov	sl, r3
   275e2:	e77f      	b.n	274e4 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   275e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   275e6:	2907      	cmp	r1, #7
   275e8:	f63f aed1 	bhi.w	2738e <z_cbvprintf_impl+0x426>
   275ec:	e8df f001 	tbb	[pc, r1]
   275f0:	0c06040c 	.word	0x0c06040c
   275f4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   275f8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   275fa:	e6c8      	b.n	2738e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   275fc:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   275fe:	e6c6      	b.n	2738e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   27600:	17ea      	asrs	r2, r5, #31
   27602:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   27606:	e6c2      	b.n	2738e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   27608:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   2760a:	e6c0      	b.n	2738e <z_cbvprintf_impl+0x426>
   2760c:	4f2e      	ldr	r7, [pc, #184]	; (276c8 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   2760e:	4606      	mov	r6, r0
			bpe = bps + 5;
   27610:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   27614:	2005      	movs	r0, #5
   27616:	e765      	b.n	274e4 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   27618:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   2761a:	bf48      	it	mi
   2761c:	3001      	addmi	r0, #1
   2761e:	e769      	b.n	274f4 <z_cbvprintf_impl+0x58c>
   27620:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   27622:	4610      	mov	r0, r2
   27624:	9206      	str	r2, [sp, #24]
   27626:	4659      	mov	r1, fp
   27628:	47c8      	blx	r9
   2762a:	2800      	cmp	r0, #0
   2762c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   27630:	da04      	bge.n	2763c <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   27632:	b015      	add	sp, #84	; 0x54
   27634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   27638:	2220      	movs	r2, #32
					pad = '0';
   2763a:	4643      	mov	r3, r8
				while (width-- > 0) {
   2763c:	4619      	mov	r1, r3
   2763e:	2900      	cmp	r1, #0
   27640:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   27644:	dcec      	bgt.n	27620 <z_cbvprintf_impl+0x6b8>
   27646:	4445      	add	r5, r8
   27648:	1a6d      	subs	r5, r5, r1
   2764a:	4698      	mov	r8, r3
		if (sign != 0) {
   2764c:	b12e      	cbz	r6, 2765a <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   2764e:	4659      	mov	r1, fp
   27650:	4630      	mov	r0, r6
   27652:	47c8      	blx	r9
   27654:	2800      	cmp	r0, #0
   27656:	dbec      	blt.n	27632 <z_cbvprintf_impl+0x6ca>
   27658:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   2765a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   2765e:	06da      	lsls	r2, r3, #27
   27660:	d401      	bmi.n	27666 <z_cbvprintf_impl+0x6fe>
   27662:	071b      	lsls	r3, r3, #28
   27664:	d505      	bpl.n	27672 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   27666:	4659      	mov	r1, fp
   27668:	2030      	movs	r0, #48	; 0x30
   2766a:	47c8      	blx	r9
   2766c:	2800      	cmp	r0, #0
   2766e:	dbe0      	blt.n	27632 <z_cbvprintf_impl+0x6ca>
   27670:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   27672:	9b05      	ldr	r3, [sp, #20]
   27674:	b133      	cbz	r3, 27684 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   27676:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   2767a:	4659      	mov	r1, fp
   2767c:	47c8      	blx	r9
   2767e:	2800      	cmp	r0, #0
   27680:	dbd7      	blt.n	27632 <z_cbvprintf_impl+0x6ca>
   27682:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   27684:	9e04      	ldr	r6, [sp, #16]
   27686:	442e      	add	r6, r5
   27688:	e005      	b.n	27696 <z_cbvprintf_impl+0x72e>
				OUTC('0');
   2768a:	4659      	mov	r1, fp
   2768c:	2030      	movs	r0, #48	; 0x30
   2768e:	47c8      	blx	r9
   27690:	2800      	cmp	r0, #0
   27692:	dbce      	blt.n	27632 <z_cbvprintf_impl+0x6ca>
   27694:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   27696:	1b73      	subs	r3, r6, r5
   27698:	2b00      	cmp	r3, #0
   2769a:	dcf6      	bgt.n	2768a <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   2769c:	4653      	mov	r3, sl
   2769e:	463a      	mov	r2, r7
   276a0:	4659      	mov	r1, fp
   276a2:	4648      	mov	r0, r9
   276a4:	f008 f982 	bl	2f9ac <outs>
   276a8:	2800      	cmp	r0, #0
   276aa:	dbc2      	blt.n	27632 <z_cbvprintf_impl+0x6ca>
   276ac:	4405      	add	r5, r0
		while (width > 0) {
   276ae:	44a8      	add	r8, r5
   276b0:	eba8 0305 	sub.w	r3, r8, r5
   276b4:	2b00      	cmp	r3, #0
   276b6:	f77f ae6a 	ble.w	2738e <z_cbvprintf_impl+0x426>
			OUTC(' ');
   276ba:	4659      	mov	r1, fp
   276bc:	2020      	movs	r0, #32
   276be:	47c8      	blx	r9
   276c0:	2800      	cmp	r0, #0
   276c2:	dbb6      	blt.n	27632 <z_cbvprintf_impl+0x6ca>
   276c4:	3501      	adds	r5, #1
			--width;
   276c6:	e7f3      	b.n	276b0 <z_cbvprintf_impl+0x748>
   276c8:	00031764 	.word	0x00031764

000276cc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   276cc:	f004 bd48 	b.w	2c160 <SystemInit>

000276d0 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   276d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   276d4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 27730 <activate_foreach_backend+0x60>
{
   276d8:	4604      	mov	r4, r0
	while (mask_cpy) {
   276da:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   276dc:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   276e0:	b914      	cbnz	r4, 276e8 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   276e2:	4638      	mov	r0, r7
   276e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   276e8:	fa94 f5a4 	rbit	r5, r4
   276ec:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   276f0:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   276f4:	012e      	lsls	r6, r5, #4
   276f6:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   276fa:	ea6f 0a03 	mvn.w	sl, r3
   276fe:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   27702:	7b2b      	ldrb	r3, [r5, #12]
   27704:	2b00      	cmp	r3, #0
   27706:	d0eb      	beq.n	276e0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   27708:	f858 3006 	ldr.w	r3, [r8, r6]
   2770c:	691b      	ldr	r3, [r3, #16]
   2770e:	b94b      	cbnz	r3, 27724 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   27710:	4446      	add	r6, r8
			log_backend_enable(backend,
   27712:	2204      	movs	r2, #4
   27714:	6873      	ldr	r3, [r6, #4]
   27716:	4628      	mov	r0, r5
   27718:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   2771a:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   2771e:	f000 fa59 	bl	27bd4 <log_backend_enable>
   27722:	e7dd      	b.n	276e0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   27724:	4628      	mov	r0, r5
   27726:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   27728:	2800      	cmp	r0, #0
   2772a:	d1d9      	bne.n	276e0 <activate_foreach_backend+0x10>
   2772c:	e7f0      	b.n	27710 <activate_foreach_backend+0x40>
   2772e:	bf00      	nop
   27730:	0003134c 	.word	0x0003134c

00027734 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
   27734:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   27736:	4910      	ldr	r1, [pc, #64]	; (27778 <enable_logger+0x44>)
   27738:	4810      	ldr	r0, [pc, #64]	; (2777c <enable_logger+0x48>)
{
   2773a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   2773c:	2200      	movs	r2, #0
   2773e:	f009 fbd5 	bl	30eec <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   27742:	4d0f      	ldr	r5, [pc, #60]	; (27780 <enable_logger+0x4c>)
   27744:	490f      	ldr	r1, [pc, #60]	; (27784 <enable_logger+0x50>)
   27746:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   2774a:	2300      	movs	r3, #0
   2774c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   27750:	2400      	movs	r4, #0
   27752:	230e      	movs	r3, #14
   27754:	e9cd 3403 	strd	r3, r4, [sp, #12]
   27758:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2775c:	4b0a      	ldr	r3, [pc, #40]	; (27788 <enable_logger+0x54>)
   2775e:	9400      	str	r4, [sp, #0]
   27760:	f44f 7240 	mov.w	r2, #768	; 0x300
   27764:	4628      	mov	r0, r5
   27766:	f006 fc43 	bl	2dff0 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
   2776a:	4908      	ldr	r1, [pc, #32]	; (2778c <enable_logger+0x58>)
   2776c:	4628      	mov	r0, r5
   2776e:	f009 f948 	bl	30a02 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   27772:	4620      	mov	r0, r4
   27774:	b009      	add	sp, #36	; 0x24
   27776:	bd30      	pop	{r4, r5, pc}
   27778:	00027791 	.word	0x00027791
   2777c:	20000838 	.word	0x20000838
   27780:	200003b0 	.word	0x200003b0
   27784:	20001990 	.word	0x20001990
   27788:	00027a81 	.word	0x00027a81
   2778c:	0003176a 	.word	0x0003176a

00027790 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   27790:	4801      	ldr	r0, [pc, #4]	; (27798 <log_process_thread_timer_expiry_fn+0x8>)
   27792:	f006 bdbb 	b.w	2e30c <z_impl_k_sem_give>
   27796:	bf00      	nop
   27798:	200002c8 	.word	0x200002c8

0002779c <z_log_init>:
{
   2779c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   277a0:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   277a2:	481f      	ldr	r0, [pc, #124]	; (27820 <z_log_init+0x84>)
{
   277a4:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   277a6:	f008 fc29 	bl	2fffc <atomic_inc>
   277aa:	4606      	mov	r6, r0
   277ac:	2800      	cmp	r0, #0
   277ae:	d030      	beq.n	27812 <z_log_init+0x76>
	uint32_t mask = 0;
   277b0:	2500      	movs	r5, #0
}
   277b2:	4628      	mov	r0, r5
   277b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   277b8:	7b23      	ldrb	r3, [r4, #12]
   277ba:	b173      	cbz	r3, 277da <z_log_init+0x3e>
	if (backend->api->init) {
   277bc:	6823      	ldr	r3, [r4, #0]
   277be:	68db      	ldr	r3, [r3, #12]
   277c0:	b10b      	cbz	r3, 277c6 <z_log_init+0x2a>
		backend->api->init(backend);
   277c2:	4620      	mov	r0, r4
   277c4:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   277c6:	6823      	ldr	r3, [r4, #0]
   277c8:	691b      	ldr	r3, [r3, #16]
   277ca:	b9d3      	cbnz	r3, 27802 <z_log_init+0x66>
				log_backend_enable(backend,
   277cc:	6863      	ldr	r3, [r4, #4]
   277ce:	2204      	movs	r2, #4
   277d0:	6819      	ldr	r1, [r3, #0]
   277d2:	4620      	mov	r0, r4
   277d4:	f000 f9fe 	bl	27bd4 <log_backend_enable>
			i++;
   277d8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   277da:	3410      	adds	r4, #16
   277dc:	454c      	cmp	r4, r9
   277de:	d3eb      	bcc.n	277b8 <z_log_init+0x1c>
	if (blocking) {
   277e0:	f1b8 0f00 	cmp.w	r8, #0
   277e4:	d0e5      	beq.n	277b2 <z_log_init+0x16>
		while (mask) {
   277e6:	2d00      	cmp	r5, #0
   277e8:	d0e2      	beq.n	277b0 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   277ea:	4628      	mov	r0, r5
   277ec:	f7ff ff70 	bl	276d0 <activate_foreach_backend>
   277f0:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   277f2:	2f00      	cmp	r7, #0
   277f4:	d0f7      	beq.n	277e6 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   277f6:	2100      	movs	r1, #0
   277f8:	f44f 70a4 	mov.w	r0, #328	; 0x148
   277fc:	f007 f9ec 	bl	2ebd8 <z_impl_k_sleep>
   27800:	e7f1      	b.n	277e6 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   27802:	4620      	mov	r0, r4
   27804:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   27806:	2800      	cmp	r0, #0
   27808:	d0e0      	beq.n	277cc <z_log_init+0x30>
				mask |= BIT(i);
   2780a:	fa0a f306 	lsl.w	r3, sl, r6
   2780e:	431d      	orrs	r5, r3
   27810:	e7e2      	b.n	277d8 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   27812:	4c04      	ldr	r4, [pc, #16]	; (27824 <z_log_init+0x88>)
   27814:	f8df 9010 	ldr.w	r9, [pc, #16]	; 27828 <z_log_init+0x8c>
	uint32_t mask = 0;
   27818:	4605      	mov	r5, r0
				mask |= BIT(i);
   2781a:	f04f 0a01 	mov.w	sl, #1
   2781e:	e7dd      	b.n	277dc <z_log_init+0x40>
   27820:	20000ba0 	.word	0x20000ba0
   27824:	0003134c 	.word	0x0003134c
   27828:	0003135c 	.word	0x0003135c

0002782c <log_format_func_t_get>:
}
   2782c:	4b01      	ldr	r3, [pc, #4]	; (27834 <log_format_func_t_get+0x8>)
   2782e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   27832:	4770      	bx	lr
   27834:	000313e0 	.word	0x000313e0

00027838 <log_set_timestamp_func>:
{
   27838:	b508      	push	{r3, lr}
   2783a:	4603      	mov	r3, r0
   2783c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   2783e:	b12b      	cbz	r3, 2784c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   27840:	4a04      	ldr	r2, [pc, #16]	; (27854 <log_set_timestamp_func+0x1c>)
   27842:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   27844:	f000 fc78 	bl	28138 <log_output_timestamp_freq_set>
	return 0;
   27848:	2000      	movs	r0, #0
}
   2784a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2784c:	f06f 0015 	mvn.w	r0, #21
   27850:	e7fb      	b.n	2784a <log_set_timestamp_func+0x12>
   27852:	bf00      	nop
   27854:	20000154 	.word	0x20000154

00027858 <z_log_notify_backend_enabled>:
{
   27858:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   2785a:	4c04      	ldr	r4, [pc, #16]	; (2786c <z_log_notify_backend_enabled+0x14>)
   2785c:	7823      	ldrb	r3, [r4, #0]
   2785e:	b913      	cbnz	r3, 27866 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   27860:	4803      	ldr	r0, [pc, #12]	; (27870 <z_log_notify_backend_enabled+0x18>)
   27862:	f006 fd53 	bl	2e30c <z_impl_k_sem_give>
	backend_attached = true;
   27866:	2301      	movs	r3, #1
   27868:	7023      	strb	r3, [r4, #0]
}
   2786a:	bd10      	pop	{r4, pc}
   2786c:	20001970 	.word	0x20001970
   27870:	200002c8 	.word	0x200002c8

00027874 <z_log_dropped>:
{
   27874:	b510      	push	{r4, lr}
   27876:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   27878:	4808      	ldr	r0, [pc, #32]	; (2789c <z_log_dropped+0x28>)
   2787a:	f008 fbbf 	bl	2fffc <atomic_inc>
	if (buffered) {
   2787e:	b15c      	cbz	r4, 27898 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   27880:	f3bf 8f5b 	dmb	ish
   27884:	4b06      	ldr	r3, [pc, #24]	; (278a0 <z_log_dropped+0x2c>)
   27886:	e853 1f00 	ldrex	r1, [r3]
   2788a:	3901      	subs	r1, #1
   2788c:	e843 1200 	strex	r2, r1, [r3]
   27890:	2a00      	cmp	r2, #0
   27892:	d1f8      	bne.n	27886 <z_log_dropped+0x12>
   27894:	f3bf 8f5b 	dmb	ish
}
   27898:	bd10      	pop	{r4, pc}
   2789a:	bf00      	nop
   2789c:	20000b98 	.word	0x20000b98
   278a0:	20000b9c 	.word	0x20000b9c

000278a4 <z_log_dropped_read_and_clear>:
}
   278a4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   278a6:	4b06      	ldr	r3, [pc, #24]	; (278c0 <z_log_dropped_read_and_clear+0x1c>)
   278a8:	f3bf 8f5b 	dmb	ish
   278ac:	4601      	mov	r1, r0
   278ae:	e853 0f00 	ldrex	r0, [r3]
   278b2:	e843 1200 	strex	r2, r1, [r3]
   278b6:	2a00      	cmp	r2, #0
   278b8:	d1f9      	bne.n	278ae <z_log_dropped_read_and_clear+0xa>
   278ba:	f3bf 8f5b 	dmb	ish
   278be:	4770      	bx	lr
   278c0:	20000b98 	.word	0x20000b98

000278c4 <dropped_notify>:
{
   278c4:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   278c6:	f7ff ffed 	bl	278a4 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   278ca:	4c08      	ldr	r4, [pc, #32]	; (278ec <dropped_notify+0x28>)
   278cc:	4e08      	ldr	r6, [pc, #32]	; (278f0 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   278ce:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   278d0:	42b4      	cmp	r4, r6
   278d2:	d300      	bcc.n	278d6 <dropped_notify+0x12>
}
   278d4:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   278d6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   278d8:	795b      	ldrb	r3, [r3, #5]
   278da:	b12b      	cbz	r3, 278e8 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   278dc:	6823      	ldr	r3, [r4, #0]
   278de:	685b      	ldr	r3, [r3, #4]
   278e0:	b113      	cbz	r3, 278e8 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   278e2:	4629      	mov	r1, r5
   278e4:	4620      	mov	r0, r4
   278e6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   278e8:	3410      	adds	r4, #16
   278ea:	e7f1      	b.n	278d0 <dropped_notify+0xc>
   278ec:	0003134c 	.word	0x0003134c
   278f0:	0003135c 	.word	0x0003135c

000278f4 <z_log_msg_init>:
{
   278f4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   278f6:	4c04      	ldr	r4, [pc, #16]	; (27908 <z_log_msg_init+0x14>)
   278f8:	4904      	ldr	r1, [pc, #16]	; (2790c <z_log_msg_init+0x18>)
   278fa:	4620      	mov	r0, r4
   278fc:	f008 fa0f 	bl	2fd1e <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   27900:	4b03      	ldr	r3, [pc, #12]	; (27910 <z_log_msg_init+0x1c>)
   27902:	601c      	str	r4, [r3, #0]
}
   27904:	bd10      	pop	{r4, pc}
   27906:	bf00      	nop
   27908:	20000248 	.word	0x20000248
   2790c:	000313cc 	.word	0x000313cc
   27910:	20000b90 	.word	0x20000b90

00027914 <log_core_init>:
	panic_mode = false;
   27914:	4a08      	ldr	r2, [pc, #32]	; (27938 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   27916:	4809      	ldr	r0, [pc, #36]	; (2793c <log_core_init+0x28>)
{
   27918:	b508      	push	{r3, lr}
	panic_mode = false;
   2791a:	2300      	movs	r3, #0
   2791c:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   2791e:	4a08      	ldr	r2, [pc, #32]	; (27940 <log_core_init+0x2c>)
   27920:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
   27922:	4a08      	ldr	r2, [pc, #32]	; (27944 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
   27924:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
   27928:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   2792a:	f7ff ff85 	bl	27838 <log_set_timestamp_func>
}
   2792e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   27932:	f7ff bfdf 	b.w	278f4 <z_log_msg_init>
   27936:	bf00      	nop
   27938:	20001971 	.word	0x20001971
   2793c:	0002fff9 	.word	0x0002fff9
   27940:	20000b98 	.word	0x20000b98
   27944:	20000b9c 	.word	0x20000b9c

00027948 <z_log_msg_alloc>:
{
   27948:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   2794a:	2200      	movs	r2, #0
   2794c:	4801      	ldr	r0, [pc, #4]	; (27954 <z_log_msg_alloc+0xc>)
   2794e:	2300      	movs	r3, #0
   27950:	f008 ba06 	b.w	2fd60 <mpsc_pbuf_alloc>
   27954:	20000248 	.word	0x20000248

00027958 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   27958:	4801      	ldr	r0, [pc, #4]	; (27960 <z_log_msg_local_claim+0x8>)
   2795a:	f008 ba9f 	b.w	2fe9c <mpsc_pbuf_claim>
   2795e:	bf00      	nop
   27960:	20000248 	.word	0x20000248

00027964 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   27964:	4b02      	ldr	r3, [pc, #8]	; (27970 <z_log_msg_free+0xc>)
{
   27966:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   27968:	6818      	ldr	r0, [r3, #0]
   2796a:	f008 bae9 	b.w	2ff40 <mpsc_pbuf_free>
   2796e:	bf00      	nop
   27970:	20000b90 	.word	0x20000b90

00027974 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   27974:	4801      	ldr	r0, [pc, #4]	; (2797c <z_log_msg_pending+0x8>)
   27976:	f008 bb1f 	b.w	2ffb8 <mpsc_pbuf_is_pending>
   2797a:	bf00      	nop
   2797c:	20000248 	.word	0x20000248

00027980 <z_impl_log_process>:
{
   27980:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   27982:	4b28      	ldr	r3, [pc, #160]	; (27a24 <z_impl_log_process+0xa4>)
   27984:	7818      	ldrb	r0, [r3, #0]
   27986:	2800      	cmp	r0, #0
   27988:	d04b      	beq.n	27a22 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
   2798a:	f7ff ffe5 	bl	27958 <z_log_msg_local_claim>
	if (msg) {
   2798e:	4605      	mov	r5, r0
   27990:	b190      	cbz	r0, 279b8 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   27992:	f3bf 8f5b 	dmb	ish
   27996:	4b24      	ldr	r3, [pc, #144]	; (27a28 <z_impl_log_process+0xa8>)
   27998:	e853 1f00 	ldrex	r1, [r3]
   2799c:	3901      	subs	r1, #1
   2799e:	e843 1200 	strex	r2, r1, [r3]
   279a2:	2a00      	cmp	r2, #0
   279a4:	d1f8      	bne.n	27998 <z_impl_log_process+0x18>
   279a6:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   279aa:	4c20      	ldr	r4, [pc, #128]	; (27a2c <z_impl_log_process+0xac>)
   279ac:	4e20      	ldr	r6, [pc, #128]	; (27a30 <z_impl_log_process+0xb0>)
   279ae:	42b4      	cmp	r4, r6
   279b0:	d32d      	bcc.n	27a0e <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
   279b2:	4628      	mov	r0, r5
   279b4:	f7ff ffd6 	bl	27964 <z_log_msg_free>
	return dropped_cnt > 0;
   279b8:	4b1e      	ldr	r3, [pc, #120]	; (27a34 <z_impl_log_process+0xb4>)
   279ba:	4c1f      	ldr	r4, [pc, #124]	; (27a38 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
   279bc:	681b      	ldr	r3, [r3, #0]
   279be:	2b00      	cmp	r3, #0
   279c0:	dd19      	ble.n	279f6 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
   279c2:	f009 fa6b 	bl	30e9c <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   279c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   279ca:	fba0 0302 	umull	r0, r3, r0, r2
   279ce:	fb02 3101 	mla	r1, r2, r1, r3
   279d2:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   279d4:	e9d4 2000 	ldrd	r2, r0, [r4]
   279d8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   279dc:	1a9b      	subs	r3, r3, r2
   279de:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   279e2:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   279e6:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   279ea:	4293      	cmp	r3, r2
   279ec:	f171 0100 	sbcs.w	r1, r1, #0
   279f0:	d301      	bcc.n	279f6 <z_impl_log_process+0x76>
				dropped_notify();
   279f2:	f7ff ff67 	bl	278c4 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   279f6:	e9d4 3200 	ldrd	r3, r2, [r4]
   279fa:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   279fe:	f142 0200 	adc.w	r2, r2, #0
   27a02:	e9c4 3200 	strd	r3, r2, [r4]
}
   27a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   27a0a:	f7ff bfb3 	b.w	27974 <z_log_msg_pending>
	return backend->cb->active;
   27a0e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   27a10:	795b      	ldrb	r3, [r3, #5]
   27a12:	b123      	cbz	r3, 27a1e <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
   27a14:	6823      	ldr	r3, [r4, #0]
   27a16:	4629      	mov	r1, r5
   27a18:	681b      	ldr	r3, [r3, #0]
   27a1a:	4620      	mov	r0, r4
   27a1c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   27a1e:	3410      	adds	r4, #16
   27a20:	e7c5      	b.n	279ae <z_impl_log_process+0x2e>
}
   27a22:	bd70      	pop	{r4, r5, r6, pc}
   27a24:	20001970 	.word	0x20001970
   27a28:	20000b9c 	.word	0x20000b9c
   27a2c:	0003134c 	.word	0x0003134c
   27a30:	0003135c 	.word	0x0003135c
   27a34:	20000b98 	.word	0x20000b98
   27a38:	20000830 	.word	0x20000830

00027a3c <z_impl_log_panic>:
{
   27a3c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   27a3e:	4d0d      	ldr	r5, [pc, #52]	; (27a74 <z_impl_log_panic+0x38>)
   27a40:	7829      	ldrb	r1, [r5, #0]
   27a42:	b961      	cbnz	r1, 27a5e <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   27a44:	2001      	movs	r0, #1
   27a46:	f7ff fea9 	bl	2779c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   27a4a:	4c0b      	ldr	r4, [pc, #44]	; (27a78 <z_impl_log_panic+0x3c>)
   27a4c:	4e0b      	ldr	r6, [pc, #44]	; (27a7c <z_impl_log_panic+0x40>)
   27a4e:	42b4      	cmp	r4, r6
   27a50:	d306      	bcc.n	27a60 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   27a52:	f7ff ff95 	bl	27980 <z_impl_log_process>
		while (log_process() == true) {
   27a56:	2800      	cmp	r0, #0
   27a58:	d1fb      	bne.n	27a52 <z_impl_log_panic+0x16>
	panic_mode = true;
   27a5a:	2301      	movs	r3, #1
   27a5c:	702b      	strb	r3, [r5, #0]
}
   27a5e:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   27a60:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   27a62:	795b      	ldrb	r3, [r3, #5]
   27a64:	b11b      	cbz	r3, 27a6e <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   27a66:	6823      	ldr	r3, [r4, #0]
   27a68:	4620      	mov	r0, r4
   27a6a:	689b      	ldr	r3, [r3, #8]
   27a6c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   27a6e:	3410      	adds	r4, #16
   27a70:	e7ed      	b.n	27a4e <z_impl_log_panic+0x12>
   27a72:	bf00      	nop
   27a74:	20001971 	.word	0x20001971
   27a78:	0003134c 	.word	0x0003134c
   27a7c:	0003135c 	.word	0x0003135c

00027a80 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   27a80:	2100      	movs	r1, #0
{
   27a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   27a86:	4608      	mov	r0, r1
   27a88:	f7ff fe88 	bl	2779c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   27a8c:	4604      	mov	r4, r0
   27a8e:	b348      	cbz	r0, 27ae4 <log_process_thread_func+0x64>
   27a90:	f240 6867 	movw	r8, #1639	; 0x667
   27a94:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   27a98:	f007 f8d2 	bl	2ec40 <z_impl_z_current_get>
	proc_tid = process_tid;
   27a9c:	4b1a      	ldr	r3, [pc, #104]	; (27b08 <log_process_thread_func+0x88>)
   27a9e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   27aa0:	b130      	cbz	r0, 27ab0 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   27aa2:	4b1a      	ldr	r3, [pc, #104]	; (27b0c <log_process_thread_func+0x8c>)
	    process_tid &&
   27aa4:	681b      	ldr	r3, [r3, #0]
   27aa6:	2b09      	cmp	r3, #9
   27aa8:	dd02      	ble.n	27ab0 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   27aaa:	4819      	ldr	r0, [pc, #100]	; (27b10 <log_process_thread_func+0x90>)
   27aac:	f006 fc2e 	bl	2e30c <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   27ab0:	4f18      	ldr	r7, [pc, #96]	; (27b14 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   27ab2:	f8df a05c 	ldr.w	sl, [pc, #92]	; 27b10 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   27ab6:	2500      	movs	r5, #0
		if (activate_mask) {
   27ab8:	b144      	cbz	r4, 27acc <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   27aba:	4620      	mov	r0, r4
   27abc:	f7ff fe08 	bl	276d0 <activate_foreach_backend>
			if (!activate_mask) {
   27ac0:	4604      	mov	r4, r0
   27ac2:	b918      	cbnz	r0, 27acc <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   27ac4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   27ac8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   27acc:	f7ff ff58 	bl	27980 <z_impl_log_process>
		if (log_process() == false) {
   27ad0:	4606      	mov	r6, r0
   27ad2:	b928      	cbnz	r0, 27ae0 <log_process_thread_func+0x60>
			if (processed_any) {
   27ad4:	b9b5      	cbnz	r5, 27b04 <log_process_thread_func+0x84>
   27ad6:	4642      	mov	r2, r8
   27ad8:	464b      	mov	r3, r9
   27ada:	4650      	mov	r0, sl
   27adc:	f006 fc3a 	bl	2e354 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   27ae0:	4635      	mov	r5, r6
   27ae2:	e7e9      	b.n	27ab8 <log_process_thread_func+0x38>
   27ae4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   27ae8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   27aec:	e7d4      	b.n	27a98 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   27aee:	682b      	ldr	r3, [r5, #0]
   27af0:	699b      	ldr	r3, [r3, #24]
   27af2:	b11b      	cbz	r3, 27afc <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   27af4:	2200      	movs	r2, #0
   27af6:	4611      	mov	r1, r2
   27af8:	4628      	mov	r0, r5
   27afa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   27afc:	3510      	adds	r5, #16
   27afe:	42bd      	cmp	r5, r7
   27b00:	d3f5      	bcc.n	27aee <log_process_thread_func+0x6e>
   27b02:	e7e8      	b.n	27ad6 <log_process_thread_func+0x56>
   27b04:	4d04      	ldr	r5, [pc, #16]	; (27b18 <log_process_thread_func+0x98>)
   27b06:	e7fa      	b.n	27afe <log_process_thread_func+0x7e>
   27b08:	20000b94 	.word	0x20000b94
   27b0c:	20000b9c 	.word	0x20000b9c
   27b10:	200002c8 	.word	0x200002c8
   27b14:	0003135c 	.word	0x0003135c
   27b18:	0003134c 	.word	0x0003134c

00027b1c <z_log_msg_post_finalize>:
{
   27b1c:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   27b1e:	4818      	ldr	r0, [pc, #96]	; (27b80 <z_log_msg_post_finalize+0x64>)
   27b20:	f008 fa6c 	bl	2fffc <atomic_inc>
	if (panic_mode) {
   27b24:	4b17      	ldr	r3, [pc, #92]	; (27b84 <z_log_msg_post_finalize+0x68>)
   27b26:	781b      	ldrb	r3, [r3, #0]
   27b28:	b17b      	cbz	r3, 27b4a <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
   27b2a:	f04f 0320 	mov.w	r3, #32
   27b2e:	f3ef 8411 	mrs	r4, BASEPRI
   27b32:	f383 8812 	msr	BASEPRI_MAX, r3
   27b36:	f3bf 8f6f 	isb	sy
   27b3a:	f7ff ff21 	bl	27980 <z_impl_log_process>
	__asm__ volatile(
   27b3e:	f384 8811 	msr	BASEPRI, r4
   27b42:	f3bf 8f6f 	isb	sy
}
   27b46:	b002      	add	sp, #8
   27b48:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   27b4a:	4b0f      	ldr	r3, [pc, #60]	; (27b88 <z_log_msg_post_finalize+0x6c>)
   27b4c:	681b      	ldr	r3, [r3, #0]
   27b4e:	2b00      	cmp	r3, #0
   27b50:	d0f9      	beq.n	27b46 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   27b52:	b950      	cbnz	r0, 27b6a <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   27b54:	2200      	movs	r2, #0
   27b56:	2300      	movs	r3, #0
   27b58:	e9cd 2300 	strd	r2, r3, [sp]
   27b5c:	480b      	ldr	r0, [pc, #44]	; (27b8c <z_log_msg_post_finalize+0x70>)
   27b5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   27b62:	2300      	movs	r3, #0
   27b64:	f007 fab0 	bl	2f0c8 <z_impl_k_timer_start>
   27b68:	e7ed      	b.n	27b46 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   27b6a:	2809      	cmp	r0, #9
   27b6c:	d1eb      	bne.n	27b46 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   27b6e:	4807      	ldr	r0, [pc, #28]	; (27b8c <z_log_msg_post_finalize+0x70>)
   27b70:	f009 f9c8 	bl	30f04 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   27b74:	4806      	ldr	r0, [pc, #24]	; (27b90 <z_log_msg_post_finalize+0x74>)
}
   27b76:	b002      	add	sp, #8
   27b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27b7c:	f006 bbc6 	b.w	2e30c <z_impl_k_sem_give>
   27b80:	20000b9c 	.word	0x20000b9c
   27b84:	20001971 	.word	0x20001971
   27b88:	20000b94 	.word	0x20000b94
   27b8c:	20000838 	.word	0x20000838
   27b90:	200002c8 	.word	0x200002c8

00027b94 <z_log_msg_commit>:
{
   27b94:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   27b96:	4b06      	ldr	r3, [pc, #24]	; (27bb0 <z_log_msg_commit+0x1c>)
   27b98:	681b      	ldr	r3, [r3, #0]
{
   27b9a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   27b9c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   27b9e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   27ba0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   27ba2:	4804      	ldr	r0, [pc, #16]	; (27bb4 <z_log_msg_commit+0x20>)
   27ba4:	f008 f95a 	bl	2fe5c <mpsc_pbuf_commit>
}
   27ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   27bac:	f7ff bfb6 	b.w	27b1c <z_log_msg_post_finalize>
   27bb0:	20000154 	.word	0x20000154
   27bb4:	20000248 	.word	0x20000248

00027bb8 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)TYPE_SECTION_START(log_const))/
   27bb8:	4a04      	ldr	r2, [pc, #16]	; (27bcc <log_source_name_get+0x14>)
   27bba:	4b05      	ldr	r3, [pc, #20]	; (27bd0 <log_source_name_get+0x18>)
   27bbc:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   27bbe:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return TYPE_SECTION_START(log_const)[source_id].name;
   27bc2:	bf34      	ite	cc
   27bc4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   27bc8:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   27bca:	4770      	bx	lr
   27bcc:	000312bc 	.word	0x000312bc
   27bd0:	0003134c 	.word	0x0003134c

00027bd4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   27bd4:	4b08      	ldr	r3, [pc, #32]	; (27bf8 <log_backend_enable+0x24>)
   27bd6:	1ac3      	subs	r3, r0, r3
{
   27bd8:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   27bda:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   27bdc:	6844      	ldr	r4, [r0, #4]
   27bde:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   27be0:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   27be2:	6843      	ldr	r3, [r0, #4]
   27be4:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   27be6:	6843      	ldr	r3, [r0, #4]
   27be8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   27bea:	6843      	ldr	r3, [r0, #4]
   27bec:	2201      	movs	r2, #1
   27bee:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   27bf0:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   27bf2:	f7ff be31 	b.w	27858 <z_log_notify_backend_enabled>
   27bf6:	bf00      	nop
   27bf8:	0003134c 	.word	0x0003134c

00027bfc <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   27bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c00:	b08f      	sub	sp, #60	; 0x3c
   27c02:	af04      	add	r7, sp, #16
   27c04:	f3c1 284a 	ubfx	r8, r1, #9, #11
   27c08:	60b8      	str	r0, [r7, #8]
   27c0a:	460d      	mov	r5, r1
   27c0c:	4691      	mov	r9, r2
   27c0e:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   27c10:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   27c12:	f1b8 0f00 	cmp.w	r8, #0
   27c16:	d063      	beq.n	27ce0 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
   27c18:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
   27c1a:	f107 0314 	add.w	r3, r7, #20
   27c1e:	f04f 0b04 	mov.w	fp, #4
   27c22:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   27c26:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
   27c2a:	e9c7 6607 	strd	r6, r6, [r7, #28]
   27c2e:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   27c30:	9301      	str	r3, [sp, #4]
   27c32:	f8cd b008 	str.w	fp, [sp, #8]
   27c36:	f8cd a000 	str.w	sl, [sp]
   27c3a:	f107 031c 	add.w	r3, r7, #28
   27c3e:	68f9      	ldr	r1, [r7, #12]
   27c40:	4632      	mov	r2, r6
   27c42:	4648      	mov	r0, r9
   27c44:	f7fe fe88 	bl	26958 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
   27c48:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   27c4c:	4603      	mov	r3, r0
   27c4e:	d31c      	bcc.n	27c8a <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   27c50:	466c      	mov	r4, sp
   27c52:	b08a      	sub	sp, #40	; 0x28
   27c54:	f8d9 1004 	ldr.w	r1, [r9, #4]
   27c58:	ab04      	add	r3, sp, #16
   27c5a:	4826      	ldr	r0, [pc, #152]	; (27cf4 <z_impl_z_log_msg_static_create+0xf8>)
   27c5c:	e9c3 0105 	strd	r0, r1, [r3, #20]
   27c60:	f240 71ff 	movw	r1, #2047	; 0x7ff
   27c64:	61d9      	str	r1, [r3, #28]
   27c66:	461a      	mov	r2, r3
   27c68:	f44f 7100 	mov.w	r1, #512	; 0x200
   27c6c:	8419      	strh	r1, [r3, #32]
   27c6e:	4b22      	ldr	r3, [pc, #136]	; (27cf8 <z_impl_z_log_msg_static_create+0xfc>)
   27c70:	f842 3f10 	str.w	r3, [r2, #16]!
   27c74:	4821      	ldr	r0, [pc, #132]	; (27cfc <z_impl_z_log_msg_static_create+0x100>)
   27c76:	4633      	mov	r3, r6
   27c78:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   27c7c:	f7ff ffbe 	bl	27bfc <z_impl_z_log_msg_static_create>
   27c80:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
   27c82:	372c      	adds	r7, #44	; 0x2c
   27c84:	46bd      	mov	sp, r7
   27c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
   27c8a:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   27c8e:	f104 0017 	add.w	r0, r4, #23
   27c92:	4418      	add	r0, r3
   27c94:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   27c98:	0880      	lsrs	r0, r0, #2
   27c9a:	603b      	str	r3, [r7, #0]
   27c9c:	f7ff fe54 	bl	27948 <z_log_msg_alloc>
   27ca0:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
   27ca4:	4604      	mov	r4, r0
   27ca6:	b190      	cbz	r0, 27cce <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
   27ca8:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
   27caa:	4a15      	ldr	r2, [pc, #84]	; (27d00 <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
   27cac:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
   27cb0:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
   27cb4:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
   27cb8:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   27cba:	e9cd a300 	strd	sl, r3, [sp]
   27cbe:	f8cd b008 	str.w	fp, [sp, #8]
   27cc2:	68f9      	ldr	r1, [r7, #12]
   27cc4:	f107 031c 	add.w	r3, r7, #28
   27cc8:	4648      	mov	r0, r9
   27cca:	f7fe fe45 	bl	26958 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
   27cce:	f368 2553 	bfi	r5, r8, #9, #11
   27cd2:	687b      	ldr	r3, [r7, #4]
   27cd4:	68b9      	ldr	r1, [r7, #8]
   27cd6:	462a      	mov	r2, r5
   27cd8:	4620      	mov	r0, r4
   27cda:	f008 f9c5 	bl	30068 <z_log_msg_finalize>
   27cde:	e7d0      	b.n	27c82 <z_impl_z_log_msg_static_create+0x86>
   27ce0:	f104 0017 	add.w	r0, r4, #23
   27ce4:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   27ce8:	0880      	lsrs	r0, r0, #2
   27cea:	f7ff fe2d 	bl	27948 <z_log_msg_alloc>
   27cee:	4604      	mov	r4, r0
   27cf0:	e7ed      	b.n	27cce <z_impl_z_log_msg_static_create+0xd2>
   27cf2:	bf00      	nop
   27cf4:	0003177f 	.word	0x0003177f
   27cf8:	01000004 	.word	0x01000004
   27cfc:	000312ec 	.word	0x000312ec
   27d00:	0003003d 	.word	0x0003003d

00027d04 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   27d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d08:	b087      	sub	sp, #28
   27d0a:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   27d0e:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   27d12:	4604      	mov	r4, r0
   27d14:	460f      	mov	r7, r1
   27d16:	4693      	mov	fp, r2
   27d18:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   27d1a:	b3a6      	cbz	r6, 27d86 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   27d1c:	2110      	movs	r1, #16
   27d1e:	f8cd 9000 	str.w	r9, [sp]
   27d22:	4633      	mov	r3, r6
   27d24:	4652      	mov	r2, sl
   27d26:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   27d28:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   27d2c:	f7fe fc3e 	bl	265ac <cbvprintf_package>
   27d30:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   27d32:	f105 0017 	add.w	r0, r5, #23
   27d36:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   27d38:	4b14      	ldr	r3, [pc, #80]	; (27d8c <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   27d3a:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   27d3c:	f004 0407 	and.w	r4, r4, #7
   27d40:	f00b 0b07 	and.w	fp, fp, #7
   27d44:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   27d46:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   27d4a:	ea03 2341 	and.w	r3, r3, r1, lsl #9
   27d4e:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   27d52:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   27d54:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   27d56:	f7ff fdf7 	bl	27948 <z_log_msg_alloc>
	struct log_msg_desc desc =
   27d5a:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   27d5e:	4605      	mov	r5, r0
   27d60:	b140      	cbz	r0, 27d74 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   27d62:	b13e      	cbz	r6, 27d74 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   27d64:	9903      	ldr	r1, [sp, #12]
   27d66:	f8cd 9000 	str.w	r9, [sp]
   27d6a:	4633      	mov	r3, r6
   27d6c:	4652      	mov	r2, sl
   27d6e:	3010      	adds	r0, #16
   27d70:	f7fe fc1c 	bl	265ac <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   27d74:	4643      	mov	r3, r8
   27d76:	4622      	mov	r2, r4
   27d78:	4639      	mov	r1, r7
   27d7a:	4628      	mov	r0, r5
	}
}
   27d7c:	b007      	add	sp, #28
   27d7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   27d82:	f008 b971 	b.w	30068 <z_log_msg_finalize>
		plen = 0;
   27d86:	4631      	mov	r1, r6
   27d88:	e7d3      	b.n	27d32 <z_impl_z_log_msg_runtime_vcreate+0x2e>
   27d8a:	bf00      	nop
   27d8c:	000ffe00 	.word	0x000ffe00

00027d90 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   27d90:	b40e      	push	{r1, r2, r3}
   27d92:	b503      	push	{r0, r1, lr}
   27d94:	ab03      	add	r3, sp, #12
   27d96:	4601      	mov	r1, r0
   27d98:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   27d9c:	4804      	ldr	r0, [pc, #16]	; (27db0 <print_formatted+0x20>)
	va_start(args, fmt);
   27d9e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   27da0:	f008 f988 	bl	300b4 <cbvprintf>
	va_end(args);

	return length;
}
   27da4:	b002      	add	sp, #8
   27da6:	f85d eb04 	ldr.w	lr, [sp], #4
   27daa:	b003      	add	sp, #12
   27dac:	4770      	bx	lr
   27dae:	bf00      	nop
   27db0:	000300dd 	.word	0x000300dd

00027db4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   27db4:	06ca      	lsls	r2, r1, #27
   27db6:	d405      	bmi.n	27dc4 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   27db8:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   27dba:	bf4c      	ite	mi
   27dbc:	4902      	ldrmi	r1, [pc, #8]	; (27dc8 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   27dbe:	4903      	ldrpl	r1, [pc, #12]	; (27dcc <newline_print+0x18>)
   27dc0:	f7ff bfe6 	b.w	27d90 <print_formatted>
	}
}
   27dc4:	4770      	bx	lr
   27dc6:	bf00      	nop
   27dc8:	000317bf 	.word	0x000317bf
   27dcc:	000317be 	.word	0x000317be

00027dd0 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   27dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27dd4:	b089      	sub	sp, #36	; 0x24
   27dd6:	469b      	mov	fp, r3
   27dd8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   27ddc:	9304      	str	r3, [sp, #16]
   27dde:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
   27de2:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   27de4:	9b04      	ldr	r3, [sp, #16]
{
   27de6:	9206      	str	r2, [sp, #24]
   27de8:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   27dec:	4604      	mov	r4, r0
   27dee:	460d      	mov	r5, r1
	if (!raw_string) {
   27df0:	2b00      	cmp	r3, #0
   27df2:	f000 8087 	beq.w	27f04 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   27df6:	f006 0308 	and.w	r3, r6, #8
   27dfa:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   27dfc:	f008 f91c 	bl	30038 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   27e00:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   27e04:	4602      	mov	r2, r0
   27e06:	2800      	cmp	r0, #0
   27e08:	d04b      	beq.n	27ea2 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
   27e0a:	4986      	ldr	r1, [pc, #536]	; (28024 <log_output_process+0x254>)
   27e0c:	4620      	mov	r0, r4
   27e0e:	f7ff ffbf 	bl	27d90 <print_formatted>
   27e12:	4680      	mov	r8, r0
	if (stamp) {
   27e14:	f1ba 0f00 	cmp.w	sl, #0
   27e18:	d008      	beq.n	27e2c <log_output_process+0x5c>
	if (!format) {
   27e1a:	f016 0f44 	tst.w	r6, #68	; 0x44
   27e1e:	d142      	bne.n	27ea6 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   27e20:	4981      	ldr	r1, [pc, #516]	; (28028 <log_output_process+0x258>)
   27e22:	462a      	mov	r2, r5
   27e24:	4620      	mov	r0, r4
   27e26:	f7ff ffb3 	bl	27d90 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   27e2a:	4480      	add	r8, r0
	if (color) {
   27e2c:	f006 0301 	and.w	r3, r6, #1
   27e30:	b15b      	cbz	r3, 27e4a <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
   27e32:	4b7e      	ldr	r3, [pc, #504]	; (2802c <log_output_process+0x25c>)
   27e34:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   27e36:	497e      	ldr	r1, [pc, #504]	; (28030 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   27e38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   27e3c:	4b7d      	ldr	r3, [pc, #500]	; (28034 <log_output_process+0x264>)
   27e3e:	4620      	mov	r0, r4
   27e40:	2a00      	cmp	r2, #0
   27e42:	bf08      	it	eq
   27e44:	461a      	moveq	r2, r3
   27e46:	f7ff ffa3 	bl	27d90 <print_formatted>
	if (level_on) {
   27e4a:	f006 0308 	and.w	r3, r6, #8
   27e4e:	2b00      	cmp	r3, #0
   27e50:	d055      	beq.n	27efe <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
   27e52:	4b79      	ldr	r3, [pc, #484]	; (28038 <log_output_process+0x268>)
   27e54:	9a04      	ldr	r2, [sp, #16]
   27e56:	4979      	ldr	r1, [pc, #484]	; (2803c <log_output_process+0x26c>)
   27e58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   27e5c:	4620      	mov	r0, r4
   27e5e:	f7ff ff97 	bl	27d90 <print_formatted>
   27e62:	4605      	mov	r5, r0
	if (domain) {
   27e64:	9b06      	ldr	r3, [sp, #24]
   27e66:	b12b      	cbz	r3, 27e74 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
   27e68:	4975      	ldr	r1, [pc, #468]	; (28040 <log_output_process+0x270>)
   27e6a:	461a      	mov	r2, r3
   27e6c:	4620      	mov	r0, r4
   27e6e:	f7ff ff8f 	bl	27d90 <print_formatted>
   27e72:	4405      	add	r5, r0
	if (source) {
   27e74:	f1bb 0f00 	cmp.w	fp, #0
   27e78:	d005      	beq.n	27e86 <log_output_process+0xb6>
		total += print_formatted(output,
   27e7a:	4972      	ldr	r1, [pc, #456]	; (28044 <log_output_process+0x274>)
   27e7c:	465a      	mov	r2, fp
   27e7e:	4620      	mov	r0, r4
   27e80:	f7ff ff86 	bl	27d90 <print_formatted>
   27e84:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   27e86:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   27e88:	f1b9 0f00 	cmp.w	r9, #0
   27e8c:	d149      	bne.n	27f22 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   27e8e:	2f00      	cmp	r7, #0
   27e90:	d14f      	bne.n	27f32 <log_output_process+0x162>
	if (color) {
   27e92:	07f3      	lsls	r3, r6, #31
   27e94:	f100 80c0 	bmi.w	28018 <log_output_process+0x248>
	newline_print(output, flags);
   27e98:	4631      	mov	r1, r6
   27e9a:	4620      	mov	r0, r4
   27e9c:	f7ff ff8a 	bl	27db4 <newline_print>
}
   27ea0:	e0b4      	b.n	2800c <log_output_process+0x23c>
	uint32_t length = 0U;
   27ea2:	4680      	mov	r8, r0
   27ea4:	e7b6      	b.n	27e14 <log_output_process+0x44>
	} else if (freq != 0U) {
   27ea6:	4b68      	ldr	r3, [pc, #416]	; (28048 <log_output_process+0x278>)
   27ea8:	6818      	ldr	r0, [r3, #0]
   27eaa:	2800      	cmp	r0, #0
   27eac:	d0bd      	beq.n	27e2a <log_output_process+0x5a>
		timestamp /= timestamp_div;
   27eae:	4b67      	ldr	r3, [pc, #412]	; (2804c <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   27eb0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   27eb4:	681b      	ldr	r3, [r3, #0]
   27eb6:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   27eba:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   27ebe:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   27ec2:	fb00 5513 	mls	r5, r0, r3, r5
   27ec6:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   27eca:	fb0e f505 	mul.w	r5, lr, r5
   27ece:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   27ed2:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   27ed4:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   27ed8:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   27edc:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   27ee0:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   27ee4:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   27ee8:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   27eea:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   27eee:	4958      	ldr	r1, [pc, #352]	; (28050 <log_output_process+0x280>)
   27ef0:	e9cd c501 	strd	ip, r5, [sp, #4]
   27ef4:	4652      	mov	r2, sl
   27ef6:	4620      	mov	r0, r4
   27ef8:	f7ff ff4a 	bl	27d90 <print_formatted>
   27efc:	e795      	b.n	27e2a <log_output_process+0x5a>
	int total = 0;
   27efe:	f006 0508 	and.w	r5, r6, #8
   27f02:	e7af      	b.n	27e64 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   27f04:	f1bb 0f01 	cmp.w	fp, #1
   27f08:	d106      	bne.n	27f18 <log_output_process+0x148>
	if (package) {
   27f0a:	f1b9 0f00 	cmp.w	r9, #0
   27f0e:	d164      	bne.n	27fda <log_output_process+0x20a>
	if (data_len) {
   27f10:	2f00      	cmp	r7, #0
   27f12:	d07b      	beq.n	2800c <log_output_process+0x23c>
		prefix_offset = 0;
   27f14:	2500      	movs	r5, #0
   27f16:	e00c      	b.n	27f32 <log_output_process+0x162>
	if (package) {
   27f18:	f1b9 0f00 	cmp.w	r9, #0
   27f1c:	d0f8      	beq.n	27f10 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   27f1e:	484d      	ldr	r0, [pc, #308]	; (28054 <log_output_process+0x284>)
   27f20:	e05c      	b.n	27fdc <log_output_process+0x20c>
		cb = out_func;
   27f22:	484d      	ldr	r0, [pc, #308]	; (28058 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   27f24:	494d      	ldr	r1, [pc, #308]	; (2805c <log_output_process+0x28c>)
   27f26:	464b      	mov	r3, r9
   27f28:	4622      	mov	r2, r4
   27f2a:	f007 f970 	bl	2f20e <cbpprintf_external>
	if (data_len) {
   27f2e:	2f00      	cmp	r7, #0
   27f30:	d068      	beq.n	28004 <log_output_process+0x234>
		print_formatted(output, " ");
   27f32:	f8df 912c 	ldr.w	r9, [pc, #300]	; 28060 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   27f36:	f8df a12c 	ldr.w	sl, [pc, #300]	; 28064 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   27f3a:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   27f3c:	4631      	mov	r1, r6
   27f3e:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   27f40:	46b8      	mov	r8, r7
   27f42:	bf28      	it	cs
   27f44:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   27f48:	f7ff ff34 	bl	27db4 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   27f4c:	f04f 0b00 	mov.w	fp, #0
   27f50:	455d      	cmp	r5, fp
   27f52:	dc45      	bgt.n	27fe0 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
   27f54:	9b05      	ldr	r3, [sp, #20]
   27f56:	4651      	mov	r1, sl
   27f58:	781a      	ldrb	r2, [r3, #0]
   27f5a:	4620      	mov	r0, r4
   27f5c:	f7ff ff18 	bl	27d90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   27f60:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   27f64:	f01b 0f07 	tst.w	fp, #7
   27f68:	d103      	bne.n	27f72 <log_output_process+0x1a2>
			print_formatted(output, " ");
   27f6a:	4649      	mov	r1, r9
   27f6c:	4620      	mov	r0, r4
   27f6e:	f7ff ff0f 	bl	27d90 <print_formatted>
		if (i < length) {
   27f72:	45d8      	cmp	r8, fp
   27f74:	d93b      	bls.n	27fee <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
   27f76:	9b05      	ldr	r3, [sp, #20]
   27f78:	4651      	mov	r1, sl
   27f7a:	f813 200b 	ldrb.w	r2, [r3, fp]
   27f7e:	4620      	mov	r0, r4
   27f80:	f7ff ff06 	bl	27d90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   27f84:	f10b 0b01 	add.w	fp, fp, #1
   27f88:	f1bb 0f10 	cmp.w	fp, #16
   27f8c:	d1ea      	bne.n	27f64 <log_output_process+0x194>
	print_formatted(output, "|");
   27f8e:	4936      	ldr	r1, [pc, #216]	; (28068 <log_output_process+0x298>)
   27f90:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   27f92:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   27f96:	f7ff fefb 	bl	27d90 <print_formatted>
		if (i < length) {
   27f9a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   27f9c:	9b05      	ldr	r3, [sp, #20]
   27f9e:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   27fa0:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   27fa4:	295f      	cmp	r1, #95	; 0x5f
   27fa6:	bf28      	it	cs
   27fa8:	222e      	movcs	r2, #46	; 0x2e
   27faa:	4930      	ldr	r1, [pc, #192]	; (2806c <log_output_process+0x29c>)
   27fac:	4620      	mov	r0, r4
   27fae:	f7ff feef 	bl	27d90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   27fb2:	f10b 0b01 	add.w	fp, fp, #1
   27fb6:	f1bb 0f10 	cmp.w	fp, #16
   27fba:	d01d      	beq.n	27ff8 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
   27fbc:	f01b 0f07 	tst.w	fp, #7
   27fc0:	d103      	bne.n	27fca <log_output_process+0x1fa>
			print_formatted(output, " ");
   27fc2:	4649      	mov	r1, r9
   27fc4:	4620      	mov	r0, r4
   27fc6:	f7ff fee3 	bl	27d90 <print_formatted>
		if (i < length) {
   27fca:	45d8      	cmp	r8, fp
   27fcc:	465a      	mov	r2, fp
   27fce:	d8e5      	bhi.n	27f9c <log_output_process+0x1cc>
			print_formatted(output, " ");
   27fd0:	4649      	mov	r1, r9
   27fd2:	4620      	mov	r0, r4
   27fd4:	f7ff fedc 	bl	27d90 <print_formatted>
   27fd8:	e7eb      	b.n	27fb2 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   27fda:	481f      	ldr	r0, [pc, #124]	; (28058 <log_output_process+0x288>)
		prefix_offset = 0;
   27fdc:	9d04      	ldr	r5, [sp, #16]
   27fde:	e7a1      	b.n	27f24 <log_output_process+0x154>
		print_formatted(output, " ");
   27fe0:	4649      	mov	r1, r9
   27fe2:	4620      	mov	r0, r4
   27fe4:	f7ff fed4 	bl	27d90 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   27fe8:	f10b 0b01 	add.w	fp, fp, #1
   27fec:	e7b0      	b.n	27f50 <log_output_process+0x180>
			print_formatted(output, "   ");
   27fee:	4920      	ldr	r1, [pc, #128]	; (28070 <log_output_process+0x2a0>)
   27ff0:	4620      	mov	r0, r4
   27ff2:	f7ff fecd 	bl	27d90 <print_formatted>
   27ff6:	e7c5      	b.n	27f84 <log_output_process+0x1b4>
		data += length;
   27ff8:	9b05      	ldr	r3, [sp, #20]
	} while (len);
   27ffa:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   27ffe:	4443      	add	r3, r8
   28000:	9305      	str	r3, [sp, #20]
	} while (len);
   28002:	d19a      	bne.n	27f3a <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   28004:	9b04      	ldr	r3, [sp, #16]
   28006:	2b00      	cmp	r3, #0
   28008:	f47f af43 	bne.w	27e92 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   2800c:	4620      	mov	r0, r4
}
   2800e:	b009      	add	sp, #36	; 0x24
   28010:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   28014:	f008 b855 	b.w	300c2 <log_output_flush>
		print_formatted(output, "%s", log_color);
   28018:	4a06      	ldr	r2, [pc, #24]	; (28034 <log_output_process+0x264>)
   2801a:	4905      	ldr	r1, [pc, #20]	; (28030 <log_output_process+0x260>)
   2801c:	4620      	mov	r0, r4
   2801e:	f7ff feb7 	bl	27d90 <print_formatted>
}
   28022:	e739      	b.n	27e98 <log_output_process+0xc8>
   28024:	000317c6 	.word	0x000317c6
   28028:	000317ca 	.word	0x000317ca
   2802c:	000313f0 	.word	0x000313f0
   28030:	000317ef 	.word	0x000317ef
   28034:	000317c1 	.word	0x000317c1
   28038:	00031404 	.word	0x00031404
   2803c:	000317f2 	.word	0x000317f2
   28040:	000317f8 	.word	0x000317f8
   28044:	000317fc 	.word	0x000317fc
   28048:	20000ba8 	.word	0x20000ba8
   2804c:	20000ba4 	.word	0x20000ba4
   28050:	000317d3 	.word	0x000317d3
   28054:	00030113 	.word	0x00030113
   28058:	000300dd 	.word	0x000300dd
   2805c:	000300b5 	.word	0x000300b5
   28060:	00031809 	.word	0x00031809
   28064:	00031801 	.word	0x00031801
   28068:	0003180b 	.word	0x0003180b
   2806c:	0003180d 	.word	0x0003180d
   28070:	00031807 	.word	0x00031807

00028074 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   28074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   28078:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   2807a:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   2807c:	688e      	ldr	r6, [r1, #8]
   2807e:	b086      	sub	sp, #24
   28080:	4605      	mov	r5, r0
   28082:	460c      	mov	r4, r1
   28084:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   28086:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   2808a:	b15b      	cbz	r3, 280a4 <log_output_msg_process+0x30>
   2808c:	4a13      	ldr	r2, [pc, #76]	; (280dc <log_output_msg_process+0x68>)
   2808e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   28090:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   28094:	2900      	cmp	r1, #0
   28096:	db1f      	blt.n	280d8 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   28098:	7820      	ldrb	r0, [r4, #0]
   2809a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   2809e:	f7ff fd8b 	bl	27bb8 <log_source_name_get>
   280a2:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   280a4:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   280a6:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   280a8:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   280ac:	9700      	str	r7, [sp, #0]
   280ae:	f3c2 224a 	ubfx	r2, r2, #9, #11
   280b2:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   280b4:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   280b8:	f3c0 100b 	ubfx	r0, r0, #4, #12
   280bc:	bf08      	it	eq
   280be:	2100      	moveq	r1, #0
   280c0:	e9cd 0803 	strd	r0, r8, [sp, #12]
   280c4:	e9cd 1401 	strd	r1, r4, [sp, #4]
   280c8:	2200      	movs	r2, #0
   280ca:	4631      	mov	r1, r6
   280cc:	4628      	mov	r0, r5
   280ce:	f7ff fe7f 	bl	27dd0 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   280d2:	b006      	add	sp, #24
   280d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   280d8:	2300      	movs	r3, #0
   280da:	e7e3      	b.n	280a4 <log_output_msg_process+0x30>
   280dc:	000312bc 	.word	0x000312bc

000280e0 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   280e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   280e2:	f242 730f 	movw	r3, #9999	; 0x270f
   280e6:	428b      	cmp	r3, r1
   280e8:	bf28      	it	cs
   280ea:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   280ec:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   280ee:	4a0f      	ldr	r2, [pc, #60]	; (2812c <log_output_dropped_process+0x4c>)
{
   280f0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   280f2:	2105      	movs	r1, #5
   280f4:	4668      	mov	r0, sp
   280f6:	f007 f902 	bl	2f2fe <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   280fa:	6863      	ldr	r3, [r4, #4]
   280fc:	490c      	ldr	r1, [pc, #48]	; (28130 <log_output_dropped_process+0x50>)
   280fe:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   28100:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   28102:	220b      	movs	r2, #11
   28104:	4628      	mov	r0, r5
   28106:	f007 ffc8 	bl	3009a <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   2810a:	6863      	ldr	r3, [r4, #4]
   2810c:	4632      	mov	r2, r6
   2810e:	4669      	mov	r1, sp
   28110:	4628      	mov	r0, r5
   28112:	685b      	ldr	r3, [r3, #4]
   28114:	f007 ffc1 	bl	3009a <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   28118:	6863      	ldr	r3, [r4, #4]
   2811a:	4906      	ldr	r1, [pc, #24]	; (28134 <log_output_dropped_process+0x54>)
   2811c:	685b      	ldr	r3, [r3, #4]
   2811e:	221b      	movs	r2, #27
   28120:	4628      	mov	r0, r5
   28122:	f007 ffba 	bl	3009a <buffer_write>
		     output->control_block->ctx);
}
   28126:	b002      	add	sp, #8
   28128:	bd70      	pop	{r4, r5, r6, pc}
   2812a:	bf00      	nop
   2812c:	00032021 	.word	0x00032021
   28130:	0003182c 	.word	0x0003182c
   28134:	00031810 	.word	0x00031810

00028138 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   28138:	4a07      	ldr	r2, [pc, #28]	; (28158 <log_output_timestamp_freq_set+0x20>)
   2813a:	2100      	movs	r1, #0
   2813c:	2301      	movs	r3, #1
   2813e:	4290      	cmp	r0, r2
   28140:	d806      	bhi.n	28150 <log_output_timestamp_freq_set+0x18>
   28142:	4a06      	ldr	r2, [pc, #24]	; (2815c <log_output_timestamp_freq_set+0x24>)
   28144:	b901      	cbnz	r1, 28148 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   28146:	2301      	movs	r3, #1
   28148:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   2814a:	4b05      	ldr	r3, [pc, #20]	; (28160 <log_output_timestamp_freq_set+0x28>)
   2814c:	6018      	str	r0, [r3, #0]
}
   2814e:	4770      	bx	lr
		frequency /= 2U;
   28150:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   28152:	005b      	lsls	r3, r3, #1
   28154:	2101      	movs	r1, #1
   28156:	e7f2      	b.n	2813e <log_output_timestamp_freq_set+0x6>
   28158:	000f4240 	.word	0x000f4240
   2815c:	20000ba4 	.word	0x20000ba4
   28160:	20000ba8 	.word	0x20000ba8

00028164 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   28164:	4b01      	ldr	r3, [pc, #4]	; (2816c <format_set+0x8>)
	return 0;
}
   28166:	2000      	movs	r0, #0
	log_format_current = log_type;
   28168:	6019      	str	r1, [r3, #0]
}
   2816a:	4770      	bx	lr
   2816c:	20000bc0 	.word	0x20000bc0

00028170 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
   28170:	4b02      	ldr	r3, [pc, #8]	; (2817c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   28172:	4803      	ldr	r0, [pc, #12]	; (28180 <panic+0x10>)
   28174:	2201      	movs	r2, #1
   28176:	701a      	strb	r2, [r3, #0]
   28178:	f007 bfa3 	b.w	300c2 <log_output_flush>
   2817c:	20001973 	.word	0x20001973
   28180:	00031434 	.word	0x00031434

00028184 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   28184:	4801      	ldr	r0, [pc, #4]	; (2818c <dropped+0x8>)
   28186:	f7ff bfab 	b.w	280e0 <log_output_dropped_process>
   2818a:	bf00      	nop
   2818c:	00031434 	.word	0x00031434

00028190 <process>:
{
   28190:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   28192:	4b06      	ldr	r3, [pc, #24]	; (281ac <process+0x1c>)
   28194:	6818      	ldr	r0, [r3, #0]
{
   28196:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   28198:	f7ff fb48 	bl	2782c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   2819c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   2819e:	4603      	mov	r3, r0
}
   281a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   281a4:	4802      	ldr	r0, [pc, #8]	; (281b0 <process+0x20>)
   281a6:	220f      	movs	r2, #15
   281a8:	4718      	bx	r3
   281aa:	bf00      	nop
   281ac:	20000bc0 	.word	0x20000bc0
   281b0:	00031434 	.word	0x00031434

000281b4 <char_out>:
{
   281b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   281b6:	4f07      	ldr	r7, [pc, #28]	; (281d4 <char_out+0x20>)
   281b8:	460d      	mov	r5, r1
   281ba:	4604      	mov	r4, r0
   281bc:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   281be:	42b4      	cmp	r4, r6
   281c0:	d101      	bne.n	281c6 <char_out+0x12>
}
   281c2:	4628      	mov	r0, r5
   281c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   281c6:	f814 1b01 	ldrb.w	r1, [r4], #1
   281ca:	68bb      	ldr	r3, [r7, #8]
   281cc:	4801      	ldr	r0, [pc, #4]	; (281d4 <char_out+0x20>)
   281ce:	685b      	ldr	r3, [r3, #4]
   281d0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   281d2:	e7f4      	b.n	281be <char_out+0xa>
   281d4:	00031114 	.word	0x00031114

000281d8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   281d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   281dc:	4605      	mov	r5, r0
	__asm__ volatile(
   281de:	f04f 0320 	mov.w	r3, #32
   281e2:	f3ef 8611 	mrs	r6, BASEPRI
   281e6:	f383 8812 	msr	BASEPRI_MAX, r3
   281ea:	f3bf 8f6f 	isb	sy
	return list->head;
   281ee:	4b0e      	ldr	r3, [pc, #56]	; (28228 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   281f0:	4f0e      	ldr	r7, [pc, #56]	; (2822c <pm_state_notify+0x54>)
   281f2:	681c      	ldr	r4, [r3, #0]
   281f4:	f8df 8038 	ldr.w	r8, [pc, #56]	; 28230 <pm_state_notify+0x58>
   281f8:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   281fc:	b92c      	cbnz	r4, 2820a <pm_state_notify+0x32>
	__asm__ volatile(
   281fe:	f386 8811 	msr	BASEPRI, r6
   28202:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   28206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   2820a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   2820e:	2d00      	cmp	r5, #0
   28210:	bf18      	it	ne
   28212:	4613      	movne	r3, r2
		if (callback) {
   28214:	b12b      	cbz	r3, 28222 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   28216:	f898 2010 	ldrb.w	r2, [r8, #16]
   2821a:	fb09 f202 	mul.w	r2, r9, r2
   2821e:	5cb8      	ldrb	r0, [r7, r2]
   28220:	4798      	blx	r3
	return node->next;
   28222:	6824      	ldr	r4, [r4, #0]
   28224:	e7ea      	b.n	281fc <pm_state_notify+0x24>
   28226:	bf00      	nop
   28228:	20000bdc 	.word	0x20000bdc
   2822c:	20000bd0 	.word	0x20000bd0
   28230:	20001934 	.word	0x20001934

00028234 <pm_system_resume>:

void pm_system_resume(void)
{
   28234:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   28236:	4b19      	ldr	r3, [pc, #100]	; (2829c <pm_system_resume+0x68>)
   28238:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2823a:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   2823e:	f004 031f 	and.w	r3, r4, #31
   28242:	2201      	movs	r2, #1
   28244:	409a      	lsls	r2, r3
   28246:	4b16      	ldr	r3, [pc, #88]	; (282a0 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28248:	0961      	lsrs	r1, r4, #5
   2824a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2824e:	43d0      	mvns	r0, r2
   28250:	e853 1f00 	ldrex	r1, [r3]
   28254:	ea01 0500 	and.w	r5, r1, r0
   28258:	e843 5600 	strex	r6, r5, [r3]
   2825c:	2e00      	cmp	r6, #0
   2825e:	d1f7      	bne.n	28250 <pm_system_resume+0x1c>
   28260:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   28264:	420a      	tst	r2, r1
   28266:	d013      	beq.n	28290 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   28268:	4b0e      	ldr	r3, [pc, #56]	; (282a4 <pm_system_resume+0x70>)
   2826a:	4d0f      	ldr	r5, [pc, #60]	; (282a8 <pm_system_resume+0x74>)
   2826c:	b18b      	cbz	r3, 28292 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   2826e:	230c      	movs	r3, #12
   28270:	4363      	muls	r3, r4
   28272:	18ea      	adds	r2, r5, r3
   28274:	5ce8      	ldrb	r0, [r5, r3]
   28276:	7851      	ldrb	r1, [r2, #1]
   28278:	f008 f89a 	bl	303b0 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   2827c:	2000      	movs	r0, #0
   2827e:	f7ff ffab 	bl	281d8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   28282:	230c      	movs	r3, #12
   28284:	435c      	muls	r4, r3
   28286:	192a      	adds	r2, r5, r4
   28288:	2300      	movs	r3, #0
   2828a:	512b      	str	r3, [r5, r4]
   2828c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   28290:	bd70      	pop	{r4, r5, r6, pc}
   28292:	f383 8811 	msr	BASEPRI, r3
   28296:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   2829a:	e7ef      	b.n	2827c <pm_system_resume+0x48>
   2829c:	20001934 	.word	0x20001934
   282a0:	20000be4 	.word	0x20000be4
   282a4:	000303b1 	.word	0x000303b1
   282a8:	20000bd0 	.word	0x20000bd0

000282ac <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   282ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   282b0:	4b35      	ldr	r3, [pc, #212]	; (28388 <pm_system_suspend+0xdc>)
{
   282b2:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   282b4:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   282b6:	f04f 0320 	mov.w	r3, #32
   282ba:	f3ef 8811 	mrs	r8, BASEPRI
   282be:	f383 8812 	msr	BASEPRI_MAX, r3
   282c2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   282c6:	240c      	movs	r4, #12
   282c8:	4b30      	ldr	r3, [pc, #192]	; (2838c <pm_system_suspend+0xe0>)
   282ca:	4e31      	ldr	r6, [pc, #196]	; (28390 <pm_system_suspend+0xe4>)
   282cc:	436c      	muls	r4, r5
   282ce:	191a      	adds	r2, r3, r4
   282d0:	5d19      	ldrb	r1, [r3, r4]
   282d2:	2900      	cmp	r1, #0
   282d4:	d04c      	beq.n	28370 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   282d6:	ca07      	ldmia	r2, {r0, r1, r2}
   282d8:	eb06 0c04 	add.w	ip, r6, r4
   282dc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   282e0:	2200      	movs	r2, #0
   282e2:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   282e4:	f388 8811 	msr	BASEPRI, r8
   282e8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   282ec:	230c      	movs	r3, #12
   282ee:	436b      	muls	r3, r5
   282f0:	18f2      	adds	r2, r6, r3
   282f2:	5cf0      	ldrb	r0, [r6, r3]
   282f4:	2800      	cmp	r0, #0
   282f6:	d039      	beq.n	2836c <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   282f8:	1c7b      	adds	r3, r7, #1
   282fa:	d010      	beq.n	2831e <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   282fc:	f8d2 c008 	ldr.w	ip, [r2, #8]
   28300:	4c24      	ldr	r4, [pc, #144]	; (28394 <pm_system_suspend+0xe8>)
   28302:	4a25      	ldr	r2, [pc, #148]	; (28398 <pm_system_suspend+0xec>)
   28304:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   28308:	2100      	movs	r1, #0
   2830a:	fbec 4100 	umlal	r4, r1, ip, r0
   2830e:	2300      	movs	r3, #0
   28310:	4620      	mov	r0, r4
   28312:	f7fd fef5 	bl	26100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   28316:	2101      	movs	r1, #1
   28318:	1a38      	subs	r0, r7, r0
   2831a:	f003 fec9 	bl	2c0b0 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   2831e:	f006 fba1 	bl	2ea64 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   28322:	2001      	movs	r0, #1
   28324:	f7ff ff58 	bl	281d8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28328:	f3bf 8f5b 	dmb	ish
   2832c:	4b1b      	ldr	r3, [pc, #108]	; (2839c <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2832e:	096a      	lsrs	r2, r5, #5
   28330:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   28334:	f005 011f 	and.w	r1, r5, #31
   28338:	2201      	movs	r2, #1
   2833a:	408a      	lsls	r2, r1
   2833c:	e853 0f00 	ldrex	r0, [r3]
   28340:	4310      	orrs	r0, r2
   28342:	e843 0100 	strex	r1, r0, [r3]
   28346:	2900      	cmp	r1, #0
   28348:	d1f8      	bne.n	2833c <pm_system_suspend+0x90>
   2834a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   2834e:	4b14      	ldr	r3, [pc, #80]	; (283a0 <pm_system_suspend+0xf4>)
   28350:	b13b      	cbz	r3, 28362 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   28352:	230c      	movs	r3, #12
   28354:	fb03 f005 	mul.w	r0, r3, r5
   28358:	1833      	adds	r3, r6, r0
   2835a:	5c30      	ldrb	r0, [r6, r0]
   2835c:	7859      	ldrb	r1, [r3, #1]
   2835e:	f008 f81b 	bl	30398 <pm_state_set>
	if (atomic_add(&_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   28362:	f7ff ff67 	bl	28234 <pm_system_resume>
	k_sched_unlock();
   28366:	f006 fb91 	bl	2ea8c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   2836a:	2001      	movs	r0, #1
}
   2836c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   28370:	4601      	mov	r1, r0
   28372:	4628      	mov	r0, r5
   28374:	f000 f816 	bl	283a4 <pm_policy_next_state>
		if (info != NULL) {
   28378:	2800      	cmp	r0, #0
   2837a:	d0b3      	beq.n	282e4 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   2837c:	c807      	ldmia	r0, {r0, r1, r2}
   2837e:	4434      	add	r4, r6
   28380:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   28384:	e7ae      	b.n	282e4 <pm_system_suspend+0x38>
   28386:	bf00      	nop
   28388:	20001934 	.word	0x20001934
   2838c:	20000bc4 	.word	0x20000bc4
   28390:	20000bd0 	.word	0x20000bd0
   28394:	000f423f 	.word	0x000f423f
   28398:	000f4240 	.word	0x000f4240
   2839c:	20000be4 	.word	0x20000be4
   283a0:	00030399 	.word	0x00030399

000283a4 <pm_policy_next_state>:
	next_event_cyc = new_next_event_cyc;
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   283a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		cyc = k_ticks_to_cyc_ceil32(ticks);
	}

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);

	if (next_event_cyc >= 0) {
   283a8:	4c38      	ldr	r4, [pc, #224]	; (2848c <pm_policy_next_state+0xe8>)
{
   283aa:	b085      	sub	sp, #20
		cyc = k_ticks_to_cyc_ceil32(ticks);
   283ac:	1c4b      	adds	r3, r1, #1
{
   283ae:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   283b0:	a903      	add	r1, sp, #12
		cyc = k_ticks_to_cyc_ceil32(ticks);
   283b2:	bf0c      	ite	eq
   283b4:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
   283b8:	f04f 0800 	movne.w	r8, #0
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   283bc:	f000 f86e 	bl	2849c <pm_state_cpu_get_all>
	if (next_event_cyc >= 0) {
   283c0:	6863      	ldr	r3, [r4, #4]
   283c2:	2b00      	cmp	r3, #0
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   283c4:	4605      	mov	r5, r0
	if (next_event_cyc >= 0) {
   283c6:	db12      	blt.n	283ee <pm_policy_next_state+0x4a>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   283c8:	f008 f956 	bl	30678 <sys_clock_cycle_get_32>
		uint32_t cyc_curr = k_cycle_get_32();
		int64_t cyc_evt = next_event_cyc - cyc_curr;
   283cc:	e9d4 3200 	ldrd	r3, r2, [r4]
   283d0:	1a1c      	subs	r4, r3, r0
   283d2:	f162 0600 	sbc.w	r6, r2, #0

		/* event happening after cycle counter max value, pad */
		if (next_event_cyc <= cyc_curr) {
   283d6:	4298      	cmp	r0, r3
   283d8:	f04f 0300 	mov.w	r3, #0
   283dc:	4193      	sbcs	r3, r2
   283de:	db02      	blt.n	283e6 <pm_policy_next_state+0x42>
			cyc_evt += UINT32_MAX;
   283e0:	3c01      	subs	r4, #1
   283e2:	f146 0600 	adc.w	r6, r6, #0
		}

		if (cyc_evt > 0) {
   283e6:	2c01      	cmp	r4, #1
   283e8:	f176 0300 	sbcs.w	r3, r6, #0
   283ec:	da02      	bge.n	283f4 <pm_policy_next_state+0x50>
			 * otherwise, who comes earlier wins
			 */
			if (cyc < 0) {
				cyc = cyc_evt;
			} else {
				cyc = MIN(cyc, cyc_evt);
   283ee:	463c      	mov	r4, r7
   283f0:	4646      	mov	r6, r8
   283f2:	e009      	b.n	28408 <pm_policy_next_state+0x64>
			if (cyc < 0) {
   283f4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   283f8:	bf08      	it	eq
   283fa:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   283fe:	d003      	beq.n	28408 <pm_policy_next_state+0x64>
				cyc = MIN(cyc, cyc_evt);
   28400:	42a7      	cmp	r7, r4
   28402:	eb78 0306 	sbcs.w	r3, r8, r6
   28406:	dbf2      	blt.n	283ee <pm_policy_next_state+0x4a>

		min_residency_cyc = k_us_to_cyc_ceil32(state->min_residency_us);
		exit_latency_cyc = k_us_to_cyc_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_cyc >= 0) &&
   28408:	4b21      	ldr	r3, [pc, #132]	; (28490 <pm_policy_next_state+0xec>)
   2840a:	9f03      	ldr	r7, [sp, #12]
   2840c:	681b      	ldr	r3, [r3, #0]
   2840e:	9300      	str	r3, [sp, #0]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   28410:	1e6b      	subs	r3, r5, #1
   28412:	b21b      	sxth	r3, r3
   28414:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28418:	f8df 9078 	ldr.w	r9, [pc, #120]	; 28494 <pm_policy_next_state+0xf0>
   2841c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   28420:	f44f 4800 	mov.w	r8, #32768	; 0x8000
   28424:	f04f 0b00 	mov.w	fp, #0
   28428:	b925      	cbnz	r5, 28434 <pm_policy_next_state+0x90>
		    (cyc >= (min_residency_cyc + exit_latency_cyc))) {
			return state;
		}
	}

	return NULL;
   2842a:	46aa      	mov	sl, r5
}
   2842c:	4650      	mov	r0, sl
   2842e:	b005      	add	sp, #20
   28430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28434:	6878      	ldr	r0, [r7, #4]
   28436:	4a18      	ldr	r2, [pc, #96]	; (28498 <pm_policy_next_state+0xf4>)
   28438:	46cc      	mov	ip, r9
   2843a:	4659      	mov	r1, fp
   2843c:	fbe0 c108 	umlal	ip, r1, r0, r8
   28440:	2300      	movs	r3, #0
   28442:	4660      	mov	r0, ip
   28444:	f7fd fe5c 	bl	26100 <__aeabi_uldivmod>
   28448:	9001      	str	r0, [sp, #4]
   2844a:	68b8      	ldr	r0, [r7, #8]
   2844c:	4a12      	ldr	r2, [pc, #72]	; (28498 <pm_policy_next_state+0xf4>)
   2844e:	46cc      	mov	ip, r9
   28450:	4659      	mov	r1, fp
   28452:	fbe0 c108 	umlal	ip, r1, r0, r8
   28456:	2300      	movs	r3, #0
   28458:	4660      	mov	r0, ip
   2845a:	f7fd fe51 	bl	26100 <__aeabi_uldivmod>
		if ((max_latency_cyc >= 0) &&
   2845e:	9b00      	ldr	r3, [sp, #0]
   28460:	2b00      	cmp	r3, #0
		const struct pm_state_info *state = &cpu_states[i];
   28462:	46ba      	mov	sl, r7
		if ((max_latency_cyc >= 0) &&
   28464:	db01      	blt.n	2846a <pm_policy_next_state+0xc6>
   28466:	4283      	cmp	r3, r0
   28468:	d90b      	bls.n	28482 <pm_policy_next_state+0xde>
		if ((cyc < 0) ||
   2846a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   2846e:	bf08      	it	eq
   28470:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   28474:	d0da      	beq.n	2842c <pm_policy_next_state+0x88>
		    (cyc >= (min_residency_cyc + exit_latency_cyc))) {
   28476:	9b01      	ldr	r3, [sp, #4]
   28478:	4418      	add	r0, r3
		if ((cyc < 0) ||
   2847a:	4284      	cmp	r4, r0
   2847c:	f176 0300 	sbcs.w	r3, r6, #0
   28480:	dad4      	bge.n	2842c <pm_policy_next_state+0x88>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   28482:	3d01      	subs	r5, #1
   28484:	b2ad      	uxth	r5, r5
   28486:	3f0c      	subs	r7, #12
   28488:	e7ce      	b.n	28428 <pm_policy_next_state+0x84>
   2848a:	bf00      	nop
   2848c:	20000000 	.word	0x20000000
   28490:	20000158 	.word	0x20000158
   28494:	000f423f 	.word	0x000f423f
   28498:	000f4240 	.word	0x000f4240

0002849c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   2849c:	b908      	cbnz	r0, 284a2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   2849e:	4b02      	ldr	r3, [pc, #8]	; (284a8 <pm_state_cpu_get_all+0xc>)
   284a0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   284a2:	2000      	movs	r0, #0
   284a4:	4770      	bx	lr
   284a6:	bf00      	nop
   284a8:	00031444 	.word	0x00031444

000284ac <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
   284ac:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   284ae:	4b0c      	ldr	r3, [pc, #48]	; (284e0 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   284b0:	4e0c      	ldr	r6, [pc, #48]	; (284e4 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   284b2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   284b4:	4b0c      	ldr	r3, [pc, #48]	; (284e8 <class_handler+0x3c>)
   284b6:	42b3      	cmp	r3, r6
   284b8:	d303      	bcc.n	284c2 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   284ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
   284be:	bcf0      	pop	{r4, r5, r6, r7}
   284c0:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   284c2:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   284c4:	42bd      	cmp	r5, r7
   284c6:	d309      	bcc.n	284dc <class_handler+0x30>
		if (iface->class_handler &&
   284c8:	691c      	ldr	r4, [r3, #16]
   284ca:	b13c      	cbz	r4, 284dc <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   284cc:	f895 c002 	ldrb.w	ip, [r5, #2]
   284d0:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   284d2:	45ac      	cmp	ip, r5
   284d4:	d102      	bne.n	284dc <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   284d6:	4623      	mov	r3, r4
}
   284d8:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   284da:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   284dc:	3324      	adds	r3, #36	; 0x24
   284de:	e7ea      	b.n	284b6 <class_handler+0xa>
   284e0:	20000be8 	.word	0x20000be8
   284e4:	200003b0 	.word	0x200003b0
   284e8:	2000038c 	.word	0x2000038c

000284ec <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   284ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   284f0:	4c13      	ldr	r4, [pc, #76]	; (28540 <custom_handler+0x54>)
   284f2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 28544 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   284f6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 28548 <custom_handler+0x5c>
{
   284fa:	4605      	mov	r5, r0
   284fc:	460e      	mov	r6, r1
   284fe:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28500:	4544      	cmp	r4, r8
   28502:	d303      	bcc.n	2850c <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   28504:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   2850c:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2850e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   28512:	429a      	cmp	r2, r3
   28514:	d312      	bcc.n	2853c <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   28516:	69a3      	ldr	r3, [r4, #24]
   28518:	b183      	cbz	r3, 2853c <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   2851a:	7890      	ldrb	r0, [r2, #2]
   2851c:	7929      	ldrb	r1, [r5, #4]
   2851e:	4288      	cmp	r0, r1
   28520:	d105      	bne.n	2852e <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   28522:	463a      	mov	r2, r7
   28524:	4631      	mov	r1, r6
   28526:	4628      	mov	r0, r5
}
   28528:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   2852c:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   2852e:	7952      	ldrb	r2, [r2, #5]
   28530:	2a01      	cmp	r2, #1
   28532:	d103      	bne.n	2853c <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   28534:	463a      	mov	r2, r7
   28536:	4631      	mov	r1, r6
   28538:	4628      	mov	r0, r5
   2853a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2853c:	3424      	adds	r4, #36	; 0x24
   2853e:	e7df      	b.n	28500 <custom_handler+0x14>
   28540:	2000038c 	.word	0x2000038c
   28544:	200003b0 	.word	0x200003b0
   28548:	20000be8 	.word	0x20000be8

0002854c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   2854c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28550:	4c0b      	ldr	r4, [pc, #44]	; (28580 <vendor_handler+0x34>)
   28552:	f8df 8030 	ldr.w	r8, [pc, #48]	; 28584 <vendor_handler+0x38>
{
   28556:	4605      	mov	r5, r0
   28558:	460e      	mov	r6, r1
   2855a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2855c:	4544      	cmp	r4, r8
   2855e:	d302      	bcc.n	28566 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   28560:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28564:	e009      	b.n	2857a <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   28566:	6963      	ldr	r3, [r4, #20]
   28568:	b90b      	cbnz	r3, 2856e <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2856a:	3424      	adds	r4, #36	; 0x24
   2856c:	e7f6      	b.n	2855c <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   2856e:	463a      	mov	r2, r7
   28570:	4631      	mov	r1, r6
   28572:	4628      	mov	r0, r5
   28574:	4798      	blx	r3
   28576:	2800      	cmp	r0, #0
   28578:	d1f7      	bne.n	2856a <vendor_handler+0x1e>
}
   2857a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2857e:	bf00      	nop
   28580:	2000038c 	.word	0x2000038c
   28584:	200003b0 	.word	0x200003b0

00028588 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   28588:	4802      	ldr	r0, [pc, #8]	; (28594 <usb_reset_alt_setting+0xc>)
   2858a:	2208      	movs	r2, #8
   2858c:	2100      	movs	r1, #0
   2858e:	f007 beee 	b.w	3036e <memset>
   28592:	bf00      	nop
   28594:	20000ca3 	.word	0x20000ca3

00028598 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   28598:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2859a:	4b0b      	ldr	r3, [pc, #44]	; (285c8 <is_ep_valid.part.0+0x30>)
   2859c:	4c0b      	ldr	r4, [pc, #44]	; (285cc <is_ep_valid.part.0+0x34>)
   2859e:	42a3      	cmp	r3, r4
   285a0:	d301      	bcc.n	285a6 <is_ep_valid.part.0+0xe>
	return false;
   285a2:	2000      	movs	r0, #0
}
   285a4:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   285a6:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   285a8:	7f1e      	ldrb	r6, [r3, #28]
   285aa:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   285ac:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   285ae:	b2d5      	uxtb	r5, r2
   285b0:	42ae      	cmp	r6, r5
   285b2:	d801      	bhi.n	285b8 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   285b4:	3324      	adds	r3, #36	; 0x24
   285b6:	e7f2      	b.n	2859e <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   285b8:	3201      	adds	r2, #1
   285ba:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   285be:	4285      	cmp	r5, r0
   285c0:	d1f5      	bne.n	285ae <is_ep_valid.part.0+0x16>
		return true;
   285c2:	2001      	movs	r0, #1
   285c4:	e7ee      	b.n	285a4 <is_ep_valid.part.0+0xc>
   285c6:	bf00      	nop
   285c8:	2000038c 	.word	0x2000038c
   285cc:	200003b0 	.word	0x200003b0

000285d0 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
   285d0:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
   285d2:	4809      	ldr	r0, [pc, #36]	; (285f8 <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
   285d4:	7803      	ldrb	r3, [r0, #0]
   285d6:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   285da:	330a      	adds	r3, #10
   285dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   285e0:	b13b      	cbz	r3, 285f2 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   285e2:	f100 0208 	add.w	r2, r0, #8
   285e6:	f100 0110 	add.w	r1, r0, #16
   285ea:	4798      	blx	r3
   285ec:	43c0      	mvns	r0, r0
   285ee:	0fc0      	lsrs	r0, r0, #31
}
   285f0:	bd08      	pop	{r3, pc}
		return false;
   285f2:	4618      	mov	r0, r3
   285f4:	e7fc      	b.n	285f0 <usb_handle_request.constprop.0+0x20>
   285f6:	bf00      	nop
   285f8:	20000be8 	.word	0x20000be8

000285fc <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
   285fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
   285fe:	4b08      	ldr	r3, [pc, #32]	; (28620 <usb_device_init.part.0+0x24>)
   28600:	9305      	str	r3, [sp, #20]
   28602:	2302      	movs	r3, #2
   28604:	9304      	str	r3, [sp, #16]
   28606:	4807      	ldr	r0, [pc, #28]	; (28624 <usb_device_init.part.0+0x28>)
   28608:	2300      	movs	r3, #0
   2860a:	aa04      	add	r2, sp, #16
   2860c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   28610:	f7ff faf4 	bl	27bfc <z_impl_z_log_msg_static_create>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
   28614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28618:	b007      	add	sp, #28
   2861a:	f85d fb04 	ldr.w	pc, [sp], #4
   2861e:	bf00      	nop
   28620:	00031875 	.word	0x00031875
   28624:	00031334 	.word	0x00031334

00028628 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   28628:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   2862a:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   2862c:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   2862e:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   28630:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   28634:	d007      	beq.n	28646 <usb_halt_endpoint_req.isra.0+0x1e>
   28636:	4620      	mov	r0, r4
   28638:	f7ff ffae 	bl	28598 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   2863c:	b178      	cbz	r0, 2865e <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
   2863e:	4b0d      	ldr	r3, [pc, #52]	; (28674 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   28640:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   28644:	b158      	cbz	r0, 2865e <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
   28646:	4e0b      	ldr	r6, [pc, #44]	; (28674 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
   28648:	4620      	mov	r0, r4
		if (halt) {
   2864a:	b155      	cbz	r5, 28662 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
   2864c:	f002 fbf0 	bl	2ae30 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   28650:	69f3      	ldr	r3, [r6, #28]
   28652:	b11b      	cbz	r3, 2865c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   28654:	f10d 0107 	add.w	r1, sp, #7
   28658:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   2865a:	4798      	blx	r3
		return true;
   2865c:	2001      	movs	r0, #1
}
   2865e:	b002      	add	sp, #8
   28660:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   28662:	f002 fc1f 	bl	2aea4 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   28666:	69f3      	ldr	r3, [r6, #28]
   28668:	2b00      	cmp	r3, #0
   2866a:	d0f7      	beq.n	2865c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   2866c:	f10d 0107 	add.w	r1, sp, #7
   28670:	2009      	movs	r0, #9
   28672:	e7f2      	b.n	2865a <usb_halt_endpoint_req.isra.0+0x32>
   28674:	20000be8 	.word	0x20000be8

00028678 <get_ep_bm_from_addr.part.0>:
static uint32_t get_ep_bm_from_addr(uint8_t ep)
   28678:	b580      	push	{r7, lr}
   2867a:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
   2867c:	b088      	sub	sp, #32
   2867e:	466a      	mov	r2, sp
   28680:	4b07      	ldr	r3, [pc, #28]	; (286a0 <get_ep_bm_from_addr.part.0+0x28>)
   28682:	e9c2 3005 	strd	r3, r0, [r2, #20]
   28686:	2303      	movs	r3, #3
   28688:	f842 3f10 	str.w	r3, [r2, #16]!
   2868c:	4805      	ldr	r0, [pc, #20]	; (286a4 <get_ep_bm_from_addr.part.0+0x2c>)
   2868e:	2300      	movs	r3, #0
   28690:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28694:	f7ff fab2 	bl	27bfc <z_impl_z_log_msg_static_create>
}
   28698:	2000      	movs	r0, #0
   2869a:	46bd      	mov	sp, r7
   2869c:	bd80      	pop	{r7, pc}
   2869e:	bf00      	nop
   286a0:	0003189a 	.word	0x0003189a
   286a4:	00031334 	.word	0x00031334

000286a8 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   286a8:	2804      	cmp	r0, #4
{
   286aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286ae:	f8df 909c 	ldr.w	r9, [pc, #156]	; 2874c <forward_status_cb+0xa4>
   286b2:	4604      	mov	r4, r0
   286b4:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
   286b6:	d015      	beq.n	286e4 <forward_status_cb+0x3c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   286b8:	2801      	cmp	r0, #1
   286ba:	d12f      	bne.n	2871c <forward_status_cb+0x74>
		if (usb_dev.configured) {
   286bc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 28750 <forward_status_cb+0xa8>
   286c0:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
   286c4:	b353      	cbz	r3, 2871c <forward_status_cb+0x74>
			usb_cancel_transfers();
   286c6:	f000 ff0d 	bl	294e4 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   286ca:	4d22      	ldr	r5, [pc, #136]	; (28754 <forward_status_cb+0xac>)
   286cc:	454d      	cmp	r5, r9
   286ce:	d222      	bcs.n	28716 <forward_status_cb+0x6e>
		ep_data = cfg_data->endpoint;
   286d0:	6a2a      	ldr	r2, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   286d2:	f04f 0a00 	mov.w	sl, #0
   286d6:	7f2b      	ldrb	r3, [r5, #28]
   286d8:	fa5f f68a 	uxtb.w	r6, sl
   286dc:	42b3      	cmp	r3, r6
   286de:	d804      	bhi.n	286ea <forward_status_cb+0x42>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   286e0:	3524      	adds	r5, #36	; 0x24
   286e2:	e7f3      	b.n	286cc <forward_status_cb+0x24>
		usb_reset_alt_setting();
   286e4:	f7ff ff50 	bl	28588 <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   286e8:	e7e8      	b.n	286bc <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
   286ea:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   286ee:	9201      	str	r2, [sp, #4]
	ret = usb_dc_ep_disable(ep_data->ep_addr);
   286f0:	7930      	ldrb	r0, [r6, #4]
   286f2:	f007 fe7d 	bl	303f0 <usb_dc_ep_disable>
   286f6:	4683      	mov	fp, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
   286f8:	7930      	ldrb	r0, [r6, #4]
   286fa:	f007 fd19 	bl	30130 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
   286fe:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
   28702:	9a01      	ldr	r2, [sp, #4]
	usb_dev.ep_bm &= ~ep_bm;
   28704:	ea23 0300 	bic.w	r3, r3, r0
			if (ret < 0) {
   28708:	f1bb 0f00 	cmp.w	fp, #0
	usb_dev.ep_bm &= ~ep_bm;
   2870c:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
   28710:	f10a 0a01 	add.w	sl, sl, #1
   28714:	dadf      	bge.n	286d6 <forward_status_cb+0x2e>
			usb_dev.configured = false;
   28716:	2300      	movs	r3, #0
   28718:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2871c:	4d0d      	ldr	r5, [pc, #52]	; (28754 <forward_status_cb+0xac>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2871e:	454d      	cmp	r5, r9
   28720:	d308      	bcc.n	28734 <forward_status_cb+0x8c>
	if (usb_dev.user_status_callback) {
   28722:	4b0b      	ldr	r3, [pc, #44]	; (28750 <forward_status_cb+0xa8>)
   28724:	6a1b      	ldr	r3, [r3, #32]
   28726:	b16b      	cbz	r3, 28744 <forward_status_cb+0x9c>
		usb_dev.user_status_callback(status, param);
   28728:	4639      	mov	r1, r7
   2872a:	4620      	mov	r0, r4
}
   2872c:	b003      	add	sp, #12
   2872e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
   28732:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
   28734:	68eb      	ldr	r3, [r5, #12]
   28736:	b11b      	cbz	r3, 28740 <forward_status_cb+0x98>
			cfg_data->cb_usb_status(cfg_data, status, param);
   28738:	463a      	mov	r2, r7
   2873a:	4621      	mov	r1, r4
   2873c:	4628      	mov	r0, r5
   2873e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28740:	3524      	adds	r5, #36	; 0x24
   28742:	e7ec      	b.n	2871e <forward_status_cb+0x76>
}
   28744:	b003      	add	sp, #12
   28746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2874a:	bf00      	nop
   2874c:	200003b0 	.word	0x200003b0
   28750:	20000be8 	.word	0x20000be8
   28754:	2000038c 	.word	0x2000038c

00028758 <disable_endpoint>:
{
   28758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2875a:	af00      	add	r7, sp, #0
   2875c:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
   2875e:	f007 fe47 	bl	303f0 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   28762:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_disable(ep_addr);
   28766:	4604      	mov	r4, r0
	if (ret == -EALREADY) {
   28768:	d013      	beq.n	28792 <disable_endpoint+0x3a>
	} else if (ret) {
   2876a:	b190      	cbz	r0, 28792 <disable_endpoint+0x3a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
   2876c:	466e      	mov	r6, sp
   2876e:	b088      	sub	sp, #32
   28770:	466a      	mov	r2, sp
   28772:	4b0e      	ldr	r3, [pc, #56]	; (287ac <disable_endpoint+0x54>)
   28774:	e9c2 3505 	strd	r3, r5, [r2, #20]
   28778:	2303      	movs	r3, #3
   2877a:	f842 3f10 	str.w	r3, [r2, #16]!
   2877e:	480c      	ldr	r0, [pc, #48]	; (287b0 <disable_endpoint+0x58>)
   28780:	2300      	movs	r3, #0
   28782:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28786:	f7ff fa39 	bl	27bfc <z_impl_z_log_msg_static_create>
   2878a:	46b5      	mov	sp, r6
}
   2878c:	4620      	mov	r0, r4
   2878e:	46bd      	mov	sp, r7
   28790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ep_bm = get_ep_bm_from_addr(ep_addr);
   28792:	4628      	mov	r0, r5
   28794:	f007 fccc 	bl	30130 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
   28798:	4a06      	ldr	r2, [pc, #24]	; (287b4 <disable_endpoint+0x5c>)
   2879a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   2879e:	ea23 0300 	bic.w	r3, r3, r0
   287a2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
   287a6:	2400      	movs	r4, #0
   287a8:	e7f0      	b.n	2878c <disable_endpoint+0x34>
   287aa:	bf00      	nop
   287ac:	000318b5 	.word	0x000318b5
   287b0:	00031334 	.word	0x00031334
   287b4:	20000be8 	.word	0x20000be8

000287b8 <set_endpoint>:
{
   287b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   287ba:	b083      	sub	sp, #12
   287bc:	af00      	add	r7, sp, #0
   287be:	4604      	mov	r4, r0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   287c0:	7880      	ldrb	r0, [r0, #2]
   287c2:	7038      	strb	r0, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   287c4:	7923      	ldrb	r3, [r4, #4]
   287c6:	7962      	ldrb	r2, [r4, #5]
	if (ep_bm & usb_dev.ep_bm) {
   287c8:	4d27      	ldr	r5, [pc, #156]	; (28868 <set_endpoint+0xb0>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   287ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   287ce:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   287d0:	78e3      	ldrb	r3, [r4, #3]
   287d2:	f003 0303 	and.w	r3, r3, #3
   287d6:	713b      	strb	r3, [r7, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   287d8:	f007 fcaa 	bl	30130 <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
   287dc:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   287e0:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
   287e2:	4606      	mov	r6, r0
	if (ep_bm & usb_dev.ep_bm) {
   287e4:	d00c      	beq.n	28800 <set_endpoint+0x48>
		reset_endpoint(ep_desc);
   287e6:	78a4      	ldrb	r4, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   287e8:	4620      	mov	r0, r4
   287ea:	f000 fe5d 	bl	294a8 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
   287ee:	4620      	mov	r0, r4
   287f0:	f7ff ffb2 	bl	28758 <disable_endpoint>
		if (!k_is_in_isr()) {
   287f4:	f008 f8ff 	bl	309f6 <k_is_in_isr>
   287f8:	b910      	cbnz	r0, 28800 <set_endpoint+0x48>
	return z_impl_k_usleep(us);
   287fa:	2096      	movs	r0, #150	; 0x96
   287fc:	f006 fa06 	bl	2ec0c <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
   28800:	4638      	mov	r0, r7
   28802:	f002 fae1 	bl	2adc8 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   28806:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_configure(&ep_cfg);
   2880a:	4603      	mov	r3, r0
	if (ret == -EALREADY) {
   2880c:	7838      	ldrb	r0, [r7, #0]
   2880e:	d014      	beq.n	2883a <set_endpoint+0x82>
	} else if (ret) {
   28810:	b19b      	cbz	r3, 2883a <set_endpoint+0x82>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
   28812:	466c      	mov	r4, sp
   28814:	b088      	sub	sp, #32
   28816:	466a      	mov	r2, sp
   28818:	4b14      	ldr	r3, [pc, #80]	; (2886c <set_endpoint+0xb4>)
   2881a:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
   2881e:	2303      	movs	r3, #3
   28820:	f842 3f10 	str.w	r3, [r2, #16]!
   28824:	4812      	ldr	r0, [pc, #72]	; (28870 <set_endpoint+0xb8>)
   28826:	2300      	movs	r3, #0
   28828:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2882c:	f7ff f9e6 	bl	27bfc <z_impl_z_log_msg_static_create>
		return false;
   28830:	2000      	movs	r0, #0
   28832:	46a5      	mov	sp, r4
}
   28834:	370c      	adds	r7, #12
   28836:	46bd      	mov	sp, r7
   28838:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   2883a:	f002 fb6f 	bl	2af1c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   2883e:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28842:	d008      	beq.n	28856 <set_endpoint+0x9e>
	} else if (ret) {
   28844:	b138      	cbz	r0, 28856 <set_endpoint+0x9e>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
   28846:	466c      	mov	r4, sp
   28848:	b088      	sub	sp, #32
   2884a:	783b      	ldrb	r3, [r7, #0]
   2884c:	466a      	mov	r2, sp
   2884e:	4909      	ldr	r1, [pc, #36]	; (28874 <set_endpoint+0xbc>)
   28850:	e9c2 1305 	strd	r1, r3, [r2, #20]
   28854:	e7e3      	b.n	2881e <set_endpoint+0x66>
	usb_dev.ep_bm |= ep_bm;
   28856:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	usb_dev.configured = true;
   2885a:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
   2885c:	4333      	orrs	r3, r6
	usb_dev.configured = true;
   2885e:	f885 00b9 	strb.w	r0, [r5, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
   28862:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	return true;
   28866:	e7e5      	b.n	28834 <set_endpoint+0x7c>
   28868:	20000be8 	.word	0x20000be8
   2886c:	000318d7 	.word	0x000318d7
   28870:	00031334 	.word	0x00031334
   28874:	000318fb 	.word	0x000318fb

00028878 <usb_handle_standard_request>:
{
   28878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   2887c:	4ea3      	ldr	r6, [pc, #652]	; (28b0c <usb_handle_standard_request+0x294>)
   2887e:	69b3      	ldr	r3, [r6, #24]
{
   28880:	4604      	mov	r4, r0
   28882:	460f      	mov	r7, r1
   28884:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
   28886:	b9fb      	cbnz	r3, 288c8 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
   28888:	7823      	ldrb	r3, [r4, #0]
   2888a:	f003 031f 	and.w	r3, r3, #31
   2888e:	2b01      	cmp	r3, #1
   28890:	f000 809d 	beq.w	289ce <usb_handle_standard_request+0x156>
   28894:	2b02      	cmp	r3, #2
   28896:	f000 8104 	beq.w	28aa2 <usb_handle_standard_request+0x22a>
   2889a:	bb33      	cbnz	r3, 288ea <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
   2889c:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
   288a0:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
   288a2:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   288a4:	2800      	cmp	r0, #0
   288a6:	da34      	bge.n	28912 <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
   288a8:	2906      	cmp	r1, #6
   288aa:	d012      	beq.n	288d2 <usb_handle_standard_request+0x5a>
   288ac:	2908      	cmp	r1, #8
   288ae:	d02b      	beq.n	28908 <usb_handle_standard_request+0x90>
   288b0:	b9d9      	cbnz	r1, 288ea <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   288b2:	2301      	movs	r3, #1
   288b4:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
   288b6:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
   288b8:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
   288bc:	005b      	lsls	r3, r3, #1
   288be:	f043 0301 	orr.w	r3, r3, #1
   288c2:	7013      	strb	r3, [r2, #0]
		*len = 2;
   288c4:	2302      	movs	r3, #2
   288c6:	e12a      	b.n	28b1e <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   288c8:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   288ca:	2800      	cmp	r0, #0
   288cc:	d1dc      	bne.n	28888 <usb_handle_standard_request+0x10>
		return 0;
   288ce:	2000      	movs	r0, #0
   288d0:	e00d      	b.n	288ee <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
   288d2:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   288d4:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   288d6:	1f01      	subs	r1, r0, #4
   288d8:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   288da:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   288dc:	d905      	bls.n	288ea <usb_handle_standard_request+0x72>
   288de:	2807      	cmp	r0, #7
   288e0:	d803      	bhi.n	288ea <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
   288e2:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   288e4:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
   288e6:	780c      	ldrb	r4, [r1, #0]
   288e8:	b91c      	cbnz	r4, 288f2 <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
   288ea:	f06f 0015 	mvn.w	r0, #21
}
   288ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
   288f2:	784e      	ldrb	r6, [r1, #1]
   288f4:	4566      	cmp	r6, ip
   288f6:	d103      	bne.n	28900 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
   288f8:	429a      	cmp	r2, r3
   288fa:	f000 810b 	beq.w	28b14 <usb_handle_standard_request+0x29c>
			cur_index++;
   288fe:	3301      	adds	r3, #1
		p += p[DESC_bLength];
   28900:	4421      	add	r1, r4
   28902:	e7f0      	b.n	288e6 <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
   28904:	780b      	ldrb	r3, [r1, #0]
   28906:	e10a      	b.n	28b1e <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
   28908:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2890c:	7013      	strb	r3, [r2, #0]
				*len = 1;
   2890e:	2301      	movs	r3, #1
   28910:	e105      	b.n	28b1e <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
   28912:	3901      	subs	r1, #1
   28914:	2908      	cmp	r1, #8
   28916:	d8e8      	bhi.n	288ea <usb_handle_standard_request+0x72>
   28918:	a301      	add	r3, pc, #4	; (adr r3, 28920 <usb_handle_standard_request+0xa8>)
   2891a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   2891e:	bf00      	nop
   28920:	000289b9 	.word	0x000289b9
   28924:	000288eb 	.word	0x000288eb
   28928:	000289c7 	.word	0x000289c7
   2892c:	000288eb 	.word	0x000288eb
   28930:	00028945 	.word	0x00028945
   28934:	000288eb 	.word	0x000288eb
   28938:	000288eb 	.word	0x000288eb
   2893c:	000288eb 	.word	0x000288eb
   28940:	00028951 	.word	0x00028951
			return !usb_dc_set_address(setup->wValue);
   28944:	78a0      	ldrb	r0, [r4, #2]
   28946:	f002 f9fb 	bl	2ad40 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   2894a:	2800      	cmp	r0, #0
   2894c:	d0bf      	beq.n	288ce <usb_handle_standard_request+0x56>
   2894e:	e7cc      	b.n	288ea <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
   28950:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   28952:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
   28954:	bb63      	cbnz	r3, 289b0 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
   28956:	f7ff fe17 	bl	28588 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   2895a:	8863      	ldrh	r3, [r4, #2]
   2895c:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   28960:	69f3      	ldr	r3, [r6, #28]
   28962:	2b00      	cmp	r3, #0
   28964:	d0b3      	beq.n	288ce <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   28966:	496a      	ldr	r1, [pc, #424]	; (28b10 <usb_handle_standard_request+0x298>)
   28968:	2003      	movs	r0, #3
   2896a:	4798      	blx	r3
   2896c:	e7af      	b.n	288ce <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
   2896e:	786b      	ldrb	r3, [r5, #1]
   28970:	2b04      	cmp	r3, #4
   28972:	d010      	beq.n	28996 <usb_handle_standard_request+0x11e>
   28974:	2b05      	cmp	r3, #5
   28976:	d011      	beq.n	2899c <usb_handle_standard_request+0x124>
   28978:	2b02      	cmp	r3, #2
   2897a:	d104      	bne.n	28986 <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
   2897c:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
   2897e:	8863      	ldrh	r3, [r4, #2]
				found = true;
   28980:	42bb      	cmp	r3, r7
   28982:	bf08      	it	eq
   28984:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   28986:	782b      	ldrb	r3, [r5, #0]
   28988:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   2898a:	782b      	ldrb	r3, [r5, #0]
   2898c:	2b00      	cmp	r3, #0
   2898e:	d1ee      	bne.n	2896e <usb_handle_standard_request+0xf6>
	if (found) {
   28990:	2800      	cmp	r0, #0
   28992:	d0aa      	beq.n	288ea <usb_handle_standard_request+0x72>
   28994:	e7df      	b.n	28956 <usb_handle_standard_request+0xde>
			cur_alt_setting =
   28996:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
   2899a:	e7f4      	b.n	28986 <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
   2899c:	8863      	ldrh	r3, [r4, #2]
   2899e:	42bb      	cmp	r3, r7
   289a0:	d1f1      	bne.n	28986 <usb_handle_standard_request+0x10e>
   289a2:	f1b8 0f00 	cmp.w	r8, #0
   289a6:	d1ee      	bne.n	28986 <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   289a8:	4628      	mov	r0, r5
   289aa:	f7ff ff05 	bl	287b8 <set_endpoint>
			break;
   289ae:	e7ea      	b.n	28986 <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
   289b0:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
   289b2:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   289b4:	46b8      	mov	r8, r7
   289b6:	e7e8      	b.n	2898a <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   289b8:	8863      	ldrh	r3, [r4, #2]
   289ba:	2b01      	cmp	r3, #1
   289bc:	d195      	bne.n	288ea <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
   289be:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
   289c0:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   289c4:	e783      	b.n	288ce <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   289c6:	8863      	ldrh	r3, [r4, #2]
   289c8:	2b01      	cmp	r3, #1
   289ca:	d18e      	bne.n	288ea <usb_handle_standard_request+0x72>
   289cc:	e7f8      	b.n	289c0 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
   289ce:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   289d2:	f8d5 c000 	ldr.w	ip, [r5]
   289d6:	2b00      	cmp	r3, #0
   289d8:	d087      	beq.n	288ea <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   289da:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   289dc:	88a3      	ldrh	r3, [r4, #4]
   289de:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   289e2:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
   289e4:	7810      	ldrb	r0, [r2, #0]
   289e6:	2800      	cmp	r0, #0
   289e8:	f43f af7f 	beq.w	288ea <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   289ec:	7851      	ldrb	r1, [r2, #1]
   289ee:	2902      	cmp	r1, #2
   289f0:	d104      	bne.n	289fc <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
   289f2:	f892 8004 	ldrb.w	r8, [r2, #4]
   289f6:	45f0      	cmp	r8, lr
   289f8:	f200 8093 	bhi.w	28b22 <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
   289fc:	4402      	add	r2, r0
   289fe:	e7f1      	b.n	289e4 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
   28a00:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
   28a04:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
   28a08:	6039      	str	r1, [r7, #0]
			return true;
   28a0a:	e760      	b.n	288ce <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
   28a0c:	4415      	add	r5, r2
   28a0e:	e094      	b.n	28b3a <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   28a10:	2a0b      	cmp	r2, #11
   28a12:	f47f af6a 	bne.w	288ea <usb_handle_standard_request+0x72>
	bool ret = false;
   28a16:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   28a18:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   28a1c:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
   28a1e:	46ba      	mov	sl, r7
   28a20:	e006      	b.n	28a30 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
   28a22:	786b      	ldrb	r3, [r5, #1]
   28a24:	2b04      	cmp	r3, #4
   28a26:	d00f      	beq.n	28a48 <usb_handle_standard_request+0x1d0>
   28a28:	2b05      	cmp	r3, #5
   28a2a:	d021      	beq.n	28a70 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
   28a2c:	782b      	ldrb	r3, [r5, #0]
   28a2e:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   28a30:	782b      	ldrb	r3, [r5, #0]
   28a32:	2b00      	cmp	r3, #0
   28a34:	d1f5      	bne.n	28a22 <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
   28a36:	69f3      	ldr	r3, [r6, #28]
   28a38:	b113      	cbz	r3, 28a40 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   28a3a:	4651      	mov	r1, sl
   28a3c:	2007      	movs	r0, #7
   28a3e:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   28a40:	2f00      	cmp	r7, #0
   28a42:	f47f af44 	bne.w	288ce <usb_handle_standard_request+0x56>
   28a46:	e750      	b.n	288ea <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   28a48:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
   28a4c:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   28a4e:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
   28a52:	4598      	cmp	r8, r3
   28a54:	d1ea      	bne.n	28a2c <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
   28a56:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
   28a58:	4599      	cmp	r9, r3
   28a5a:	d1e7      	bne.n	28a2c <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   28a5c:	f1b8 0f07 	cmp.w	r8, #7
   28a60:	d81c      	bhi.n	28a9c <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
   28a62:	eb06 0308 	add.w	r3, r6, r8
		return true;
   28a66:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
   28a68:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
   28a6c:	2701      	movs	r7, #1
   28a6e:	e7dd      	b.n	28a2c <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
   28a70:	88a3      	ldrh	r3, [r4, #4]
   28a72:	4543      	cmp	r3, r8
   28a74:	d1da      	bne.n	28a2c <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
   28a76:	78a3      	ldrb	r3, [r4, #2]
   28a78:	454b      	cmp	r3, r9
   28a7a:	d00a      	beq.n	28a92 <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
   28a7c:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   28a7e:	4638      	mov	r0, r7
   28a80:	f000 fd12 	bl	294a8 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
   28a84:	4638      	mov	r0, r7
   28a86:	f7ff fe67 	bl	28758 <disable_endpoint>
   28a8a:	fab0 f780 	clz	r7, r0
   28a8e:	097f      	lsrs	r7, r7, #5
   28a90:	e7cc      	b.n	28a2c <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
   28a92:	4628      	mov	r0, r5
   28a94:	f7ff fe90 	bl	287b8 <set_endpoint>
   28a98:	4607      	mov	r7, r0
   28a9a:	e7c7      	b.n	28a2c <usb_handle_standard_request+0x1b4>
   28a9c:	46aa      	mov	sl, r5
	return false;
   28a9e:	2700      	movs	r7, #0
   28aa0:	e7c4      	b.n	28a2c <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
   28aa2:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
   28aa6:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   28aa8:	2a00      	cmp	r2, #0
   28aaa:	da18      	bge.n	28ade <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   28aac:	2b00      	cmp	r3, #0
   28aae:	f47f af1c 	bne.w	288ea <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
   28ab2:	7924      	ldrb	r4, [r4, #4]
   28ab4:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
   28ab6:	0663      	lsls	r3, r4, #25
   28ab8:	d00a      	beq.n	28ad0 <usb_handle_standard_request+0x258>
   28aba:	4620      	mov	r0, r4
   28abc:	f7ff fd6c 	bl	28598 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   28ac0:	2800      	cmp	r0, #0
   28ac2:	f43f af12 	beq.w	288ea <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   28ac6:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   28aca:	2b00      	cmp	r3, #0
   28acc:	f43f af0d 	beq.w	288ea <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
   28ad0:	4629      	mov	r1, r5
   28ad2:	4620      	mov	r0, r4
   28ad4:	f002 fa06 	bl	2aee4 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   28ad8:	2300      	movs	r3, #0
   28ada:	706b      	strb	r3, [r5, #1]
   28adc:	e6f2      	b.n	288c4 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
   28ade:	2b01      	cmp	r3, #1
   28ae0:	d008      	beq.n	28af4 <usb_handle_standard_request+0x27c>
   28ae2:	2b03      	cmp	r3, #3
   28ae4:	f47f af01 	bne.w	288ea <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   28ae8:	8863      	ldrh	r3, [r4, #2]
   28aea:	2b00      	cmp	r3, #0
   28aec:	f47f aefd 	bne.w	288ea <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   28af0:	2101      	movs	r1, #1
   28af2:	e003      	b.n	28afc <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   28af4:	8861      	ldrh	r1, [r4, #2]
   28af6:	2900      	cmp	r1, #0
   28af8:	f47f aef7 	bne.w	288ea <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   28afc:	88a0      	ldrh	r0, [r4, #4]
   28afe:	f7ff fd93 	bl	28628 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   28b02:	2800      	cmp	r0, #0
   28b04:	f47f aee3 	bne.w	288ce <usb_handle_standard_request+0x56>
   28b08:	e6ef      	b.n	288ea <usb_handle_standard_request+0x72>
   28b0a:	bf00      	nop
   28b0c:	20000be8 	.word	0x20000be8
   28b10:	20000ca2 	.word	0x20000ca2
		if (type == USB_DESC_CONFIGURATION) {
   28b14:	2802      	cmp	r0, #2
		*data = p;
   28b16:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
   28b18:	f47f aef4 	bne.w	28904 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
   28b1c:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
   28b1e:	603b      	str	r3, [r7, #0]
		return true;
   28b20:	e6d5      	b.n	288ce <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
   28b22:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
   28b26:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   28b28:	2800      	cmp	r0, #0
   28b2a:	f6bf af71 	bge.w	28a10 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
   28b2e:	2a00      	cmp	r2, #0
   28b30:	f43f af66 	beq.w	28a00 <usb_handle_standard_request+0x188>
   28b34:	2a0a      	cmp	r2, #10
   28b36:	f47f aed8 	bne.w	288ea <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
   28b3a:	782a      	ldrb	r2, [r5, #0]
   28b3c:	2a00      	cmp	r2, #0
   28b3e:	f43f aed4 	beq.w	288ea <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   28b42:	7869      	ldrb	r1, [r5, #1]
   28b44:	2904      	cmp	r1, #4
   28b46:	f47f af61 	bne.w	28a0c <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   28b4a:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
   28b4c:	428b      	cmp	r3, r1
   28b4e:	f47f af5d 	bne.w	28a0c <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   28b52:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   28b54:	bf96      	itet	ls
   28b56:	199b      	addls	r3, r3, r6
	return 0;
   28b58:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   28b5a:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   28b5e:	f88c 3000 	strb.w	r3, [ip]
   28b62:	e6d4      	b.n	2890e <usb_handle_standard_request+0x96>

00028b64 <usb_data_to_host>:
{
   28b64:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   28b66:	4c16      	ldr	r4, [pc, #88]	; (28bc0 <usb_data_to_host+0x5c>)
   28b68:	7d23      	ldrb	r3, [r4, #20]
   28b6a:	b9f3      	cbnz	r3, 28baa <usb_data_to_host+0x46>
		uint32_t chunk = usb_dev.data_buf_residue;
   28b6c:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   28b6e:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   28b70:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   28b72:	ab01      	add	r3, sp, #4
   28b74:	2080      	movs	r0, #128	; 0x80
   28b76:	f007 fae9 	bl	3014c <usb_write>
		usb_dev.data_buf += chunk;
   28b7a:	9a01      	ldr	r2, [sp, #4]
   28b7c:	68a3      	ldr	r3, [r4, #8]
   28b7e:	4413      	add	r3, r2
   28b80:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   28b82:	68e3      	ldr	r3, [r4, #12]
   28b84:	1a9b      	subs	r3, r3, r2
   28b86:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   28b88:	b96b      	cbnz	r3, 28ba6 <usb_data_to_host+0x42>
   28b8a:	b162      	cbz	r2, 28ba6 <usb_data_to_host+0x42>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   28b8c:	6923      	ldr	r3, [r4, #16]
   28b8e:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   28b90:	429a      	cmp	r2, r3
   28b92:	dd08      	ble.n	28ba6 <usb_data_to_host+0x42>
			if (!(usb_dev.data_buf_len % usb_dev.mps0)) {
   28b94:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   28b98:	fb93 f1f2 	sdiv	r1, r3, r2
   28b9c:	fb02 3311 	mls	r3, r2, r1, r3
   28ba0:	b90b      	cbnz	r3, 28ba6 <usb_data_to_host+0x42>
				usb_dev.zlp_flag = true;
   28ba2:	2301      	movs	r3, #1
   28ba4:	7523      	strb	r3, [r4, #20]
}
   28ba6:	b002      	add	sp, #8
   28ba8:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   28baa:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   28bac:	461a      	mov	r2, r3
   28bae:	4619      	mov	r1, r3
   28bb0:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   28bb2:	7523      	strb	r3, [r4, #20]
}
   28bb4:	b002      	add	sp, #8
   28bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   28bba:	f002 b9d9 	b.w	2af70 <usb_dc_ep_write>
   28bbe:	bf00      	nop
   28bc0:	20000be8 	.word	0x20000be8

00028bc4 <usb_handle_control_transfer>:
{
   28bc4:	b570      	push	{r4, r5, r6, lr}
   28bc6:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
   28bc8:	2300      	movs	r3, #0
{
   28bca:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   28bcc:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   28bce:	4606      	mov	r6, r0
   28bd0:	2800      	cmp	r0, #0
   28bd2:	d168      	bne.n	28ca6 <usb_handle_control_transfer+0xe2>
   28bd4:	2900      	cmp	r1, #0
   28bd6:	d140      	bne.n	28c5a <usb_handle_control_transfer+0x96>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   28bd8:	2208      	movs	r2, #8
   28bda:	460b      	mov	r3, r1
   28bdc:	eb0d 0102 	add.w	r1, sp, r2
   28be0:	f007 fc1f 	bl	30422 <usb_dc_ep_read>
   28be4:	2800      	cmp	r0, #0
   28be6:	da04      	bge.n	28bf2 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   28be8:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   28bea:	f002 f921 	bl	2ae30 <usb_dc_ep_set_stall>
}
   28bee:	b00a      	add	sp, #40	; 0x28
   28bf0:	bd70      	pop	{r4, r5, r6, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   28bf2:	4c32      	ldr	r4, [pc, #200]	; (28cbc <usb_handle_control_transfer+0xf8>)
   28bf4:	9a02      	ldr	r2, [sp, #8]
   28bf6:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   28bf8:	9a03      	ldr	r2, [sp, #12]
   28bfa:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   28bfc:	f104 0238 	add.w	r2, r4, #56	; 0x38
   28c00:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
   28c02:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   28c06:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
   28c0a:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   28c0c:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
   28c0e:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
   28c12:	db15      	blt.n	28c40 <usb_handle_control_transfer+0x7c>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   28c14:	2b80      	cmp	r3, #128	; 0x80
   28c16:	d90f      	bls.n	28c38 <usb_handle_control_transfer+0x74>
				LOG_ERR("Request buffer too small");
   28c18:	4b29      	ldr	r3, [pc, #164]	; (28cc0 <usb_handle_control_transfer+0xfc>)
   28c1a:	9309      	str	r3, [sp, #36]	; 0x24
   28c1c:	2302      	movs	r3, #2
   28c1e:	9308      	str	r3, [sp, #32]
   28c20:	4828      	ldr	r0, [pc, #160]	; (28cc4 <usb_handle_control_transfer+0x100>)
   28c22:	462b      	mov	r3, r5
   28c24:	aa08      	add	r2, sp, #32
   28c26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   28c2a:	f7fe ffe7 	bl	27bfc <z_impl_z_log_msg_static_create>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   28c2e:	2080      	movs	r0, #128	; 0x80
   28c30:	f002 f8fe 	bl	2ae30 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   28c34:	4628      	mov	r0, r5
   28c36:	e7d8      	b.n	28bea <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   28c38:	b113      	cbz	r3, 28c40 <usb_handle_control_transfer+0x7c>
				usb_dev.data_buf_residue = setup->wLength;
   28c3a:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   28c3e:	e7d6      	b.n	28bee <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   28c40:	f7ff fcc6 	bl	285d0 <usb_handle_request.constprop.0>
   28c44:	2800      	cmp	r0, #0
   28c46:	d0cf      	beq.n	28be8 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   28c48:	88e2      	ldrh	r2, [r4, #6]
   28c4a:	6923      	ldr	r3, [r4, #16]
   28c4c:	429a      	cmp	r2, r3
   28c4e:	bfd4      	ite	le
   28c50:	60e2      	strle	r2, [r4, #12]
   28c52:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   28c54:	f7ff ff86 	bl	28b64 <usb_data_to_host>
   28c58:	e7c9      	b.n	28bee <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   28c5a:	4c18      	ldr	r4, [pc, #96]	; (28cbc <usb_handle_control_transfer+0xf8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   28c5c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   28c60:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   28c62:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   28c64:	dc05      	bgt.n	28c72 <usb_handle_control_transfer+0xae>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   28c66:	4602      	mov	r2, r0
   28c68:	f007 fbdb 	bl	30422 <usb_dc_ep_read>
   28c6c:	2800      	cmp	r0, #0
   28c6e:	dabe      	bge.n	28bee <usb_handle_control_transfer+0x2a>
   28c70:	e7ba      	b.n	28be8 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   28c72:	f007 fbd6 	bl	30422 <usb_dc_ep_read>
   28c76:	2800      	cmp	r0, #0
   28c78:	da04      	bge.n	28c84 <usb_handle_control_transfer+0xc0>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   28c7a:	2080      	movs	r0, #128	; 0x80
   28c7c:	f002 f8d8 	bl	2ae30 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   28c80:	4630      	mov	r0, r6
   28c82:	e7b2      	b.n	28bea <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
   28c84:	9a01      	ldr	r2, [sp, #4]
   28c86:	68a3      	ldr	r3, [r4, #8]
   28c88:	4413      	add	r3, r2
   28c8a:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   28c8c:	68e3      	ldr	r3, [r4, #12]
   28c8e:	1a9b      	subs	r3, r3, r2
   28c90:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   28c92:	2b00      	cmp	r3, #0
   28c94:	d1ab      	bne.n	28bee <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   28c96:	f104 0338 	add.w	r3, r4, #56	; 0x38
   28c9a:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   28c9c:	f7ff fc98 	bl	285d0 <usb_handle_request.constprop.0>
   28ca0:	2800      	cmp	r0, #0
   28ca2:	d1d7      	bne.n	28c54 <usb_handle_control_transfer+0x90>
   28ca4:	e7a0      	b.n	28be8 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   28ca6:	2880      	cmp	r0, #128	; 0x80
   28ca8:	d1a1      	bne.n	28bee <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   28caa:	4b04      	ldr	r3, [pc, #16]	; (28cbc <usb_handle_control_transfer+0xf8>)
   28cac:	68da      	ldr	r2, [r3, #12]
   28cae:	2a00      	cmp	r2, #0
   28cb0:	d1d0      	bne.n	28c54 <usb_handle_control_transfer+0x90>
   28cb2:	7d1b      	ldrb	r3, [r3, #20]
   28cb4:	2b00      	cmp	r3, #0
   28cb6:	d1cd      	bne.n	28c54 <usb_handle_control_transfer+0x90>
   28cb8:	e799      	b.n	28bee <usb_handle_control_transfer+0x2a>
   28cba:	bf00      	nop
   28cbc:	20000be8 	.word	0x20000be8
   28cc0:	0003191c 	.word	0x0003191c
   28cc4:	00031334 	.word	0x00031334

00028cc8 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   28cc8:	4b05      	ldr	r3, [pc, #20]	; (28ce0 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   28cca:	4a06      	ldr	r2, [pc, #24]	; (28ce4 <usb_set_config+0x1c>)
   28ccc:	629a      	str	r2, [r3, #40]	; 0x28
   28cce:	4a06      	ldr	r2, [pc, #24]	; (28ce8 <usb_set_config+0x20>)
   28cd0:	62da      	str	r2, [r3, #44]	; 0x2c
   28cd2:	4a06      	ldr	r2, [pc, #24]	; (28cec <usb_set_config+0x24>)
   28cd4:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   28cd6:	4a06      	ldr	r2, [pc, #24]	; (28cf0 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   28cd8:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   28cda:	619a      	str	r2, [r3, #24]
}
   28cdc:	2000      	movs	r0, #0
   28cde:	4770      	bx	lr
   28ce0:	20000be8 	.word	0x20000be8
   28ce4:	00028879 	.word	0x00028879
   28ce8:	000284ad 	.word	0x000284ad
   28cec:	0002854d 	.word	0x0002854d
   28cf0:	000284ed 	.word	0x000284ed

00028cf4 <usb_enable>:
{
   28cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct usb_device_descriptor *dev_desc = (void *)usb_dev.descriptors;
   28cf8:	4d46      	ldr	r5, [pc, #280]	; (28e14 <usb_enable+0x120>)
{
   28cfa:	b086      	sub	sp, #24
	struct usb_device_descriptor *dev_desc = (void *)usb_dev.descriptors;
   28cfc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
{
   28cfe:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   28d00:	4845      	ldr	r0, [pc, #276]	; (28e18 <usb_enable+0x124>)
   28d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28d0a:	f005 fa15 	bl	2e138 <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
   28d0e:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   28d12:	2e00      	cmp	r6, #0
   28d14:	d17b      	bne.n	28e0e <usb_enable+0x11a>
	usb_dev.status_callback = cb;
   28d16:	4841      	ldr	r0, [pc, #260]	; (28e1c <usb_enable+0x128>)
	usb_dev.user_status_callback = status_cb;
   28d18:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   28d1a:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
   28d1c:	f002 fa9c 	bl	2b258 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   28d20:	f001 ffdc 	bl	2acdc <usb_dc_attach>
	if (ret < 0) {
   28d24:	1e04      	subs	r4, r0, #0
   28d26:	db15      	blt.n	28d54 <usb_enable+0x60>
	ret = usb_transfer_init();
   28d28:	f000 fc00 	bl	2952c <usb_transfer_init>
	if (ret < 0) {
   28d2c:	1e04      	subs	r4, r0, #0
   28d2e:	db11      	blt.n	28d54 <usb_enable+0x60>
	if (dev_desc->bDescriptorType != USB_DESC_DEVICE ||
   28d30:	787b      	ldrb	r3, [r7, #1]
   28d32:	2b01      	cmp	r3, #1
   28d34:	d101      	bne.n	28d3a <usb_enable+0x46>
	    dev_desc->bMaxPacketSize0 == 0) {
   28d36:	79fb      	ldrb	r3, [r7, #7]
	if (dev_desc->bDescriptorType != USB_DESC_DEVICE ||
   28d38:	b99b      	cbnz	r3, 28d62 <usb_enable+0x6e>
		LOG_ERR("Erroneous device descriptor or bMaxPacketSize0");
   28d3a:	4b39      	ldr	r3, [pc, #228]	; (28e20 <usb_enable+0x12c>)
   28d3c:	9305      	str	r3, [sp, #20]
   28d3e:	2302      	movs	r3, #2
   28d40:	9304      	str	r3, [sp, #16]
   28d42:	4838      	ldr	r0, [pc, #224]	; (28e24 <usb_enable+0x130>)
   28d44:	2300      	movs	r3, #0
   28d46:	aa04      	add	r2, sp, #16
   28d48:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		ret = -EINVAL;
   28d4c:	f06f 0415 	mvn.w	r4, #21
   28d50:	f7fe ff54 	bl	27bfc <z_impl_z_log_msg_static_create>
	return z_impl_k_mutex_unlock(mutex);
   28d54:	4830      	ldr	r0, [pc, #192]	; (28e18 <usb_enable+0x124>)
   28d56:	f005 fa69 	bl	2e22c <z_impl_k_mutex_unlock>
}
   28d5a:	4620      	mov	r0, r4
   28d5c:	b006      	add	sp, #24
   28d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = usb_dc_ep_configure(&ep0_cfg);
   28d62:	4668      	mov	r0, sp
	usb_dev.mps0 = dev_desc->bMaxPacketSize0;
   28d64:	f885 30c8 	strb.w	r3, [r5, #200]	; 0xc8
	ep0_cfg.ep_mps = usb_dev.mps0;
   28d68:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   28d6c:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   28d70:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   28d74:	f002 f828 	bl	2adc8 <usb_dc_ep_configure>
	if (ret < 0) {
   28d78:	1e04      	subs	r4, r0, #0
   28d7a:	dbeb      	blt.n	28d54 <usb_enable+0x60>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   28d7c:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   28d7e:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   28d80:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   28d84:	f002 f820 	bl	2adc8 <usb_dc_ep_configure>
	if (ret < 0) {
   28d88:	1e04      	subs	r4, r0, #0
   28d8a:	dbe3      	blt.n	28d54 <usb_enable+0x60>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   28d8c:	4926      	ldr	r1, [pc, #152]	; (28e28 <usb_enable+0x134>)
   28d8e:	4630      	mov	r0, r6
   28d90:	f002 fa4e 	bl	2b230 <usb_dc_ep_set_callback>
	if (ret < 0) {
   28d94:	1e04      	subs	r4, r0, #0
   28d96:	dbdd      	blt.n	28d54 <usb_enable+0x60>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   28d98:	4923      	ldr	r1, [pc, #140]	; (28e28 <usb_enable+0x134>)
   28d9a:	4638      	mov	r0, r7
   28d9c:	f002 fa48 	bl	2b230 <usb_dc_ep_set_callback>
	if (ret < 0) {
   28da0:	1e04      	subs	r4, r0, #0
   28da2:	dbd7      	blt.n	28d54 <usb_enable+0x60>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28da4:	4c21      	ldr	r4, [pc, #132]	; (28e2c <usb_enable+0x138>)
   28da6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 28e30 <usb_enable+0x13c>
   28daa:	4544      	cmp	r4, r8
   28dac:	d31a      	bcc.n	28de4 <usb_enable+0xf0>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   28dae:	2000      	movs	r0, #0
   28db0:	f002 f8b4 	bl	2af1c <usb_dc_ep_enable>
	if (ret < 0) {
   28db4:	1e04      	subs	r4, r0, #0
   28db6:	dbcd      	blt.n	28d54 <usb_enable+0x60>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
   28db8:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   28dbc:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
   28dbe:	f043 0301 	orr.w	r3, r3, #1
   28dc2:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   28dc6:	f002 f8a9 	bl	2af1c <usb_dc_ep_enable>
	if (ret < 0) {
   28dca:	1e04      	subs	r4, r0, #0
   28dcc:	dbc2      	blt.n	28d54 <usb_enable+0x60>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
   28dce:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   28dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   28dd6:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
   28dda:	2301      	movs	r3, #1
   28ddc:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   28de0:	2400      	movs	r4, #0
   28de2:	e7b7      	b.n	28d54 <usb_enable+0x60>
		ep_data = cfg_data->endpoint;
   28de4:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28de6:	2600      	movs	r6, #0
   28de8:	7f22      	ldrb	r2, [r4, #28]
   28dea:	b2f3      	uxtb	r3, r6
   28dec:	429a      	cmp	r2, r3
   28dee:	d801      	bhi.n	28df4 <usb_enable+0x100>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28df0:	3424      	adds	r4, #36	; 0x24
   28df2:	e7da      	b.n	28daa <usb_enable+0xb6>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   28df4:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   28df8:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   28dfc:	7910      	ldrb	r0, [r2, #4]
   28dfe:	f002 fa17 	bl	2b230 <usb_dc_ep_set_callback>
   28e02:	3601      	adds	r6, #1
   28e04:	2800      	cmp	r0, #0
   28e06:	d0ef      	beq.n	28de8 <usb_enable+0xf4>
   28e08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   28e0c:	e7a2      	b.n	28d54 <usb_enable+0x60>
		ret = -EALREADY;
   28e0e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   28e12:	e79f      	b.n	28d54 <usb_enable+0x60>
   28e14:	20000be8 	.word	0x20000be8
   28e18:	200002b4 	.word	0x200002b4
   28e1c:	000286a9 	.word	0x000286a9
   28e20:	00031935 	.word	0x00031935
   28e24:	00031334 	.word	0x00031334
   28e28:	00028bc5 	.word	0x00028bc5
   28e2c:	2000038c 	.word	0x2000038c
   28e30:	200003b0 	.word	0x200003b0

00028e34 <usb_device_init>:
{
   28e34:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
   28e36:	4b0a      	ldr	r3, [pc, #40]	; (28e60 <usb_device_init+0x2c>)
   28e38:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   28e3c:	b96c      	cbnz	r4, 28e5a <usb_device_init+0x26>
	device_descriptor = usb_get_device_descriptor();
   28e3e:	f000 f855 	bl	28eec <usb_get_device_descriptor>
	if (!device_descriptor) {
   28e42:	b918      	cbnz	r0, 28e4c <usb_device_init+0x18>
}
   28e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28e48:	f7ff bbd8 	b.w	285fc <usb_device_init.part.0>
	usb_set_config(device_descriptor);
   28e4c:	f7ff ff3c 	bl	28cc8 <usb_set_config>
		return usb_enable(NULL);
   28e50:	4620      	mov	r0, r4
}
   28e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return usb_enable(NULL);
   28e56:	f7ff bf4d 	b.w	28cf4 <usb_enable>
}
   28e5a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   28e5e:	bd10      	pop	{r4, pc}
   28e60:	20000be8 	.word	0x20000be8

00028e64 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   28e64:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   28e66:	4b1f      	ldr	r3, [pc, #124]	; (28ee4 <usb_update_sn_string_descriptor+0x80>)
{
   28e68:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   28e6a:	aa05      	add	r2, sp, #20
   28e6c:	f103 0510 	add.w	r5, r3, #16
   28e70:	6818      	ldr	r0, [r3, #0]
   28e72:	6859      	ldr	r1, [r3, #4]
   28e74:	4614      	mov	r4, r2
   28e76:	c403      	stmia	r4!, {r0, r1}
   28e78:	3308      	adds	r3, #8
   28e7a:	42ab      	cmp	r3, r5
   28e7c:	4622      	mov	r2, r4
   28e7e:	d1f7      	bne.n	28e70 <usb_update_sn_string_descriptor+0xc>
   28e80:	781b      	ldrb	r3, [r3, #0]
   28e82:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   28e84:	2210      	movs	r2, #16
   28e86:	2100      	movs	r1, #0
   28e88:	a801      	add	r0, sp, #4
   28e8a:	f007 fa70 	bl	3036e <memset>
	memset(sn, 0, sizeof(sn));
   28e8e:	2212      	movs	r2, #18
   28e90:	2100      	movs	r1, #0
   28e92:	4815      	ldr	r0, [pc, #84]	; (28ee8 <usb_update_sn_string_descriptor+0x84>)
   28e94:	f007 fa6b 	bl	3036e <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   28e98:	2110      	movs	r1, #16
   28e9a:	a801      	add	r0, sp, #4
   28e9c:	f007 fbcb 	bl	30636 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   28ea0:	2800      	cmp	r0, #0
   28ea2:	dd1b      	ble.n	28edc <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   28ea4:	2808      	cmp	r0, #8
   28ea6:	bfb8      	it	lt
   28ea8:	2008      	movlt	r0, #8
   28eaa:	3809      	subs	r0, #9
   28eac:	ab01      	add	r3, sp, #4
   28eae:	490e      	ldr	r1, [pc, #56]	; (28ee8 <usb_update_sn_string_descriptor+0x84>)
   28eb0:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   28eb2:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   28eb4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   28eb8:	ac0a      	add	r4, sp, #40	; 0x28
   28eba:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   28ebe:	f003 030f 	and.w	r3, r3, #15
   28ec2:	3328      	adds	r3, #40	; 0x28
   28ec4:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
   28ec6:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   28ec8:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   28ecc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   28ed0:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
   28ed2:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   28ed4:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
   28ed6:	f101 0102 	add.w	r1, r1, #2
   28eda:	d1eb      	bne.n	28eb4 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   28edc:	4802      	ldr	r0, [pc, #8]	; (28ee8 <usb_update_sn_string_descriptor+0x84>)
   28ede:	b00b      	add	sp, #44	; 0x2c
   28ee0:	bd30      	pop	{r4, r5, pc}
   28ee2:	bf00      	nop
   28ee4:	0003196f 	.word	0x0003196f
   28ee8:	20001974 	.word	0x20001974

00028eec <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
   28eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ef0:	4c90      	ldr	r4, [pc, #576]	; (29134 <usb_get_device_descriptor+0x248>)
   28ef2:	b08b      	sub	sp, #44	; 0x2c
	uint8_t str_descr_idx = 0U;
   28ef4:	f04f 0a00 	mov.w	sl, #0
{
   28ef8:	af00      	add	r7, sp, #0
	uint8_t str_descr_idx = 0U;
   28efa:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   28efc:	f04f 1901 	mov.w	r9, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   28f00:	60fe      	str	r6, [r7, #12]
	struct usb_cfg_data *cfg_data = NULL;
   28f02:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
   28f04:	46b0      	mov	r8, r6
	while (head->bLength != 0U) {
   28f06:	7823      	ldrb	r3, [r4, #0]
   28f08:	b943      	cbnz	r3, 28f1c <usb_get_device_descriptor+0x30>
	if ((head + 1) != __usb_descriptor_end) {
   28f0a:	4b8b      	ldr	r3, [pc, #556]	; (29138 <usb_get_device_descriptor+0x24c>)
   28f0c:	3402      	adds	r4, #2
   28f0e:	429c      	cmp	r4, r3
   28f10:	d1f3      	bne.n	28efa <usb_get_device_descriptor+0xe>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   28f12:	4888      	ldr	r0, [pc, #544]	; (29134 <usb_get_device_descriptor+0x248>)
}
   28f14:	372c      	adds	r7, #44	; 0x2c
   28f16:	46bd      	mov	sp, r7
   28f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
   28f1c:	7863      	ldrb	r3, [r4, #1]
   28f1e:	2b05      	cmp	r3, #5
   28f20:	d81d      	bhi.n	28f5e <usb_get_device_descriptor+0x72>
   28f22:	e8df f013 	tbh	[pc, r3, lsl #1]
   28f26:	00be      	.short	0x00be
   28f28:	01050006 	.word	0x01050006
   28f2c:	001f00be 	.word	0x001f00be
   28f30:	0057      	.short	0x0057
	struct usb_dc_ep_cfg_data ep_cfg = {
   28f32:	2340      	movs	r3, #64	; 0x40
   28f34:	f887 a010 	strb.w	sl, [r7, #16]
   28f38:	827b      	strh	r3, [r7, #18]
   28f3a:	f887 a014 	strb.w	sl, [r7, #20]
	ret = usb_dc_ep_check_cap(&ep_cfg);
   28f3e:	f107 0010 	add.w	r0, r7, #16
   28f42:	f001 ff0f 	bl	2ad64 <usb_dc_ep_check_cap>
	if (ret) {
   28f46:	b140      	cbz	r0, 28f5a <usb_get_device_descriptor+0x6e>
		ep_cfg.ep_mps = 8;
   28f48:	2308      	movs	r3, #8
   28f4a:	827b      	strh	r3, [r7, #18]
		ret = usb_dc_ep_check_cap(&ep_cfg);
   28f4c:	f107 0010 	add.w	r0, r7, #16
   28f50:	f001 ff08 	bl	2ad64 <usb_dc_ep_check_cap>
		if (ret) {
   28f54:	b108      	cbz	r0, 28f5a <usb_get_device_descriptor+0x6e>
			ep_cfg.ep_mps = 0;
   28f56:	f8a7 a012 	strh.w	sl, [r7, #18]
	desc->bMaxPacketSize0 = ep_cfg.ep_mps;
   28f5a:	8a7b      	ldrh	r3, [r7, #18]
   28f5c:	71e3      	strb	r3, [r4, #7]
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   28f5e:	7823      	ldrb	r3, [r4, #0]
   28f60:	441c      	add	r4, r3
   28f62:	e7d0      	b.n	28f06 <usb_get_device_descriptor+0x1a>
			if (if_descr->bAlternateSetting) {
   28f64:	78e3      	ldrb	r3, [r4, #3]
   28f66:	2b00      	cmp	r3, #0
   28f68:	d1f9      	bne.n	28f5e <usb_get_device_descriptor+0x72>
			if (if_descr->bInterfaceNumber == 0U) {
   28f6a:	78a3      	ldrb	r3, [r4, #2]
   28f6c:	b343      	cbz	r3, 28fc0 <usb_get_device_descriptor+0xd4>
			numof_ifaces++;
   28f6e:	68fb      	ldr	r3, [r7, #12]
   28f70:	3301      	adds	r3, #1
   28f72:	b2db      	uxtb	r3, r3
   28f74:	60fb      	str	r3, [r7, #12]
			break;
   28f76:	e7f2      	b.n	28f5e <usb_get_device_descriptor+0x72>
		if (cfg_data->interface_descriptor == iface) {
   28f78:	686a      	ldr	r2, [r5, #4]
   28f7a:	4294      	cmp	r4, r2
   28f7c:	d023      	beq.n	28fc6 <usb_get_device_descriptor+0xda>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28f7e:	3524      	adds	r5, #36	; 0x24
   28f80:	429d      	cmp	r5, r3
   28f82:	d3f9      	bcc.n	28f78 <usb_get_device_descriptor+0x8c>
					LOG_ERR("There is no usb_cfg_data "
   28f84:	466d      	mov	r5, sp
   28f86:	b088      	sub	sp, #32
   28f88:	466a      	mov	r2, sp
   28f8a:	4b6c      	ldr	r3, [pc, #432]	; (2913c <usb_get_device_descriptor+0x250>)
   28f8c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   28f90:	2303      	movs	r3, #3
   28f92:	f842 3f10 	str.w	r3, [r2, #16]!
   28f96:	486a      	ldr	r0, [pc, #424]	; (29140 <usb_get_device_descriptor+0x254>)
   28f98:	2300      	movs	r3, #0
   28f9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   28f9e:	f7fe fe2d 	bl	27bfc <z_impl_z_log_msg_static_create>
   28fa2:	46ad      	mov	sp, r5
		LOG_ERR("Failed to fixup USB descriptor");
   28fa4:	4b67      	ldr	r3, [pc, #412]	; (29144 <usb_get_device_descriptor+0x258>)
   28fa6:	627b      	str	r3, [r7, #36]	; 0x24
   28fa8:	2302      	movs	r3, #2
   28faa:	623b      	str	r3, [r7, #32]
   28fac:	4864      	ldr	r0, [pc, #400]	; (29140 <usb_get_device_descriptor+0x254>)
   28fae:	2300      	movs	r3, #0
   28fb0:	f107 0220 	add.w	r2, r7, #32
   28fb4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   28fb8:	f7fe fe20 	bl	27bfc <z_impl_z_log_msg_static_create>
		return NULL;
   28fbc:	2000      	movs	r0, #0
   28fbe:	e7a9      	b.n	28f14 <usb_get_device_descriptor+0x28>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28fc0:	4d61      	ldr	r5, [pc, #388]	; (29148 <usb_get_device_descriptor+0x25c>)
   28fc2:	4b62      	ldr	r3, [pc, #392]	; (2914c <usb_get_device_descriptor+0x260>)
   28fc4:	e7dc      	b.n	28f80 <usb_get_device_descriptor+0x94>
				if (cfg_data->interface_config) {
   28fc6:	68ab      	ldr	r3, [r5, #8]
   28fc8:	2b00      	cmp	r3, #0
   28fca:	d0d0      	beq.n	28f6e <usb_get_device_descriptor+0x82>
					cfg_data->interface_config(head,
   28fcc:	68f9      	ldr	r1, [r7, #12]
   28fce:	4620      	mov	r0, r4
   28fd0:	4798      	blx	r3
   28fd2:	e7cc      	b.n	28f6e <usb_get_device_descriptor+0x82>
			if (!cfg_data) {
   28fd4:	2d00      	cmp	r5, #0
   28fd6:	d162      	bne.n	2909e <usb_get_device_descriptor+0x1b2>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
   28fd8:	4b5d      	ldr	r3, [pc, #372]	; (29150 <usb_get_device_descriptor+0x264>)
				LOG_ERR("Failed to validate endpoints");
   28fda:	627b      	str	r3, [r7, #36]	; 0x24
   28fdc:	2302      	movs	r3, #2
   28fde:	623b      	str	r3, [r7, #32]
   28fe0:	4857      	ldr	r0, [pc, #348]	; (29140 <usb_get_device_descriptor+0x254>)
   28fe2:	2300      	movs	r3, #0
   28fe4:	f107 0220 	add.w	r2, r7, #32
   28fe8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   28fec:	f7fe fe06 	bl	27bfc <z_impl_z_log_msg_static_create>
				return -1;
   28ff0:	e7d8      	b.n	28fa4 <usb_get_device_descriptor+0xb8>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   28ff2:	6a2b      	ldr	r3, [r5, #32]
   28ff4:	78a0      	ldrb	r0, [r4, #2]
   28ff6:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   28ffa:	790b      	ldrb	r3, [r1, #4]
   28ffc:	4298      	cmp	r0, r3
   28ffe:	d005      	beq.n	2900c <usb_get_device_descriptor+0x120>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   29000:	3201      	adds	r2, #1
   29002:	7f2b      	ldrb	r3, [r5, #28]
   29004:	429a      	cmp	r2, r3
   29006:	d3f4      	bcc.n	28ff2 <usb_get_device_descriptor+0x106>
				LOG_ERR("Failed to validate endpoints");
   29008:	4b52      	ldr	r3, [pc, #328]	; (29154 <usb_get_device_descriptor+0x268>)
   2900a:	e7e6      	b.n	28fda <usb_get_device_descriptor+0xee>
   2900c:	f04f 0b01 	mov.w	fp, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   29010:	78e0      	ldrb	r0, [r4, #3]
   29012:	f000 0003 	and.w	r0, r0, #3
   29016:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   29018:	7920      	ldrb	r0, [r4, #4]
   2901a:	f894 c005 	ldrb.w	ip, [r4, #5]
   2901e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   29022:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   29024:	f994 0002 	ldrsb.w	r0, [r4, #2]
   29028:	2800      	cmp	r0, #0
   2902a:	fa5f f38b 	uxtb.w	r3, fp
   2902e:	da28      	bge.n	29082 <usb_get_device_descriptor+0x196>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   29030:	f10b 0010 	add.w	r0, fp, #16
   29034:	f04f 0c01 	mov.w	ip, #1
   29038:	fa0c f000 	lsl.w	r0, ip, r0
   2903c:	ea10 0f09 	tst.w	r0, r9
   29040:	d127      	bne.n	29092 <usb_get_device_descriptor+0x1a6>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   29042:	f043 0080 	orr.w	r0, r3, #128	; 0x80
   29046:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   29048:	f107 0010 	add.w	r0, r7, #16
   2904c:	e9c7 3100 	strd	r3, r1, [r7]
   29050:	60ba      	str	r2, [r7, #8]
   29052:	f001 fe87 	bl	2ad64 <usb_dc_ep_check_cap>
   29056:	e9d7 1201 	ldrd	r1, r2, [r7, #4]
   2905a:	683b      	ldr	r3, [r7, #0]
   2905c:	b9c8      	cbnz	r0, 29092 <usb_get_device_descriptor+0x1a6>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   2905e:	7c3a      	ldrb	r2, [r7, #16]
   29060:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   29062:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   29066:	bf18      	it	ne
   29068:	3310      	addne	r3, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   2906a:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1U << (idx + 16U));
   2906c:	bf18      	it	ne
   2906e:	b2db      	uxtbne	r3, r3
   29070:	f04f 0201 	mov.w	r2, #1
   29074:	bf14      	ite	ne
   29076:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
   29078:	fa02 f20b 	lsleq.w	r2, r2, fp
   2907c:	ea49 0902 	orr.w	r9, r9, r2
				return 0;
   29080:	e76d      	b.n	28f5e <usb_get_device_descriptor+0x72>
				if ((*requested_ep & (1U << (idx)))) {
   29082:	2001      	movs	r0, #1
   29084:	fa00 f00b 	lsl.w	r0, r0, fp
   29088:	ea10 0f09 	tst.w	r0, r9
   2908c:	d101      	bne.n	29092 <usb_get_device_descriptor+0x1a6>
   2908e:	4618      	mov	r0, r3
   29090:	e7d9      	b.n	29046 <usb_get_device_descriptor+0x15a>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   29092:	f10b 0b01 	add.w	fp, fp, #1
   29096:	f1bb 0f10 	cmp.w	fp, #16
   2909a:	d1b9      	bne.n	29010 <usb_get_device_descriptor+0x124>
   2909c:	e7b0      	b.n	29000 <usb_get_device_descriptor+0x114>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2909e:	2200      	movs	r2, #0
   290a0:	e7af      	b.n	29002 <usb_get_device_descriptor+0x116>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   290a2:	2e03      	cmp	r6, #3
   290a4:	d12a      	bne.n	290fc <usb_get_device_descriptor+0x210>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   290a6:	f7ff fedd 	bl	28e64 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   290aa:	4683      	mov	fp, r0
   290ac:	b1a8      	cbz	r0, 290da <usb_get_device_descriptor+0x1ee>
	runtime_sn_len = strlen(runtime_sn);
   290ae:	f007 f94c 	bl	3034a <strlen>
	if (!runtime_sn_len) {
   290b2:	60b8      	str	r0, [r7, #8]
   290b4:	b188      	cbz	r0, 290da <usb_get_device_descriptor+0x1ee>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   290b6:	4828      	ldr	r0, [pc, #160]	; (29158 <usb_get_device_descriptor+0x26c>)
   290b8:	f007 f947 	bl	3034a <strlen>
	if (runtime_sn_len != default_sn_len) {
   290bc:	68ba      	ldr	r2, [r7, #8]
   290be:	4282      	cmp	r2, r0
   290c0:	d017      	beq.n	290f2 <usb_get_device_descriptor+0x206>
		LOG_ERR("the new SN descriptor doesn't have the same "
   290c2:	4b26      	ldr	r3, [pc, #152]	; (2915c <usb_get_device_descriptor+0x270>)
   290c4:	627b      	str	r3, [r7, #36]	; 0x24
   290c6:	2302      	movs	r3, #2
   290c8:	623b      	str	r3, [r7, #32]
   290ca:	481d      	ldr	r0, [pc, #116]	; (29140 <usb_get_device_descriptor+0x254>)
   290cc:	2300      	movs	r3, #0
   290ce:	f107 0220 	add.w	r2, r7, #32
   290d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   290d6:	f7fe fd91 	bl	27bfc <z_impl_z_log_msg_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   290da:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   290dc:	f06f 0102 	mvn.w	r1, #2
   290e0:	18e2      	adds	r2, r4, r3
   290e2:	1b09      	subs	r1, r1, r4
   290e4:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   290e8:	42d1      	cmn	r1, r2
   290ea:	d50e      	bpl.n	2910a <usb_get_device_descriptor+0x21e>
			str_descr_idx += 1U;
   290ec:	3601      	adds	r6, #1
   290ee:	b2f6      	uxtb	r6, r6
			break;
   290f0:	e735      	b.n	28f5e <usb_get_device_descriptor+0x72>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   290f2:	4659      	mov	r1, fp
   290f4:	1ca0      	adds	r0, r4, #2
   290f6:	f007 f92f 	bl	30358 <memcpy>
			if (str_descr_idx) {
   290fa:	e7ee      	b.n	290da <usb_get_device_descriptor+0x1ee>
   290fc:	2e00      	cmp	r6, #0
   290fe:	d1ec      	bne.n	290da <usb_get_device_descriptor+0x1ee>
				if (!cfg_descr) {
   29100:	f1b8 0f00 	cmp.w	r8, #0
   29104:	d108      	bne.n	29118 <usb_get_device_descriptor+0x22c>
					LOG_ERR("Incomplete device descriptor");
   29106:	4b16      	ldr	r3, [pc, #88]	; (29160 <usb_get_device_descriptor+0x274>)
   29108:	e767      	b.n	28fda <usb_get_device_descriptor+0xee>
		buf[i] = 0U;
   2910a:	f802 ac01 	strb.w	sl, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   2910e:	f813 0901 	ldrb.w	r0, [r3], #-1
   29112:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   29116:	e7e7      	b.n	290e8 <usb_get_device_descriptor+0x1fc>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   29118:	eba4 0308 	sub.w	r3, r4, r8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   2911c:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
   29120:	f3c3 2307 	ubfx	r3, r3, #8, #8
   29124:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   29128:	68fb      	ldr	r3, [r7, #12]
   2912a:	f888 3004 	strb.w	r3, [r8, #4]
   2912e:	e7dd      	b.n	290ec <usb_get_device_descriptor+0x200>
		switch (head->bDescriptorType) {
   29130:	46a0      	mov	r8, r4
   29132:	e714      	b.n	28f5e <usb_get_device_descriptor+0x72>
   29134:	200002e8 	.word	0x200002e8
   29138:	2000038b 	.word	0x2000038b
   2913c:	00031980 	.word	0x00031980
   29140:	0003132c 	.word	0x0003132c
   29144:	00031a66 	.word	0x00031a66
   29148:	2000038c 	.word	0x2000038c
   2914c:	200003b0 	.word	0x200003b0
   29150:	000319a0 	.word	0x000319a0
   29154:	000319e1 	.word	0x000319e1
   29158:	0003196f 	.word	0x0003196f
   2915c:	000319fe 	.word	0x000319fe
   29160:	00031a49 	.word	0x00031a49

00029164 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   29164:	b510      	push	{r4, lr}
   29166:	4b09      	ldr	r3, [pc, #36]	; (2918c <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29168:	2100      	movs	r1, #0
   2916a:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   2916c:	781c      	ldrb	r4, [r3, #0]
   2916e:	4284      	cmp	r4, r0
   29170:	d104      	bne.n	2917c <usb_ep_get_transfer+0x18>
   29172:	685c      	ldr	r4, [r3, #4]
   29174:	b114      	cbz	r4, 2917c <usb_ep_get_transfer+0x18>
			return &ut_data[i];
   29176:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
   2917a:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2917c:	3101      	adds	r1, #1
   2917e:	2904      	cmp	r1, #4
   29180:	f103 0340 	add.w	r3, r3, #64	; 0x40
   29184:	d1f2      	bne.n	2916c <usb_ep_get_transfer+0x8>
	return NULL;
   29186:	2000      	movs	r0, #0
   29188:	e7f7      	b.n	2917a <usb_ep_get_transfer+0x16>
   2918a:	bf00      	nop
   2918c:	20000cb4 	.word	0x20000cb4

00029190 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   29190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29194:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   29196:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
   2919a:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
	if (trans->status != -EBUSY) {
   2919e:	3310      	adds	r3, #16
{
   291a0:	af00      	add	r7, sp, #0
   291a2:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   291a4:	d111      	bne.n	291ca <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   291a6:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   291a8:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
   291ac:	f013 0602 	ands.w	r6, r3, #2
   291b0:	d04e      	beq.n	29250 <usb_transfer_work+0xc0>
		if (!trans->bsize) {
   291b2:	bb0a      	cbnz	r2, 291f8 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   291b4:	f013 0304 	ands.w	r3, r3, #4
   291b8:	d104      	bne.n	291c4 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   291ba:	461a      	mov	r2, r3
   291bc:	4619      	mov	r1, r3
   291be:	4628      	mov	r0, r5
   291c0:	f006 ffc4 	bl	3014c <usb_write>
			}
			trans->status = 0;
   291c4:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   291c6:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   291ca:	f854 3c28 	ldr.w	r3, [r4, #-40]
   291ce:	3310      	adds	r3, #16
   291d0:	d00e      	beq.n	291f0 <usb_transfer_work+0x60>
   291d2:	f854 6c18 	ldr.w	r6, [r4, #-24]
   291d6:	b15e      	cbz	r6, 291f0 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   291d8:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
   291dc:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
   291e0:	f007 fc09 	bl	309f6 <k_is_in_isr>
   291e4:	2800      	cmp	r0, #0
   291e6:	d06f      	beq.n	292c8 <usb_transfer_work+0x138>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   291e8:	483d      	ldr	r0, [pc, #244]	; (292e0 <usb_transfer_work+0x150>)
   291ea:	4621      	mov	r1, r4
   291ec:	f007 fcf9 	bl	30be2 <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
   291f0:	370c      	adds	r7, #12
   291f2:	46bd      	mov	sp, r7
   291f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   291f8:	f850 1c24 	ldr.w	r1, [r0, #-36]
   291fc:	1d3b      	adds	r3, r7, #4
   291fe:	4628      	mov	r0, r5
   29200:	f006 ffa4 	bl	3014c <usb_write>
		if (ret) {
   29204:	b198      	cbz	r0, 2922e <usb_transfer_work+0x9e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
   29206:	466e      	mov	r6, sp
   29208:	b088      	sub	sp, #32
   2920a:	466a      	mov	r2, sp
   2920c:	4b35      	ldr	r3, [pc, #212]	; (292e4 <usb_transfer_work+0x154>)
   2920e:	61d5      	str	r5, [r2, #28]
   29210:	e9c2 3005 	strd	r3, r0, [r2, #20]
   29214:	2304      	movs	r3, #4
   29216:	f842 3f10 	str.w	r3, [r2, #16]!
   2921a:	4833      	ldr	r0, [pc, #204]	; (292e8 <usb_transfer_work+0x158>)
   2921c:	2300      	movs	r3, #0
   2921e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   29222:	f7fe fceb 	bl	27bfc <z_impl_z_log_msg_static_create>
   29226:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
   29228:	f06f 0315 	mvn.w	r3, #21
   2922c:	e7cb      	b.n	291c6 <usb_transfer_work+0x36>
		trans->buffer += bytes;
   2922e:	687a      	ldr	r2, [r7, #4]
   29230:	f854 3c24 	ldr.w	r3, [r4, #-36]
   29234:	4413      	add	r3, r2
   29236:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
   2923a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2923e:	1a9b      	subs	r3, r3, r2
   29240:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
   29244:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   29248:	4413      	add	r3, r2
   2924a:	f844 3c1c 	str.w	r3, [r4, #-28]
   2924e:	e7bc      	b.n	291ca <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   29250:	f850 1c24 	ldr.w	r1, [r0, #-36]
   29254:	1d3b      	adds	r3, r7, #4
   29256:	4628      	mov	r0, r5
   29258:	f001 ff2c 	bl	2b0b4 <usb_dc_ep_read_wait>
		if (ret) {
   2925c:	b188      	cbz	r0, 29282 <usb_transfer_work+0xf2>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
   2925e:	46e8      	mov	r8, sp
   29260:	b088      	sub	sp, #32
   29262:	466a      	mov	r2, sp
   29264:	4b1f      	ldr	r3, [pc, #124]	; (292e4 <usb_transfer_work+0x154>)
   29266:	61d5      	str	r5, [r2, #28]
   29268:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2926c:	2304      	movs	r3, #4
   2926e:	f842 3f10 	str.w	r3, [r2, #16]!
   29272:	481d      	ldr	r0, [pc, #116]	; (292e8 <usb_transfer_work+0x158>)
   29274:	4633      	mov	r3, r6
   29276:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2927a:	f7fe fcbf 	bl	27bfc <z_impl_z_log_msg_static_create>
   2927e:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
   29280:	e7d2      	b.n	29228 <usb_transfer_work+0x98>
		trans->buffer += bytes;
   29282:	687e      	ldr	r6, [r7, #4]
   29284:	f854 3c24 	ldr.w	r3, [r4, #-36]
   29288:	4433      	add	r3, r6
   2928a:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
   2928e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   29292:	1b9b      	subs	r3, r3, r6
   29294:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
   29298:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2929c:	4433      	add	r3, r6
   2929e:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   292a2:	2e00      	cmp	r6, #0
   292a4:	d08e      	beq.n	291c4 <usb_transfer_work+0x34>
   292a6:	4628      	mov	r0, r5
   292a8:	f001 ffdc 	bl	2b264 <usb_dc_ep_mps>
   292ac:	fbb6 f3f0 	udiv	r3, r6, r0
   292b0:	fb03 6610 	mls	r6, r3, r0, r6
   292b4:	2e00      	cmp	r6, #0
   292b6:	d185      	bne.n	291c4 <usb_transfer_work+0x34>
   292b8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   292bc:	2b00      	cmp	r3, #0
   292be:	d081      	beq.n	291c4 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
   292c0:	4628      	mov	r0, r5
   292c2:	f001 ff5d 	bl	2b180 <usb_dc_ep_read_continue>
   292c6:	e780      	b.n	291ca <usb_transfer_work+0x3a>
		trans->cb = NULL;
   292c8:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
   292cc:	f1a4 0010 	sub.w	r0, r4, #16
   292d0:	f005 f81c 	bl	2e30c <z_impl_k_sem_give>
		cb(ep, tsize, priv);
   292d4:	464a      	mov	r2, r9
   292d6:	4641      	mov	r1, r8
   292d8:	4628      	mov	r0, r5
   292da:	47b0      	blx	r6
   292dc:	e788      	b.n	291f0 <usb_transfer_work+0x60>
   292de:	bf00      	nop
   292e0:	20000870 	.word	0x20000870
   292e4:	00031a94 	.word	0x00031a94
   292e8:	00031344 	.word	0x00031344

000292ec <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
   292ec:	b570      	push	{r4, r5, r6, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   292ee:	1e4b      	subs	r3, r1, #1
   292f0:	2b01      	cmp	r3, #1
{
   292f2:	b088      	sub	sp, #32
   292f4:	4606      	mov	r6, r0
   292f6:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   292f8:	d818      	bhi.n	2932c <usb_transfer_ep_callback+0x40>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   292fa:	f7ff ff33 	bl	29164 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
   292fe:	4604      	mov	r4, r0
   29300:	b9b0      	cbnz	r0, 29330 <usb_transfer_ep_callback+0x44>
		if (status == USB_DC_EP_DATA_OUT) {
   29302:	2d01      	cmp	r5, #1
   29304:	d112      	bne.n	2932c <usb_transfer_ep_callback+0x40>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
   29306:	ab01      	add	r3, sp, #4
   29308:	2201      	movs	r2, #1
   2930a:	a902      	add	r1, sp, #8
   2930c:	4630      	mov	r0, r6
   2930e:	f001 fed1 	bl	2b0b4 <usb_dc_ep_read_wait>
			} while (bytes);
   29312:	9b01      	ldr	r3, [sp, #4]
   29314:	2b00      	cmp	r3, #0
   29316:	d1f6      	bne.n	29306 <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
   29318:	4a0f      	ldr	r2, [pc, #60]	; (29358 <usb_transfer_ep_callback+0x6c>)
   2931a:	9207      	str	r2, [sp, #28]
   2931c:	2202      	movs	r2, #2
   2931e:	9206      	str	r2, [sp, #24]
   29320:	480e      	ldr	r0, [pc, #56]	; (2935c <usb_transfer_ep_callback+0x70>)
   29322:	aa06      	add	r2, sp, #24
   29324:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29328:	f7fe fc68 	bl	27bfc <z_impl_z_log_msg_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
   2932c:	b008      	add	sp, #32
   2932e:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   29330:	f007 fb61 	bl	309f6 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   29334:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   29338:	b108      	cbz	r0, 2933e <usb_transfer_ep_callback+0x52>
   2933a:	2d01      	cmp	r5, #1
   2933c:	d105      	bne.n	2934a <usb_transfer_ep_callback+0x5e>
		usb_transfer_work(&trans->work);
   2933e:	4608      	mov	r0, r1
}
   29340:	b008      	add	sp, #32
   29342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
   29346:	f7ff bf23 	b.w	29190 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2934a:	4805      	ldr	r0, [pc, #20]	; (29360 <usb_transfer_ep_callback+0x74>)
}
   2934c:	b008      	add	sp, #32
   2934e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   29352:	f007 bc46 	b.w	30be2 <k_work_submit_to_queue>
   29356:	bf00      	nop
   29358:	00031ab1 	.word	0x00031ab1
   2935c:	00031344 	.word	0x00031344
   29360:	20000870 	.word	0x20000870

00029364 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
   29364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29368:	b08b      	sub	sp, #44	; 0x2c
   2936a:	af00      	add	r7, sp, #0
   2936c:	4605      	mov	r5, r0
   2936e:	60b9      	str	r1, [r7, #8]
   29370:	4616      	mov	r6, r2
   29372:	60fb      	str	r3, [r7, #12]
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
   29374:	f006 ff32 	bl	301dc <usb_transfer_is_busy>
   29378:	2800      	cmp	r0, #0
   2937a:	f040 8086 	bne.w	2948a <usb_transfer+0x126>
	__asm__ volatile(
   2937e:	f04f 0320 	mov.w	r3, #32
   29382:	f3ef 8211 	mrs	r2, BASEPRI
   29386:	f383 8812 	msr	BASEPRI_MAX, r3
   2938a:	f3bf 8f6f 	isb	sy
   2938e:	f8df a100 	ldr.w	sl, [pc, #256]	; 29490 <usb_transfer+0x12c>
   29392:	607a      	str	r2, [r7, #4]
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29394:	4681      	mov	r9, r0
	return z_impl_k_sem_take(sem, timeout);
   29396:	2300      	movs	r3, #0
   29398:	2200      	movs	r2, #0
   2939a:	4650      	mov	r0, sl
   2939c:	f004 ffda 	bl	2e354 <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
   293a0:	4603      	mov	r3, r0
   293a2:	b9e8      	cbnz	r0, 293e0 <usb_transfer+0x7c>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
   293a4:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 29494 <usb_transfer+0x130>
   293a8:	ea4f 1889 	mov.w	r8, r9, lsl #6
   293ac:	eb0b 1989 	add.w	r9, fp, r9, lsl #6
   293b0:	f8d9 4004 	ldr.w	r4, [r9, #4]
   293b4:	f114 0f10 	cmn.w	r4, #16
   293b8:	d131      	bne.n	2941e <usb_transfer+0xba>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
   293ba:	466e      	mov	r6, sp
   293bc:	b088      	sub	sp, #32
   293be:	466a      	mov	r2, sp
   293c0:	4935      	ldr	r1, [pc, #212]	; (29498 <usb_transfer+0x134>)
   293c2:	e9c2 1505 	strd	r1, r5, [r2, #20]
   293c6:	2103      	movs	r1, #3
   293c8:	f842 1f10 	str.w	r1, [r2, #16]!
   293cc:	4833      	ldr	r0, [pc, #204]	; (2949c <usb_transfer+0x138>)
   293ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   293d2:	f7fe fc13 	bl	27bfc <z_impl_z_log_msg_static_create>
   293d6:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
   293d8:	4650      	mov	r0, sl
   293da:	f004 ff97 	bl	2e30c <z_impl_k_sem_give>
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
   293de:	e014      	b.n	2940a <usb_transfer+0xa6>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   293e0:	f109 0901 	add.w	r9, r9, #1
   293e4:	f1b9 0f04 	cmp.w	r9, #4
   293e8:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
   293ec:	d1d3      	bne.n	29396 <usb_transfer+0x32>
		LOG_ERR("No transfer slot available");
   293ee:	4b2c      	ldr	r3, [pc, #176]	; (294a0 <usb_transfer+0x13c>)
   293f0:	627b      	str	r3, [r7, #36]	; 0x24
   293f2:	2302      	movs	r3, #2
   293f4:	623b      	str	r3, [r7, #32]
   293f6:	4829      	ldr	r0, [pc, #164]	; (2949c <usb_transfer+0x138>)
   293f8:	2300      	movs	r3, #0
   293fa:	f107 0220 	add.w	r2, r7, #32
   293fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		ret = -ENOMEM;
   29402:	f06f 040b 	mvn.w	r4, #11
   29406:	f7fe fbf9 	bl	27bfc <z_impl_z_log_msg_static_create>
	__asm__ volatile(
   2940a:	687b      	ldr	r3, [r7, #4]
   2940c:	f383 8811 	msr	BASEPRI, r3
   29410:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
   29414:	4620      	mov	r0, r4
   29416:	372c      	adds	r7, #44	; 0x2c
   29418:	46bd      	mov	sp, r7
   2941a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->cb = cb;
   2941e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   29420:	f8c9 3014 	str.w	r3, [r9, #20]
	trans->flags = flags;
   29424:	68fb      	ldr	r3, [r7, #12]
	trans->buffer = data;
   29426:	68ba      	ldr	r2, [r7, #8]
	trans->flags = flags;
   29428:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
	trans->priv = cb_data;
   2942c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	trans->tsize = 0;
   2942e:	f8c9 0010 	str.w	r0, [r9, #16]
	trans->priv = cb_data;
   29432:	f8c9 3018 	str.w	r3, [r9, #24]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   29436:	4628      	mov	r0, r5
	trans->status = -EBUSY;
   29438:	f06f 030f 	mvn.w	r3, #15
	trans->bsize = dlen;
   2943c:	e9c9 2602 	strd	r2, r6, [r9, #8]
	trans->ep = ep;
   29440:	f80b 5008 	strb.w	r5, [fp, r8]
	trans->status = -EBUSY;
   29444:	f8c9 3004 	str.w	r3, [r9, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   29448:	f001 ff0c 	bl	2b264 <usb_dc_ep_mps>
   2944c:	b168      	cbz	r0, 2946a <usb_transfer+0x106>
   2944e:	4628      	mov	r0, r5
   29450:	f001 ff08 	bl	2b264 <usb_dc_ep_mps>
   29454:	fbb6 f3f0 	udiv	r3, r6, r0
   29458:	fb03 6610 	mls	r6, r3, r0, r6
   2945c:	b12e      	cbz	r6, 2946a <usb_transfer+0x106>
		trans->flags |= USB_TRANS_NO_ZLP;
   2945e:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
   29462:	f043 0304 	orr.w	r3, r3, #4
   29466:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
   2946a:	68fb      	ldr	r3, [r7, #12]
   2946c:	079b      	lsls	r3, r3, #30
   2946e:	d507      	bpl.n	29480 <usb_transfer+0x11c>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   29470:	f108 012c 	add.w	r1, r8, #44	; 0x2c
   29474:	480b      	ldr	r0, [pc, #44]	; (294a4 <usb_transfer+0x140>)
   29476:	4459      	add	r1, fp
   29478:	f007 fbb3 	bl	30be2 <k_work_submit_to_queue>
	int key, ret = 0;
   2947c:	2400      	movs	r4, #0
   2947e:	e7c4      	b.n	2940a <usb_transfer+0xa6>
		ret = usb_dc_ep_read_continue(ep);
   29480:	4628      	mov	r0, r5
   29482:	f001 fe7d 	bl	2b180 <usb_dc_ep_read_continue>
   29486:	4604      	mov	r4, r0
   29488:	e7bf      	b.n	2940a <usb_transfer+0xa6>
		return -EBUSY;
   2948a:	f06f 040f 	mvn.w	r4, #15
   2948e:	e7c1      	b.n	29414 <usb_transfer+0xb0>
   29490:	20000cd0 	.word	0x20000cd0
   29494:	20000cb4 	.word	0x20000cb4
   29498:	00031ae6 	.word	0x00031ae6
   2949c:	00031344 	.word	0x00031344
   294a0:	00031acb 	.word	0x00031acb
   294a4:	20000870 	.word	0x20000870

000294a8 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
   294a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   294aa:	f04f 0320 	mov.w	r3, #32
   294ae:	f3ef 8411 	mrs	r4, BASEPRI
   294b2:	f383 8812 	msr	BASEPRI_MAX, r3
   294b6:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   294ba:	f7ff fe53 	bl	29164 <usb_ep_get_transfer>
	if (!trans) {
   294be:	b150      	cbz	r0, 294d6 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   294c0:	6843      	ldr	r3, [r0, #4]
   294c2:	3310      	adds	r3, #16
   294c4:	d107      	bne.n	294d6 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   294c6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   294ca:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   294cc:	f100 012c 	add.w	r1, r0, #44	; 0x2c
   294d0:	4803      	ldr	r0, [pc, #12]	; (294e0 <usb_cancel_transfer+0x38>)
   294d2:	f007 fb86 	bl	30be2 <k_work_submit_to_queue>
	__asm__ volatile(
   294d6:	f384 8811 	msr	BASEPRI, r4
   294da:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   294de:	bd10      	pop	{r4, pc}
   294e0:	20000870 	.word	0x20000870

000294e4 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   294e4:	b570      	push	{r4, r5, r6, lr}
   294e6:	4c0f      	ldr	r4, [pc, #60]	; (29524 <usb_cancel_transfers+0x40>)
   294e8:	2504      	movs	r5, #4
	__asm__ volatile(
   294ea:	f04f 0320 	mov.w	r3, #32
   294ee:	f3ef 8611 	mrs	r6, BASEPRI
   294f2:	f383 8812 	msr	BASEPRI_MAX, r3
   294f6:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
   294fa:	6863      	ldr	r3, [r4, #4]
   294fc:	3310      	adds	r3, #16
   294fe:	d107      	bne.n	29510 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
   29500:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   29504:	4808      	ldr	r0, [pc, #32]	; (29528 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
   29506:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   29508:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   2950c:	f007 fb69 	bl	30be2 <k_work_submit_to_queue>
	__asm__ volatile(
   29510:	f386 8811 	msr	BASEPRI, r6
   29514:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29518:	3d01      	subs	r5, #1
   2951a:	f104 0440 	add.w	r4, r4, #64	; 0x40
   2951e:	d1e4      	bne.n	294ea <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   29520:	bd70      	pop	{r4, r5, r6, pc}
   29522:	bf00      	nop
   29524:	20000cb4 	.word	0x20000cb4
   29528:	20000870 	.word	0x20000870

0002952c <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   2952c:	b570      	push	{r4, r5, r6, lr}
   2952e:	4c0a      	ldr	r4, [pc, #40]	; (29558 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   29530:	4e0a      	ldr	r6, [pc, #40]	; (2955c <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29532:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   29534:	4631      	mov	r1, r6
   29536:	4620      	mov	r0, r4
   29538:	f007 fb36 	bl	30ba8 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2953c:	2201      	movs	r2, #1
   2953e:	f1a4 0010 	sub.w	r0, r4, #16
   29542:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29544:	3501      	adds	r5, #1
   29546:	f007 faf2 	bl	30b2e <z_impl_k_sem_init>
   2954a:	2d04      	cmp	r5, #4
   2954c:	f104 0440 	add.w	r4, r4, #64	; 0x40
   29550:	d1f0      	bne.n	29534 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   29552:	2000      	movs	r0, #0
   29554:	bd70      	pop	{r4, r5, r6, pc}
   29556:	bf00      	nop
   29558:	20000ce0 	.word	0x20000ce0
   2955c:	00029191 	.word	0x00029191

00029560 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
   29560:	b570      	push	{r4, r5, r6, lr}
   29562:	4604      	mov	r4, r0
   29564:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   29566:	7901      	ldrb	r1, [r0, #4]
   29568:	4812      	ldr	r0, [pc, #72]	; (295b4 <cdc_acm_class_handle_req+0x54>)
{
   2956a:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   2956c:	f006 fe12 	bl	30194 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
   29570:	b1e8      	cbz	r0, 295ae <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
   29572:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
   29576:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
   29578:	2a00      	cmp	r2, #0
   2957a:	db11      	blt.n	295a0 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
   2957c:	2b20      	cmp	r3, #32
   2957e:	d004      	beq.n	2958a <cdc_acm_class_handle_req+0x2a>
   29580:	2b22      	cmp	r3, #34	; 0x22
   29582:	d009      	beq.n	29598 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
   29584:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29588:	e005      	b.n	29596 <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
   2958a:	6829      	ldr	r1, [r5, #0]
   2958c:	2207      	movs	r2, #7
   2958e:	3810      	subs	r0, #16
   29590:	f006 fee2 	bl	30358 <memcpy>
			return 0;
   29594:	2000      	movs	r0, #0
}
   29596:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
   29598:	8863      	ldrh	r3, [r4, #2]
   2959a:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
   2959e:	e7f9      	b.n	29594 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
   295a0:	2b21      	cmp	r3, #33	; 0x21
   295a2:	d1ef      	bne.n	29584 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
   295a4:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
   295a6:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
   295a8:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
   295aa:	6033      	str	r3, [r6, #0]
			return 0;
   295ac:	e7f2      	b.n	29594 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
   295ae:	f06f 0012 	mvn.w	r0, #18
   295b2:	e7f0      	b.n	29596 <cdc_acm_class_handle_req+0x36>
   295b4:	20000db4 	.word	0x20000db4

000295b8 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   295b8:	b508      	push	{r3, lr}
   295ba:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
   295bc:	4803      	ldr	r0, [pc, #12]	; (295cc <cdc_acm_int_in+0x14>)
   295be:	f006 fdf7 	bl	301b0 <usb_get_dev_data_by_ep>
	if (common == NULL) {
   295c2:	b110      	cbz	r0, 295ca <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
   295c4:	2301      	movs	r3, #1
   295c6:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
   295ca:	bd08      	pop	{r3, pc}
   295cc:	20000db4 	.word	0x20000db4

000295d0 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   295d0:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
   295d2:	2301      	movs	r3, #1
   295d4:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
   295d8:	680b      	ldr	r3, [r1, #0]
   295da:	b133      	cbz	r3, 295ea <cdc_acm_irq_rx_enable+0x1a>
   295dc:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
   295e0:	b11b      	cbz	r3, 295ea <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   295e2:	4802      	ldr	r0, [pc, #8]	; (295ec <cdc_acm_irq_rx_enable+0x1c>)
   295e4:	3108      	adds	r1, #8
   295e6:	f007 bafc 	b.w	30be2 <k_work_submit_to_queue>
	}
}
   295ea:	4770      	bx	lr
   295ec:	20000870 	.word	0x20000870

000295f0 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   295f0:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
   295f2:	2301      	movs	r3, #1
   295f4:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
   295f8:	680b      	ldr	r3, [r1, #0]
   295fa:	b133      	cbz	r3, 2960a <cdc_acm_irq_tx_enable+0x1a>
   295fc:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
   29600:	b11b      	cbz	r3, 2960a <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   29602:	4802      	ldr	r0, [pc, #8]	; (2960c <cdc_acm_irq_tx_enable+0x1c>)
   29604:	3108      	adds	r1, #8
   29606:	f007 baec 	b.w	30be2 <k_work_submit_to_queue>
}
   2960a:	4770      	bx	lr
   2960c:	20000870 	.word	0x20000870

00029610 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
   29610:	4a0d      	ldr	r2, [pc, #52]	; (29648 <cdc_acm_reset_port+0x38>)
{
   29612:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
   29614:	2100      	movs	r1, #0
   29616:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
   2961a:	6810      	ldr	r0, [r2, #0]
   2961c:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
   29620:	8890      	ldrh	r0, [r2, #4]
   29622:	7992      	ldrb	r2, [r2, #6]
   29624:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
   29628:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
   2962c:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
   29630:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	dev_data->configured = false;
   29634:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
   29638:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
   2963c:	2240      	movs	r2, #64	; 0x40
   2963e:	f103 004c 	add.w	r0, r3, #76	; 0x4c
   29642:	f006 be94 	b.w	3036e <memset>
   29646:	bf00      	nop
   29648:	00031360 	.word	0x00031360

0002964c <cdc_acm_fifo_fill>:
{
   2964c:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2964e:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
   29650:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
   29654:	b188      	cbz	r0, 2967a <cdc_acm_fifo_fill+0x2e>
   29656:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   2965a:	b97b      	cbnz	r3, 2967c <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
   2965c:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   29660:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
   29664:	f006 f9ed 	bl	2fa42 <ring_buf_put>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   29668:	2200      	movs	r2, #0
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   2966a:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   2966c:	2300      	movs	r3, #0
   2966e:	4804      	ldr	r0, [pc, #16]	; (29680 <cdc_acm_fifo_fill+0x34>)
   29670:	f105 0118 	add.w	r1, r5, #24
   29674:	f004 ffc4 	bl	2e600 <k_work_schedule_for_queue>
	return wrote;
   29678:	4620      	mov	r0, r4
}
   2967a:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2967c:	2000      	movs	r0, #0
   2967e:	e7fc      	b.n	2967a <cdc_acm_fifo_fill+0x2e>
   29680:	20000870 	.word	0x20000870

00029684 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
   29684:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   29686:	6904      	ldr	r4, [r0, #16]
{
   29688:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
   2968c:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   29690:	b1a3      	cbz	r3, 296bc <cdc_acm_poll_out+0x38>
   29692:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   29696:	b98b      	cbnz	r3, 296bc <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   29698:	f10d 0107 	add.w	r1, sp, #7
   2969c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
   296a0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   296a4:	2201      	movs	r2, #1
   296a6:	f006 f9cc 	bl	2fa42 <ring_buf_put>
   296aa:	4601      	mov	r1, r0
   296ac:	b140      	cbz	r0, 296c0 <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
   296ae:	480d      	ldr	r0, [pc, #52]	; (296e4 <cdc_acm_poll_out+0x60>)
   296b0:	2221      	movs	r2, #33	; 0x21
   296b2:	2300      	movs	r3, #0
   296b4:	f104 0118 	add.w	r1, r4, #24
   296b8:	f004 ffa2 	bl	2e600 <k_work_schedule_for_queue>
}
   296bc:	b002      	add	sp, #8
   296be:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   296c0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   296c4:	2201      	movs	r2, #1
   296c6:	f006 fa10 	bl	2faea <ring_buf_get>
   296ca:	2800      	cmp	r0, #0
   296cc:	d0f6      	beq.n	296bc <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   296ce:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   296d2:	2201      	movs	r2, #1
   296d4:	f10d 0107 	add.w	r1, sp, #7
   296d8:	f006 f9b3 	bl	2fa42 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   296dc:	2800      	cmp	r0, #0
   296de:	d1e6      	bne.n	296ae <cdc_acm_poll_out+0x2a>
   296e0:	e7ec      	b.n	296bc <cdc_acm_poll_out+0x38>
   296e2:	bf00      	nop
   296e4:	20000870 	.word	0x20000870

000296e8 <tx_work_handler>:
{
   296e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
   296ea:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
   296ee:	685b      	ldr	r3, [r3, #4]
   296f0:	6a1b      	ldr	r3, [r3, #32]
   296f2:	7d1f      	ldrb	r7, [r3, #20]
{
   296f4:	b085      	sub	sp, #20
   296f6:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
   296f8:	4638      	mov	r0, r7
   296fa:	f006 fd6f 	bl	301dc <usb_transfer_is_busy>
   296fe:	4606      	mov	r6, r0
   29700:	b9e0      	cbnz	r0, 2973c <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
   29702:	6fa8      	ldr	r0, [r5, #120]	; 0x78
   29704:	f44f 6280 	mov.w	r2, #1024	; 0x400
   29708:	a903      	add	r1, sp, #12
   2970a:	f006 f9b9 	bl	2fa80 <ring_buf_get_claim>
	if (!len) {
   2970e:	4604      	mov	r4, r0
   29710:	b1a0      	cbz	r0, 2973c <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
   29712:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
   29714:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
   29718:	bf08      	it	eq
   2971a:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	dev_data->tx_ready = false;
   2971e:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
   29722:	9301      	str	r3, [sp, #4]
   29724:	4b06      	ldr	r3, [pc, #24]	; (29740 <tx_work_handler+0x58>)
   29726:	9903      	ldr	r1, [sp, #12]
   29728:	9300      	str	r3, [sp, #0]
   2972a:	4622      	mov	r2, r4
   2972c:	2302      	movs	r3, #2
   2972e:	4638      	mov	r0, r7
   29730:	f7ff fe18 	bl	29364 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
   29734:	6fa8      	ldr	r0, [r5, #120]	; 0x78
   29736:	4621      	mov	r1, r4
   29738:	f006 f9c2 	bl	2fac0 <ring_buf_get_finish>
}
   2973c:	b005      	add	sp, #20
   2973e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29740:	00029745 	.word	0x00029745

00029744 <cdc_acm_write_cb>:
{
   29744:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
   29746:	2301      	movs	r3, #1
   29748:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
   2974c:	6813      	ldr	r3, [r2, #0]
{
   2974e:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
   29750:	b13b      	cbz	r3, 29762 <cdc_acm_write_cb+0x1e>
   29752:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
   29756:	b123      	cbz	r3, 29762 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   29758:	480a      	ldr	r0, [pc, #40]	; (29784 <cdc_acm_write_cb+0x40>)
   2975a:	f102 0108 	add.w	r1, r2, #8
   2975e:	f007 fa40 	bl	30be2 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
   29762:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   29766:	689a      	ldr	r2, [r3, #8]
   29768:	691b      	ldr	r3, [r3, #16]
   2976a:	429a      	cmp	r2, r3
   2976c:	d008      	beq.n	29780 <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   2976e:	f104 0118 	add.w	r1, r4, #24
   29772:	4804      	ldr	r0, [pc, #16]	; (29784 <cdc_acm_write_cb+0x40>)
}
   29774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
   29778:	2200      	movs	r2, #0
   2977a:	2300      	movs	r3, #0
   2977c:	f004 bf40 	b.w	2e600 <k_work_schedule_for_queue>
}
   29780:	bd10      	pop	{r4, pc}
   29782:	bf00      	nop
   29784:	20000870 	.word	0x20000870

00029788 <cdc_acm_init>:
{
   29788:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   2978a:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
   2978c:	2300      	movs	r3, #0
   2978e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   29792:	4b0c      	ldr	r3, [pc, #48]	; (297c4 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
   29794:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
   29798:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
   2979a:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   2979e:	b969      	cbnz	r1, 297bc <cdc_acm_init+0x34>
	list->head = node;
   297a0:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
   297a4:	f104 0008 	add.w	r0, r4, #8
   297a8:	4907      	ldr	r1, [pc, #28]	; (297c8 <cdc_acm_init+0x40>)
   297aa:	f007 f9fd 	bl	30ba8 <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
   297ae:	f104 0018 	add.w	r0, r4, #24
   297b2:	4906      	ldr	r1, [pc, #24]	; (297cc <cdc_acm_init+0x44>)
   297b4:	f007 fa26 	bl	30c04 <k_work_init_delayable>
}
   297b8:	2000      	movs	r0, #0
   297ba:	bd10      	pop	{r4, pc}
	parent->next = child;
   297bc:	600a      	str	r2, [r1, #0]
	list->tail = node;
   297be:	605a      	str	r2, [r3, #4]
}
   297c0:	e7f0      	b.n	297a4 <cdc_acm_init+0x1c>
   297c2:	bf00      	nop
   297c4:	20000db4 	.word	0x20000db4
   297c8:	00030207 	.word	0x00030207
   297cc:	000296e9 	.word	0x000296e9

000297d0 <cdc_acm_read_cb>:
{
   297d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   297d2:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   297d4:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
   297d8:	1e0a      	subs	r2, r1, #0
{
   297da:	4605      	mov	r5, r0
	if (size <= 0) {
   297dc:	dd1f      	ble.n	2981e <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   297de:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   297e2:	4631      	mov	r1, r6
   297e4:	f006 f92d 	bl	2fa42 <ring_buf_put>
	dev_data->rx_ready = true;
   297e8:	2301      	movs	r3, #1
   297ea:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
   297ee:	6823      	ldr	r3, [r4, #0]
   297f0:	b13b      	cbz	r3, 29802 <cdc_acm_read_cb+0x32>
   297f2:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   297f6:	b123      	cbz	r3, 29802 <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   297f8:	480e      	ldr	r0, [pc, #56]	; (29834 <cdc_acm_read_cb+0x64>)
   297fa:	f104 0108 	add.w	r1, r4, #8
   297fe:	f007 f9f0 	bl	30be2 <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
   29802:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
   29806:	684b      	ldr	r3, [r1, #4]
   29808:	694a      	ldr	r2, [r1, #20]
   2980a:	1a9a      	subs	r2, r3, r2
   2980c:	69cb      	ldr	r3, [r1, #28]
   2980e:	1a9b      	subs	r3, r3, r2
   29810:	2b3f      	cmp	r3, #63	; 0x3f
   29812:	d804      	bhi.n	2981e <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
   29814:	2301      	movs	r3, #1
   29816:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   2981a:	b002      	add	sp, #8
   2981c:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
   2981e:	4b06      	ldr	r3, [pc, #24]	; (29838 <cdc_acm_read_cb+0x68>)
   29820:	9300      	str	r3, [sp, #0]
   29822:	9401      	str	r4, [sp, #4]
   29824:	2301      	movs	r3, #1
   29826:	2240      	movs	r2, #64	; 0x40
   29828:	4631      	mov	r1, r6
   2982a:	4628      	mov	r0, r5
   2982c:	f7ff fd9a 	bl	29364 <usb_transfer>
   29830:	e7f3      	b.n	2981a <cdc_acm_read_cb+0x4a>
   29832:	bf00      	nop
   29834:	20000870 	.word	0x20000870
   29838:	000297d1 	.word	0x000297d1

0002983c <cdc_acm_dev_status_cb>:
{
   2983c:	b538      	push	{r3, r4, r5, lr}
   2983e:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
   29840:	4601      	mov	r1, r0
   29842:	481e      	ldr	r0, [pc, #120]	; (298bc <cdc_acm_dev_status_cb+0x80>)
   29844:	f006 fc9a 	bl	3017c <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   29848:	4604      	mov	r4, r0
   2984a:	b380      	cbz	r0, 298ae <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
   2984c:	4602      	mov	r2, r0
	switch (status) {
   2984e:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
   29850:	f852 39a4 	ldr.w	r3, [r2], #-164
   29854:	685b      	ldr	r3, [r3, #4]
	switch (status) {
   29856:	2905      	cmp	r1, #5
   29858:	d829      	bhi.n	298ae <cdc_acm_dev_status_cb+0x72>
   2985a:	e8df f001 	tbb	[pc, r1]
   2985e:	2820      	.short	0x2820
   29860:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
   29864:	f814 1c06 	ldrb.w	r1, [r4, #-6]
   29868:	b931      	cbnz	r1, 29878 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
   2986a:	6a1b      	ldr	r3, [r3, #32]
   2986c:	7b18      	ldrb	r0, [r3, #12]
   2986e:	f7ff ffaf 	bl	297d0 <cdc_acm_read_cb>
			dev_data->configured = true;
   29872:	2301      	movs	r3, #1
   29874:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
   29878:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
   2987c:	b9bb      	cbnz	r3, 298ae <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
   2987e:	2301      	movs	r3, #1
   29880:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
   29884:	f854 3ca4 	ldr.w	r3, [r4, #-164]
   29888:	b18b      	cbz	r3, 298ae <cdc_acm_dev_status_cb+0x72>
   2988a:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
   2988e:	b173      	cbz	r3, 298ae <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   29890:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
   29894:	480a      	ldr	r0, [pc, #40]	; (298c0 <cdc_acm_dev_status_cb+0x84>)
}
   29896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   2989a:	f007 b9a2 	b.w	30be2 <k_work_submit_to_queue>
}
   2989e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
   298a2:	4610      	mov	r0, r2
   298a4:	f7ff beb4 	b.w	29610 <cdc_acm_reset_port>
		dev_data->suspended = true;
   298a8:	2301      	movs	r3, #1
			dev_data->suspended = false;
   298aa:	f804 3c05 	strb.w	r3, [r4, #-5]
}
   298ae:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
   298b0:	f814 3c05 	ldrb.w	r3, [r4, #-5]
   298b4:	2b00      	cmp	r3, #0
   298b6:	d0fa      	beq.n	298ae <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
   298b8:	2300      	movs	r3, #0
   298ba:	e7f6      	b.n	298aa <cdc_acm_dev_status_cb+0x6e>
   298bc:	20000db4 	.word	0x20000db4
   298c0:	20000870 	.word	0x20000870

000298c4 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
   298c4:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
   298c6:	4d09      	ldr	r5, [pc, #36]	; (298ec <z_usb_work_q_init+0x28>)
   298c8:	4909      	ldr	r1, [pc, #36]	; (298f0 <z_usb_work_q_init+0x2c>)
   298ca:	2400      	movs	r4, #0
   298cc:	9400      	str	r4, [sp, #0]
   298ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   298d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   298d6:	4628      	mov	r0, r5
   298d8:	f004 fe5a 	bl	2e590 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   298dc:	4905      	ldr	r1, [pc, #20]	; (298f4 <z_usb_work_q_init+0x30>)
   298de:	4628      	mov	r0, r5
   298e0:	f007 f88f 	bl	30a02 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
   298e4:	4620      	mov	r0, r4
   298e6:	b003      	add	sp, #12
   298e8:	bd30      	pop	{r4, r5, pc}
   298ea:	bf00      	nop
   298ec:	20000870 	.word	0x20000870
   298f0:	20001c90 	.word	0x20001c90
   298f4:	00031b36 	.word	0x00031b36

000298f8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   298f8:	4901      	ldr	r1, [pc, #4]	; (29900 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   298fa:	2210      	movs	r2, #16
	str	r2, [r1]
   298fc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   298fe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   29900:	e000ed10 	.word	0xe000ed10

00029904 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   29904:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   29906:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   29908:	f380 8811 	msr	BASEPRI, r0
	isb
   2990c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   29910:	f3bf 8f4f 	dsb	sy
   29914:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   29916:	b662      	cpsie	i
	isb
   29918:	f3bf 8f6f 	isb	sy

	bx	lr
   2991c:	4770      	bx	lr
   2991e:	bf00      	nop

00029920 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   29920:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   29922:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   29924:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   29928:	f3bf 8f4f 	dsb	sy
   2992c:	bf20      	wfe

	msr	BASEPRI, r0
   2992e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   29932:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   29934:	4770      	bx	lr
   29936:	bf00      	nop

00029938 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   29938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2993c:	4681      	mov	r9, r0
   2993e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   29940:	460c      	mov	r4, r1
   29942:	2900      	cmp	r1, #0
   29944:	d04c      	beq.n	299e0 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   29946:	466e      	mov	r6, sp
   29948:	b08a      	sub	sp, #40	; 0x28
   2994a:	e9d1 1200 	ldrd	r1, r2, [r1]
   2994e:	68a3      	ldr	r3, [r4, #8]
   29950:	466d      	mov	r5, sp
   29952:	4827      	ldr	r0, [pc, #156]	; (299f0 <z_arm_fatal_error+0xb8>)
   29954:	46a8      	mov	r8, r5
   29956:	f04f 0a05 	mov.w	sl, #5
   2995a:	e9c5 0105 	strd	r0, r1, [r5, #20]
   2995e:	e9c5 2307 	strd	r2, r3, [r5, #28]
   29962:	f848 af10 	str.w	sl, [r8, #16]!
   29966:	4823      	ldr	r0, [pc, #140]	; (299f4 <z_arm_fatal_error+0xbc>)
   29968:	4642      	mov	r2, r8
   2996a:	2300      	movs	r3, #0
   2996c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   29970:	f7fe f944 	bl	27bfc <z_impl_z_log_msg_static_create>
   29974:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   29976:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   2997a:	6963      	ldr	r3, [r4, #20]
   2997c:	46ad      	mov	sp, r5
   2997e:	481e      	ldr	r0, [pc, #120]	; (299f8 <z_arm_fatal_error+0xc0>)
   29980:	f8c5 a010 	str.w	sl, [r5, #16]
   29984:	e9c5 0105 	strd	r0, r1, [r5, #20]
   29988:	e9c5 2307 	strd	r2, r3, [r5, #28]
   2998c:	4819      	ldr	r0, [pc, #100]	; (299f4 <z_arm_fatal_error+0xbc>)
   2998e:	2300      	movs	r3, #0
   29990:	4642      	mov	r2, r8
   29992:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   29996:	f7fe f931 	bl	27bfc <z_impl_z_log_msg_static_create>
   2999a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   2999c:	b088      	sub	sp, #32
   2999e:	69e3      	ldr	r3, [r4, #28]
   299a0:	466d      	mov	r5, sp
   299a2:	4a16      	ldr	r2, [pc, #88]	; (299fc <z_arm_fatal_error+0xc4>)
   299a4:	46a8      	mov	r8, r5
   299a6:	f04f 0a03 	mov.w	sl, #3
   299aa:	e9c5 2305 	strd	r2, r3, [r5, #20]
   299ae:	f848 af10 	str.w	sl, [r8, #16]!
   299b2:	4810      	ldr	r0, [pc, #64]	; (299f4 <z_arm_fatal_error+0xbc>)
   299b4:	2300      	movs	r3, #0
   299b6:	4642      	mov	r2, r8
   299b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   299bc:	f7fe f91e 	bl	27bfc <z_impl_z_log_msg_static_create>
   299c0:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   299c2:	69a3      	ldr	r3, [r4, #24]
   299c4:	46ad      	mov	sp, r5
   299c6:	4a0e      	ldr	r2, [pc, #56]	; (29a00 <z_arm_fatal_error+0xc8>)
   299c8:	f8c5 a010 	str.w	sl, [r5, #16]
   299cc:	e9c5 2305 	strd	r2, r3, [r5, #20]
   299d0:	4808      	ldr	r0, [pc, #32]	; (299f4 <z_arm_fatal_error+0xbc>)
   299d2:	2300      	movs	r3, #0
   299d4:	4642      	mov	r2, r8
   299d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   299da:	f7fe f90f 	bl	27bfc <z_impl_z_log_msg_static_create>
   299de:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   299e0:	4621      	mov	r1, r4
   299e2:	4648      	mov	r0, r9
   299e4:	f004 f918 	bl	2dc18 <z_fatal_error>
}
   299e8:	46bd      	mov	sp, r7
   299ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   299ee:	bf00      	nop
   299f0:	00031b3f 	.word	0x00031b3f
   299f4:	0003130c 	.word	0x0003130c
   299f8:	00031b6e 	.word	0x00031b6e
   299fc:	00031b9d 	.word	0x00031b9d
   29a00:	00031bac 	.word	0x00031bac

00029a04 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   29a04:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   29a06:	2800      	cmp	r0, #0
   29a08:	db07      	blt.n	29a1a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29a0a:	4a04      	ldr	r2, [pc, #16]	; (29a1c <arch_irq_enable+0x18>)
   29a0c:	0941      	lsrs	r1, r0, #5
   29a0e:	2301      	movs	r3, #1
   29a10:	f000 001f 	and.w	r0, r0, #31
   29a14:	4083      	lsls	r3, r0
   29a16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   29a1a:	4770      	bx	lr
   29a1c:	e000e100 	.word	0xe000e100

00029a20 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   29a20:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   29a22:	2800      	cmp	r0, #0
   29a24:	db0c      	blt.n	29a40 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29a26:	0943      	lsrs	r3, r0, #5
   29a28:	4906      	ldr	r1, [pc, #24]	; (29a44 <arch_irq_disable+0x24>)
   29a2a:	f000 001f 	and.w	r0, r0, #31
   29a2e:	3320      	adds	r3, #32
   29a30:	2201      	movs	r2, #1
   29a32:	4082      	lsls	r2, r0
   29a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   29a38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   29a3c:	f3bf 8f6f 	isb	sy
}
   29a40:	4770      	bx	lr
   29a42:	bf00      	nop
   29a44:	e000e100 	.word	0xe000e100

00029a48 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   29a48:	4b05      	ldr	r3, [pc, #20]	; (29a60 <arch_irq_is_enabled+0x18>)
   29a4a:	0942      	lsrs	r2, r0, #5
   29a4c:	f000 001f 	and.w	r0, r0, #31
   29a50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   29a54:	2301      	movs	r3, #1
   29a56:	fa03 f000 	lsl.w	r0, r3, r0
}
   29a5a:	4010      	ands	r0, r2
   29a5c:	4770      	bx	lr
   29a5e:	bf00      	nop
   29a60:	e000e100 	.word	0xe000e100

00029a64 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   29a64:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   29a66:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   29a68:	bfa8      	it	ge
   29a6a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   29a6e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   29a72:	bfb8      	it	lt
   29a74:	4b06      	ldrlt	r3, [pc, #24]	; (29a90 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   29a76:	ea4f 1141 	mov.w	r1, r1, lsl #5
   29a7a:	bfac      	ite	ge
   29a7c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   29a80:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   29a84:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   29a86:	bfb4      	ite	lt
   29a88:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   29a8a:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   29a8e:	4770      	bx	lr
   29a90:	e000ed14 	.word	0xe000ed14

00029a94 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   29a94:	bf30      	wfi
    b z_SysNmiOnReset
   29a96:	f7ff bffd 	b.w	29a94 <z_SysNmiOnReset>
   29a9a:	bf00      	nop

00029a9c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   29a9c:	4a0f      	ldr	r2, [pc, #60]	; (29adc <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   29a9e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   29aa0:	4b0f      	ldr	r3, [pc, #60]	; (29ae0 <z_arm_prep_c+0x44>)
   29aa2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   29aa6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   29aa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   29aac:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   29ab0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   29ab4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   29ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   29abc:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   29ac0:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   29ac4:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   29ac8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   29acc:	f004 f960 	bl	2dd90 <z_bss_zero>
	z_data_copy();
   29ad0:	f005 f92e 	bl	2ed30 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   29ad4:	f000 fb9a 	bl	2a20c <z_arm_interrupt_init>
	z_cstart();
   29ad8:	f004 f9a8 	bl	2de2c <z_cstart>
   29adc:	00026000 	.word	0x00026000
   29ae0:	e000ed00 	.word	0xe000ed00

00029ae4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   29ae4:	4a09      	ldr	r2, [pc, #36]	; (29b0c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   29ae6:	490a      	ldr	r1, [pc, #40]	; (29b10 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   29ae8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   29aea:	6809      	ldr	r1, [r1, #0]
   29aec:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   29aee:	4909      	ldr	r1, [pc, #36]	; (29b14 <arch_swap+0x30>)
	_current->arch.basepri = key;
   29af0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   29af2:	684b      	ldr	r3, [r1, #4]
   29af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   29af8:	604b      	str	r3, [r1, #4]
   29afa:	2300      	movs	r3, #0
   29afc:	f383 8811 	msr	BASEPRI, r3
   29b00:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   29b04:	6893      	ldr	r3, [r2, #8]
}
   29b06:	6f98      	ldr	r0, [r3, #120]	; 0x78
   29b08:	4770      	bx	lr
   29b0a:	bf00      	nop
   29b0c:	20001934 	.word	0x20001934
   29b10:	000315b4 	.word	0x000315b4
   29b14:	e000ed00 	.word	0xe000ed00

00029b18 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   29b18:	490f      	ldr	r1, [pc, #60]	; (29b58 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   29b1a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   29b1c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   29b20:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   29b22:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   29b26:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   29b2a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   29b2c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   29b30:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   29b34:	4f09      	ldr	r7, [pc, #36]	; (29b5c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   29b36:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   29b3a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   29b3c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   29b3e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   29b40:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   29b42:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   29b44:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   29b46:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   29b4a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   29b4e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   29b52:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   29b56:	4770      	bx	lr
    ldr r1, =_kernel
   29b58:	20001934 	.word	0x20001934
    ldr v4, =_SCS_ICSR
   29b5c:	e000ed04 	.word	0xe000ed04

00029b60 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   29b60:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   29b64:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   29b66:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   29b6a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   29b6e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   29b70:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   29b74:	2902      	cmp	r1, #2
    beq _oops
   29b76:	d0ff      	beq.n	29b78 <_oops>

00029b78 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   29b78:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   29b7a:	f006 fbd4 	bl	30326 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   29b7e:	bd01      	pop	{r0, pc}

00029b80 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   29b80:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   29b84:	9b00      	ldr	r3, [sp, #0]
   29b86:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   29b8a:	490a      	ldr	r1, [pc, #40]	; (29bb4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   29b8c:	9b01      	ldr	r3, [sp, #4]
   29b8e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   29b92:	9b02      	ldr	r3, [sp, #8]
   29b94:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   29b98:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   29b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   29ba0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   29ba4:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   29ba8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   29baa:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   29bac:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   29bae:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   29bb0:	4770      	bx	lr
   29bb2:	bf00      	nop
   29bb4:	0002f319 	.word	0x0002f319

00029bb8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   29bb8:	4b07      	ldr	r3, [pc, #28]	; (29bd8 <arch_switch_to_main_thread+0x20>)
   29bba:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   29bbc:	4610      	mov	r0, r2
   29bbe:	f381 8809 	msr	PSP, r1
   29bc2:	2100      	movs	r1, #0
   29bc4:	b663      	cpsie	if
   29bc6:	f381 8811 	msr	BASEPRI, r1
   29bca:	f3bf 8f6f 	isb	sy
   29bce:	2200      	movs	r2, #0
   29bd0:	2300      	movs	r3, #0
   29bd2:	f005 fba1 	bl	2f318 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   29bd6:	bf00      	nop
   29bd8:	20001934 	.word	0x20001934

00029bdc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   29bdc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   29bde:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   29be0:	4a0b      	ldr	r2, [pc, #44]	; (29c10 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   29be2:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   29be4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   29be6:	bf1e      	ittt	ne
	movne	r1, #0
   29be8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   29bea:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   29bec:	f006 ff10 	blne	30a10 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   29bf0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   29bf2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   29bf6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   29bfa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   29bfe:	4905      	ldr	r1, [pc, #20]	; (29c14 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   29c00:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   29c02:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   29c04:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   29c06:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   29c0a:	4903      	ldr	r1, [pc, #12]	; (29c18 <_isr_wrapper+0x3c>)
	bx r1
   29c0c:	4708      	bx	r1
   29c0e:	0000      	.short	0x0000
	ldr r2, =_kernel
   29c10:	20001934 	.word	0x20001934
	ldr r1, =_sw_isr_table
   29c14:	0003113c 	.word	0x0003113c
	ldr r1, =z_arm_int_exit
   29c18:	00029c1d 	.word	0x00029c1d

00029c1c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   29c1c:	4b04      	ldr	r3, [pc, #16]	; (29c30 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   29c1e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   29c20:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   29c22:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   29c24:	d003      	beq.n	29c2e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   29c26:	4903      	ldr	r1, [pc, #12]	; (29c34 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   29c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   29c2c:	600a      	str	r2, [r1, #0]

00029c2e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   29c2e:	4770      	bx	lr
	ldr r3, =_kernel
   29c30:	20001934 	.word	0x20001934
	ldr r1, =_SCS_ICSR
   29c34:	e000ed04 	.word	0xe000ed04

00029c38 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   29c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c3c:	b086      	sub	sp, #24
   29c3e:	4606      	mov	r6, r0
   29c40:	af00      	add	r7, sp, #0
   29c42:	460d      	mov	r5, r1
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   29c44:	4b44      	ldr	r3, [pc, #272]	; (29d58 <mem_manage_fault.constprop.0+0x120>)
   29c46:	617b      	str	r3, [r7, #20]
   29c48:	2402      	movs	r4, #2
   29c4a:	4844      	ldr	r0, [pc, #272]	; (29d5c <mem_manage_fault.constprop.0+0x124>)
   29c4c:	613c      	str	r4, [r7, #16]
   29c4e:	f107 0210 	add.w	r2, r7, #16
   29c52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29c56:	f006 fb75 	bl	30344 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   29c5a:	4b41      	ldr	r3, [pc, #260]	; (29d60 <mem_manage_fault.constprop.0+0x128>)
   29c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29c5e:	06db      	lsls	r3, r3, #27
   29c60:	d578      	bpl.n	29d54 <mem_manage_fault.constprop.0+0x11c>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
   29c62:	4b40      	ldr	r3, [pc, #256]	; (29d64 <mem_manage_fault.constprop.0+0x12c>)
   29c64:	483d      	ldr	r0, [pc, #244]	; (29d5c <mem_manage_fault.constprop.0+0x124>)
   29c66:	e9c7 4304 	strd	r4, r3, [r7, #16]
   29c6a:	f107 0210 	add.w	r2, r7, #16
   29c6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29c72:	f006 fb67 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
   29c76:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   29c78:	4b39      	ldr	r3, [pc, #228]	; (29d60 <mem_manage_fault.constprop.0+0x128>)
   29c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29c7c:	071c      	lsls	r4, r3, #28
   29c7e:	d50b      	bpl.n	29c98 <mem_manage_fault.constprop.0+0x60>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   29c80:	4b39      	ldr	r3, [pc, #228]	; (29d68 <mem_manage_fault.constprop.0+0x130>)
   29c82:	617b      	str	r3, [r7, #20]
   29c84:	2302      	movs	r3, #2
   29c86:	4835      	ldr	r0, [pc, #212]	; (29d5c <mem_manage_fault.constprop.0+0x124>)
   29c88:	613b      	str	r3, [r7, #16]
   29c8a:	f107 0210 	add.w	r2, r7, #16
   29c8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29c92:	f006 fb57 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
   29c96:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   29c98:	4c31      	ldr	r4, [pc, #196]	; (29d60 <mem_manage_fault.constprop.0+0x128>)
   29c9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   29c9c:	0799      	lsls	r1, r3, #30
   29c9e:	d523      	bpl.n	29ce8 <mem_manage_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
   29ca0:	46e8      	mov	r8, sp
   29ca2:	4b32      	ldr	r3, [pc, #200]	; (29d6c <mem_manage_fault.constprop.0+0x134>)
   29ca4:	617b      	str	r3, [r7, #20]
   29ca6:	2302      	movs	r3, #2
   29ca8:	613b      	str	r3, [r7, #16]
   29caa:	f107 0210 	add.w	r2, r7, #16
   29cae:	482b      	ldr	r0, [pc, #172]	; (29d5c <mem_manage_fault.constprop.0+0x124>)
   29cb0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29cb4:	f006 fb46 	bl	30344 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   29cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   29cba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   29cbc:	0612      	lsls	r2, r2, #24
   29cbe:	d512      	bpl.n	29ce6 <mem_manage_fault.constprop.0+0xae>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   29cc0:	b088      	sub	sp, #32
   29cc2:	466a      	mov	r2, sp
   29cc4:	492a      	ldr	r1, [pc, #168]	; (29d70 <mem_manage_fault.constprop.0+0x138>)
   29cc6:	4825      	ldr	r0, [pc, #148]	; (29d5c <mem_manage_fault.constprop.0+0x124>)
   29cc8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   29ccc:	2303      	movs	r3, #3
   29cce:	f842 3f10 	str.w	r3, [r2, #16]!
   29cd2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   29cd6:	f006 fb35 	bl	30344 <z_log_msg_static_create.constprop.0>
   29cda:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   29cdc:	b11e      	cbz	r6, 29ce6 <mem_manage_fault.constprop.0+0xae>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   29cde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   29ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   29ce4:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   29ce6:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   29ce8:	4b1d      	ldr	r3, [pc, #116]	; (29d60 <mem_manage_fault.constprop.0+0x128>)
   29cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29cec:	07de      	lsls	r6, r3, #31
   29cee:	d50b      	bpl.n	29d08 <mem_manage_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
   29cf0:	4b20      	ldr	r3, [pc, #128]	; (29d74 <mem_manage_fault.constprop.0+0x13c>)
   29cf2:	617b      	str	r3, [r7, #20]
   29cf4:	2302      	movs	r3, #2
   29cf6:	4819      	ldr	r0, [pc, #100]	; (29d5c <mem_manage_fault.constprop.0+0x124>)
   29cf8:	613b      	str	r3, [r7, #16]
   29cfa:	f107 0210 	add.w	r2, r7, #16
   29cfe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29d02:	f006 fb1f 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   29d06:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   29d08:	4b15      	ldr	r3, [pc, #84]	; (29d60 <mem_manage_fault.constprop.0+0x128>)
   29d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29d0c:	069c      	lsls	r4, r3, #26
   29d0e:	d50b      	bpl.n	29d28 <mem_manage_fault.constprop.0+0xf0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
   29d10:	4b19      	ldr	r3, [pc, #100]	; (29d78 <mem_manage_fault.constprop.0+0x140>)
   29d12:	617b      	str	r3, [r7, #20]
   29d14:	2302      	movs	r3, #2
   29d16:	4811      	ldr	r0, [pc, #68]	; (29d5c <mem_manage_fault.constprop.0+0x124>)
   29d18:	613b      	str	r3, [r7, #16]
   29d1a:	f107 0210 	add.w	r2, r7, #16
   29d1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29d22:	f006 fb0f 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   29d26:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   29d28:	4b0d      	ldr	r3, [pc, #52]	; (29d60 <mem_manage_fault.constprop.0+0x128>)
   29d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   29d2c:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   29d2e:	bf58      	it	pl
   29d30:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   29d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   29d34:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   29d36:	bf42      	ittt	mi
   29d38:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   29d3a:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   29d3e:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   29d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   29d42:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   29d46:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   29d48:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   29d4a:	2300      	movs	r3, #0
   29d4c:	702b      	strb	r3, [r5, #0]
}
   29d4e:	46bd      	mov	sp, r7
   29d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   29d54:	2010      	movs	r0, #16
   29d56:	e78f      	b.n	29c78 <mem_manage_fault.constprop.0+0x40>
   29d58:	00031bda 	.word	0x00031bda
   29d5c:	0003130c 	.word	0x0003130c
   29d60:	e000ed00 	.word	0xe000ed00
   29d64:	00031bf0 	.word	0x00031bf0
   29d68:	00031c23 	.word	0x00031c23
   29d6c:	00031c36 	.word	0x00031c36
   29d70:	00031c4e 	.word	0x00031c4e
   29d74:	00031c64 	.word	0x00031c64
   29d78:	00031c83 	.word	0x00031c83

00029d7c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   29d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29d80:	b086      	sub	sp, #24
   29d82:	4606      	mov	r6, r0
   29d84:	af00      	add	r7, sp, #0
   29d86:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   29d88:	4b47      	ldr	r3, [pc, #284]	; (29ea8 <bus_fault.constprop.0+0x12c>)
   29d8a:	617b      	str	r3, [r7, #20]
   29d8c:	2402      	movs	r4, #2
   29d8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29d92:	4846      	ldr	r0, [pc, #280]	; (29eac <bus_fault.constprop.0+0x130>)
   29d94:	613c      	str	r4, [r7, #16]
   29d96:	f107 0210 	add.w	r2, r7, #16
   29d9a:	f006 fad3 	bl	30344 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   29d9e:	4b44      	ldr	r3, [pc, #272]	; (29eb0 <bus_fault.constprop.0+0x134>)
   29da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29da2:	04d9      	lsls	r1, r3, #19
   29da4:	d56d      	bpl.n	29e82 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   29da6:	4b43      	ldr	r3, [pc, #268]	; (29eb4 <bus_fault.constprop.0+0x138>)
   29da8:	4840      	ldr	r0, [pc, #256]	; (29eac <bus_fault.constprop.0+0x130>)
   29daa:	e9c7 4304 	strd	r4, r3, [r7, #16]
   29dae:	f107 0210 	add.w	r2, r7, #16
   29db2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29db6:	f006 fac5 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   29dba:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   29dbc:	4b3c      	ldr	r3, [pc, #240]	; (29eb0 <bus_fault.constprop.0+0x134>)
   29dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29dc0:	051a      	lsls	r2, r3, #20
   29dc2:	d50b      	bpl.n	29ddc <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   29dc4:	4b3c      	ldr	r3, [pc, #240]	; (29eb8 <bus_fault.constprop.0+0x13c>)
   29dc6:	617b      	str	r3, [r7, #20]
   29dc8:	2302      	movs	r3, #2
   29dca:	4838      	ldr	r0, [pc, #224]	; (29eac <bus_fault.constprop.0+0x130>)
   29dcc:	613b      	str	r3, [r7, #16]
   29dce:	f107 0210 	add.w	r2, r7, #16
   29dd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29dd6:	f006 fab5 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   29dda:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   29ddc:	4c34      	ldr	r4, [pc, #208]	; (29eb0 <bus_fault.constprop.0+0x134>)
   29dde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   29de0:	059b      	lsls	r3, r3, #22
   29de2:	d523      	bpl.n	29e2c <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   29de4:	46e8      	mov	r8, sp
   29de6:	4b35      	ldr	r3, [pc, #212]	; (29ebc <bus_fault.constprop.0+0x140>)
   29de8:	617b      	str	r3, [r7, #20]
   29dea:	2302      	movs	r3, #2
   29dec:	482f      	ldr	r0, [pc, #188]	; (29eac <bus_fault.constprop.0+0x130>)
   29dee:	613b      	str	r3, [r7, #16]
   29df0:	f107 0210 	add.w	r2, r7, #16
   29df4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29df8:	f006 faa4 	bl	30344 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   29dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   29dfe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   29e00:	0410      	lsls	r0, r2, #16
   29e02:	d512      	bpl.n	29e2a <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   29e04:	b088      	sub	sp, #32
   29e06:	466a      	mov	r2, sp
   29e08:	492d      	ldr	r1, [pc, #180]	; (29ec0 <bus_fault.constprop.0+0x144>)
   29e0a:	4828      	ldr	r0, [pc, #160]	; (29eac <bus_fault.constprop.0+0x130>)
   29e0c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   29e10:	2303      	movs	r3, #3
   29e12:	f842 3f10 	str.w	r3, [r2, #16]!
   29e16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   29e1a:	f006 fa93 	bl	30344 <z_log_msg_static_create.constprop.0>
   29e1e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   29e20:	b11e      	cbz	r6, 29e2a <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   29e22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   29e24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   29e28:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   29e2a:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   29e2c:	4b20      	ldr	r3, [pc, #128]	; (29eb0 <bus_fault.constprop.0+0x134>)
   29e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29e30:	0559      	lsls	r1, r3, #21
   29e32:	d50b      	bpl.n	29e4c <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   29e34:	4b23      	ldr	r3, [pc, #140]	; (29ec4 <bus_fault.constprop.0+0x148>)
   29e36:	617b      	str	r3, [r7, #20]
   29e38:	2302      	movs	r3, #2
   29e3a:	481c      	ldr	r0, [pc, #112]	; (29eac <bus_fault.constprop.0+0x130>)
   29e3c:	613b      	str	r3, [r7, #16]
   29e3e:	f107 0210 	add.w	r2, r7, #16
   29e42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29e46:	f006 fa7d 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   29e4a:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   29e4c:	4b18      	ldr	r3, [pc, #96]	; (29eb0 <bus_fault.constprop.0+0x134>)
   29e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   29e50:	05d2      	lsls	r2, r2, #23
   29e52:	d518      	bpl.n	29e86 <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   29e54:	4b1c      	ldr	r3, [pc, #112]	; (29ec8 <bus_fault.constprop.0+0x14c>)
   29e56:	617b      	str	r3, [r7, #20]
   29e58:	2302      	movs	r3, #2
   29e5a:	4814      	ldr	r0, [pc, #80]	; (29eac <bus_fault.constprop.0+0x130>)
   29e5c:	613b      	str	r3, [r7, #16]
   29e5e:	f107 0210 	add.w	r2, r7, #16
   29e62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29e66:	f006 fa6d 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   29e6a:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   29e6c:	4a10      	ldr	r2, [pc, #64]	; (29eb0 <bus_fault.constprop.0+0x134>)
   29e6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   29e70:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   29e74:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   29e76:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   29e78:	2300      	movs	r3, #0
   29e7a:	702b      	strb	r3, [r5, #0]
}
   29e7c:	46bd      	mov	sp, r7
   29e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   29e82:	2016      	movs	r0, #22
   29e84:	e79a      	b.n	29dbc <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   29e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29e88:	049b      	lsls	r3, r3, #18
   29e8a:	d5ef      	bpl.n	29e6c <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   29e8c:	4b0f      	ldr	r3, [pc, #60]	; (29ecc <bus_fault.constprop.0+0x150>)
   29e8e:	617b      	str	r3, [r7, #20]
   29e90:	2302      	movs	r3, #2
   29e92:	4806      	ldr	r0, [pc, #24]	; (29eac <bus_fault.constprop.0+0x130>)
   29e94:	613b      	str	r3, [r7, #16]
   29e96:	f107 0210 	add.w	r2, r7, #16
   29e9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29e9e:	f006 fa51 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   29ea2:	201c      	movs	r0, #28
   29ea4:	e7e2      	b.n	29e6c <bus_fault.constprop.0+0xf0>
   29ea6:	bf00      	nop
   29ea8:	00031cb2 	.word	0x00031cb2
   29eac:	0003130c 	.word	0x0003130c
   29eb0:	e000ed00 	.word	0xe000ed00
   29eb4:	00031cc8 	.word	0x00031cc8
   29eb8:	00031c23 	.word	0x00031c23
   29ebc:	00031cd9 	.word	0x00031cd9
   29ec0:	00031cf2 	.word	0x00031cf2
   29ec4:	00031d07 	.word	0x00031d07
   29ec8:	00031d22 	.word	0x00031d22
   29ecc:	00031c83 	.word	0x00031c83

00029ed0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   29ed0:	b510      	push	{r4, lr}
   29ed2:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   29ed4:	4b36      	ldr	r3, [pc, #216]	; (29fb0 <usage_fault.constprop.0+0xe0>)
   29ed6:	4837      	ldr	r0, [pc, #220]	; (29fb4 <usage_fault.constprop.0+0xe4>)
   29ed8:	9305      	str	r3, [sp, #20]
   29eda:	aa04      	add	r2, sp, #16
   29edc:	2402      	movs	r4, #2
   29ede:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29ee2:	9404      	str	r4, [sp, #16]
   29ee4:	f006 fa2e 	bl	30344 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   29ee8:	4b33      	ldr	r3, [pc, #204]	; (29fb8 <usage_fault.constprop.0+0xe8>)
   29eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29eec:	019a      	lsls	r2, r3, #6
   29eee:	d55d      	bpl.n	29fac <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   29ef0:	4b32      	ldr	r3, [pc, #200]	; (29fbc <usage_fault.constprop.0+0xec>)
   29ef2:	4830      	ldr	r0, [pc, #192]	; (29fb4 <usage_fault.constprop.0+0xe4>)
   29ef4:	aa04      	add	r2, sp, #16
   29ef6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29efa:	e9cd 4304 	strd	r4, r3, [sp, #16]
   29efe:	f006 fa21 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   29f02:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   29f04:	4b2c      	ldr	r3, [pc, #176]	; (29fb8 <usage_fault.constprop.0+0xe8>)
   29f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29f08:	01db      	lsls	r3, r3, #7
   29f0a:	d50a      	bpl.n	29f22 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   29f0c:	4b2c      	ldr	r3, [pc, #176]	; (29fc0 <usage_fault.constprop.0+0xf0>)
   29f0e:	4829      	ldr	r0, [pc, #164]	; (29fb4 <usage_fault.constprop.0+0xe4>)
   29f10:	9305      	str	r3, [sp, #20]
   29f12:	aa04      	add	r2, sp, #16
   29f14:	2302      	movs	r3, #2
   29f16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29f1a:	9304      	str	r3, [sp, #16]
   29f1c:	f006 fa12 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   29f20:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   29f22:	4b25      	ldr	r3, [pc, #148]	; (29fb8 <usage_fault.constprop.0+0xe8>)
   29f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29f26:	031c      	lsls	r4, r3, #12
   29f28:	d50a      	bpl.n	29f40 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   29f2a:	4b26      	ldr	r3, [pc, #152]	; (29fc4 <usage_fault.constprop.0+0xf4>)
   29f2c:	4821      	ldr	r0, [pc, #132]	; (29fb4 <usage_fault.constprop.0+0xe4>)
   29f2e:	9305      	str	r3, [sp, #20]
   29f30:	aa04      	add	r2, sp, #16
   29f32:	2302      	movs	r3, #2
   29f34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29f38:	9304      	str	r3, [sp, #16]
   29f3a:	f006 fa03 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   29f3e:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   29f40:	4b1d      	ldr	r3, [pc, #116]	; (29fb8 <usage_fault.constprop.0+0xe8>)
   29f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29f44:	0359      	lsls	r1, r3, #13
   29f46:	d50a      	bpl.n	29f5e <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   29f48:	4b1f      	ldr	r3, [pc, #124]	; (29fc8 <usage_fault.constprop.0+0xf8>)
   29f4a:	481a      	ldr	r0, [pc, #104]	; (29fb4 <usage_fault.constprop.0+0xe4>)
   29f4c:	9305      	str	r3, [sp, #20]
   29f4e:	aa04      	add	r2, sp, #16
   29f50:	2302      	movs	r3, #2
   29f52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29f56:	9304      	str	r3, [sp, #16]
   29f58:	f006 f9f4 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   29f5c:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   29f5e:	4b16      	ldr	r3, [pc, #88]	; (29fb8 <usage_fault.constprop.0+0xe8>)
   29f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29f62:	039a      	lsls	r2, r3, #14
   29f64:	d50a      	bpl.n	29f7c <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   29f66:	4b19      	ldr	r3, [pc, #100]	; (29fcc <usage_fault.constprop.0+0xfc>)
   29f68:	4812      	ldr	r0, [pc, #72]	; (29fb4 <usage_fault.constprop.0+0xe4>)
   29f6a:	9305      	str	r3, [sp, #20]
   29f6c:	aa04      	add	r2, sp, #16
   29f6e:	2302      	movs	r3, #2
   29f70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29f74:	9304      	str	r3, [sp, #16]
   29f76:	f006 f9e5 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   29f7a:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   29f7c:	4b0e      	ldr	r3, [pc, #56]	; (29fb8 <usage_fault.constprop.0+0xe8>)
   29f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29f80:	03db      	lsls	r3, r3, #15
   29f82:	d50a      	bpl.n	29f9a <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   29f84:	4b12      	ldr	r3, [pc, #72]	; (29fd0 <usage_fault.constprop.0+0x100>)
   29f86:	480b      	ldr	r0, [pc, #44]	; (29fb4 <usage_fault.constprop.0+0xe4>)
   29f88:	9305      	str	r3, [sp, #20]
   29f8a:	aa04      	add	r2, sp, #16
   29f8c:	2302      	movs	r3, #2
   29f8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   29f92:	9304      	str	r3, [sp, #16]
   29f94:	f006 f9d6 	bl	30344 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   29f98:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   29f9a:	4a07      	ldr	r2, [pc, #28]	; (29fb8 <usage_fault.constprop.0+0xe8>)
   29f9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   29f9e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   29fa2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   29fa6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   29fa8:	b006      	add	sp, #24
   29faa:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   29fac:	201d      	movs	r0, #29
   29fae:	e7a9      	b.n	29f04 <usage_fault.constprop.0+0x34>
   29fb0:	00031d3a 	.word	0x00031d3a
   29fb4:	0003130c 	.word	0x0003130c
   29fb8:	e000ed00 	.word	0xe000ed00
   29fbc:	00031d52 	.word	0x00031d52
   29fc0:	00031d65 	.word	0x00031d65
   29fc4:	00031d7f 	.word	0x00031d7f
   29fc8:	00031d9d 	.word	0x00031d9d
   29fcc:	00031dc2 	.word	0x00031dc2
   29fd0:	00031ddc 	.word	0x00031ddc

00029fd4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   29fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   29fd8:	4b76      	ldr	r3, [pc, #472]	; (2a1b4 <z_arm_fault+0x1e0>)
{
   29fda:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   29fdc:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   29fe0:	af00      	add	r7, sp, #0
   29fe2:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   29fe4:	f3c8 0408 	ubfx	r4, r8, #0, #9
   29fe8:	2600      	movs	r6, #0
   29fea:	f386 8811 	msr	BASEPRI, r6
   29fee:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   29ff2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   29ff6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   29ffa:	d10e      	bne.n	2a01a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   29ffc:	f002 030c 	and.w	r3, r2, #12
   2a000:	2b08      	cmp	r3, #8
   2a002:	d119      	bne.n	2a038 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   2a004:	4b6c      	ldr	r3, [pc, #432]	; (2a1b8 <z_arm_fault+0x1e4>)
   2a006:	61fb      	str	r3, [r7, #28]
   2a008:	2302      	movs	r3, #2
   2a00a:	486c      	ldr	r0, [pc, #432]	; (2a1bc <z_arm_fault+0x1e8>)
   2a00c:	61bb      	str	r3, [r7, #24]
   2a00e:	f107 0218 	add.w	r2, r7, #24
   2a012:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2a016:	f006 f995 	bl	30344 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
   2a01a:	2600      	movs	r6, #0
		return NULL;
   2a01c:	4635      	mov	r5, r6
	*recoverable = false;
   2a01e:	2300      	movs	r3, #0
   2a020:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   2a022:	1ee3      	subs	r3, r4, #3
   2a024:	2b09      	cmp	r3, #9
   2a026:	f200 80a5 	bhi.w	2a174 <z_arm_fault+0x1a0>
   2a02a:	e8df f003 	tbb	[pc, r3]
   2a02e:	980a      	.short	0x980a
   2a030:	a3a3949b 	.word	0xa3a3949b
   2a034:	9ea3a3a3 	.word	0x9ea3a3a3
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   2a038:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   2a03a:	bf4c      	ite	mi
   2a03c:	460d      	movmi	r5, r1
			*nested_exc = true;
   2a03e:	2601      	movpl	r6, #1
   2a040:	e7ed      	b.n	2a01e <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
   2a042:	46e9      	mov	r9, sp
   2a044:	4b5e      	ldr	r3, [pc, #376]	; (2a1c0 <z_arm_fault+0x1ec>)
   2a046:	61fb      	str	r3, [r7, #28]
   2a048:	f04f 0802 	mov.w	r8, #2
   2a04c:	f107 0218 	add.w	r2, r7, #24
   2a050:	485a      	ldr	r0, [pc, #360]	; (2a1bc <z_arm_fault+0x1e8>)
   2a052:	f8c7 8018 	str.w	r8, [r7, #24]
   2a056:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2a05a:	f006 f973 	bl	30344 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   2a05e:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2a060:	4c54      	ldr	r4, [pc, #336]	; (2a1b4 <z_arm_fault+0x1e0>)
	*recoverable = false;
   2a062:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2a064:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a066:	079a      	lsls	r2, r3, #30
   2a068:	d50b      	bpl.n	2a082 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
   2a06a:	4b56      	ldr	r3, [pc, #344]	; (2a1c4 <z_arm_fault+0x1f0>)
		PR_EXC("  Debug event");
   2a06c:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   2a070:	4852      	ldr	r0, [pc, #328]	; (2a1bc <z_arm_fault+0x1e8>)
   2a072:	f107 0218 	add.w	r2, r7, #24
   2a076:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2a07a:	f006 f963 	bl	30344 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2a07e:	2400      	movs	r4, #0
   2a080:	e040      	b.n	2a104 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2a082:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a084:	2b00      	cmp	r3, #0
   2a086:	da01      	bge.n	2a08c <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
   2a088:	4b4f      	ldr	r3, [pc, #316]	; (2a1c8 <z_arm_fault+0x1f4>)
   2a08a:	e7ef      	b.n	2a06c <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2a08c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a08e:	005b      	lsls	r3, r3, #1
   2a090:	d5f5      	bpl.n	2a07e <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
   2a092:	4b4e      	ldr	r3, [pc, #312]	; (2a1cc <z_arm_fault+0x1f8>)
   2a094:	4849      	ldr	r0, [pc, #292]	; (2a1bc <z_arm_fault+0x1e8>)
   2a096:	e9c7 8306 	strd	r8, r3, [r7, #24]
   2a09a:	f107 0218 	add.w	r2, r7, #24
   2a09e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2a0a2:	f006 f94f 	bl	30344 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   2a0a6:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   2a0a8:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   2a0aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2a0ae:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   2a0b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a0b4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   2a0b8:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   2a0ba:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   2a0be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   2a0c2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   2a0c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a0c8:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   2a0cc:	f64d 7302 	movw	r3, #57090	; 0xdf02
   2a0d0:	429a      	cmp	r2, r3
   2a0d2:	d007      	beq.n	2a0e4 <z_arm_fault+0x110>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   2a0d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2a0d6:	b2db      	uxtb	r3, r3
   2a0d8:	b383      	cbz	r3, 2a13c <z_arm_fault+0x168>
			reason = mem_manage_fault(esf, 1, recoverable);
   2a0da:	1df9      	adds	r1, r7, #7
   2a0dc:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   2a0de:	f7ff fdab 	bl	29c38 <mem_manage_fault.constprop.0>
   2a0e2:	e03a      	b.n	2a15a <z_arm_fault+0x186>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   2a0e4:	b088      	sub	sp, #32
   2a0e6:	682b      	ldr	r3, [r5, #0]
   2a0e8:	466a      	mov	r2, sp
   2a0ea:	4939      	ldr	r1, [pc, #228]	; (2a1d0 <z_arm_fault+0x1fc>)
   2a0ec:	4833      	ldr	r0, [pc, #204]	; (2a1bc <z_arm_fault+0x1e8>)
   2a0ee:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2a0f2:	2303      	movs	r3, #3
   2a0f4:	f842 3f10 	str.w	r3, [r2, #16]!
   2a0f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2a0fc:	f006 f922 	bl	30344 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   2a100:	682c      	ldr	r4, [r5, #0]
   2a102:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2a104:	79fb      	ldrb	r3, [r7, #7]
   2a106:	b9ab      	cbnz	r3, 2a134 <z_arm_fault+0x160>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2a108:	2220      	movs	r2, #32
   2a10a:	4629      	mov	r1, r5
   2a10c:	f107 0008 	add.w	r0, r7, #8
   2a110:	f006 f922 	bl	30358 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a116:	2e00      	cmp	r6, #0
   2a118:	d047      	beq.n	2a1aa <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2a11a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2a11e:	b922      	cbnz	r2, 2a12a <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   2a120:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2a124:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2a128:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   2a12a:	f107 0108 	add.w	r1, r7, #8
   2a12e:	4620      	mov	r0, r4
   2a130:	f7ff fc02 	bl	29938 <z_arm_fatal_error>
}
   2a134:	372c      	adds	r7, #44	; 0x2c
   2a136:	46bd      	mov	sp, r7
   2a138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   2a13c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2a13e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   2a142:	d004      	beq.n	2a14e <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
   2a144:	1df9      	adds	r1, r7, #7
   2a146:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   2a148:	f7ff fe18 	bl	29d7c <bus_fault.constprop.0>
   2a14c:	e005      	b.n	2a15a <z_arm_fault+0x186>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   2a14e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2a150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2a154:	d393      	bcc.n	2a07e <z_arm_fault+0xaa>
			reason = usage_fault(esf);
   2a156:	f7ff febb 	bl	29ed0 <usage_fault.constprop.0>
   2a15a:	4604      	mov	r4, r0
   2a15c:	e7d2      	b.n	2a104 <z_arm_fault+0x130>
		reason = mem_manage_fault(esf, 0, recoverable);
   2a15e:	1df9      	adds	r1, r7, #7
   2a160:	2000      	movs	r0, #0
   2a162:	e7bc      	b.n	2a0de <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   2a164:	1df9      	adds	r1, r7, #7
   2a166:	2000      	movs	r0, #0
   2a168:	e7ee      	b.n	2a148 <z_arm_fault+0x174>
	PR_FAULT_INFO(
   2a16a:	4b1a      	ldr	r3, [pc, #104]	; (2a1d4 <z_arm_fault+0x200>)
   2a16c:	61fb      	str	r3, [r7, #28]
   2a16e:	2302      	movs	r3, #2
   2a170:	61bb      	str	r3, [r7, #24]
   2a172:	e77d      	b.n	2a070 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
   2a174:	4a18      	ldr	r2, [pc, #96]	; (2a1d8 <z_arm_fault+0x204>)
   2a176:	4b19      	ldr	r3, [pc, #100]	; (2a1dc <z_arm_fault+0x208>)
   2a178:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   2a17c:	46e8      	mov	r8, sp
   2a17e:	b08a      	sub	sp, #40	; 0x28
   2a180:	bf18      	it	ne
   2a182:	4613      	movne	r3, r2
   2a184:	466a      	mov	r2, sp
   2a186:	4916      	ldr	r1, [pc, #88]	; (2a1e0 <z_arm_fault+0x20c>)
   2a188:	480c      	ldr	r0, [pc, #48]	; (2a1bc <z_arm_fault+0x1e8>)
   2a18a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2a18e:	f44f 7300 	mov.w	r3, #512	; 0x200
   2a192:	8413      	strh	r3, [r2, #32]
   2a194:	3c10      	subs	r4, #16
   2a196:	4b13      	ldr	r3, [pc, #76]	; (2a1e4 <z_arm_fault+0x210>)
   2a198:	61d4      	str	r4, [r2, #28]
   2a19a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   2a19e:	f842 3f10 	str.w	r3, [r2, #16]!
   2a1a2:	f006 f8cf 	bl	30344 <z_log_msg_static_create.constprop.0>
   2a1a6:	46c5      	mov	sp, r8
}
   2a1a8:	e769      	b.n	2a07e <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2a1aa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2a1ae:	f023 0301 	bic.w	r3, r3, #1
   2a1b2:	e7b9      	b.n	2a128 <z_arm_fault+0x154>
   2a1b4:	e000ed00 	.word	0xe000ed00
   2a1b8:	00031e35 	.word	0x00031e35
   2a1bc:	0003130c 	.word	0x0003130c
   2a1c0:	00031e60 	.word	0x00031e60
   2a1c4:	00031e77 	.word	0x00031e77
   2a1c8:	00031e98 	.word	0x00031e98
   2a1cc:	00031ea6 	.word	0x00031ea6
   2a1d0:	00031ec5 	.word	0x00031ec5
   2a1d4:	00031ee1 	.word	0x00031ee1
   2a1d8:	00031e1c 	.word	0x00031e1c
   2a1dc:	00031e07 	.word	0x00031e07
   2a1e0:	00031f05 	.word	0x00031f05
   2a1e4:	01000004 	.word	0x01000004

0002a1e8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2a1e8:	4a02      	ldr	r2, [pc, #8]	; (2a1f4 <z_arm_fault_init+0xc>)
   2a1ea:	6953      	ldr	r3, [r2, #20]
   2a1ec:	f043 0310 	orr.w	r3, r3, #16
   2a1f0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   2a1f2:	4770      	bx	lr
   2a1f4:	e000ed00 	.word	0xe000ed00

0002a1f8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   2a1f8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2a1fc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   2a200:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2a202:	4672      	mov	r2, lr
	bl z_arm_fault
   2a204:	f7ff fee6 	bl	29fd4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   2a208:	bd01      	pop	{r0, pc}
   2a20a:	bf00      	nop

0002a20c <z_arm_interrupt_init>:
   2a20c:	4804      	ldr	r0, [pc, #16]	; (2a220 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2a20e:	2300      	movs	r3, #0
   2a210:	2120      	movs	r1, #32
   2a212:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2a214:	3301      	adds	r3, #1
   2a216:	2b30      	cmp	r3, #48	; 0x30
   2a218:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2a21c:	d1f9      	bne.n	2a212 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2a21e:	4770      	bx	lr
   2a220:	e000e100 	.word	0xe000e100

0002a224 <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   2a224:	f7fd fa52 	bl	276cc <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2a228:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2a22a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2a22e:	4808      	ldr	r0, [pc, #32]	; (2a250 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2a230:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2a234:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2a236:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2a23a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2a23e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2a240:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2a242:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2a246:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2a24a:	f7ff fc27 	bl	29a9c <z_arm_prep_c>
   2a24e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   2a250:	20002490 	.word	0x20002490

0002a254 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   2a254:	4b08      	ldr	r3, [pc, #32]	; (2a278 <z_impl_k_thread_abort+0x24>)
   2a256:	689b      	ldr	r3, [r3, #8]
   2a258:	4283      	cmp	r3, r0
   2a25a:	d10b      	bne.n	2a274 <z_impl_k_thread_abort+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a25c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   2a260:	b143      	cbz	r3, 2a274 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a262:	4b06      	ldr	r3, [pc, #24]	; (2a27c <z_impl_k_thread_abort+0x28>)
   2a264:	685a      	ldr	r2, [r3, #4]
   2a266:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   2a26a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   2a26c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2a26e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2a272:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   2a274:	f004 bcea 	b.w	2ec4c <z_thread_abort>
   2a278:	20001934 	.word	0x20001934
   2a27c:	e000ed00 	.word	0xe000ed00

0002a280 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2a280:	4b02      	ldr	r3, [pc, #8]	; (2a28c <z_arm_configure_static_mpu_regions+0xc>)
   2a282:	4a03      	ldr	r2, [pc, #12]	; (2a290 <z_arm_configure_static_mpu_regions+0x10>)
   2a284:	4803      	ldr	r0, [pc, #12]	; (2a294 <z_arm_configure_static_mpu_regions+0x14>)
   2a286:	2101      	movs	r1, #1
   2a288:	f000 b882 	b.w	2a390 <arm_core_mpu_configure_static_mpu_regions>
   2a28c:	20040000 	.word	0x20040000
   2a290:	20000000 	.word	0x20000000
   2a294:	00031490 	.word	0x00031490

0002a298 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   2a298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   2a29c:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 2a354 <mpu_configure_regions+0xbc>
   2a2a0:	469c      	mov	ip, r3
   2a2a2:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   2a2a4:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   2a2a6:	2300      	movs	r3, #0
   2a2a8:	428b      	cmp	r3, r1
   2a2aa:	da1a      	bge.n	2a2e2 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   2a2ac:	6844      	ldr	r4, [r0, #4]
   2a2ae:	2c00      	cmp	r4, #0
   2a2b0:	d04d      	beq.n	2a34e <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   2a2b2:	f1bc 0f00 	cmp.w	ip, #0
   2a2b6:	d01d      	beq.n	2a2f4 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   2a2b8:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   2a2ba:	4234      	tst	r4, r6
   2a2bc:	d015      	beq.n	2a2ea <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   2a2be:	466c      	mov	r4, sp
   2a2c0:	b088      	sub	sp, #32
   2a2c2:	466a      	mov	r2, sp
   2a2c4:	4924      	ldr	r1, [pc, #144]	; (2a358 <mpu_configure_regions+0xc0>)
   2a2c6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   2a2ca:	2303      	movs	r3, #3
   2a2cc:	f842 3f10 	str.w	r3, [r2, #16]!
   2a2d0:	4822      	ldr	r0, [pc, #136]	; (2a35c <mpu_configure_regions+0xc4>)
   2a2d2:	2300      	movs	r3, #0
   2a2d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2a2d8:	f7fd fc90 	bl	27bfc <z_impl_z_log_msg_static_create>
			return -EINVAL;
   2a2dc:	f06f 0515 	mvn.w	r5, #21
   2a2e0:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   2a2e2:	4628      	mov	r0, r5
   2a2e4:	46bd      	mov	sp, r7
   2a2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   2a2ea:	2c1f      	cmp	r4, #31
   2a2ec:	d9e7      	bls.n	2a2be <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   2a2ee:	6802      	ldr	r2, [r0, #0]
		&&
   2a2f0:	4216      	tst	r6, r2
   2a2f2:	d1e4      	bne.n	2a2be <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   2a2f4:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   2a2f6:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2a2f8:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   2a2fa:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   2a2fe:	d914      	bls.n	2a32a <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
   2a300:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   2a304:	d813      	bhi.n	2a32e <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2a306:	3c01      	subs	r4, #1
   2a308:	fab4 f484 	clz	r4, r4
   2a30c:	f1c4 041f 	rsb	r4, r4, #31
   2a310:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   2a312:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2a316:	ea46 0604 	orr.w	r6, r6, r4
   2a31a:	d90a      	bls.n	2a332 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   2a31c:	466c      	mov	r4, sp
   2a31e:	b088      	sub	sp, #32
   2a320:	466a      	mov	r2, sp
   2a322:	4b0f      	ldr	r3, [pc, #60]	; (2a360 <mpu_configure_regions+0xc8>)
   2a324:	e9c2 3505 	strd	r3, r5, [r2, #20]
   2a328:	e7cf      	b.n	2a2ca <mpu_configure_regions+0x32>
		return REGION_32B;
   2a32a:	2408      	movs	r4, #8
   2a32c:	e7f1      	b.n	2a312 <mpu_configure_regions+0x7a>
		return REGION_4G;
   2a32e:	243e      	movs	r4, #62	; 0x3e
   2a330:	e7ef      	b.n	2a312 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a332:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   2a336:	432a      	orrs	r2, r5
   2a338:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2a33c:	f046 0601 	orr.w	r6, r6, #1
   2a340:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a344:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   2a348:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2a34a:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   2a34e:	3301      	adds	r3, #1
   2a350:	300c      	adds	r0, #12
   2a352:	e7a9      	b.n	2a2a8 <mpu_configure_regions+0x10>
   2a354:	e000ed00 	.word	0xe000ed00
   2a358:	00031f1c 	.word	0x00031f1c
   2a35c:	00031304 	.word	0x00031304
   2a360:	00031f3f 	.word	0x00031f3f

0002a364 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2a364:	4b04      	ldr	r3, [pc, #16]	; (2a378 <arm_core_mpu_enable+0x14>)
   2a366:	2205      	movs	r2, #5
   2a368:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   2a36c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a370:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
   2a374:	4770      	bx	lr
   2a376:	bf00      	nop
   2a378:	e000ed00 	.word	0xe000ed00

0002a37c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   2a37c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
   2a380:	4b02      	ldr	r3, [pc, #8]	; (2a38c <arm_core_mpu_disable+0x10>)
   2a382:	2200      	movs	r2, #0
   2a384:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   2a388:	4770      	bx	lr
   2a38a:	bf00      	nop
   2a38c:	e000ed00 	.word	0xe000ed00

0002a390 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   2a390:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2a392:	4c03      	ldr	r4, [pc, #12]	; (2a3a0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   2a394:	2301      	movs	r3, #1
   2a396:	7822      	ldrb	r2, [r4, #0]
   2a398:	f7ff ff7e 	bl	2a298 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2a39c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   2a39e:	bd10      	pop	{r4, pc}
   2a3a0:	20001986 	.word	0x20001986

0002a3a4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2a3a4:	4914      	ldr	r1, [pc, #80]	; (2a3f8 <z_arm_mpu_init+0x54>)
   2a3a6:	6808      	ldr	r0, [r1, #0]
   2a3a8:	2808      	cmp	r0, #8
{
   2a3aa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   2a3ac:	d821      	bhi.n	2a3f2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   2a3ae:	f7ff ffe5 	bl	2a37c <arm_core_mpu_disable>
   2a3b2:	4c12      	ldr	r4, [pc, #72]	; (2a3fc <z_arm_mpu_init+0x58>)
   2a3b4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2a3b6:	2200      	movs	r2, #0
   2a3b8:	4290      	cmp	r0, r2
   2a3ba:	f101 010c 	add.w	r1, r1, #12
   2a3be:	d105      	bne.n	2a3cc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   2a3c0:	4b0f      	ldr	r3, [pc, #60]	; (2a400 <z_arm_mpu_init+0x5c>)
   2a3c2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   2a3c4:	f7ff ffce 	bl	2a364 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   2a3c8:	2000      	movs	r0, #0
}
   2a3ca:	bd10      	pop	{r4, pc}
   2a3cc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a3d0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   2a3d4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   2a3d8:	4313      	orrs	r3, r2
   2a3da:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a3de:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2a3e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2a3e6:	f043 0301 	orr.w	r3, r3, #1
   2a3ea:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2a3ee:	3201      	adds	r2, #1
   2a3f0:	e7e2      	b.n	2a3b8 <z_arm_mpu_init+0x14>
		return -1;
   2a3f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a3f6:	e7e8      	b.n	2a3ca <z_arm_mpu_init+0x26>
   2a3f8:	0003149c 	.word	0x0003149c
   2a3fc:	e000ed00 	.word	0xe000ed00
   2a400:	20001986 	.word	0x20001986

0002a404 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   2a404:	4b01      	ldr	r3, [pc, #4]	; (2a40c <__stdout_hook_install+0x8>)
   2a406:	6018      	str	r0, [r3, #0]
}
   2a408:	4770      	bx	lr
   2a40a:	bf00      	nop
   2a40c:	200001b4 	.word	0x200001b4

0002a410 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   2a410:	f04f 0320 	mov.w	r3, #32
   2a414:	f3ef 8211 	mrs	r2, BASEPRI
   2a418:	f383 8812 	msr	BASEPRI_MAX, r3
   2a41c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2a420:	4906      	ldr	r1, [pc, #24]	; (2a43c <nordicsemi_nrf52_init+0x2c>)
   2a422:	2301      	movs	r3, #1
   2a424:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2a428:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2a42c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   2a430:	f382 8811 	msr	BASEPRI, r2
   2a434:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2a438:	2000      	movs	r0, #0
   2a43a:	4770      	bx	lr
   2a43c:	4001e000 	.word	0x4001e000

0002a440 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2a440:	b120      	cbz	r0, 2a44c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   2a442:	4b03      	ldr	r3, [pc, #12]	; (2a450 <arch_busy_wait+0x10>)
   2a444:	0180      	lsls	r0, r0, #6
   2a446:	f043 0301 	orr.w	r3, r3, #1
   2a44a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2a44c:	4770      	bx	lr
   2a44e:	bf00      	nop
   2a450:	00031370 	.word	0x00031370

0002a454 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   2a454:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   2a456:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
   2a45a:	d512      	bpl.n	2a482 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   2a45c:	2b08      	cmp	r3, #8
   2a45e:	d105      	bne.n	2a46c <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   2a460:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   2a462:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   2a466:	d506      	bpl.n	2a476 <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   2a468:	480e      	ldr	r0, [pc, #56]	; (2a4a4 <endpoint_ctx+0x50>)
   2a46a:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
   2a46c:	f010 0f78 	tst.w	r0, #120	; 0x78
   2a470:	d112      	bne.n	2a498 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
   2a472:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
   2a476:	204c      	movs	r0, #76	; 0x4c
   2a478:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2a47c:	4b0a      	ldr	r3, [pc, #40]	; (2a4a8 <endpoint_ctx+0x54>)
   2a47e:	4418      	add	r0, r3
   2a480:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   2a482:	2b08      	cmp	r3, #8
   2a484:	d105      	bne.n	2a492 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   2a486:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   2a488:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   2a48c:	d506      	bpl.n	2a49c <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   2a48e:	4807      	ldr	r0, [pc, #28]	; (2a4ac <endpoint_ctx+0x58>)
   2a490:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
   2a492:	f010 0f78 	tst.w	r0, #120	; 0x78
   2a496:	d0f6      	beq.n	2a486 <endpoint_ctx+0x32>
		return NULL;
   2a498:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
   2a49a:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   2a49c:	4804      	ldr	r0, [pc, #16]	; (2a4b0 <endpoint_ctx+0x5c>)
   2a49e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2a4a2:	4770      	bx	lr
   2a4a4:	20000f08 	.word	0x20000f08
   2a4a8:	20000dbc 	.word	0x20000dbc
   2a4ac:	20001028 	.word	0x20001028
   2a4b0:	20000f28 	.word	0x20000f28

0002a4b4 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   2a4b4:	4901      	ldr	r1, [pc, #4]	; (2a4bc <usbd_work_schedule+0x8>)
   2a4b6:	4802      	ldr	r0, [pc, #8]	; (2a4c0 <usbd_work_schedule+0xc>)
   2a4b8:	f006 bb93 	b.w	30be2 <k_work_submit_to_queue>
   2a4bc:	20000de4 	.word	0x20000de4
   2a4c0:	20000910 	.word	0x20000910

0002a4c4 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   2a4c4:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   2a4c6:	4801      	ldr	r0, [pc, #4]	; (2a4cc <usbd_evt_put+0x8>)
   2a4c8:	f006 bb26 	b.w	30b18 <k_queue_append>
   2a4cc:	200002d8 	.word	0x200002d8

0002a4d0 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
   2a4d0:	4802      	ldr	r0, [pc, #8]	; (2a4dc <usbd_evt_get+0xc>)
   2a4d2:	2200      	movs	r2, #0
   2a4d4:	2300      	movs	r3, #0
   2a4d6:	f003 bee5 	b.w	2e2a4 <z_impl_k_queue_get>
   2a4da:	bf00      	nop
   2a4dc:	200002d8 	.word	0x200002d8

0002a4e0 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
   2a4e0:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   2a4e2:	4c05      	ldr	r4, [pc, #20]	; (2a4f8 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
   2a4e4:	f7ff fff4 	bl	2a4d0 <usbd_evt_get>
		if (ev) {
   2a4e8:	b120      	cbz	r0, 2a4f4 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   2a4ea:	1d01      	adds	r1, r0, #4
   2a4ec:	4620      	mov	r0, r4
   2a4ee:	f006 fa59 	bl	309a4 <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
   2a4f2:	e7f7      	b.n	2a4e4 <usbd_evt_flush+0x4>
}
   2a4f4:	bd10      	pop	{r4, pc}
   2a4f6:	bf00      	nop
   2a4f8:	20000284 	.word	0x20000284

0002a4fc <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
   2a4fc:	b510      	push	{r4, lr}
   2a4fe:	b088      	sub	sp, #32
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
   2a500:	4818      	ldr	r0, [pc, #96]	; (2a564 <usbd_evt_alloc+0x68>)
   2a502:	2200      	movs	r2, #0
   2a504:	2300      	movs	r3, #0
   2a506:	a901      	add	r1, sp, #4
   2a508:	f003 fd14 	bl	2df34 <k_mem_slab_alloc>
   2a50c:	b330      	cbz	r0, 2a55c <usbd_evt_alloc+0x60>
			     (void **)&block.data, K_NO_WAIT)) {
		LOG_ERR("USBD event allocation failed!");
   2a50e:	4b16      	ldr	r3, [pc, #88]	; (2a568 <usbd_evt_alloc+0x6c>)
   2a510:	4816      	ldr	r0, [pc, #88]	; (2a56c <usbd_evt_alloc+0x70>)
   2a512:	9307      	str	r3, [sp, #28]
   2a514:	aa06      	add	r2, sp, #24
   2a516:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2a51a:	2402      	movs	r4, #2
   2a51c:	9406      	str	r4, [sp, #24]
   2a51e:	f005 ff60 	bl	303e2 <z_log_msg_static_create.constprop.0>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
   2a522:	f7ff ffdd 	bl	2a4e0 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   2a526:	480f      	ldr	r0, [pc, #60]	; (2a564 <usbd_evt_alloc+0x68>)
   2a528:	2200      	movs	r2, #0
   2a52a:	2300      	movs	r3, #0
   2a52c:	a901      	add	r1, sp, #4
   2a52e:	f003 fd01 	bl	2df34 <k_mem_slab_alloc>
   2a532:	b150      	cbz	r0, 2a54a <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
   2a534:	4b0e      	ldr	r3, [pc, #56]	; (2a570 <usbd_evt_alloc+0x74>)
   2a536:	480d      	ldr	r0, [pc, #52]	; (2a56c <usbd_evt_alloc+0x70>)
   2a538:	aa06      	add	r2, sp, #24
   2a53a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2a53e:	e9cd 4306 	strd	r4, r3, [sp, #24]
   2a542:	f005 ff4e 	bl	303e2 <z_log_msg_static_create.constprop.0>
			__ASSERT_NO_MSG(0);
			return NULL;
   2a546:	2000      	movs	r0, #0
   2a548:	e00a      	b.n	2a560 <usbd_evt_alloc+0x64>
		}

		ev = (struct usbd_event *)block.data;
   2a54a:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
   2a54c:	2304      	movs	r3, #4
		ev->block = block;
   2a54e:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   2a550:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   2a552:	f7ff ffb7 	bl	2a4c4 <usbd_evt_put>
		usbd_work_schedule();
   2a556:	f7ff ffad 	bl	2a4b4 <usbd_work_schedule>

		return NULL;
   2a55a:	e7f4      	b.n	2a546 <usbd_evt_alloc+0x4a>
	}

	ev = (struct usbd_event *)block.data;
   2a55c:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   2a55e:	6040      	str	r0, [r0, #4]

	return ev;
}
   2a560:	b008      	add	sp, #32
   2a562:	bd10      	pop	{r4, pc}
   2a564:	20000284 	.word	0x20000284
   2a568:	00031f78 	.word	0x00031f78
   2a56c:	0003133c 	.word	0x0003133c
   2a570:	00031f96 	.word	0x00031f96

0002a574 <usb_dc_power_event_handler>:

static K_TIMER_DEFINE(delay_timer, attached_evt_delay_handler, NULL);
#endif

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
   2a574:	b598      	push	{r3, r4, r7, lr}
   2a576:	2802      	cmp	r0, #2
   2a578:	af00      	add	r7, sp, #0
   2a57a:	d811      	bhi.n	2a5a0 <usb_dc_power_event_handler+0x2c>
   2a57c:	4b10      	ldr	r3, [pc, #64]	; (2a5c0 <usb_dc_power_event_handler+0x4c>)
   2a57e:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   2a580:	f7ff ffbc 	bl	2a4fc <usbd_evt_alloc>
	if (!ev) {
   2a584:	b150      	cbz	r0, 2a59c <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
   2a586:	2200      	movs	r2, #0
   2a588:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   2a58a:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   2a58c:	f7ff ff9a 	bl	2a4c4 <usbd_evt_put>
	if (usbd_ctx.attached) {
   2a590:	4b0c      	ldr	r3, [pc, #48]	; (2a5c4 <usb_dc_power_event_handler+0x50>)
   2a592:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   2a596:	b10b      	cbz	r3, 2a59c <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
   2a598:	f7ff ff8c 	bl	2a4b4 <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
   2a59c:	46bd      	mov	sp, r7
   2a59e:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
   2a5a0:	466c      	mov	r4, sp
   2a5a2:	b088      	sub	sp, #32
   2a5a4:	466a      	mov	r2, sp
   2a5a6:	4b08      	ldr	r3, [pc, #32]	; (2a5c8 <usb_dc_power_event_handler+0x54>)
	switch (event) {
   2a5a8:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
   2a5ac:	2303      	movs	r3, #3
   2a5ae:	f842 3f10 	str.w	r3, [r2, #16]!
   2a5b2:	4806      	ldr	r0, [pc, #24]	; (2a5cc <usb_dc_power_event_handler+0x58>)
   2a5b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2a5b8:	f005 ff13 	bl	303e2 <z_log_msg_static_create.constprop.0>
   2a5bc:	46a5      	mov	sp, r4
   2a5be:	e7ed      	b.n	2a59c <usb_dc_power_event_handler+0x28>
   2a5c0:	00032188 	.word	0x00032188
   2a5c4:	20000dbc 	.word	0x20000dbc
   2a5c8:	00031fb2 	.word	0x00031fb2
   2a5cc:	0003133c 	.word	0x0003133c

0002a5d0 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
   2a5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
   2a5d4:	f890 8002 	ldrb.w	r8, [r0, #2]
{
   2a5d8:	4606      	mov	r6, r0
   2a5da:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
   2a5dc:	4640      	mov	r0, r8
   2a5de:	f7ff ff39 	bl	2a454 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   2a5e2:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
   2a5e6:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   2a5e8:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   2a5ea:	d025      	beq.n	2a638 <usbd_event_transfer_data+0x68>
		switch (p_event->data.eptransfer.status) {
   2a5ec:	b19c      	cbz	r4, 2a616 <usbd_event_transfer_data+0x46>
   2a5ee:	2c03      	cmp	r4, #3
   2a5f0:	d01f      	beq.n	2a632 <usbd_event_transfer_data+0x62>
			usbd_work_schedule();
		}
		break;

		default: {
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   2a5f2:	466d      	mov	r5, sp
   2a5f4:	b088      	sub	sp, #32
   2a5f6:	466a      	mov	r2, sp
   2a5f8:	4b2a      	ldr	r3, [pc, #168]	; (2a6a4 <usbd_event_transfer_data+0xd4>)
   2a5fa:	f8c2 801c 	str.w	r8, [r2, #28]
   2a5fe:	e9c2 3405 	strd	r3, r4, [r2, #20]
   2a602:	2304      	movs	r3, #4
   2a604:	f842 3f10 	str.w	r3, [r2, #16]!
   2a608:	4827      	ldr	r0, [pc, #156]	; (2a6a8 <usbd_event_transfer_data+0xd8>)
   2a60a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2a60e:	f005 fee8 	bl	303e2 <z_log_msg_static_create.constprop.0>
   2a612:	46ad      	mov	sp, r5
   2a614:	e00d      	b.n	2a632 <usbd_event_transfer_data+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
   2a616:	f7ff ff71 	bl	2a4fc <usbd_evt_alloc>
			if (!ev) {
   2a61a:	4603      	mov	r3, r0
   2a61c:	b148      	cbz	r0, 2a632 <usbd_event_transfer_data+0x62>
			ev->evt_type = USBD_EVT_EP;
   2a61e:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   2a620:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   2a622:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   2a624:	2203      	movs	r2, #3
   2a626:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   2a628:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
   2a62a:	f7ff ff4b 	bl	2a4c4 <usbd_evt_put>
			usbd_work_schedule();
   2a62e:	f7ff ff41 	bl	2a4b4 <usbd_work_schedule>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
   2a632:	46bd      	mov	sp, r7
   2a634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (p_event->data.eptransfer.status) {
   2a638:	b154      	cbz	r4, 2a650 <usbd_event_transfer_data+0x80>
   2a63a:	2c01      	cmp	r4, #1
   2a63c:	d1d9      	bne.n	2a5f2 <usbd_event_transfer_data+0x22>
			struct usbd_event *ev = usbd_evt_alloc();
   2a63e:	f7ff ff5d 	bl	2a4fc <usbd_evt_alloc>
			if (!ev) {
   2a642:	4603      	mov	r3, r0
   2a644:	2800      	cmp	r0, #0
   2a646:	d0f4      	beq.n	2a632 <usbd_event_transfer_data+0x62>
			ep_ctx->read_pending = true;
   2a648:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   2a64a:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   2a64c:	7304      	strb	r4, [r0, #12]
   2a64e:	e7eb      	b.n	2a628 <usbd_event_transfer_data+0x58>
			struct usbd_event *ev = usbd_evt_alloc();
   2a650:	f7ff ff54 	bl	2a4fc <usbd_evt_alloc>
			if (!ev) {
   2a654:	2800      	cmp	r0, #0
   2a656:	d0ec      	beq.n	2a632 <usbd_event_transfer_data+0x62>
				p_event->data.eptransfer.ep);
   2a658:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   2a65a:	4b14      	ldr	r3, [pc, #80]	; (2a6ac <usbd_event_transfer_data+0xdc>)
   2a65c:	f012 0f80 	tst.w	r2, #128	; 0x80
   2a660:	f002 0108 	and.w	r1, r2, #8
   2a664:	d011      	beq.n	2a68a <usbd_event_transfer_data+0xba>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   2a666:	b141      	cbz	r1, 2a67a <usbd_event_transfer_data+0xaa>
        {
            ret = p_reg->ISOIN.AMOUNT;
   2a668:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   2a66c:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
   2a66e:	2301      	movs	r3, #1
   2a670:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   2a672:	2302      	movs	r3, #2
   2a674:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   2a676:	6085      	str	r5, [r0, #8]
   2a678:	e7d7      	b.n	2a62a <usbd_event_transfer_data+0x5a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   2a67a:	f002 020f 	and.w	r2, r2, #15
   2a67e:	2114      	movs	r1, #20
   2a680:	fb01 3302 	mla	r3, r1, r2, r3
   2a684:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   2a688:	e7f0      	b.n	2a66c <usbd_event_transfer_data+0x9c>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   2a68a:	b111      	cbz	r1, 2a692 <usbd_event_transfer_data+0xc2>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   2a68c:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   2a690:	e7ec      	b.n	2a66c <usbd_event_transfer_data+0x9c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   2a692:	f002 020f 	and.w	r2, r2, #15
   2a696:	2114      	movs	r1, #20
   2a698:	fb01 3302 	mla	r3, r1, r2, r3
   2a69c:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   2a6a0:	e7e4      	b.n	2a66c <usbd_event_transfer_data+0x9c>
   2a6a2:	bf00      	nop
   2a6a4:	00031fcd 	.word	0x00031fcd
   2a6a8:	0003133c 	.word	0x0003133c
   2a6ac:	40027000 	.word	0x40027000

0002a6b0 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
   2a6b0:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
   2a6b2:	4812      	ldr	r0, [pc, #72]	; (2a6fc <usb_init+0x4c>)
   2a6b4:	f002 fe18 	bl	2d2e8 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   2a6b8:	4b11      	ldr	r3, [pc, #68]	; (2a700 <usb_init+0x50>)
   2a6ba:	4298      	cmp	r0, r3
   2a6bc:	d11a      	bne.n	2a6f4 <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   2a6be:	4811      	ldr	r0, [pc, #68]	; (2a704 <usb_init+0x54>)
   2a6c0:	f002 fa8c 	bl	2cbdc <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   2a6c4:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   2a6c6:	4810      	ldr	r0, [pc, #64]	; (2a708 <usb_init+0x58>)
   2a6c8:	f002 face 	bl	2cc68 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   2a6cc:	490f      	ldr	r1, [pc, #60]	; (2a70c <usb_init+0x5c>)
   2a6ce:	4810      	ldr	r0, [pc, #64]	; (2a710 <usb_init+0x60>)
   2a6d0:	9400      	str	r4, [sp, #0]
   2a6d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a6d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2a6da:	f003 ff59 	bl	2e590 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   2a6de:	490d      	ldr	r1, [pc, #52]	; (2a714 <usb_init+0x64>)
   2a6e0:	480b      	ldr	r0, [pc, #44]	; (2a710 <usb_init+0x60>)
   2a6e2:	f006 f98e 	bl	30a02 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
   2a6e6:	480c      	ldr	r0, [pc, #48]	; (2a718 <usb_init+0x68>)
   2a6e8:	490c      	ldr	r1, [pc, #48]	; (2a71c <usb_init+0x6c>)
   2a6ea:	f006 fa5d 	bl	30ba8 <k_work_init>

	return 0;
   2a6ee:	4620      	mov	r0, r4
}
   2a6f0:	b002      	add	sp, #8
   2a6f2:	bd10      	pop	{r4, pc}
		return -EIO;
   2a6f4:	f06f 0004 	mvn.w	r0, #4
   2a6f8:	e7fa      	b.n	2a6f0 <usb_init+0x40>
   2a6fa:	bf00      	nop
   2a6fc:	0002a761 	.word	0x0002a761
   2a700:	0bad0000 	.word	0x0bad0000
   2a704:	0003218b 	.word	0x0003218b
   2a708:	000314bc 	.word	0x000314bc
   2a70c:	20002090 	.word	0x20002090
   2a710:	20000910 	.word	0x20000910
   2a714:	00031ff9 	.word	0x00031ff9
   2a718:	20000de4 	.word	0x20000de4
   2a71c:	0002a939 	.word	0x0002a939

0002a720 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   2a720:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a722:	490e      	ldr	r1, [pc, #56]	; (2a75c <hfxo_stop.constprop.0.isra.0+0x3c>)
   2a724:	f3bf 8f5b 	dmb	ish
   2a728:	2300      	movs	r3, #0
   2a72a:	e851 2f00 	ldrex	r2, [r1]
   2a72e:	2a01      	cmp	r2, #1
   2a730:	d103      	bne.n	2a73a <hfxo_stop.constprop.0.isra.0+0x1a>
   2a732:	e841 3000 	strex	r0, r3, [r1]
   2a736:	2800      	cmp	r0, #0
   2a738:	d1f7      	bne.n	2a72a <hfxo_stop.constprop.0.isra.0+0xa>
   2a73a:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   2a73e:	d10c      	bne.n	2a75a <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   2a740:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   2a744:	3914      	subs	r1, #20
   2a746:	4620      	mov	r0, r4
   2a748:	f005 f8b0 	bl	2f8ac <onoff_cancel>

	if (rv == -EALREADY) {
   2a74c:	3078      	adds	r0, #120	; 0x78
   2a74e:	d104      	bne.n	2a75a <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
   2a750:	4620      	mov	r0, r4
}
   2a752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a756:	f005 b884 	b.w	2f862 <onoff_release>
   2a75a:	bd10      	pop	{r4, pc}
   2a75c:	20000ddc 	.word	0x20000ddc

0002a760 <usbd_event_handler>:
{
   2a760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a764:	b088      	sub	sp, #32
   2a766:	4606      	mov	r6, r0
   2a768:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
   2a76a:	2214      	movs	r2, #20
   2a76c:	2100      	movs	r1, #0
   2a76e:	f107 000c 	add.w	r0, r7, #12
   2a772:	f005 fdfc 	bl	3036e <memset>
	switch (p_event->type) {
   2a776:	7833      	ldrb	r3, [r6, #0]
   2a778:	3b01      	subs	r3, #1
   2a77a:	2b05      	cmp	r3, #5
   2a77c:	d821      	bhi.n	2a7c2 <usbd_event_handler+0x62>
   2a77e:	e8df f003 	tbb	[pc, r3]
   2a782:	039b      	.short	0x039b
   2a784:	158d1313 	.word	0x158d1313
   2a788:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   2a78a:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
   2a78c:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   2a78e:	f7ff feb5 	bl	2a4fc <usbd_evt_alloc>
		if (!ev) {
   2a792:	4603      	mov	r3, r0
   2a794:	b1a8      	cbz	r0, 2a7c2 <usbd_event_handler+0x62>
		ev->evt_type = evt.evt_type;
   2a796:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   2a798:	f100 0208 	add.w	r2, r0, #8
   2a79c:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
   2a7a0:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   2a7a4:	4618      	mov	r0, r3
   2a7a6:	e034      	b.n	2a812 <usbd_event_handler+0xb2>
	switch (p_event->type) {
   2a7a8:	2304      	movs	r3, #4
   2a7aa:	e7ee      	b.n	2a78a <usbd_event_handler+0x2a>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   2a7ac:	f896 8002 	ldrb.w	r8, [r6, #2]
   2a7b0:	4640      	mov	r0, r8
   2a7b2:	f7ff fe4f 	bl	2a454 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   2a7b6:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   2a7b8:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
   2a7ba:	b133      	cbz	r3, 2a7ca <usbd_event_handler+0x6a>
   2a7bc:	3b01      	subs	r3, #1
   2a7be:	2b02      	cmp	r3, #2
   2a7c0:	d968      	bls.n	2a894 <usbd_event_handler+0x134>
}
   2a7c2:	3720      	adds	r7, #32
   2a7c4:	46bd      	mov	sp, r7
   2a7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   2a7ca:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
   2a7ce:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   2a7d0:	d024      	beq.n	2a81c <usbd_event_handler+0xbc>
		switch (p_event->data.eptransfer.status) {
   2a7d2:	b19c      	cbz	r4, 2a7fc <usbd_event_handler+0x9c>
   2a7d4:	2c03      	cmp	r4, #3
   2a7d6:	d0f4      	beq.n	2a7c2 <usbd_event_handler+0x62>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   2a7d8:	466d      	mov	r5, sp
   2a7da:	b088      	sub	sp, #32
   2a7dc:	466a      	mov	r2, sp
   2a7de:	4b37      	ldr	r3, [pc, #220]	; (2a8bc <usbd_event_handler+0x15c>)
   2a7e0:	f8c2 801c 	str.w	r8, [r2, #28]
   2a7e4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   2a7e8:	2304      	movs	r3, #4
   2a7ea:	f842 3f10 	str.w	r3, [r2, #16]!
   2a7ee:	4834      	ldr	r0, [pc, #208]	; (2a8c0 <usbd_event_handler+0x160>)
   2a7f0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2a7f4:	f005 fdf5 	bl	303e2 <z_log_msg_static_create.constprop.0>
   2a7f8:	46ad      	mov	sp, r5
   2a7fa:	e7e2      	b.n	2a7c2 <usbd_event_handler+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
   2a7fc:	f7ff fe7e 	bl	2a4fc <usbd_evt_alloc>
			if (!ev) {
   2a800:	4603      	mov	r3, r0
   2a802:	2800      	cmp	r0, #0
   2a804:	d0dd      	beq.n	2a7c2 <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
   2a806:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   2a808:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   2a80a:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   2a80c:	2203      	movs	r2, #3
   2a80e:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   2a810:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
   2a812:	f7ff fe57 	bl	2a4c4 <usbd_evt_put>
		usbd_work_schedule();
   2a816:	f7ff fe4d 	bl	2a4b4 <usbd_work_schedule>
   2a81a:	e7d2      	b.n	2a7c2 <usbd_event_handler+0x62>
		switch (p_event->data.eptransfer.status) {
   2a81c:	b154      	cbz	r4, 2a834 <usbd_event_handler+0xd4>
   2a81e:	2c01      	cmp	r4, #1
   2a820:	d1da      	bne.n	2a7d8 <usbd_event_handler+0x78>
			struct usbd_event *ev = usbd_evt_alloc();
   2a822:	f7ff fe6b 	bl	2a4fc <usbd_evt_alloc>
			if (!ev) {
   2a826:	4603      	mov	r3, r0
   2a828:	2800      	cmp	r0, #0
   2a82a:	d0ca      	beq.n	2a7c2 <usbd_event_handler+0x62>
			ep_ctx->read_pending = true;
   2a82c:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   2a82e:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   2a830:	7304      	strb	r4, [r0, #12]
   2a832:	e7ed      	b.n	2a810 <usbd_event_handler+0xb0>
			struct usbd_event *ev = usbd_evt_alloc();
   2a834:	f7ff fe62 	bl	2a4fc <usbd_evt_alloc>
			if (!ev) {
   2a838:	4604      	mov	r4, r0
   2a83a:	2800      	cmp	r0, #0
   2a83c:	d0c1      	beq.n	2a7c2 <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
   2a83e:	2301      	movs	r3, #1
   2a840:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   2a842:	2302      	movs	r3, #2
   2a844:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   2a846:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   2a848:	78b0      	ldrb	r0, [r6, #2]
   2a84a:	f105 010c 	add.w	r1, r5, #12
   2a84e:	f006 f84c 	bl	308ea <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
   2a852:	b170      	cbz	r0, 2a872 <usbd_event_handler+0x112>
				LOG_ERR("_ep_status_get failed! Code: %d",
   2a854:	466e      	mov	r6, sp
   2a856:	b088      	sub	sp, #32
   2a858:	466a      	mov	r2, sp
   2a85a:	4b1a      	ldr	r3, [pc, #104]	; (2a8c4 <usbd_event_handler+0x164>)
   2a85c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2a860:	2303      	movs	r3, #3
   2a862:	f842 3f10 	str.w	r3, [r2, #16]!
   2a866:	4816      	ldr	r0, [pc, #88]	; (2a8c0 <usbd_event_handler+0x160>)
   2a868:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2a86c:	f005 fdb9 	bl	303e2 <z_log_msg_static_create.constprop.0>
   2a870:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   2a872:	4a15      	ldr	r2, [pc, #84]	; (2a8c8 <usbd_event_handler+0x168>)
   2a874:	68e9      	ldr	r1, [r5, #12]
   2a876:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   2a87a:	428b      	cmp	r3, r1
   2a87c:	d906      	bls.n	2a88c <usbd_event_handler+0x12c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   2a87e:	1a5b      	subs	r3, r3, r1
   2a880:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   2a884:	f002 ff6c 	bl	2d760 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   2a888:	4620      	mov	r0, r4
   2a88a:	e7c2      	b.n	2a812 <usbd_event_handler+0xb2>
				ctx->ctrl_read_len = 0U;
   2a88c:	2300      	movs	r3, #0
   2a88e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
   2a892:	e7f9      	b.n	2a888 <usbd_event_handler+0x128>
			usbd_event_transfer_data(p_event);
   2a894:	4630      	mov	r0, r6
   2a896:	f7ff fe9b 	bl	2a5d0 <usbd_event_transfer_data>
	if (put_evt) {
   2a89a:	e792      	b.n	2a7c2 <usbd_event_handler+0x62>
		nrfx_usbd_setup_get(&drv_setup);
   2a89c:	1d38      	adds	r0, r7, #4
   2a89e:	f002 ff39 	bl	2d714 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   2a8a2:	797b      	ldrb	r3, [r7, #5]
   2a8a4:	2b05      	cmp	r3, #5
   2a8a6:	d103      	bne.n	2a8b0 <usbd_event_handler+0x150>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   2a8a8:	793b      	ldrb	r3, [r7, #4]
   2a8aa:	f013 0f60 	tst.w	r3, #96	; 0x60
   2a8ae:	d088      	beq.n	2a7c2 <usbd_event_handler+0x62>
			evt.evt.ep_evt.ep = ep_ctx;
   2a8b0:	4b06      	ldr	r3, [pc, #24]	; (2a8cc <usbd_event_handler+0x16c>)
   2a8b2:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
   2a8b4:	2401      	movs	r4, #1
   2a8b6:	e76a      	b.n	2a78e <usbd_event_handler+0x2e>
	switch (p_event->type) {
   2a8b8:	2402      	movs	r4, #2
   2a8ba:	e768      	b.n	2a78e <usbd_event_handler+0x2e>
   2a8bc:	00031fcd 	.word	0x00031fcd
   2a8c0:	0003133c 	.word	0x0003133c
   2a8c4:	00032004 	.word	0x00032004
   2a8c8:	20000dbc 	.word	0x20000dbc
   2a8cc:	20000f28 	.word	0x20000f28

0002a8d0 <eps_ctx_init>:
{
   2a8d0:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   2a8d2:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   2a8d4:	f064 007f 	orn	r0, r4, #127	; 0x7f
   2a8d8:	b2c0      	uxtb	r0, r0
   2a8da:	f7ff fdbb 	bl	2a454 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   2a8de:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   2a8e0:	f005 fd6c 	bl	303bc <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   2a8e4:	2c08      	cmp	r4, #8
   2a8e6:	d1f5      	bne.n	2a8d4 <eps_ctx_init+0x4>
   2a8e8:	4d0e      	ldr	r5, [pc, #56]	; (2a924 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   2a8ea:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   2a8ec:	b2e0      	uxtb	r0, r4
   2a8ee:	f7ff fdb1 	bl	2a454 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   2a8f2:	6903      	ldr	r3, [r0, #16]
   2a8f4:	b903      	cbnz	r3, 2a8f8 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   2a8f6:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   2a8f8:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   2a8fa:	f005 fd5f 	bl	303bc <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   2a8fe:	2c08      	cmp	r4, #8
   2a900:	f105 0540 	add.w	r5, r5, #64	; 0x40
   2a904:	d1f2      	bne.n	2a8ec <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   2a906:	4808      	ldr	r0, [pc, #32]	; (2a928 <eps_ctx_init+0x58>)
   2a908:	f005 fd58 	bl	303bc <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   2a90c:	4b07      	ldr	r3, [pc, #28]	; (2a92c <eps_ctx_init+0x5c>)
   2a90e:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
   2a912:	b912      	cbnz	r2, 2a91a <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   2a914:	4a06      	ldr	r2, [pc, #24]	; (2a930 <eps_ctx_init+0x60>)
   2a916:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   2a91a:	4806      	ldr	r0, [pc, #24]	; (2a934 <eps_ctx_init+0x64>)
   2a91c:	f005 fd4e 	bl	303bc <ep_ctx_reset>
}
   2a920:	2000      	movs	r0, #0
   2a922:	bd38      	pop	{r3, r4, r5, pc}
   2a924:	2000144c 	.word	0x2000144c
   2a928:	20000f08 	.word	0x20000f08
   2a92c:	20000dbc 	.word	0x20000dbc
   2a930:	2000104c 	.word	0x2000104c
   2a934:	20001028 	.word	0x20001028

0002a938 <usbd_work_handler>:
{
   2a938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
   2a93c:	4ca3      	ldr	r4, [pc, #652]	; (2abcc <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   2a93e:	f8df a290 	ldr.w	sl, [pc, #656]	; 2abd0 <usbd_work_handler+0x298>
{
   2a942:	b086      	sub	sp, #24
   2a944:	4680      	mov	r8, r0
   2a946:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
   2a948:	f7ff fdc2 	bl	2a4d0 <usbd_evt_get>
   2a94c:	4606      	mov	r6, r0
   2a94e:	b918      	cbnz	r0, 2a958 <usbd_work_handler+0x20>
}
   2a950:	3718      	adds	r7, #24
   2a952:	46bd      	mov	sp, r7
   2a954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
   2a958:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   2a95c:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   2a95e:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   2a962:	b93a      	cbnz	r2, 2a974 <usbd_work_handler+0x3c>
   2a964:	2b00      	cmp	r3, #0
   2a966:	f000 80af 	beq.w	2aac8 <usbd_work_handler+0x190>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   2a96a:	4899      	ldr	r0, [pc, #612]	; (2abd0 <usbd_work_handler+0x298>)
   2a96c:	4649      	mov	r1, r9
   2a96e:	f006 f819 	bl	309a4 <k_mem_slab_free>
}
   2a972:	e7e9      	b.n	2a948 <usbd_work_handler+0x10>
		switch (ev->evt_type) {
   2a974:	2b04      	cmp	r3, #4
   2a976:	f200 8195 	bhi.w	2aca4 <usbd_work_handler+0x36c>
   2a97a:	e8df f013 	tbh	[pc, r3, lsl #1]
   2a97e:	00a5      	.short	0x00a5
   2a980:	013b0005 	.word	0x013b0005
   2a984:	01780151 	.word	0x01780151
			if (!ctx->attached) {
   2a988:	f818 3c04 	ldrb.w	r3, [r8, #-4]
   2a98c:	b983      	cbnz	r3, 2a9b0 <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
   2a98e:	68b3      	ldr	r3, [r6, #8]
   2a990:	466d      	mov	r5, sp
   2a992:	b088      	sub	sp, #32
   2a994:	7a5b      	ldrb	r3, [r3, #9]
   2a996:	466a      	mov	r2, sp
   2a998:	498e      	ldr	r1, [pc, #568]	; (2abd4 <usbd_work_handler+0x29c>)
   2a99a:	488f      	ldr	r0, [pc, #572]	; (2abd8 <usbd_work_handler+0x2a0>)
   2a99c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   2a9a0:	2303      	movs	r3, #3
   2a9a2:	f842 3f10 	str.w	r3, [r2, #16]!
   2a9a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2a9aa:	f005 fd1a 	bl	303e2 <z_log_msg_static_create.constprop.0>
   2a9ae:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
   2a9b0:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   2a9b2:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
   2a9b4:	2b03      	cmp	r3, #3
   2a9b6:	d839      	bhi.n	2aa2c <usbd_work_handler+0xf4>
   2a9b8:	e8df f003 	tbb	[pc, r3]
   2a9bc:	736e3f02 	.word	0x736e3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   2a9c0:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   2a9c2:	2208      	movs	r2, #8
   2a9c4:	2100      	movs	r1, #0
   2a9c6:	4630      	mov	r0, r6
   2a9c8:	f005 fcd1 	bl	3036e <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   2a9cc:	4b83      	ldr	r3, [pc, #524]	; (2abdc <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   2a9ce:	4884      	ldr	r0, [pc, #528]	; (2abe0 <usbd_work_handler+0x2a8>)
   2a9d0:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   2a9d4:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   2a9d6:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   2a9da:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   2a9dc:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   2a9e0:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   2a9e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   2a9e8:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   2a9ea:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   2a9ee:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   2a9f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   2a9f6:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   2a9f8:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   2a9fc:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   2aa00:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   2aa04:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   2aa06:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   2aa08:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   2aa0a:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   2aa0c:	f005 fca4 	bl	30358 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   2aa10:	682b      	ldr	r3, [r5, #0]
   2aa12:	7a68      	ldrb	r0, [r5, #9]
   2aa14:	2100      	movs	r1, #0
   2aa16:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   2aa18:	f996 3000 	ldrsb.w	r3, [r6]
   2aa1c:	2b00      	cmp	r3, #0
   2aa1e:	db08      	blt.n	2aa32 <usbd_work_handler+0xfa>
   2aa20:	88f3      	ldrh	r3, [r6, #6]
   2aa22:	b133      	cbz	r3, 2aa32 <usbd_work_handler+0xfa>
		ctx->ctrl_read_len = usbd_setup->wLength;
   2aa24:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   2aa28:	f002 fe9a 	bl	2d760 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   2aa2c:	4649      	mov	r1, r9
   2aa2e:	4650      	mov	r0, sl
   2aa30:	e79d      	b.n	2a96e <usbd_work_handler+0x36>
		ctx->ctrl_read_len = 0U;
   2aa32:	2300      	movs	r3, #0
   2aa34:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   2aa38:	e7f8      	b.n	2aa2c <usbd_work_handler+0xf4>
	if (!ep_ctx->read_pending) {
   2aa3a:	7f6b      	ldrb	r3, [r5, #29]
   2aa3c:	2b00      	cmp	r3, #0
   2aa3e:	d0f5      	beq.n	2aa2c <usbd_work_handler+0xf4>
	if (!ep_ctx->read_complete) {
   2aa40:	7f2b      	ldrb	r3, [r5, #28]
   2aa42:	2b00      	cmp	r3, #0
   2aa44:	d0f2      	beq.n	2aa2c <usbd_work_handler+0xf4>
	ep_ctx->read_pending = false;
   2aa46:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2aa48:	4866      	ldr	r0, [pc, #408]	; (2abe4 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
   2aa4a:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2aa4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2aa50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
   2aa54:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2aa56:	f005 fcc7 	bl	303e8 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   2aa5a:	696b      	ldr	r3, [r5, #20]
   2aa5c:	603b      	str	r3, [r7, #0]
   2aa5e:	686b      	ldr	r3, [r5, #4]
   2aa60:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   2aa64:	4639      	mov	r1, r7
   2aa66:	7a68      	ldrb	r0, [r5, #9]
   2aa68:	f002 fc80 	bl	2d36c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   2aa6c:	4b5e      	ldr	r3, [pc, #376]	; (2abe8 <usbd_work_handler+0x2b0>)
   2aa6e:	4298      	cmp	r0, r3
   2aa70:	d00e      	beq.n	2aa90 <usbd_work_handler+0x158>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
   2aa72:	466d      	mov	r5, sp
   2aa74:	b088      	sub	sp, #32
   2aa76:	466a      	mov	r2, sp
   2aa78:	4b5c      	ldr	r3, [pc, #368]	; (2abec <usbd_work_handler+0x2b4>)
   2aa7a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2aa7e:	2303      	movs	r3, #3
   2aa80:	f842 3f10 	str.w	r3, [r2, #16]!
   2aa84:	4854      	ldr	r0, [pc, #336]	; (2abd8 <usbd_work_handler+0x2a0>)
   2aa86:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2aa8a:	f005 fcaa 	bl	303e2 <z_log_msg_static_create.constprop.0>
   2aa8e:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
   2aa90:	4854      	ldr	r0, [pc, #336]	; (2abe4 <usbd_work_handler+0x2ac>)
   2aa92:	f005 fcab 	bl	303ec <k_mutex_unlock.isra.0>
   2aa96:	e7c9      	b.n	2aa2c <usbd_work_handler+0xf4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   2aa98:	682b      	ldr	r3, [r5, #0]
   2aa9a:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   2aa9c:	7a68      	ldrb	r0, [r5, #9]
   2aa9e:	4798      	blx	r3
		break;
   2aaa0:	e7c4      	b.n	2aa2c <usbd_work_handler+0xf4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   2aaa2:	7aab      	ldrb	r3, [r5, #10]
   2aaa4:	b96b      	cbnz	r3, 2aac2 <usbd_work_handler+0x18a>
   2aaa6:	7feb      	ldrb	r3, [r5, #31]
   2aaa8:	b95b      	cbnz	r3, 2aac2 <usbd_work_handler+0x18a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2aaaa:	484e      	ldr	r0, [pc, #312]	; (2abe4 <usbd_work_handler+0x2ac>)
   2aaac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2aab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2aab4:	f005 fc98 	bl	303e8 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   2aab8:	f002 fe82 	bl	2d7c0 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   2aabc:	4849      	ldr	r0, [pc, #292]	; (2abe4 <usbd_work_handler+0x2ac>)
   2aabe:	f005 fc95 	bl	303ec <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   2aac2:	682b      	ldr	r3, [r5, #0]
   2aac4:	2102      	movs	r1, #2
   2aac6:	e7e9      	b.n	2aa9c <usbd_work_handler+0x164>
	switch (pwr_evt->state) {
   2aac8:	7a33      	ldrb	r3, [r6, #8]
   2aaca:	2b04      	cmp	r3, #4
   2aacc:	d8ae      	bhi.n	2aa2c <usbd_work_handler+0xf4>
   2aace:	e8df f003 	tbb	[pc, r3]
   2aad2:	0359      	.short	0x0359
   2aad4:	6723      	.short	0x6723
   2aad6:	73          	.byte	0x73
   2aad7:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   2aad8:	f002 fbd0 	bl	2d27c <nrfx_usbd_is_enabled>
   2aadc:	4605      	mov	r5, r0
   2aade:	2800      	cmp	r0, #0
   2aae0:	d1a4      	bne.n	2aa2c <usbd_work_handler+0xf4>
			nrfx_usbd_enable();
   2aae2:	f002 fb07 	bl	2d0f4 <nrfx_usbd_enable>
   2aae6:	f3bf 8f5b 	dmb	ish
   2aaea:	4941      	ldr	r1, [pc, #260]	; (2abf0 <usbd_work_handler+0x2b8>)
   2aaec:	2301      	movs	r3, #1
   2aaee:	e851 2f00 	ldrex	r2, [r1]
   2aaf2:	2a00      	cmp	r2, #0
   2aaf4:	d103      	bne.n	2aafe <usbd_work_handler+0x1c6>
   2aaf6:	e841 3000 	strex	r0, r3, [r1]
   2aafa:	2800      	cmp	r0, #0
   2aafc:	d1f7      	bne.n	2aaee <usbd_work_handler+0x1b6>
   2aafe:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   2ab02:	d193      	bne.n	2aa2c <usbd_work_handler+0xf4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   2ab04:	f841 5c08 	str.w	r5, [r1, #-8]
   2ab08:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   2ab0c:	69e0      	ldr	r0, [r4, #28]
   2ab0e:	6163      	str	r3, [r4, #20]
   2ab10:	3914      	subs	r1, #20
   2ab12:	f004 fe4e 	bl	2f7b2 <onoff_request>
   2ab16:	e789      	b.n	2aa2c <usbd_work_handler+0xf4>
	switch (pwr_evt->state) {
   2ab18:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   2ab1a:	f065 007f 	orn	r0, r5, #127	; 0x7f
   2ab1e:	b2c0      	uxtb	r0, r0
   2ab20:	f7ff fc98 	bl	2a454 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2ab24:	7a03      	ldrb	r3, [r0, #8]
   2ab26:	b113      	cbz	r3, 2ab2e <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2ab28:	7a40      	ldrb	r0, [r0, #9]
   2ab2a:	f002 fff9 	bl	2db20 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   2ab2e:	3501      	adds	r5, #1
   2ab30:	2d08      	cmp	r5, #8
   2ab32:	d1f2      	bne.n	2ab1a <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
   2ab34:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   2ab38:	b11b      	cbz	r3, 2ab42 <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2ab3a:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   2ab3e:	f002 ffef 	bl	2db20 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   2ab42:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   2ab44:	b2e8      	uxtb	r0, r5
   2ab46:	f7ff fc85 	bl	2a454 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2ab4a:	7a03      	ldrb	r3, [r0, #8]
   2ab4c:	b113      	cbz	r3, 2ab54 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2ab4e:	7a40      	ldrb	r0, [r0, #9]
   2ab50:	f002 ffe6 	bl	2db20 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   2ab54:	3501      	adds	r5, #1
   2ab56:	2d08      	cmp	r5, #8
   2ab58:	d1f4      	bne.n	2ab44 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
   2ab5a:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   2ab5e:	b11b      	cbz	r3, 2ab68 <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2ab60:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   2ab64:	f002 ffdc 	bl	2db20 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(IS_ENABLED(CONFIG_USB_DEVICE_SOF));
   2ab68:	2000      	movs	r0, #0
   2ab6a:	f002 fb69 	bl	2d240 <nrfx_usbd_start>
		ctx->ready = true;
   2ab6e:	2301      	movs	r3, #1
   2ab70:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   2ab74:	6823      	ldr	r3, [r4, #0]
   2ab76:	2b00      	cmp	r3, #0
   2ab78:	f43f af58 	beq.w	2aa2c <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   2ab7c:	2100      	movs	r1, #0
   2ab7e:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
   2ab80:	4798      	blx	r3
   2ab82:	e753      	b.n	2aa2c <usbd_work_handler+0xf4>
		ctx->ready = false;
   2ab84:	2500      	movs	r5, #0
   2ab86:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   2ab8a:	f002 ff85 	bl	2da98 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   2ab8e:	f7ff fdc7 	bl	2a720 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   2ab92:	6823      	ldr	r3, [r4, #0]
   2ab94:	2b00      	cmp	r3, #0
   2ab96:	f43f af49 	beq.w	2aa2c <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   2ab9a:	4629      	mov	r1, r5
   2ab9c:	2004      	movs	r0, #4
   2ab9e:	e7ef      	b.n	2ab80 <usbd_work_handler+0x248>
		if (dev_ready()) {
   2aba0:	2a00      	cmp	r2, #0
   2aba2:	f43f af43 	beq.w	2aa2c <usbd_work_handler+0xf4>
			nrfx_usbd_suspend();
   2aba6:	f002 fb73 	bl	2d290 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   2abaa:	6823      	ldr	r3, [r4, #0]
   2abac:	2b00      	cmp	r3, #0
   2abae:	f43f af3d 	beq.w	2aa2c <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   2abb2:	2100      	movs	r1, #0
   2abb4:	2005      	movs	r0, #5
   2abb6:	e7e3      	b.n	2ab80 <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
   2abb8:	6823      	ldr	r3, [r4, #0]
   2abba:	2b00      	cmp	r3, #0
   2abbc:	f43f af36 	beq.w	2aa2c <usbd_work_handler+0xf4>
   2abc0:	2a00      	cmp	r2, #0
   2abc2:	f43f af33 	beq.w	2aa2c <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_RESUME, NULL);
   2abc6:	2100      	movs	r1, #0
   2abc8:	2006      	movs	r0, #6
   2abca:	e7d9      	b.n	2ab80 <usbd_work_handler+0x248>
   2abcc:	20000dbc 	.word	0x20000dbc
   2abd0:	20000284 	.word	0x20000284
   2abd4:	00032024 	.word	0x00032024
   2abd8:	0003133c 	.word	0x0003133c
   2abdc:	40027000 	.word	0x40027000
   2abe0:	20000dc0 	.word	0x20000dc0
   2abe4:	20000df4 	.word	0x20000df4
   2abe8:	0bad0000 	.word	0x0bad0000
   2abec:	0003204a 	.word	0x0003204a
   2abf0:	20000ddc 	.word	0x20000ddc
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2abf4:	f108 0510 	add.w	r5, r8, #16
   2abf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2abfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ac00:	4628      	mov	r0, r5
   2ac02:	f005 fbf1 	bl	303e8 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   2ac06:	f7ff fe63 	bl	2a8d0 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   2ac0a:	4628      	mov	r0, r5
   2ac0c:	f005 fbee 	bl	303ec <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   2ac10:	f858 3c28 	ldr.w	r3, [r8, #-40]
   2ac14:	2b00      	cmp	r3, #0
   2ac16:	f43f af09 	beq.w	2aa2c <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_RESET, NULL);
   2ac1a:	2100      	movs	r1, #0
   2ac1c:	2001      	movs	r0, #1
   2ac1e:	e7af      	b.n	2ab80 <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
   2ac20:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   2ac24:	b193      	cbz	r3, 2ac4c <usbd_work_handler+0x314>
		ep_ctx->read_pending = true;
   2ac26:	2501      	movs	r5, #1
   2ac28:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   2ac2c:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   2ac30:	f7ff fc64 	bl	2a4fc <usbd_evt_alloc>
		if (!ev) {
   2ac34:	b990      	cbnz	r0, 2ac5c <usbd_work_handler+0x324>
			LOG_ERR("Failed to alloc evt");
   2ac36:	4b23      	ldr	r3, [pc, #140]	; (2acc4 <usbd_work_handler+0x38c>)
   2ac38:	617b      	str	r3, [r7, #20]
   2ac3a:	2302      	movs	r3, #2
   2ac3c:	4822      	ldr	r0, [pc, #136]	; (2acc8 <usbd_work_handler+0x390>)
   2ac3e:	613b      	str	r3, [r7, #16]
   2ac40:	f107 0210 	add.w	r2, r7, #16
   2ac44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2ac48:	f005 fbcb 	bl	303e2 <z_log_msg_static_create.constprop.0>
			if (ctx->status_cb) {
   2ac4c:	f858 3c28 	ldr.w	r3, [r8, #-40]
   2ac50:	2b00      	cmp	r3, #0
   2ac52:	f43f aeeb 	beq.w	2aa2c <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SOF, NULL);
   2ac56:	2100      	movs	r1, #0
   2ac58:	200a      	movs	r0, #10
   2ac5a:	e791      	b.n	2ab80 <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
   2ac5c:	4a1b      	ldr	r2, [pc, #108]	; (2accc <usbd_work_handler+0x394>)
		ev->evt_type = USBD_EVT_EP;
   2ac5e:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   2ac60:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   2ac62:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   2ac64:	f7ff fc2e 	bl	2a4c4 <usbd_evt_put>
		usbd_work_schedule();
   2ac68:	f7ff fc24 	bl	2a4b4 <usbd_work_schedule>
   2ac6c:	e7ee      	b.n	2ac4c <usbd_work_handler+0x314>
				LOG_ERR("USBD event queue full!");
   2ac6e:	4b18      	ldr	r3, [pc, #96]	; (2acd0 <usbd_work_handler+0x398>)
   2ac70:	617b      	str	r3, [r7, #20]
   2ac72:	2302      	movs	r3, #2
   2ac74:	613b      	str	r3, [r7, #16]
   2ac76:	f107 0210 	add.w	r2, r7, #16
   2ac7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2ac7e:	4812      	ldr	r0, [pc, #72]	; (2acc8 <usbd_work_handler+0x390>)
   2ac80:	f005 fbaf 	bl	303e2 <z_log_msg_static_create.constprop.0>
	nrfx_power_usbevt_disable();
   2ac84:	f005 fda8 	bl	307d8 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   2ac88:	f002 ff06 	bl	2da98 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   2ac8c:	f002 fa28 	bl	2d0e0 <nrfx_usbd_uninit>
	usbd_evt_flush();
   2ac90:	f7ff fc26 	bl	2a4e0 <usbd_evt_flush>
	ret = eps_ctx_init();
   2ac94:	f7ff fe1c 	bl	2a8d0 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   2ac98:	f005 fd97 	bl	307ca <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   2ac9c:	480d      	ldr	r0, [pc, #52]	; (2acd4 <usbd_work_handler+0x39c>)
   2ac9e:	f002 fb23 	bl	2d2e8 <nrfx_usbd_init>
}
   2aca2:	e6c3      	b.n	2aa2c <usbd_work_handler+0xf4>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   2aca4:	466d      	mov	r5, sp
   2aca6:	b088      	sub	sp, #32
   2aca8:	466a      	mov	r2, sp
   2acaa:	490b      	ldr	r1, [pc, #44]	; (2acd8 <usbd_work_handler+0x3a0>)
   2acac:	4806      	ldr	r0, [pc, #24]	; (2acc8 <usbd_work_handler+0x390>)
		switch (ev->evt_type) {
   2acae:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   2acb2:	2303      	movs	r3, #3
   2acb4:	f842 3f10 	str.w	r3, [r2, #16]!
   2acb8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2acbc:	f005 fb91 	bl	303e2 <z_log_msg_static_create.constprop.0>
   2acc0:	46ad      	mov	sp, r5
   2acc2:	e6b3      	b.n	2aa2c <usbd_work_handler+0xf4>
   2acc4:	00032070 	.word	0x00032070
   2acc8:	0003133c 	.word	0x0003133c
   2accc:	20001028 	.word	0x20001028
   2acd0:	00032084 	.word	0x00032084
   2acd4:	0002a761 	.word	0x0002a761
   2acd8:	0003209b 	.word	0x0003209b

0002acdc <usb_dc_attach>:
{
   2acdc:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   2acde:	4d16      	ldr	r5, [pc, #88]	; (2ad38 <usb_dc_attach+0x5c>)
   2ace0:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   2ace4:	bb2c      	cbnz	r4, 2ad32 <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
   2ace6:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2acea:	f005 fea0 	bl	30a2e <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   2acee:	4620      	mov	r0, r4
   2acf0:	f000 fe06 	bl	2b900 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2acf4:	4622      	mov	r2, r4
   2acf6:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
   2acf8:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2acfa:	2027      	movs	r0, #39	; 0x27
   2acfc:	f7fe feb2 	bl	29a64 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
   2ad00:	f005 fd63 	bl	307ca <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   2ad04:	f7ff fde4 	bl	2a8d0 <eps_ctx_init>
	if (ret == 0) {
   2ad08:	4604      	mov	r4, r0
   2ad0a:	b910      	cbnz	r0, 2ad12 <usb_dc_attach+0x36>
		ctx->attached = true;
   2ad0c:	2301      	movs	r3, #1
   2ad0e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   2ad12:	4b0a      	ldr	r3, [pc, #40]	; (2ad3c <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   2ad14:	681b      	ldr	r3, [r3, #0]
   2ad16:	b10b      	cbz	r3, 2ad1c <usb_dc_attach+0x40>
		usbd_work_schedule();
   2ad18:	f7ff fbcc 	bl	2a4b4 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   2ad1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2ad20:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   2ad24:	07db      	lsls	r3, r3, #31
   2ad26:	d502      	bpl.n	2ad2e <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   2ad28:	2000      	movs	r0, #0
   2ad2a:	f7ff fc23 	bl	2a574 <usb_dc_power_event_handler>
}
   2ad2e:	4620      	mov	r0, r4
   2ad30:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2ad32:	2400      	movs	r4, #0
   2ad34:	e7fb      	b.n	2ad2e <usb_dc_attach+0x52>
   2ad36:	bf00      	nop
   2ad38:	20000dbc 	.word	0x20000dbc
   2ad3c:	200002d8 	.word	0x200002d8

0002ad40 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   2ad40:	4b07      	ldr	r3, [pc, #28]	; (2ad60 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   2ad42:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   2ad46:	b13a      	cbz	r2, 2ad58 <usb_dc_set_address+0x18>
   2ad48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
   2ad4c:	2b00      	cmp	r3, #0
   2ad4e:	bf14      	ite	ne
   2ad50:	2000      	movne	r0, #0
   2ad52:	f06f 0012 	mvneq.w	r0, #18
   2ad56:	4770      	bx	lr
   2ad58:	f06f 0012 	mvn.w	r0, #18
}
   2ad5c:	4770      	bx	lr
   2ad5e:	bf00      	nop
   2ad60:	20000dbc 	.word	0x20000dbc

0002ad64 <usb_dc_ep_check_cap>:
{
   2ad64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2ad66:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   2ad68:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   2ad6a:	791b      	ldrb	r3, [r3, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   2ad6c:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   2ad70:	b97b      	cbnz	r3, 2ad92 <usb_dc_ep_check_cap+0x2e>
   2ad72:	b158      	cbz	r0, 2ad8c <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
   2ad74:	4b10      	ldr	r3, [pc, #64]	; (2adb8 <usb_dc_ep_check_cap+0x54>)
		LOG_ERR("invalid endpoint index/address");
   2ad76:	9305      	str	r3, [sp, #20]
   2ad78:	2302      	movs	r3, #2
   2ad7a:	9304      	str	r3, [sp, #16]
   2ad7c:	aa04      	add	r2, sp, #16
   2ad7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2ad82:	480e      	ldr	r0, [pc, #56]	; (2adbc <usb_dc_ep_check_cap+0x58>)
   2ad84:	f005 fb2d 	bl	303e2 <z_log_msg_static_create.constprop.0>
		return -1;
   2ad88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2ad8c:	b007      	add	sp, #28
   2ad8e:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   2ad92:	2808      	cmp	r0, #8
   2ad94:	d901      	bls.n	2ad9a <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
   2ad96:	4b0a      	ldr	r3, [pc, #40]	; (2adc0 <usb_dc_ep_check_cap+0x5c>)
   2ad98:	e7ed      	b.n	2ad76 <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   2ad9a:	2b01      	cmp	r3, #1
   2ad9c:	d109      	bne.n	2adb2 <usb_dc_ep_check_cap+0x4e>
   2ad9e:	0713      	lsls	r3, r2, #28
   2ada0:	d407      	bmi.n	2adb2 <usb_dc_ep_check_cap+0x4e>
		LOG_WRN("invalid endpoint type");
   2ada2:	4b08      	ldr	r3, [pc, #32]	; (2adc4 <usb_dc_ep_check_cap+0x60>)
   2ada4:	9305      	str	r3, [sp, #20]
   2ada6:	2302      	movs	r3, #2
   2ada8:	9304      	str	r3, [sp, #16]
   2adaa:	aa04      	add	r2, sp, #16
   2adac:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   2adb0:	e7e7      	b.n	2ad82 <usb_dc_ep_check_cap+0x1e>
	return 0;
   2adb2:	2000      	movs	r0, #0
   2adb4:	e7ea      	b.n	2ad8c <usb_dc_ep_check_cap+0x28>
   2adb6:	bf00      	nop
   2adb8:	000320b2 	.word	0x000320b2
   2adbc:	0003133c 	.word	0x0003133c
   2adc0:	000320d1 	.word	0x000320d1
   2adc4:	000320f0 	.word	0x000320f0

0002adc8 <usb_dc_ep_configure>:
{
   2adc8:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
   2adca:	4b16      	ldr	r3, [pc, #88]	; (2ae24 <usb_dc_ep_configure+0x5c>)
	if (!dev_attached()) {
   2adcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   2add0:	b087      	sub	sp, #28
   2add2:	4604      	mov	r4, r0
	if (!dev_attached()) {
   2add4:	b31b      	cbz	r3, 2ae1e <usb_dc_ep_configure+0x56>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   2add6:	7805      	ldrb	r5, [r0, #0]
   2add8:	4628      	mov	r0, r5
   2adda:	f7ff fb3b 	bl	2a454 <endpoint_ctx>
	if (!ep_ctx) {
   2adde:	b1b0      	cbz	r0, 2ae0e <usb_dc_ep_configure+0x46>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   2ade0:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   2ade2:	7923      	ldrb	r3, [r4, #4]
   2ade4:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   2ade6:	8863      	ldrh	r3, [r4, #2]
   2ade8:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   2adea:	7820      	ldrb	r0, [r4, #0]
   2adec:	8861      	ldrh	r1, [r4, #2]
   2adee:	f010 0f08 	tst.w	r0, #8
   2adf2:	d110      	bne.n	2ae16 <usb_dc_ep_configure+0x4e>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   2adf4:	1e4b      	subs	r3, r1, #1
   2adf6:	420b      	tst	r3, r1
   2adf8:	d00d      	beq.n	2ae16 <usb_dc_ep_configure+0x4e>
			LOG_ERR("EP max packet size must be a power of 2");
   2adfa:	4b0b      	ldr	r3, [pc, #44]	; (2ae28 <usb_dc_ep_configure+0x60>)
   2adfc:	9305      	str	r3, [sp, #20]
   2adfe:	480b      	ldr	r0, [pc, #44]	; (2ae2c <usb_dc_ep_configure+0x64>)
   2ae00:	2302      	movs	r3, #2
   2ae02:	aa04      	add	r2, sp, #16
   2ae04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2ae08:	9304      	str	r3, [sp, #16]
   2ae0a:	f005 faea 	bl	303e2 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   2ae0e:	f06f 0015 	mvn.w	r0, #21
}
   2ae12:	b007      	add	sp, #28
   2ae14:	bd30      	pop	{r4, r5, pc}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   2ae16:	f005 fd63 	bl	308e0 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   2ae1a:	2000      	movs	r0, #0
   2ae1c:	e7f9      	b.n	2ae12 <usb_dc_ep_configure+0x4a>
		return -ENODEV;
   2ae1e:	f06f 0012 	mvn.w	r0, #18
   2ae22:	e7f6      	b.n	2ae12 <usb_dc_ep_configure+0x4a>
   2ae24:	20000dbc 	.word	0x20000dbc
   2ae28:	00032106 	.word	0x00032106
   2ae2c:	0003133c 	.word	0x0003133c

0002ae30 <usb_dc_ep_set_stall>:
{
   2ae30:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
   2ae32:	4b19      	ldr	r3, [pc, #100]	; (2ae98 <usb_dc_ep_set_stall+0x68>)
	if (!dev_attached() || !dev_ready()) {
   2ae34:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   2ae38:	b087      	sub	sp, #28
   2ae3a:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   2ae3c:	b342      	cbz	r2, 2ae90 <usb_dc_ep_set_stall+0x60>
   2ae3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   2ae42:	b32b      	cbz	r3, 2ae90 <usb_dc_ep_set_stall+0x60>
	ep_ctx = endpoint_ctx(ep);
   2ae44:	f7ff fb06 	bl	2a454 <endpoint_ctx>
	if (!ep_ctx) {
   2ae48:	4604      	mov	r4, r0
   2ae4a:	b918      	cbnz	r0, 2ae54 <usb_dc_ep_set_stall+0x24>
		return -EINVAL;
   2ae4c:	f06f 0015 	mvn.w	r0, #21
}
   2ae50:	b007      	add	sp, #28
   2ae52:	bd30      	pop	{r4, r5, pc}
	switch (ep_ctx->cfg.type) {
   2ae54:	7a83      	ldrb	r3, [r0, #10]
   2ae56:	2b01      	cmp	r3, #1
   2ae58:	d00f      	beq.n	2ae7a <usb_dc_ep_set_stall+0x4a>
   2ae5a:	d907      	bls.n	2ae6c <usb_dc_ep_set_stall+0x3c>
   2ae5c:	3b02      	subs	r3, #2
   2ae5e:	2b01      	cmp	r3, #1
   2ae60:	d907      	bls.n	2ae72 <usb_dc_ep_set_stall+0x42>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   2ae62:	6963      	ldr	r3, [r4, #20]
   2ae64:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   2ae66:	2000      	movs	r0, #0
   2ae68:	60e0      	str	r0, [r4, #12]
	return 0;
   2ae6a:	e7f1      	b.n	2ae50 <usb_dc_ep_set_stall+0x20>
		nrfx_usbd_setup_stall();
   2ae6c:	f002 fcb0 	bl	2d7d0 <nrfx_usbd_setup_stall>
		break;
   2ae70:	e7f7      	b.n	2ae62 <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   2ae72:	4628      	mov	r0, r5
   2ae74:	f002 fc20 	bl	2d6b8 <nrfx_usbd_ep_stall>
		break;
   2ae78:	e7f3      	b.n	2ae62 <usb_dc_ep_set_stall+0x32>
		LOG_ERR("STALL unsupported on ISO endpoint");
   2ae7a:	4b08      	ldr	r3, [pc, #32]	; (2ae9c <usb_dc_ep_set_stall+0x6c>)
   2ae7c:	9305      	str	r3, [sp, #20]
   2ae7e:	4808      	ldr	r0, [pc, #32]	; (2aea0 <usb_dc_ep_set_stall+0x70>)
   2ae80:	2302      	movs	r3, #2
   2ae82:	aa04      	add	r2, sp, #16
   2ae84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2ae88:	9304      	str	r3, [sp, #16]
   2ae8a:	f005 faaa 	bl	303e2 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   2ae8e:	e7dd      	b.n	2ae4c <usb_dc_ep_set_stall+0x1c>
		return -ENODEV;
   2ae90:	f06f 0012 	mvn.w	r0, #18
   2ae94:	e7dc      	b.n	2ae50 <usb_dc_ep_set_stall+0x20>
   2ae96:	bf00      	nop
   2ae98:	20000dbc 	.word	0x20000dbc
   2ae9c:	0003212e 	.word	0x0003212e
   2aea0:	0003133c 	.word	0x0003133c

0002aea4 <usb_dc_ep_clear_stall>:
{
   2aea4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   2aea6:	4b0e      	ldr	r3, [pc, #56]	; (2aee0 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   2aea8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   2aeac:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   2aeae:	b182      	cbz	r2, 2aed2 <usb_dc_ep_clear_stall+0x2e>
   2aeb0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   2aeb4:	b16b      	cbz	r3, 2aed2 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   2aeb6:	f7ff facd 	bl	2a454 <endpoint_ctx>
	if (!ep_ctx) {
   2aeba:	b168      	cbz	r0, 2aed8 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   2aebc:	f015 0408 	ands.w	r4, r5, #8
   2aec0:	d10a      	bne.n	2aed8 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   2aec2:	4628      	mov	r0, r5
   2aec4:	f002 fc1a 	bl	2d6fc <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   2aec8:	4628      	mov	r0, r5
   2aeca:	f002 fe7d 	bl	2dbc8 <nrfx_usbd_ep_stall_clear>
	return 0;
   2aece:	4620      	mov	r0, r4
}
   2aed0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   2aed2:	f06f 0012 	mvn.w	r0, #18
   2aed6:	e7fb      	b.n	2aed0 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   2aed8:	f06f 0015 	mvn.w	r0, #21
   2aedc:	e7f8      	b.n	2aed0 <usb_dc_ep_clear_stall+0x2c>
   2aede:	bf00      	nop
   2aee0:	20000dbc 	.word	0x20000dbc

0002aee4 <usb_dc_ep_is_stalled>:
{
   2aee4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   2aee6:	4b0c      	ldr	r3, [pc, #48]	; (2af18 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   2aee8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   2aeec:	4605      	mov	r5, r0
   2aeee:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   2aef0:	b162      	cbz	r2, 2af0c <usb_dc_ep_is_stalled+0x28>
   2aef2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   2aef6:	b14b      	cbz	r3, 2af0c <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   2aef8:	f7ff faac 	bl	2a454 <endpoint_ctx>
	if (!ep_ctx) {
   2aefc:	b148      	cbz	r0, 2af12 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   2aefe:	b144      	cbz	r4, 2af12 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   2af00:	4628      	mov	r0, r5
   2af02:	f002 fbe1 	bl	2d6c8 <nrfx_usbd_ep_stall_check>
   2af06:	7020      	strb	r0, [r4, #0]
	return 0;
   2af08:	2000      	movs	r0, #0
}
   2af0a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   2af0c:	f06f 0012 	mvn.w	r0, #18
   2af10:	e7fb      	b.n	2af0a <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   2af12:	f06f 0015 	mvn.w	r0, #21
   2af16:	e7f8      	b.n	2af0a <usb_dc_ep_is_stalled+0x26>
   2af18:	20000dbc 	.word	0x20000dbc

0002af1c <usb_dc_ep_enable>:
{
   2af1c:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   2af1e:	4e13      	ldr	r6, [pc, #76]	; (2af6c <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   2af20:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
   2af24:	4604      	mov	r4, r0
	if (!dev_attached()) {
   2af26:	b1c3      	cbz	r3, 2af5a <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
   2af28:	f7ff fa94 	bl	2a454 <endpoint_ctx>
	if (!ep_ctx) {
   2af2c:	4605      	mov	r5, r0
   2af2e:	b1b8      	cbz	r0, 2af60 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   2af30:	0723      	lsls	r3, r4, #28
   2af32:	d405      	bmi.n	2af40 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   2af34:	4620      	mov	r0, r4
   2af36:	f002 fbe1 	bl	2d6fc <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   2af3a:	4620      	mov	r0, r4
   2af3c:	f002 fe44 	bl	2dbc8 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   2af40:	7a2b      	ldrb	r3, [r5, #8]
   2af42:	b983      	cbnz	r3, 2af66 <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
   2af44:	2301      	movs	r3, #1
   2af46:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   2af48:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
   2af4c:	b90b      	cbnz	r3, 2af52 <usb_dc_ep_enable+0x36>
	return 0;
   2af4e:	2000      	movs	r0, #0
}
   2af50:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   2af52:	4620      	mov	r0, r4
   2af54:	f002 fde4 	bl	2db20 <nrfx_usbd_ep_enable>
   2af58:	e7f9      	b.n	2af4e <usb_dc_ep_enable+0x32>
		return -ENODEV;
   2af5a:	f06f 0012 	mvn.w	r0, #18
   2af5e:	e7f7      	b.n	2af50 <usb_dc_ep_enable+0x34>
		return -EINVAL;
   2af60:	f06f 0015 	mvn.w	r0, #21
   2af64:	e7f4      	b.n	2af50 <usb_dc_ep_enable+0x34>
		return -EALREADY;
   2af66:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2af6a:	e7f1      	b.n	2af50 <usb_dc_ep_enable+0x34>
   2af6c:	20000dbc 	.word	0x20000dbc

0002af70 <usb_dc_ep_write>:
{
   2af70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
   2af74:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2b09c <usb_dc_ep_write+0x12c>
{
   2af78:	b084      	sub	sp, #16
   2af7a:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
   2af7c:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
   2af80:	af00      	add	r7, sp, #0
   2af82:	4680      	mov	r8, r0
   2af84:	468a      	mov	sl, r1
   2af86:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
   2af88:	2b00      	cmp	r3, #0
   2af8a:	f000 8083 	beq.w	2b094 <usb_dc_ep_write+0x124>
   2af8e:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
   2af92:	2b00      	cmp	r3, #0
   2af94:	d07e      	beq.n	2b094 <usb_dc_ep_write+0x124>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   2af96:	f010 0f80 	tst.w	r0, #128	; 0x80
   2af9a:	d014      	beq.n	2afc6 <usb_dc_ep_write+0x56>
	ep_ctx = endpoint_ctx(ep);
   2af9c:	f7ff fa5a 	bl	2a454 <endpoint_ctx>
	if (!ep_ctx) {
   2afa0:	4604      	mov	r4, r0
   2afa2:	b180      	cbz	r0, 2afc6 <usb_dc_ep_write+0x56>
	if (!ep_ctx->cfg.en) {
   2afa4:	7a03      	ldrb	r3, [r0, #8]
   2afa6:	b9ab      	cbnz	r3, 2afd4 <usb_dc_ep_write+0x64>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   2afa8:	466c      	mov	r4, sp
   2afaa:	b088      	sub	sp, #32
   2afac:	466a      	mov	r2, sp
   2afae:	4b3c      	ldr	r3, [pc, #240]	; (2b0a0 <usb_dc_ep_write+0x130>)
   2afb0:	483c      	ldr	r0, [pc, #240]	; (2b0a4 <usb_dc_ep_write+0x134>)
   2afb2:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2afb6:	2303      	movs	r3, #3
   2afb8:	f842 3f10 	str.w	r3, [r2, #16]!
   2afbc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2afc0:	f005 fa0f 	bl	303e2 <z_log_msg_static_create.constprop.0>
   2afc4:	46a5      	mov	sp, r4
		return -EINVAL;
   2afc6:	f06f 0415 	mvn.w	r4, #21
}
   2afca:	4620      	mov	r0, r4
   2afcc:	3710      	adds	r7, #16
   2afce:	46bd      	mov	sp, r7
   2afd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2afd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2afd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2afdc:	f109 0038 	add.w	r0, r9, #56	; 0x38
   2afe0:	f005 fa02 	bl	303e8 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   2afe4:	7fa3      	ldrb	r3, [r4, #30]
   2afe6:	b133      	cbz	r3, 2aff6 <usb_dc_ep_write+0x86>
		k_mutex_unlock(&ctx->drv_lock);
   2afe8:	f109 0038 	add.w	r0, r9, #56	; 0x38
   2afec:	f005 f9fe 	bl	303ec <k_mutex_unlock.isra.0>
		return -EAGAIN;
   2aff0:	f06f 040a 	mvn.w	r4, #10
   2aff4:	e7e9      	b.n	2afca <usb_dc_ep_write+0x5a>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   2aff6:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
   2aff8:	b355      	cbz	r5, 2b050 <usb_dc_ep_write+0xe0>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   2affa:	2b00      	cmp	r3, #0
   2affc:	d038      	beq.n	2b070 <usb_dc_ep_write+0x100>
	ep_ctx->write_in_progress = true;
   2affe:	2301      	movs	r3, #1
   2b000:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   2b002:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   2b006:	1d39      	adds	r1, r7, #4
   2b008:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   2b00a:	e9c7 a501 	strd	sl, r5, [r7, #4]
   2b00e:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   2b012:	f002 f9ab 	bl	2d36c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   2b016:	4b24      	ldr	r3, [pc, #144]	; (2b0a8 <usb_dc_ep_write+0x138>)
   2b018:	4298      	cmp	r0, r3
   2b01a:	d037      	beq.n	2b08c <usb_dc_ep_write+0x11c>
		ep_ctx->write_in_progress = false;
   2b01c:	f884 901e 	strb.w	r9, [r4, #30]
		if (ret_bytes) {
   2b020:	b10e      	cbz	r6, 2b026 <usb_dc_ep_write+0xb6>
			*ret_bytes = 0;
   2b022:	f8c6 9000 	str.w	r9, [r6]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
   2b026:	466c      	mov	r4, sp
   2b028:	b088      	sub	sp, #32
   2b02a:	466a      	mov	r2, sp
   2b02c:	4b1f      	ldr	r3, [pc, #124]	; (2b0ac <usb_dc_ep_write+0x13c>)
   2b02e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   2b032:	2303      	movs	r3, #3
   2b034:	f842 3f10 	str.w	r3, [r2, #16]!
   2b038:	481a      	ldr	r0, [pc, #104]	; (2b0a4 <usb_dc_ep_write+0x134>)
   2b03a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2b03e:	f005 f9d0 	bl	303e2 <z_log_msg_static_create.constprop.0>
   2b042:	46a5      	mov	sp, r4
		result = -EIO;
   2b044:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
   2b048:	4819      	ldr	r0, [pc, #100]	; (2b0b0 <usb_dc_ep_write+0x140>)
   2b04a:	f005 f9cf 	bl	303ec <k_mutex_unlock.isra.0>
	return result;
   2b04e:	e7bc      	b.n	2afca <usb_dc_ep_write+0x5a>
	if (!data_len && ep_ctx->trans_zlp) {
   2b050:	7fe2      	ldrb	r2, [r4, #31]
   2b052:	b102      	cbz	r2, 2b056 <usb_dc_ep_write+0xe6>
		ep_ctx->trans_zlp = false;
   2b054:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   2b056:	2b00      	cmp	r3, #0
   2b058:	d1d1      	bne.n	2affe <usb_dc_ep_write+0x8e>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   2b05a:	f002 fbc1 	bl	2d7e0 <nrfx_usbd_last_setup_dir_get>
   2b05e:	4580      	cmp	r8, r0
   2b060:	d0cd      	beq.n	2affe <usb_dc_ep_write+0x8e>
		nrfx_usbd_setup_clear();
   2b062:	f002 fbad 	bl	2d7c0 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   2b066:	4812      	ldr	r0, [pc, #72]	; (2b0b0 <usb_dc_ep_write+0x140>)
   2b068:	f005 f9c0 	bl	303ec <k_mutex_unlock.isra.0>
		return 0;
   2b06c:	2400      	movs	r4, #0
   2b06e:	e7ac      	b.n	2afca <usb_dc_ep_write+0x5a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   2b070:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   2b074:	429d      	cmp	r5, r3
   2b076:	d2f0      	bcs.n	2b05a <usb_dc_ep_write+0xea>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   2b078:	6862      	ldr	r2, [r4, #4]
   2b07a:	fbb5 f3f2 	udiv	r3, r5, r2
   2b07e:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   2b082:	2b00      	cmp	r3, #0
   2b084:	d1e9      	bne.n	2b05a <usb_dc_ep_write+0xea>
			ep_ctx->trans_zlp = true;
   2b086:	2301      	movs	r3, #1
   2b088:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   2b08a:	e7e6      	b.n	2b05a <usb_dc_ep_write+0xea>
		if (ret_bytes) {
   2b08c:	b106      	cbz	r6, 2b090 <usb_dc_ep_write+0x120>
			*ret_bytes = data_len;
   2b08e:	6035      	str	r5, [r6, #0]
	int result = 0;
   2b090:	2400      	movs	r4, #0
   2b092:	e7d9      	b.n	2b048 <usb_dc_ep_write+0xd8>
		return -ENODEV;
   2b094:	f06f 0412 	mvn.w	r4, #18
   2b098:	e797      	b.n	2afca <usb_dc_ep_write+0x5a>
   2b09a:	bf00      	nop
   2b09c:	20000dbc 	.word	0x20000dbc
   2b0a0:	00032150 	.word	0x00032150
   2b0a4:	0003133c 	.word	0x0003133c
   2b0a8:	0bad0000 	.word	0x0bad0000
   2b0ac:	0003216f 	.word	0x0003216f
   2b0b0:	20000df4 	.word	0x20000df4

0002b0b4 <usb_dc_ep_read_wait>:
{
   2b0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b0b8:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   2b0ba:	4b2d      	ldr	r3, [pc, #180]	; (2b170 <usb_dc_ep_read_wait+0xbc>)
{
   2b0bc:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
   2b0be:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   2b0c2:	af00      	add	r7, sp, #0
   2b0c4:	4681      	mov	r9, r0
   2b0c6:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   2b0c8:	2a00      	cmp	r2, #0
   2b0ca:	d04d      	beq.n	2b168 <usb_dc_ep_read_wait+0xb4>
   2b0cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   2b0d0:	2b00      	cmp	r3, #0
   2b0d2:	d049      	beq.n	2b168 <usb_dc_ep_read_wait+0xb4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   2b0d4:	f010 0f80 	tst.w	r0, #128	; 0x80
   2b0d8:	d119      	bne.n	2b10e <usb_dc_ep_read_wait+0x5a>
	if (!data && max_data_len) {
   2b0da:	b911      	cbnz	r1, 2b0e2 <usb_dc_ep_read_wait+0x2e>
   2b0dc:	f1b8 0f00 	cmp.w	r8, #0
   2b0e0:	d115      	bne.n	2b10e <usb_dc_ep_read_wait+0x5a>
	ep_ctx = endpoint_ctx(ep);
   2b0e2:	4648      	mov	r0, r9
   2b0e4:	f7ff f9b6 	bl	2a454 <endpoint_ctx>
	if (!ep_ctx) {
   2b0e8:	4604      	mov	r4, r0
   2b0ea:	b180      	cbz	r0, 2b10e <usb_dc_ep_read_wait+0x5a>
	if (!ep_ctx->cfg.en) {
   2b0ec:	7a03      	ldrb	r3, [r0, #8]
   2b0ee:	b98b      	cbnz	r3, 2b114 <usb_dc_ep_read_wait+0x60>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   2b0f0:	466c      	mov	r4, sp
   2b0f2:	b088      	sub	sp, #32
   2b0f4:	466a      	mov	r2, sp
   2b0f6:	4b1f      	ldr	r3, [pc, #124]	; (2b174 <usb_dc_ep_read_wait+0xc0>)
   2b0f8:	481f      	ldr	r0, [pc, #124]	; (2b178 <usb_dc_ep_read_wait+0xc4>)
   2b0fa:	e9c2 3905 	strd	r3, r9, [r2, #20]
   2b0fe:	2303      	movs	r3, #3
   2b100:	f842 3f10 	str.w	r3, [r2, #16]!
   2b104:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2b108:	f005 f96b 	bl	303e2 <z_log_msg_static_create.constprop.0>
   2b10c:	46a5      	mov	sp, r4
		return -EINVAL;
   2b10e:	f06f 0015 	mvn.w	r0, #21
   2b112:	e015      	b.n	2b140 <usb_dc_ep_read_wait+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2b114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b118:	4818      	ldr	r0, [pc, #96]	; (2b17c <usb_dc_ep_read_wait+0xc8>)
   2b11a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b11e:	f005 f963 	bl	303e8 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   2b122:	68e3      	ldr	r3, [r4, #12]
   2b124:	4598      	cmp	r8, r3
   2b126:	46c1      	mov	r9, r8
   2b128:	bf28      	it	cs
   2b12a:	4699      	movcs	r9, r3
	if (!data && !max_data_len) {
   2b12c:	b95e      	cbnz	r6, 2b146 <usb_dc_ep_read_wait+0x92>
   2b12e:	f1b8 0f00 	cmp.w	r8, #0
   2b132:	d108      	bne.n	2b146 <usb_dc_ep_read_wait+0x92>
		if (read_bytes) {
   2b134:	b105      	cbz	r5, 2b138 <usb_dc_ep_read_wait+0x84>
			*read_bytes = ep_ctx->buf.len;
   2b136:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   2b138:	4810      	ldr	r0, [pc, #64]	; (2b17c <usb_dc_ep_read_wait+0xc8>)
   2b13a:	f005 f957 	bl	303ec <k_mutex_unlock.isra.0>
		return 0;
   2b13e:	2000      	movs	r0, #0
}
   2b140:	46bd      	mov	sp, r7
   2b142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   2b146:	69a1      	ldr	r1, [r4, #24]
   2b148:	464a      	mov	r2, r9
   2b14a:	4630      	mov	r0, r6
   2b14c:	f005 f904 	bl	30358 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   2b150:	69a3      	ldr	r3, [r4, #24]
   2b152:	444b      	add	r3, r9
   2b154:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   2b156:	68e3      	ldr	r3, [r4, #12]
   2b158:	eba3 0309 	sub.w	r3, r3, r9
   2b15c:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   2b15e:	2d00      	cmp	r5, #0
   2b160:	d0ea      	beq.n	2b138 <usb_dc_ep_read_wait+0x84>
		*read_bytes = bytes_to_copy;
   2b162:	f8c5 9000 	str.w	r9, [r5]
   2b166:	e7e7      	b.n	2b138 <usb_dc_ep_read_wait+0x84>
		return -ENODEV;
   2b168:	f06f 0012 	mvn.w	r0, #18
   2b16c:	e7e8      	b.n	2b140 <usb_dc_ep_read_wait+0x8c>
   2b16e:	bf00      	nop
   2b170:	20000dbc 	.word	0x20000dbc
   2b174:	00032150 	.word	0x00032150
   2b178:	0003133c 	.word	0x0003133c
   2b17c:	20000df4 	.word	0x20000df4

0002b180 <usb_dc_ep_read_continue>:
{
   2b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   2b182:	4d27      	ldr	r5, [pc, #156]	; (2b220 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
   2b184:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
   2b188:	af00      	add	r7, sp, #0
   2b18a:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
   2b18c:	2b00      	cmp	r3, #0
   2b18e:	d044      	beq.n	2b21a <usb_dc_ep_read_continue+0x9a>
   2b190:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   2b194:	2b00      	cmp	r3, #0
   2b196:	d040      	beq.n	2b21a <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   2b198:	0603      	lsls	r3, r0, #24
   2b19a:	d414      	bmi.n	2b1c6 <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
   2b19c:	f7ff f95a 	bl	2a454 <endpoint_ctx>
	if (!ep_ctx) {
   2b1a0:	4604      	mov	r4, r0
   2b1a2:	b180      	cbz	r0, 2b1c6 <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
   2b1a4:	7a03      	ldrb	r3, [r0, #8]
   2b1a6:	b993      	cbnz	r3, 2b1ce <usb_dc_ep_read_continue+0x4e>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   2b1a8:	466c      	mov	r4, sp
   2b1aa:	b088      	sub	sp, #32
   2b1ac:	466a      	mov	r2, sp
   2b1ae:	4b1d      	ldr	r3, [pc, #116]	; (2b224 <usb_dc_ep_read_continue+0xa4>)
   2b1b0:	481d      	ldr	r0, [pc, #116]	; (2b228 <usb_dc_ep_read_continue+0xa8>)
   2b1b2:	e9c2 3605 	strd	r3, r6, [r2, #20]
   2b1b6:	2303      	movs	r3, #3
   2b1b8:	f842 3f10 	str.w	r3, [r2, #16]!
   2b1bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2b1c0:	f005 f90f 	bl	303e2 <z_log_msg_static_create.constprop.0>
   2b1c4:	46a5      	mov	sp, r4
		return -EINVAL;
   2b1c6:	f06f 0015 	mvn.w	r0, #21
}
   2b1ca:	46bd      	mov	sp, r7
   2b1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   2b1ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b1d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b1d6:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2b1da:	f005 f905 	bl	303e8 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   2b1de:	68e3      	ldr	r3, [r4, #12]
   2b1e0:	b9b3      	cbnz	r3, 2b210 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
   2b1e2:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   2b1e4:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   2b1e6:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   2b1e8:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   2b1ea:	7f63      	ldrb	r3, [r4, #29]
   2b1ec:	b183      	cbz	r3, 2b210 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
   2b1ee:	f7ff f985 	bl	2a4fc <usbd_evt_alloc>
			if (!ev) {
   2b1f2:	b930      	cbnz	r0, 2b202 <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
   2b1f4:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2b1f8:	f005 f8f8 	bl	303ec <k_mutex_unlock.isra.0>
				return -ENOMEM;
   2b1fc:	f06f 000b 	mvn.w	r0, #11
   2b200:	e7e3      	b.n	2b1ca <usb_dc_ep_read_continue+0x4a>
			ev->evt_type = USBD_EVT_EP;
   2b202:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   2b204:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   2b206:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   2b208:	f7ff f95c 	bl	2a4c4 <usbd_evt_put>
			usbd_work_schedule();
   2b20c:	f7ff f952 	bl	2a4b4 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   2b210:	4806      	ldr	r0, [pc, #24]	; (2b22c <usb_dc_ep_read_continue+0xac>)
   2b212:	f005 f8eb 	bl	303ec <k_mutex_unlock.isra.0>
	return 0;
   2b216:	2000      	movs	r0, #0
   2b218:	e7d7      	b.n	2b1ca <usb_dc_ep_read_continue+0x4a>
		return -ENODEV;
   2b21a:	f06f 0012 	mvn.w	r0, #18
   2b21e:	e7d4      	b.n	2b1ca <usb_dc_ep_read_continue+0x4a>
   2b220:	20000dbc 	.word	0x20000dbc
   2b224:	00032150 	.word	0x00032150
   2b228:	0003133c 	.word	0x0003133c
   2b22c:	20000df4 	.word	0x20000df4

0002b230 <usb_dc_ep_set_callback>:
{
   2b230:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   2b232:	4b08      	ldr	r3, [pc, #32]	; (2b254 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   2b234:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   2b238:	460c      	mov	r4, r1
	if (!dev_attached()) {
   2b23a:	b12b      	cbz	r3, 2b248 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
   2b23c:	f7ff f90a 	bl	2a454 <endpoint_ctx>
	if (!ep_ctx) {
   2b240:	b128      	cbz	r0, 2b24e <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   2b242:	6004      	str	r4, [r0, #0]
	return 0;
   2b244:	2000      	movs	r0, #0
}
   2b246:	bd10      	pop	{r4, pc}
		return -ENODEV;
   2b248:	f06f 0012 	mvn.w	r0, #18
   2b24c:	e7fb      	b.n	2b246 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
   2b24e:	f06f 0015 	mvn.w	r0, #21
   2b252:	e7f8      	b.n	2b246 <usb_dc_ep_set_callback+0x16>
   2b254:	20000dbc 	.word	0x20000dbc

0002b258 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   2b258:	4b01      	ldr	r3, [pc, #4]	; (2b260 <usb_dc_set_status_callback+0x8>)
   2b25a:	6018      	str	r0, [r3, #0]
}
   2b25c:	4770      	bx	lr
   2b25e:	bf00      	nop
   2b260:	20000dbc 	.word	0x20000dbc

0002b264 <usb_dc_ep_mps>:
{
   2b264:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   2b266:	4b07      	ldr	r3, [pc, #28]	; (2b284 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   2b268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   2b26c:	b123      	cbz	r3, 2b278 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   2b26e:	f7ff f8f1 	bl	2a454 <endpoint_ctx>
	if (!ep_ctx) {
   2b272:	b120      	cbz	r0, 2b27e <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   2b274:	6840      	ldr	r0, [r0, #4]
}
   2b276:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2b278:	f06f 0012 	mvn.w	r0, #18
   2b27c:	e7fb      	b.n	2b276 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   2b27e:	f06f 0015 	mvn.w	r0, #21
   2b282:	e7f8      	b.n	2b276 <usb_dc_ep_mps+0x12>
   2b284:	20000dbc 	.word	0x20000dbc

0002b288 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   2b288:	2813      	cmp	r0, #19
   2b28a:	d80e      	bhi.n	2b2aa <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   2b28c:	4a08      	ldr	r2, [pc, #32]	; (2b2b0 <adc_gain_invert+0x28>)
   2b28e:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   2b292:	b153      	cbz	r3, 2b2aa <adc_gain_invert+0x22>
   2b294:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   2b298:	7852      	ldrb	r2, [r2, #1]
   2b29a:	b132      	cbz	r2, 2b2aa <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   2b29c:	6808      	ldr	r0, [r1, #0]
   2b29e:	4343      	muls	r3, r0
			rv = 0;
   2b2a0:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   2b2a2:	fb93 f3f2 	sdiv	r3, r3, r2
   2b2a6:	600b      	str	r3, [r1, #0]
			rv = 0;
   2b2a8:	4770      	bx	lr
	int rv = -EINVAL;
   2b2aa:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   2b2ae:	4770      	bx	lr
   2b2b0:	00032195 	.word	0x00032195

0002b2b4 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   2b2b4:	4b05      	ldr	r3, [pc, #20]	; (2b2cc <adc_context_start_sampling+0x18>)
   2b2b6:	2201      	movs	r2, #1
   2b2b8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   2b2bc:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
   2b2c0:	b109      	cbz	r1, 2b2c6 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b2c2:	60da      	str	r2, [r3, #12]
}
   2b2c4:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b2c6:	601a      	str	r2, [r3, #0]
   2b2c8:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   2b2ca:	4770      	bx	lr
   2b2cc:	40007000 	.word	0x40007000

0002b2d0 <adc_nrfx_channel_setup>:
{
   2b2d0:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   2b2d2:	7908      	ldrb	r0, [r1, #4]
   2b2d4:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   2b2d8:	2c07      	cmp	r4, #7
{
   2b2da:	b086      	sub	sp, #24
	if (channel_id >= SAADC_CH_NUM) {
   2b2dc:	d823      	bhi.n	2b326 <adc_nrfx_channel_setup+0x56>
	switch (channel_cfg->gain) {
   2b2de:	780b      	ldrb	r3, [r1, #0]
   2b2e0:	2b0b      	cmp	r3, #11
   2b2e2:	d815      	bhi.n	2b310 <adc_nrfx_channel_setup+0x40>
   2b2e4:	e8df f003 	tbb	[pc, r3]
   2b2e8:	07070707 	.word	0x07070707
   2b2ec:	14140614 	.word	0x14140614
   2b2f0:	1214100e 	.word	0x1214100e
		config.gain = NRF_SAADC_GAIN1_2;
   2b2f4:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   2b2f6:	784a      	ldrb	r2, [r1, #1]
   2b2f8:	2a03      	cmp	r2, #3
   2b2fa:	d018      	beq.n	2b32e <adc_nrfx_channel_setup+0x5e>
   2b2fc:	2a04      	cmp	r2, #4
   2b2fe:	d028      	beq.n	2b352 <adc_nrfx_channel_setup+0x82>
		LOG_ERR("Selected ADC reference is not valid");
   2b300:	4b31      	ldr	r3, [pc, #196]	; (2b3c8 <adc_nrfx_channel_setup+0xf8>)
   2b302:	e006      	b.n	2b312 <adc_nrfx_channel_setup+0x42>
		config.gain = NRF_SAADC_GAIN1;
   2b304:	2305      	movs	r3, #5
		break;
   2b306:	e7f6      	b.n	2b2f6 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN2;
   2b308:	2306      	movs	r3, #6
		break;
   2b30a:	e7f4      	b.n	2b2f6 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN4;
   2b30c:	2307      	movs	r3, #7
		break;
   2b30e:	e7f2      	b.n	2b2f6 <adc_nrfx_channel_setup+0x26>
		LOG_ERR("Selected ADC gain is not valid");
   2b310:	4b2e      	ldr	r3, [pc, #184]	; (2b3cc <adc_nrfx_channel_setup+0xfc>)
   2b312:	9305      	str	r3, [sp, #20]
   2b314:	2302      	movs	r3, #2
   2b316:	9304      	str	r3, [sp, #16]
   2b318:	482d      	ldr	r0, [pc, #180]	; (2b3d0 <adc_nrfx_channel_setup+0x100>)
   2b31a:	2300      	movs	r3, #0
   2b31c:	aa04      	add	r2, sp, #16
   2b31e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2b322:	f7fc fc6b 	bl	27bfc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   2b326:	f06f 0015 	mvn.w	r0, #21
}
   2b32a:	b006      	add	sp, #24
   2b32c:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   2b32e:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   2b330:	884a      	ldrh	r2, [r1, #2]
   2b332:	f244 060a 	movw	r6, #16394	; 0x400a
   2b336:	42b2      	cmp	r2, r6
   2b338:	d03f      	beq.n	2b3ba <adc_nrfx_channel_setup+0xea>
   2b33a:	d80c      	bhi.n	2b356 <adc_nrfx_channel_setup+0x86>
   2b33c:	f244 0603 	movw	r6, #16387	; 0x4003
   2b340:	42b2      	cmp	r2, r6
   2b342:	d016      	beq.n	2b372 <adc_nrfx_channel_setup+0xa2>
   2b344:	f244 0605 	movw	r6, #16389	; 0x4005
   2b348:	42b2      	cmp	r2, r6
   2b34a:	d034      	beq.n	2b3b6 <adc_nrfx_channel_setup+0xe6>
   2b34c:	b3aa      	cbz	r2, 2b3ba <adc_nrfx_channel_setup+0xea>
		LOG_ERR("Selected ADC acquisition time is not valid");
   2b34e:	4b21      	ldr	r3, [pc, #132]	; (2b3d4 <adc_nrfx_channel_setup+0x104>)
   2b350:	e7df      	b.n	2b312 <adc_nrfx_channel_setup+0x42>
	nrf_saadc_channel_config_t config = {
   2b352:	2500      	movs	r5, #0
   2b354:	e7ec      	b.n	2b330 <adc_nrfx_channel_setup+0x60>
	switch (channel_cfg->acquisition_time) {
   2b356:	f244 0614 	movw	r6, #16404	; 0x4014
   2b35a:	42b2      	cmp	r2, r6
   2b35c:	d02f      	beq.n	2b3be <adc_nrfx_channel_setup+0xee>
   2b35e:	f244 0628 	movw	r6, #16424	; 0x4028
   2b362:	42b2      	cmp	r2, r6
   2b364:	d02d      	beq.n	2b3c2 <adc_nrfx_channel_setup+0xf2>
   2b366:	f244 060f 	movw	r6, #16399	; 0x400f
   2b36a:	42b2      	cmp	r2, r6
   2b36c:	d1ef      	bne.n	2b34e <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   2b36e:	2203      	movs	r2, #3
   2b370:	e000      	b.n	2b374 <adc_nrfx_channel_setup+0xa4>
	nrf_saadc_channel_config_t config = {
   2b372:	2200      	movs	r2, #0
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
#if NRF_SAADC_HAS_CONVTIME
            | ((config->conv_time  << SAADC_CH_CONFIG_TCONV_Pos)  & SAADC_CH_CONFIG_TCONV_Msk)
#endif
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2b374:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   2b378:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2b37a:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   2b37e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   2b382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   2b386:	0122      	lsls	r2, r4, #4
   2b388:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2b38c:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   2b390:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   2b392:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   2b396:	0123      	lsls	r3, r4, #4
   2b398:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2b39c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   2b3a0:	798a      	ldrb	r2, [r1, #6]
   2b3a2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   2b3a6:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   2b3aa:	4b0b      	ldr	r3, [pc, #44]	; (2b3d8 <adc_nrfx_channel_setup+0x108>)
   2b3ac:	794a      	ldrb	r2, [r1, #5]
   2b3ae:	4423      	add	r3, r4
   2b3b0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	return 0;
   2b3b4:	e7b9      	b.n	2b32a <adc_nrfx_channel_setup+0x5a>
	switch (channel_cfg->acquisition_time) {
   2b3b6:	2201      	movs	r2, #1
   2b3b8:	e7dc      	b.n	2b374 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   2b3ba:	2202      	movs	r2, #2
   2b3bc:	e7da      	b.n	2b374 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   2b3be:	2204      	movs	r2, #4
   2b3c0:	e7d8      	b.n	2b374 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   2b3c2:	2205      	movs	r2, #5
   2b3c4:	e7d6      	b.n	2b374 <adc_nrfx_channel_setup+0xa4>
   2b3c6:	bf00      	nop
   2b3c8:	000321dc 	.word	0x000321dc
   2b3cc:	000321bd 	.word	0x000321bd
   2b3d0:	000312d4 	.word	0x000312d4
   2b3d4:	00032200 	.word	0x00032200
   2b3d8:	200000b8 	.word	0x200000b8

0002b3dc <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   2b3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b3e0:	b088      	sub	sp, #32
   2b3e2:	460c      	mov	r4, r1
   2b3e4:	af02      	add	r7, sp, #8
	return z_impl_k_sem_take(sem, timeout);
   2b3e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b3ea:	4879      	ldr	r0, [pc, #484]	; (2b5d0 <adc_nrfx_read+0x1f4>)
   2b3ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b3f0:	f002 ffb0 	bl	2e354 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   2b3f4:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   2b3f6:	1e73      	subs	r3, r6, #1
   2b3f8:	2bfe      	cmp	r3, #254	; 0xfe
   2b3fa:	d90c      	bls.n	2b416 <adc_nrfx_read+0x3a>
		LOG_ERR("Invalid selection of channels");
   2b3fc:	4b75      	ldr	r3, [pc, #468]	; (2b5d4 <adc_nrfx_read+0x1f8>)
		LOG_ERR(
   2b3fe:	617b      	str	r3, [r7, #20]
   2b400:	2302      	movs	r3, #2
   2b402:	613b      	str	r3, [r7, #16]
   2b404:	4874      	ldr	r0, [pc, #464]	; (2b5d8 <adc_nrfx_read+0x1fc>)
   2b406:	2300      	movs	r3, #0
   2b408:	f107 0210 	add.w	r2, r7, #16
   2b40c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2b410:	f7fc fbf4 	bl	27bfc <z_impl_z_log_msg_static_create>
	if (error) {
   2b414:	e01b      	b.n	2b44e <adc_nrfx_read+0x72>
   2b416:	2100      	movs	r1, #0
    p_reg->CH[channel].PSELP = pselp;
   2b418:	4d70      	ldr	r5, [pc, #448]	; (2b5dc <adc_nrfx_read+0x200>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   2b41a:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 2b5e0 <adc_nrfx_read+0x204>
	active_channels = 0U;
   2b41e:	460a      	mov	r2, r1
		if (selected_channels & BIT(channel_id)) {
   2b420:	fa26 f301 	lsr.w	r3, r6, r1
   2b424:	f013 0301 	ands.w	r3, r3, #1
   2b428:	d040      	beq.n	2b4ac <adc_nrfx_read+0xd0>
			if (m_data.positive_inputs[channel_id] == 0U) {
   2b42a:	f81c 3001 	ldrb.w	r3, [ip, r1]
   2b42e:	b9c3      	cbnz	r3, 2b462 <adc_nrfx_read+0x86>
				LOG_ERR("Channel %u not configured",
   2b430:	466c      	mov	r4, sp
   2b432:	b088      	sub	sp, #32
   2b434:	aa02      	add	r2, sp, #8
   2b436:	486b      	ldr	r0, [pc, #428]	; (2b5e4 <adc_nrfx_read+0x208>)
   2b438:	e9c2 0105 	strd	r0, r1, [r2, #20]
   2b43c:	2103      	movs	r1, #3
   2b43e:	f842 1f10 	str.w	r1, [r2, #16]!
   2b442:	4865      	ldr	r0, [pc, #404]	; (2b5d8 <adc_nrfx_read+0x1fc>)
   2b444:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2b448:	f7fc fbd8 	bl	27bfc <z_impl_z_log_msg_static_create>
   2b44c:	46a5      	mov	sp, r4
		return -EINVAL;
   2b44e:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   2b452:	485f      	ldr	r0, [pc, #380]	; (2b5d0 <adc_nrfx_read+0x1f4>)
   2b454:	f002 ff5a 	bl	2e30c <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   2b458:	4620      	mov	r0, r4
   2b45a:	3718      	adds	r7, #24
   2b45c:	46bd      	mov	sp, r7
   2b45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   2b462:	eb05 1801 	add.w	r8, r5, r1, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   2b466:	f894 e011 	ldrb.w	lr, [r4, #17]
   2b46a:	f8d8 0518 	ldr.w	r0, [r8, #1304]	; 0x518
   2b46e:	f1be 0e00 	subs.w	lr, lr, #0
   2b472:	bf18      	it	ne
   2b474:	f04f 0e01 	movne.w	lr, #1
   2b478:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   2b47c:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
   2b480:	f8c8 0518 	str.w	r0, [r8, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   2b484:	f101 0051 	add.w	r0, r1, #81	; 0x51
   2b488:	0100      	lsls	r0, r0, #4
			++active_channels;
   2b48a:	3201      	adds	r2, #1
   2b48c:	502b      	str	r3, [r5, r0]
   2b48e:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   2b490:	3101      	adds	r1, #1
   2b492:	2908      	cmp	r1, #8
   2b494:	d1c4      	bne.n	2b420 <adc_nrfx_read+0x44>
	error = set_resolution(sequence);
   2b496:	7c23      	ldrb	r3, [r4, #16]
	switch (sequence->resolution) {
   2b498:	f1a3 0108 	sub.w	r1, r3, #8
   2b49c:	2906      	cmp	r1, #6
   2b49e:	d816      	bhi.n	2b4ce <adc_nrfx_read+0xf2>
   2b4a0:	e8df f001 	tbb	[pc, r1]
   2b4a4:	15221520 	.word	0x15221520
   2b4a8:	1509      	.short	0x1509
   2b4aa:	13          	.byte	0x13
   2b4ab:	00          	.byte	0x00
   2b4ac:	f101 0051 	add.w	r0, r1, #81	; 0x51
   2b4b0:	0100      	lsls	r0, r0, #4
   2b4b2:	502b      	str	r3, [r5, r0]
}
   2b4b4:	e7ec      	b.n	2b490 <adc_nrfx_read+0xb4>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   2b4b6:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   2b4b8:	4948      	ldr	r1, [pc, #288]	; (2b5dc <adc_nrfx_read+0x200>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   2b4ba:	2a01      	cmp	r2, #1
   2b4bc:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   2b4c0:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   2b4c2:	d913      	bls.n	2b4ec <adc_nrfx_read+0x110>
   2b4c4:	b1a3      	cbz	r3, 2b4f0 <adc_nrfx_read+0x114>
		LOG_ERR(
   2b4c6:	4b48      	ldr	r3, [pc, #288]	; (2b5e8 <adc_nrfx_read+0x20c>)
   2b4c8:	e799      	b.n	2b3fe <adc_nrfx_read+0x22>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   2b4ca:	2303      	movs	r3, #3
		break;
   2b4cc:	e7f4      	b.n	2b4b8 <adc_nrfx_read+0xdc>
		LOG_ERR("ADC resolution value %d is not valid",
   2b4ce:	466c      	mov	r4, sp
   2b4d0:	b088      	sub	sp, #32
   2b4d2:	aa02      	add	r2, sp, #8
   2b4d4:	4945      	ldr	r1, [pc, #276]	; (2b5ec <adc_nrfx_read+0x210>)
	switch (sequence->oversampling) {
   2b4d6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Oversampling value %d is not valid",
   2b4da:	2303      	movs	r3, #3
   2b4dc:	f842 3f10 	str.w	r3, [r2, #16]!
   2b4e0:	2300      	movs	r3, #0
   2b4e2:	e7ae      	b.n	2b442 <adc_nrfx_read+0x66>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   2b4e4:	2300      	movs	r3, #0
   2b4e6:	e7e7      	b.n	2b4b8 <adc_nrfx_read+0xdc>
	switch (sequence->resolution) {
   2b4e8:	2301      	movs	r3, #1
   2b4ea:	e7e5      	b.n	2b4b8 <adc_nrfx_read+0xdc>
	switch (sequence->oversampling) {
   2b4ec:	2b08      	cmp	r3, #8
   2b4ee:	d81b      	bhi.n	2b528 <adc_nrfx_read+0x14c>
    p_reg->OVERSAMPLE = oversample;
   2b4f0:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   2b4f4:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   2b4f6:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   2b4f8:	b9d9      	cbnz	r1, 2b532 <adc_nrfx_read+0x156>
	if (sequence->buffer_size < needed_buffer_size) {
   2b4fa:	68e1      	ldr	r1, [r4, #12]
   2b4fc:	4299      	cmp	r1, r3
   2b4fe:	d21c      	bcs.n	2b53a <adc_nrfx_read+0x15e>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   2b500:	466c      	mov	r4, sp
   2b502:	b088      	sub	sp, #32
   2b504:	aa02      	add	r2, sp, #8
   2b506:	483a      	ldr	r0, [pc, #232]	; (2b5f0 <adc_nrfx_read+0x214>)
   2b508:	61d3      	str	r3, [r2, #28]
   2b50a:	2304      	movs	r3, #4
   2b50c:	e9c2 0105 	strd	r0, r1, [r2, #20]
   2b510:	f842 3f10 	str.w	r3, [r2, #16]!
   2b514:	4830      	ldr	r0, [pc, #192]	; (2b5d8 <adc_nrfx_read+0x1fc>)
   2b516:	2300      	movs	r3, #0
   2b518:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   2b51c:	f7fc fb6e 	bl	27bfc <z_impl_z_log_msg_static_create>
   2b520:	46a5      	mov	sp, r4
		return -ENOMEM;
   2b522:	f06f 040b 	mvn.w	r4, #11
   2b526:	e794      	b.n	2b452 <adc_nrfx_read+0x76>
		LOG_ERR("Oversampling value %d is not valid",
   2b528:	466c      	mov	r4, sp
   2b52a:	b088      	sub	sp, #32
   2b52c:	aa02      	add	r2, sp, #8
   2b52e:	4931      	ldr	r1, [pc, #196]	; (2b5f4 <adc_nrfx_read+0x218>)
   2b530:	e7d1      	b.n	2b4d6 <adc_nrfx_read+0xfa>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   2b532:	8989      	ldrh	r1, [r1, #12]
   2b534:	fb01 3303 	mla	r3, r1, r3, r3
   2b538:	e7df      	b.n	2b4fa <adc_nrfx_read+0x11e>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   2b53a:	4b28      	ldr	r3, [pc, #160]	; (2b5dc <adc_nrfx_read+0x200>)
   2b53c:	68a1      	ldr	r1, [r4, #8]
   2b53e:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   2b542:	46a4      	mov	ip, r4
    p_reg->RESULT.MAXCNT = size;
   2b544:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   2b548:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2b54c:	4d2a      	ldr	r5, [pc, #168]	; (2b5f8 <adc_nrfx_read+0x21c>)
   2b54e:	f105 0664 	add.w	r6, r5, #100	; 0x64
   2b552:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2b554:	f8dc 3000 	ldr.w	r3, [ip]
   2b558:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   2b55a:	2600      	movs	r6, #0
   2b55c:	662e      	str	r6, [r5, #96]	; 0x60

	if (sequence->options) {
   2b55e:	6823      	ldr	r3, [r4, #0]
   2b560:	46ac      	mov	ip, r5
   2b562:	b383      	cbz	r3, 2b5c6 <adc_nrfx_read+0x1ea>
		ctx->options = *sequence->options;
   2b564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2b566:	f105 0478 	add.w	r4, r5, #120	; 0x78
   2b56a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   2b56e:	666c      	str	r4, [r5, #100]	; 0x64
		ctx->sampling_index = 0U;
   2b570:	f8a5 6088 	strh.w	r6, [r5, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
   2b574:	b338      	cbz	r0, 2b5c6 <adc_nrfx_read+0x1ea>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2b576:	f3bf 8f5b 	dmb	ish
   2b57a:	e85c 3f00 	ldrex	r3, [ip]
   2b57e:	e84c 6200 	strex	r2, r6, [ip]
   2b582:	2a00      	cmp	r2, #0
   2b584:	d1f9      	bne.n	2b57a <adc_nrfx_read+0x19e>
   2b586:	f3bf 8f5b 	dmb	ish
			return ((t * to_hz + off) / from_hz);
   2b58a:	491c      	ldr	r1, [pc, #112]	; (2b5fc <adc_nrfx_read+0x220>)
   2b58c:	6fa8      	ldr	r0, [r5, #120]	; 0x78
   2b58e:	4a1c      	ldr	r2, [pc, #112]	; (2b600 <adc_nrfx_read+0x224>)
   2b590:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   2b594:	468c      	mov	ip, r1
   2b596:	4631      	mov	r1, r6
   2b598:	fbe0 c104 	umlal	ip, r1, r0, r4
   2b59c:	2300      	movs	r3, #0
   2b59e:	4660      	mov	r0, ip
   2b5a0:	f7fa fdae 	bl	26100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   2b5a4:	2200      	movs	r2, #0
   2b5a6:	e9cd 0100 	strd	r0, r1, [sp]
   2b5aa:	2300      	movs	r3, #0
   2b5ac:	f105 0008 	add.w	r0, r5, #8
   2b5b0:	f003 fd8a 	bl	2f0c8 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   2b5b4:	4813      	ldr	r0, [pc, #76]	; (2b604 <adc_nrfx_read+0x228>)
   2b5b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b5ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b5be:	f002 fec9 	bl	2e354 <z_impl_k_sem_take>
	return ctx->status;
   2b5c2:	6e2c      	ldr	r4, [r5, #96]	; 0x60
	return error;
   2b5c4:	e745      	b.n	2b452 <adc_nrfx_read+0x76>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   2b5c6:	480c      	ldr	r0, [pc, #48]	; (2b5f8 <adc_nrfx_read+0x21c>)
   2b5c8:	f7ff fe74 	bl	2b2b4 <adc_context_start_sampling>
   2b5cc:	e7f2      	b.n	2b5b4 <adc_nrfx_read+0x1d8>
   2b5ce:	bf00      	nop
   2b5d0:	200000f8 	.word	0x200000f8
   2b5d4:	0003222b 	.word	0x0003222b
   2b5d8:	000312d4 	.word	0x000312d4
   2b5dc:	40007000 	.word	0x40007000
   2b5e0:	20000148 	.word	0x20000148
   2b5e4:	00032249 	.word	0x00032249
   2b5e8:	00032288 	.word	0x00032288
   2b5ec:	00032263 	.word	0x00032263
   2b5f0:	000322dd 	.word	0x000322dd
   2b5f4:	000322ba 	.word	0x000322ba
   2b5f8:	200000b8 	.word	0x200000b8
   2b5fc:	000f423f 	.word	0x000f423f
   2b600:	000f4240 	.word	0x000f4240
   2b604:	20000108 	.word	0x20000108

0002b608 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   2b608:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b60a:	4b0e      	ldr	r3, [pc, #56]	; (2b644 <init_saadc+0x3c>)
   2b60c:	2400      	movs	r4, #0
   2b60e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2b612:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2b616:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   2b61a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   2b61e:	2212      	movs	r2, #18
   2b620:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   2b624:	2007      	movs	r0, #7
   2b626:	f7fe f9ed 	bl	29a04 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2b62a:	4622      	mov	r2, r4
   2b62c:	2101      	movs	r1, #1
   2b62e:	2007      	movs	r0, #7
   2b630:	f7fe fa18 	bl	29a64 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   2b634:	4804      	ldr	r0, [pc, #16]	; (2b648 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   2b636:	6c83      	ldr	r3, [r0, #72]	; 0x48
   2b638:	b913      	cbnz	r3, 2b640 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   2b63a:	3040      	adds	r0, #64	; 0x40
   2b63c:	f002 fe66 	bl	2e30c <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   2b640:	2000      	movs	r0, #0
   2b642:	bd10      	pop	{r4, pc}
   2b644:	40007000 	.word	0x40007000
   2b648:	200000b8 	.word	0x200000b8

0002b64c <saadc_irq_handler>:
{
   2b64c:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b64e:	4b2e      	ldr	r3, [pc, #184]	; (2b708 <saadc_irq_handler+0xbc>)
   2b650:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   2b654:	2a00      	cmp	r2, #0
   2b656:	d049      	beq.n	2b6ec <saadc_irq_handler+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b658:	2200      	movs	r2, #0
   2b65a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2b65e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   2b662:	4c2a      	ldr	r4, [pc, #168]	; (2b70c <saadc_irq_handler+0xc0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b664:	2101      	movs	r1, #1
   2b666:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   2b668:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   2b66c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2b66e:	4625      	mov	r5, r4
   2b670:	b3bb      	cbz	r3, 2b6e2 <saadc_irq_handler+0x96>
		adc_sequence_callback callback = ctx->options.callback;
   2b672:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   2b674:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
		if (callback) {
   2b678:	b133      	cbz	r3, 2b688 <saadc_irq_handler+0x3c>
			action = callback(dev,
   2b67a:	f104 0164 	add.w	r1, r4, #100	; 0x64
   2b67e:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   2b680:	2801      	cmp	r0, #1
   2b682:	d014      	beq.n	2b6ae <saadc_irq_handler+0x62>
   2b684:	2802      	cmp	r0, #2
   2b686:	d027      	beq.n	2b6d8 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   2b688:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
   2b68c:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
   2b690:	429a      	cmp	r2, r3
   2b692:	d921      	bls.n	2b6d8 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   2b694:	3301      	adds	r3, #1
   2b696:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   2b69a:	4b1b      	ldr	r3, [pc, #108]	; (2b708 <saadc_irq_handler+0xbc>)
   2b69c:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return (uint16_t)p_reg->RESULT.AMOUNT;
   2b6a0:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   2b6a4:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   2b6a6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   2b6aa:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   2b6ae:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   2b6b0:	b923      	cbnz	r3, 2b6bc <saadc_irq_handler+0x70>
}
   2b6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   2b6b6:	4815      	ldr	r0, [pc, #84]	; (2b70c <saadc_irq_handler+0xc0>)
   2b6b8:	f7ff bdfc 	b.w	2b2b4 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2b6bc:	f3bf 8f5b 	dmb	ish
   2b6c0:	e855 3f00 	ldrex	r3, [r5]
   2b6c4:	1e5a      	subs	r2, r3, #1
   2b6c6:	e845 2100 	strex	r1, r2, [r5]
   2b6ca:	2900      	cmp	r1, #0
   2b6cc:	d1f8      	bne.n	2b6c0 <saadc_irq_handler+0x74>
   2b6ce:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   2b6d2:	2b01      	cmp	r3, #1
   2b6d4:	dced      	bgt.n	2b6b2 <saadc_irq_handler+0x66>
   2b6d6:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   2b6d8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   2b6da:	b113      	cbz	r3, 2b6e2 <saadc_irq_handler+0x96>
	z_impl_k_timer_stop(timer);
   2b6dc:	480c      	ldr	r0, [pc, #48]	; (2b710 <saadc_irq_handler+0xc4>)
   2b6de:	f005 fc11 	bl	30f04 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   2b6e2:	480c      	ldr	r0, [pc, #48]	; (2b714 <saadc_irq_handler+0xc8>)
   2b6e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b6e8:	f002 be10 	b.w	2e30c <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2b6ec:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   2b6f0:	2900      	cmp	r1, #0
   2b6f2:	d0f0      	beq.n	2b6d6 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b6f4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   2b6f8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b6fc:	2201      	movs	r2, #1
   2b6fe:	609a      	str	r2, [r3, #8]
   2b700:	601a      	str	r2, [r3, #0]
   2b702:	605a      	str	r2, [r3, #4]
}
   2b704:	e7e7      	b.n	2b6d6 <saadc_irq_handler+0x8a>
   2b706:	bf00      	nop
   2b708:	40007000 	.word	0x40007000
   2b70c:	200000b8 	.word	0x200000b8
   2b710:	200000c0 	.word	0x200000c0
   2b714:	20000108 	.word	0x20000108

0002b718 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   2b718:	4b08      	ldr	r3, [pc, #32]	; (2b73c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2b71a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   2b71c:	1ac3      	subs	r3, r0, r3
{
   2b71e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2b720:	4907      	ldr	r1, [pc, #28]	; (2b740 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   2b722:	109b      	asrs	r3, r3, #2
{
   2b724:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2b726:	4359      	muls	r1, r3
   2b728:	4806      	ldr	r0, [pc, #24]	; (2b744 <onoff_stop+0x2c>)
   2b72a:	2240      	movs	r2, #64	; 0x40
   2b72c:	f004 febb 	bl	304a6 <stop>
	notify(mgr, res);
   2b730:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2b732:	4601      	mov	r1, r0
	notify(mgr, res);
   2b734:	4620      	mov	r0, r4
}
   2b736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2b73a:	4718      	bx	r3
   2b73c:	20001660 	.word	0x20001660
   2b740:	b6db6db7 	.word	0xb6db6db7
   2b744:	000310d8 	.word	0x000310d8

0002b748 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2b748:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   2b74a:	4c0c      	ldr	r4, [pc, #48]	; (2b77c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2b74c:	4a0c      	ldr	r2, [pc, #48]	; (2b780 <onoff_start+0x38>)
   2b74e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   2b750:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2b752:	9300      	str	r3, [sp, #0]
{
   2b754:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2b756:	460b      	mov	r3, r1
   2b758:	490a      	ldr	r1, [pc, #40]	; (2b784 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   2b75a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2b75c:	4361      	muls	r1, r4
{
   2b75e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2b760:	4809      	ldr	r0, [pc, #36]	; (2b788 <onoff_start+0x40>)
   2b762:	f004 fecc 	bl	304fe <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   2b766:	1e01      	subs	r1, r0, #0
   2b768:	da05      	bge.n	2b776 <onoff_start+0x2e>
		notify(mgr, err);
   2b76a:	4630      	mov	r0, r6
   2b76c:	462b      	mov	r3, r5
	}
}
   2b76e:	b002      	add	sp, #8
   2b770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   2b774:	4718      	bx	r3
}
   2b776:	b002      	add	sp, #8
   2b778:	bd70      	pop	{r4, r5, r6, pc}
   2b77a:	bf00      	nop
   2b77c:	20001660 	.word	0x20001660
   2b780:	00030569 	.word	0x00030569
   2b784:	b6db6db7 	.word	0xb6db6db7
   2b788:	000310d8 	.word	0x000310d8

0002b78c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2b78c:	2200      	movs	r2, #0
{
   2b78e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2b790:	2101      	movs	r1, #1
{
   2b792:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2b794:	4610      	mov	r0, r2
   2b796:	f7fe f965 	bl	29a64 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   2b79a:	480f      	ldr	r0, [pc, #60]	; (2b7d8 <clk_init+0x4c>)
   2b79c:	f000 fe64 	bl	2c468 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2b7a0:	4b0e      	ldr	r3, [pc, #56]	; (2b7dc <clk_init+0x50>)
   2b7a2:	4298      	cmp	r0, r3
   2b7a4:	d115      	bne.n	2b7d2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2b7a6:	f000 fe6f 	bl	2c488 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   2b7aa:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   2b7ac:	490c      	ldr	r1, [pc, #48]	; (2b7e0 <clk_init+0x54>)
   2b7ae:	4630      	mov	r0, r6
   2b7b0:	f003 ffec 	bl	2f78c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2b7b4:	2800      	cmp	r0, #0
   2b7b6:	db0b      	blt.n	2b7d0 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2b7b8:	2501      	movs	r5, #1
   2b7ba:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   2b7bc:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   2b7be:	4908      	ldr	r1, [pc, #32]	; (2b7e0 <clk_init+0x54>)
   2b7c0:	f104 001c 	add.w	r0, r4, #28
   2b7c4:	f003 ffe2 	bl	2f78c <onoff_manager_init>
		if (err < 0) {
   2b7c8:	2800      	cmp	r0, #0
   2b7ca:	db01      	blt.n	2b7d0 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2b7cc:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   2b7ce:	2000      	movs	r0, #0
}
   2b7d0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2b7d2:	f06f 0004 	mvn.w	r0, #4
   2b7d6:	e7fb      	b.n	2b7d0 <clk_init+0x44>
   2b7d8:	0002b819 	.word	0x0002b819
   2b7dc:	0bad0000 	.word	0x0bad0000
   2b7e0:	000314cc 	.word	0x000314cc

0002b7e4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   2b7e4:	b570      	push	{r4, r5, r6, lr}
   2b7e6:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   2b7e8:	230c      	movs	r3, #12
   2b7ea:	4809      	ldr	r0, [pc, #36]	; (2b810 <clkstarted_handle.constprop.0+0x2c>)
   2b7ec:	434b      	muls	r3, r1
   2b7ee:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   2b7f0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   2b7f4:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   2b7f6:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   2b7f8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   2b7fa:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   2b7fc:	f004 fe40 	bl	30480 <set_on_state>
	if (callback) {
   2b800:	b12d      	cbz	r5, 2b80e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2b802:	4632      	mov	r2, r6
   2b804:	462b      	mov	r3, r5
   2b806:	4803      	ldr	r0, [pc, #12]	; (2b814 <clkstarted_handle.constprop.0+0x30>)
}
   2b808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   2b80c:	4718      	bx	r3
}
   2b80e:	bd70      	pop	{r4, r5, r6, pc}
   2b810:	20001660 	.word	0x20001660
   2b814:	000310d8 	.word	0x000310d8

0002b818 <clock_event_handler>:
	switch (event) {
   2b818:	b110      	cbz	r0, 2b820 <clock_event_handler+0x8>
   2b81a:	2801      	cmp	r0, #1
   2b81c:	d004      	beq.n	2b828 <clock_event_handler+0x10>
   2b81e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   2b820:	4b03      	ldr	r3, [pc, #12]	; (2b830 <clock_event_handler+0x18>)
   2b822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2b824:	075b      	lsls	r3, r3, #29
   2b826:	d101      	bne.n	2b82c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2b828:	f7ff bfdc 	b.w	2b7e4 <clkstarted_handle.constprop.0>
}
   2b82c:	4770      	bx	lr
   2b82e:	bf00      	nop
   2b830:	20001660 	.word	0x20001660

0002b834 <generic_hfclk_start>:
{
   2b834:	b508      	push	{r3, lr}
	__asm__ volatile(
   2b836:	f04f 0320 	mov.w	r3, #32
   2b83a:	f3ef 8111 	mrs	r1, BASEPRI
   2b83e:	f383 8812 	msr	BASEPRI_MAX, r3
   2b842:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2b846:	4a12      	ldr	r2, [pc, #72]	; (2b890 <generic_hfclk_start+0x5c>)
   2b848:	6813      	ldr	r3, [r2, #0]
   2b84a:	f043 0002 	orr.w	r0, r3, #2
   2b84e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   2b850:	07da      	lsls	r2, r3, #31
   2b852:	d408      	bmi.n	2b866 <generic_hfclk_start+0x32>
	__asm__ volatile(
   2b854:	f381 8811 	msr	BASEPRI, r1
   2b858:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2b85c:	2001      	movs	r0, #1
}
   2b85e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2b862:	f004 bf10 	b.w	30686 <nrfx_clock_start>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
            }
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
   2b866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b86a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                 * It has to be derived from HFCLK state. */
                (*(nrf_clock_hfclk_t *)p_clk_src) = clock_running ? NRF_CLOCK_HFCLK_HIGH_ACCURACY :
                                                                    NRF_CLOCK_HFCLK_LOW_ACCURACY;
#else
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_SRC_Msk)
   2b86e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   2b872:	07db      	lsls	r3, r3, #31
   2b874:	d5ee      	bpl.n	2b854 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   2b876:	4807      	ldr	r0, [pc, #28]	; (2b894 <generic_hfclk_start+0x60>)
   2b878:	f004 fe02 	bl	30480 <set_on_state>
   2b87c:	f381 8811 	msr	BASEPRI, r1
   2b880:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   2b884:	2000      	movs	r0, #0
}
   2b886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   2b88a:	f7ff bfab 	b.w	2b7e4 <clkstarted_handle.constprop.0>
   2b88e:	bf00      	nop
   2b890:	200016b0 	.word	0x200016b0
   2b894:	200016a0 	.word	0x200016a0

0002b898 <api_blocking_start>:
{
   2b898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2b89a:	2200      	movs	r2, #0
   2b89c:	2301      	movs	r3, #1
   2b89e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2b8a2:	4a09      	ldr	r2, [pc, #36]	; (2b8c8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2b8a4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2b8a8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2b8aa:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2b8ae:	f004 fe54 	bl	3055a <api_start>
	if (err < 0) {
   2b8b2:	2800      	cmp	r0, #0
   2b8b4:	db05      	blt.n	2b8c2 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
   2b8b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2b8ba:	2300      	movs	r3, #0
   2b8bc:	4668      	mov	r0, sp
   2b8be:	f002 fd49 	bl	2e354 <z_impl_k_sem_take>
}
   2b8c2:	b005      	add	sp, #20
   2b8c4:	f85d fb04 	ldr.w	pc, [sp], #4
   2b8c8:	00030587 	.word	0x00030587

0002b8cc <generic_hfclk_stop>:
{
   2b8cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b8ce:	f04f 0320 	mov.w	r3, #32
   2b8d2:	f3ef 8411 	mrs	r4, BASEPRI
   2b8d6:	f383 8812 	msr	BASEPRI_MAX, r3
   2b8da:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   2b8de:	4a07      	ldr	r2, [pc, #28]	; (2b8fc <generic_hfclk_stop+0x30>)
   2b8e0:	6813      	ldr	r3, [r2, #0]
   2b8e2:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   2b8e6:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   2b8e8:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   2b8ea:	d402      	bmi.n	2b8f2 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2b8ec:	2001      	movs	r0, #1
   2b8ee:	f004 ff06 	bl	306fe <nrfx_clock_stop>
	__asm__ volatile(
   2b8f2:	f384 8811 	msr	BASEPRI, r4
   2b8f6:	f3bf 8f6f 	isb	sy
}
   2b8fa:	bd10      	pop	{r4, pc}
   2b8fc:	200016b0 	.word	0x200016b0

0002b900 <z_nrf_clock_control_get_onoff>:
}
   2b900:	4a02      	ldr	r2, [pc, #8]	; (2b90c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   2b902:	b2c3      	uxtb	r3, r0
}
   2b904:	201c      	movs	r0, #28
   2b906:	fb03 2000 	mla	r0, r3, r0, r2
   2b90a:	4770      	bx	lr
   2b90c:	20001660 	.word	0x20001660

0002b910 <z_nrf_clock_control_lf_on>:
{
   2b910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2b914:	4938      	ldr	r1, [pc, #224]	; (2b9f8 <z_nrf_clock_control_lf_on+0xe8>)
   2b916:	f3bf 8f5b 	dmb	ish
   2b91a:	4607      	mov	r7, r0
   2b91c:	2201      	movs	r2, #1
   2b91e:	e851 3f00 	ldrex	r3, [r1]
   2b922:	e841 2000 	strex	r0, r2, [r1]
   2b926:	2800      	cmp	r0, #0
   2b928:	d1f9      	bne.n	2b91e <z_nrf_clock_control_lf_on+0xe>
   2b92a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   2b92e:	b933      	cbnz	r3, 2b93e <z_nrf_clock_control_lf_on+0x2e>
   2b930:	4932      	ldr	r1, [pc, #200]	; (2b9fc <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   2b932:	4833      	ldr	r0, [pc, #204]	; (2ba00 <z_nrf_clock_control_lf_on+0xf0>)
   2b934:	604b      	str	r3, [r1, #4]
   2b936:	60cb      	str	r3, [r1, #12]
   2b938:	608a      	str	r2, [r1, #8]
   2b93a:	f003 ff3a 	bl	2f7b2 <onoff_request>
	switch (start_mode) {
   2b93e:	1e7b      	subs	r3, r7, #1
   2b940:	2b01      	cmp	r3, #1
   2b942:	d82b      	bhi.n	2b99c <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   2b944:	2f01      	cmp	r7, #1
   2b946:	d107      	bne.n	2b958 <z_nrf_clock_control_lf_on+0x48>
}

#if NRF_CLOCK_HAS_LFCLKSRCCOPY
NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2b948:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b94c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   2b950:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_XTAL) &&
   2b954:	2b01      	cmp	r3, #1
   2b956:	d021      	beq.n	2b99c <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2b958:	f005 f84d 	bl	309f6 <k_is_in_isr>
   2b95c:	4605      	mov	r5, r0
   2b95e:	b9f8      	cbnz	r0, 2b9a0 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   2b960:	4b28      	ldr	r3, [pc, #160]	; (2ba04 <z_nrf_clock_control_lf_on+0xf4>)
   2b962:	781b      	ldrb	r3, [r3, #0]
   2b964:	b1e3      	cbz	r3, 2b9a0 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   2b966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b96a:	2202      	movs	r2, #2
   2b96c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   2b970:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2b972:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2ba08 <z_nrf_clock_control_lf_on+0xf8>
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   2b976:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   2b97a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   2b97e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2b982:	03d2      	lsls	r2, r2, #15
   2b984:	d516      	bpl.n	2b9b4 <z_nrf_clock_control_lf_on+0xa4>
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
   2b986:	f003 0303 	and.w	r3, r3, #3
   2b98a:	2b01      	cmp	r3, #1
   2b98c:	d001      	beq.n	2b992 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   2b98e:	2f01      	cmp	r7, #1
   2b990:	d110      	bne.n	2b9b4 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   2b992:	b35d      	cbz	r5, 2b9ec <z_nrf_clock_control_lf_on+0xdc>
   2b994:	f386 8811 	msr	BASEPRI, r6
   2b998:	f3bf 8f6f 	isb	sy
}
   2b99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   2b9a0:	f04f 0320 	mov.w	r3, #32
   2b9a4:	f3ef 8611 	mrs	r6, BASEPRI
   2b9a8:	f383 8812 	msr	BASEPRI_MAX, r3
   2b9ac:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2b9b0:	2501      	movs	r5, #1
   2b9b2:	e7de      	b.n	2b972 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   2b9b4:	b1ad      	cbz	r5, 2b9e2 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2b9b6:	4630      	mov	r0, r6
   2b9b8:	f7fd ffb2 	bl	29920 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->NRF_LFCLKSRC);
   2b9bc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_XTAL)
   2b9c0:	2b00      	cmp	r3, #0
   2b9c2:	d1da      	bne.n	2b97a <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2b9c4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   2b9c8:	2a00      	cmp	r2, #0
   2b9ca:	d0d6      	beq.n	2b97a <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b9cc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   2b9d0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   2b9d4:	2301      	movs	r3, #1
   2b9d6:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   2b9da:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b9de:	60a3      	str	r3, [r4, #8]
}
   2b9e0:	e7cb      	b.n	2b97a <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   2b9e2:	2100      	movs	r1, #0
   2b9e4:	2021      	movs	r0, #33	; 0x21
   2b9e6:	f003 f8f7 	bl	2ebd8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2b9ea:	e7e7      	b.n	2b9bc <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   2b9ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b9f0:	2202      	movs	r2, #2
   2b9f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2b9f6:	e7d1      	b.n	2b99c <z_nrf_clock_control_lf_on+0x8c>
   2b9f8:	2000165c 	.word	0x2000165c
   2b9fc:	2000164c 	.word	0x2000164c
   2ba00:	2000167c 	.word	0x2000167c
   2ba04:	2000198d 	.word	0x2000198d
   2ba08:	e000e100 	.word	0xe000e100

0002ba0c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   2ba0c:	b508      	push	{r3, lr}
   2ba0e:	4807      	ldr	r0, [pc, #28]	; (2ba2c <uart_console_init+0x20>)
   2ba10:	f004 ff9a 	bl	30948 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   2ba14:	b138      	cbz	r0, 2ba26 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   2ba16:	4806      	ldr	r0, [pc, #24]	; (2ba30 <uart_console_init+0x24>)
   2ba18:	f7fe fcf4 	bl	2a404 <__stdout_hook_install>
	__printk_hook_install(console_out);
   2ba1c:	4804      	ldr	r0, [pc, #16]	; (2ba30 <uart_console_init+0x24>)
   2ba1e:	f7fb f979 	bl	26d14 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   2ba22:	2000      	movs	r0, #0
}
   2ba24:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2ba26:	f06f 0012 	mvn.w	r0, #18
   2ba2a:	e7fb      	b.n	2ba24 <uart_console_init+0x18>
   2ba2c:	00031114 	.word	0x00031114
   2ba30:	0002ba35 	.word	0x0002ba35

0002ba34 <console_out>:
	if ('\n' == c) {
   2ba34:	280a      	cmp	r0, #10
{
   2ba36:	b538      	push	{r3, r4, r5, lr}
   2ba38:	4d07      	ldr	r5, [pc, #28]	; (2ba58 <console_out+0x24>)
   2ba3a:	4604      	mov	r4, r0
	if ('\n' == c) {
   2ba3c:	d104      	bne.n	2ba48 <console_out+0x14>
   2ba3e:	68ab      	ldr	r3, [r5, #8]
   2ba40:	210d      	movs	r1, #13
   2ba42:	685b      	ldr	r3, [r3, #4]
   2ba44:	4628      	mov	r0, r5
   2ba46:	4798      	blx	r3
   2ba48:	68ab      	ldr	r3, [r5, #8]
   2ba4a:	4803      	ldr	r0, [pc, #12]	; (2ba58 <console_out+0x24>)
   2ba4c:	685b      	ldr	r3, [r3, #4]
   2ba4e:	b2e1      	uxtb	r1, r4
   2ba50:	4798      	blx	r3
}
   2ba52:	4620      	mov	r0, r4
   2ba54:	bd38      	pop	{r3, r4, r5, pc}
   2ba56:	bf00      	nop
   2ba58:	00031114 	.word	0x00031114

0002ba5c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   2ba5c:	b530      	push	{r4, r5, lr}
	return port->config;
   2ba5e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2ba60:	7b05      	ldrb	r5, [r0, #12]
   2ba62:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   2ba66:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   2ba6a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2ba6c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   2ba70:	d105      	bne.n	2ba7e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   2ba72:	4620      	mov	r0, r4
   2ba74:	f000 ff88 	bl	2c988 <nrfx_gpiote_trigger_disable>

		return 0;
   2ba78:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   2ba7a:	b005      	add	sp, #20
   2ba7c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   2ba7e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   2ba80:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2ba84:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   2ba88:	d114      	bne.n	2bab4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   2ba8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2ba8e:	bf0c      	ite	eq
   2ba90:	2304      	moveq	r3, #4
   2ba92:	2305      	movne	r3, #5
   2ba94:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2ba98:	2300      	movs	r3, #0
   2ba9a:	4619      	mov	r1, r3
   2ba9c:	aa02      	add	r2, sp, #8
   2ba9e:	4620      	mov	r0, r4
   2baa0:	f000 fdba 	bl	2c618 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2baa4:	4b23      	ldr	r3, [pc, #140]	; (2bb34 <gpio_nrfx_pin_interrupt_configure+0xd8>)
   2baa6:	4298      	cmp	r0, r3
   2baa8:	d13d      	bne.n	2bb26 <gpio_nrfx_pin_interrupt_configure+0xca>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   2baaa:	2101      	movs	r1, #1
   2baac:	4620      	mov	r0, r4
   2baae:	f000 ff25 	bl	2c8fc <nrfx_gpiote_trigger_enable>
	return 0;
   2bab2:	e7e1      	b.n	2ba78 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2bab4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   2bab8:	d027      	beq.n	2bb0a <gpio_nrfx_pin_interrupt_configure+0xae>
   2baba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   2babe:	bf14      	ite	ne
   2bac0:	2301      	movne	r3, #1
   2bac2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   2bac4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   2bac8:	6883      	ldr	r3, [r0, #8]
   2baca:	fa23 f101 	lsr.w	r1, r3, r1
   2bace:	f011 0101 	ands.w	r1, r1, #1
   2bad2:	d1e1      	bne.n	2ba98 <gpio_nrfx_pin_interrupt_configure+0x3c>
   2bad4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   2bad8:	d1de      	bne.n	2ba98 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   2bada:	f004 031f 	and.w	r3, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2bade:	0962      	lsrs	r2, r4, #5
   2bae0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2bae4:	d013      	beq.n	2bb0e <gpio_nrfx_pin_interrupt_configure+0xb2>
   2bae6:	2a01      	cmp	r2, #1
   2bae8:	d120      	bne.n	2bb2c <gpio_nrfx_pin_interrupt_configure+0xd0>
   2baea:	4a13      	ldr	r2, [pc, #76]	; (2bb38 <gpio_nrfx_pin_interrupt_configure+0xdc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2baec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   2baf0:	07db      	lsls	r3, r3, #31
   2baf2:	d4d1      	bmi.n	2ba98 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2baf4:	f10d 0507 	add.w	r5, sp, #7
   2baf8:	4629      	mov	r1, r5
   2bafa:	4620      	mov	r0, r4
   2bafc:	f000 feae 	bl	2c85c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2bb00:	4b0e      	ldr	r3, [pc, #56]	; (2bb3c <gpio_nrfx_pin_interrupt_configure+0xe0>)
   2bb02:	4298      	cmp	r0, r3
   2bb04:	d006      	beq.n	2bb14 <gpio_nrfx_pin_interrupt_configure+0xb8>
		trigger_config.p_in_channel = &ch;
   2bb06:	9503      	str	r5, [sp, #12]
   2bb08:	e7c6      	b.n	2ba98 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2bb0a:	2303      	movs	r3, #3
   2bb0c:	e7da      	b.n	2bac4 <gpio_nrfx_pin_interrupt_configure+0x68>
        NRF_INTERNAL_GPIO_PORT_EXTRACT(p_port);
   2bb0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2bb12:	e7eb      	b.n	2baec <gpio_nrfx_pin_interrupt_configure+0x90>
			err = nrfx_gpiote_channel_alloc(&ch);
   2bb14:	4628      	mov	r0, r5
   2bb16:	f000 feeb 	bl	2c8f0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   2bb1a:	4b06      	ldr	r3, [pc, #24]	; (2bb34 <gpio_nrfx_pin_interrupt_configure+0xd8>)
   2bb1c:	4298      	cmp	r0, r3
   2bb1e:	d0f2      	beq.n	2bb06 <gpio_nrfx_pin_interrupt_configure+0xaa>
				return -ENOMEM;
   2bb20:	f06f 000b 	mvn.w	r0, #11
   2bb24:	e7a9      	b.n	2ba7a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   2bb26:	f06f 0015 	mvn.w	r0, #21
   2bb2a:	e7a6      	b.n	2ba7a <gpio_nrfx_pin_interrupt_configure+0x1e>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2bb2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   2bb30:	deff      	udf	#255	; 0xff
   2bb32:	bf00      	nop
   2bb34:	0bad0000 	.word	0x0bad0000
   2bb38:	50000300 	.word	0x50000300
   2bb3c:	0bad0004 	.word	0x0bad0004

0002bb40 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   2bb40:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   2bb42:	f000 fec5 	bl	2c8d0 <nrfx_gpiote_is_init>
   2bb46:	4604      	mov	r4, r0
   2bb48:	b968      	cbnz	r0, 2bb66 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   2bb4a:	f000 fe99 	bl	2c880 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   2bb4e:	4b08      	ldr	r3, [pc, #32]	; (2bb70 <gpio_nrfx_init+0x30>)
   2bb50:	4298      	cmp	r0, r3
   2bb52:	d10a      	bne.n	2bb6a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2bb54:	4807      	ldr	r0, [pc, #28]	; (2bb74 <gpio_nrfx_init+0x34>)
   2bb56:	4621      	mov	r1, r4
   2bb58:	f000 fe7a 	bl	2c850 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2bb5c:	4622      	mov	r2, r4
   2bb5e:	2105      	movs	r1, #5
   2bb60:	2006      	movs	r0, #6
   2bb62:	f7fd ff7f 	bl	29a64 <z_arm_irq_priority_set>
		return 0;
   2bb66:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   2bb68:	bd10      	pop	{r4, pc}
		return -EIO;
   2bb6a:	f06f 0004 	mvn.w	r0, #4
   2bb6e:	e7fb      	b.n	2bb68 <gpio_nrfx_init+0x28>
   2bb70:	0bad0000 	.word	0x0bad0000
   2bb74:	0002bb79 	.word	0x0002bb79

0002bb78 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2bb78:	0942      	lsrs	r2, r0, #5
{
   2bb7a:	b570      	push	{r4, r5, r6, lr}
   2bb7c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2bb7e:	d002      	beq.n	2bb86 <nrfx_gpio_handler+0xe>
   2bb80:	2a01      	cmp	r2, #1
   2bb82:	d017      	beq.n	2bbb4 <nrfx_gpio_handler+0x3c>
}
   2bb84:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2bb86:	4e0d      	ldr	r6, [pc, #52]	; (2bbbc <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   2bb88:	6932      	ldr	r2, [r6, #16]
   2bb8a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2bb8c:	2900      	cmp	r1, #0
   2bb8e:	d0f9      	beq.n	2bb84 <nrfx_gpio_handler+0xc>
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   2bb90:	f003 031f 	and.w	r3, r3, #31
   2bb94:	2501      	movs	r5, #1
	return node->next;
   2bb96:	680c      	ldr	r4, [r1, #0]
   2bb98:	409d      	lsls	r5, r3
   2bb9a:	2900      	cmp	r1, #0
   2bb9c:	d0f2      	beq.n	2bb84 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   2bb9e:	688a      	ldr	r2, [r1, #8]
   2bba0:	402a      	ands	r2, r5
   2bba2:	d002      	beq.n	2bbaa <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2bba4:	684b      	ldr	r3, [r1, #4]
   2bba6:	4630      	mov	r0, r6
   2bba8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2bbaa:	b12c      	cbz	r4, 2bbb8 <nrfx_gpio_handler+0x40>
   2bbac:	6823      	ldr	r3, [r4, #0]
   2bbae:	4621      	mov	r1, r4
   2bbb0:	461c      	mov	r4, r3
   2bbb2:	e7f2      	b.n	2bb9a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2bbb4:	4e02      	ldr	r6, [pc, #8]	; (2bbc0 <nrfx_gpio_handler+0x48>)
   2bbb6:	e7e7      	b.n	2bb88 <nrfx_gpio_handler+0x10>
   2bbb8:	4623      	mov	r3, r4
   2bbba:	e7f8      	b.n	2bbae <nrfx_gpio_handler+0x36>
   2bbbc:	00031100 	.word	0x00031100
   2bbc0:	000310ec 	.word	0x000310ec

0002bbc4 <gpio_nrfx_pin_configure>:
{
   2bbc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   2bbc8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2bbca:	7b3b      	ldrb	r3, [r7, #12]
   2bbcc:	f001 051f 	and.w	r5, r1, #31
   2bbd0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   2bbd4:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2bbd6:	4628      	mov	r0, r5
   2bbd8:	f10d 0103 	add.w	r1, sp, #3
{
   2bbdc:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2bbde:	f000 fe3d 	bl	2c85c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   2bbe2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2bbe6:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   2bbe8:	d10b      	bne.n	2bc02 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   2bbea:	4628      	mov	r0, r5
   2bbec:	f000 feee 	bl	2c9cc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   2bbf0:	4b3d      	ldr	r3, [pc, #244]	; (2bce8 <gpio_nrfx_pin_configure+0x124>)
   2bbf2:	4598      	cmp	r8, r3
   2bbf4:	d103      	bne.n	2bbfe <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   2bbf6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2bbfa:	f000 fe73 	bl	2c8e4 <nrfx_gpiote_channel_free>
		return 0;
   2bbfe:	2000      	movs	r0, #0
   2bc00:	e00c      	b.n	2bc1c <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2bc02:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2bc04:	4619      	mov	r1, r3
   2bc06:	aa02      	add	r2, sp, #8
   2bc08:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   2bc0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2bc0e:	f000 fd03 	bl	2c618 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2bc12:	4b35      	ldr	r3, [pc, #212]	; (2bce8 <gpio_nrfx_pin_configure+0x124>)
   2bc14:	4298      	cmp	r0, r3
   2bc16:	d004      	beq.n	2bc22 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   2bc18:	f06f 0015 	mvn.w	r0, #21
}
   2bc1c:	b004      	add	sp, #16
   2bc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   2bc22:	4580      	cmp	r8, r0
   2bc24:	d103      	bne.n	2bc2e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   2bc26:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2bc2a:	f000 fe5b 	bl	2c8e4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   2bc2e:	03a3      	lsls	r3, r4, #14
   2bc30:	d54b      	bpl.n	2bcca <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2bc32:	f240 3306 	movw	r3, #774	; 0x306
   2bc36:	4023      	ands	r3, r4
   2bc38:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   2bc3c:	d019      	beq.n	2bc72 <gpio_nrfx_pin_configure+0xae>
   2bc3e:	d80c      	bhi.n	2bc5a <gpio_nrfx_pin_configure+0x96>
   2bc40:	2b06      	cmp	r3, #6
   2bc42:	d017      	beq.n	2bc74 <gpio_nrfx_pin_configure+0xb0>
   2bc44:	d804      	bhi.n	2bc50 <gpio_nrfx_pin_configure+0x8c>
   2bc46:	b1ab      	cbz	r3, 2bc74 <gpio_nrfx_pin_configure+0xb0>
   2bc48:	2b02      	cmp	r3, #2
   2bc4a:	d1e5      	bne.n	2bc18 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   2bc4c:	2304      	movs	r3, #4
   2bc4e:	e011      	b.n	2bc74 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2bc50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   2bc54:	d1e0      	bne.n	2bc18 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   2bc56:	2301      	movs	r3, #1
   2bc58:	e00c      	b.n	2bc74 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2bc5a:	f240 2202 	movw	r2, #514	; 0x202
   2bc5e:	4293      	cmp	r3, r2
   2bc60:	d027      	beq.n	2bcb2 <gpio_nrfx_pin_configure+0xee>
   2bc62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   2bc66:	d026      	beq.n	2bcb6 <gpio_nrfx_pin_configure+0xf2>
   2bc68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2bc6c:	d1d4      	bne.n	2bc18 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   2bc6e:	2302      	movs	r3, #2
   2bc70:	e000      	b.n	2bc74 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   2bc72:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   2bc74:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   2bc78:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   2bc7c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   2bc80:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   2bc82:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   2bc86:	bf54      	ite	pl
   2bc88:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2bc8c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2bc8e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   2bc90:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2bc94:	d511      	bpl.n	2bcba <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   2bc96:	687a      	ldr	r2, [r7, #4]
   2bc98:	2301      	movs	r3, #1
   2bc9a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   2bc9c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   2bca0:	2200      	movs	r2, #0
   2bca2:	a901      	add	r1, sp, #4
   2bca4:	4628      	mov	r0, r5
   2bca6:	f000 fd63 	bl	2c770 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2bcaa:	4b0f      	ldr	r3, [pc, #60]	; (2bce8 <gpio_nrfx_pin_configure+0x124>)
   2bcac:	4298      	cmp	r0, r3
   2bcae:	d0a6      	beq.n	2bbfe <gpio_nrfx_pin_configure+0x3a>
   2bcb0:	e7b2      	b.n	2bc18 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   2bcb2:	2305      	movs	r3, #5
   2bcb4:	e7de      	b.n	2bc74 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2bcb6:	2303      	movs	r3, #3
   2bcb8:	e7dc      	b.n	2bc74 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   2bcba:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   2bcbc:	bf41      	itttt	mi
   2bcbe:	2301      	movmi	r3, #1
   2bcc0:	687a      	ldrmi	r2, [r7, #4]
   2bcc2:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   2bcc4:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   2bcc8:	e7ea      	b.n	2bca0 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   2bcca:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2bccc:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   2bcd0:	bf54      	ite	pl
   2bcd2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2bcd6:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2bcd8:	461a      	mov	r2, r3
   2bcda:	a901      	add	r1, sp, #4
   2bcdc:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   2bcde:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2bce2:	f000 fc99 	bl	2c618 <nrfx_gpiote_input_configure>
   2bce6:	e7e0      	b.n	2bcaa <gpio_nrfx_pin_configure+0xe6>
   2bce8:	0bad0000 	.word	0x0bad0000

0002bcec <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   2bcec:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2bcee:	2301      	movs	r3, #1
   2bcf0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bcf2:	4a0e      	ldr	r2, [pc, #56]	; (2bd2c <compare_int_lock+0x40>)
   2bcf4:	f3bf 8f5b 	dmb	ish
   2bcf8:	43dc      	mvns	r4, r3
   2bcfa:	e852 1f00 	ldrex	r1, [r2]
   2bcfe:	ea01 0504 	and.w	r5, r1, r4
   2bd02:	e842 5600 	strex	r6, r5, [r2]
   2bd06:	2e00      	cmp	r6, #0
   2bd08:	d1f7      	bne.n	2bcfa <compare_int_lock+0xe>
   2bd0a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
   2bd0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2bd12:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   2bd14:	4806      	ldr	r0, [pc, #24]	; (2bd30 <compare_int_lock+0x44>)
   2bd16:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   2bd1a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2bd1e:	f3bf 8f6f 	isb	sy

	barrier_dmem_fence_full();
	barrier_isync_fence_full();

	return prev & BIT(chan);
   2bd22:	420b      	tst	r3, r1
}
   2bd24:	bf14      	ite	ne
   2bd26:	2001      	movne	r0, #1
   2bd28:	2000      	moveq	r0, #0
   2bd2a:	bd70      	pop	{r4, r5, r6, pc}
   2bd2c:	200016d0 	.word	0x200016d0
   2bd30:	40011000 	.word	0x40011000

0002bd34 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   2bd34:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   2bd36:	490e      	ldr	r1, [pc, #56]	; (2bd70 <sys_clock_timeout_handler+0x3c>)
   2bd38:	e9d1 3400 	ldrd	r3, r4, [r1]
   2bd3c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   2bd3e:	18c3      	adds	r3, r0, r3
   2bd40:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   2bd44:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   2bd48:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   2bd4c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   2bd50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2bd54:	d209      	bcs.n	2bd6a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   2bd56:	4b07      	ldr	r3, [pc, #28]	; (2bd74 <sys_clock_timeout_handler+0x40>)
   2bd58:	681b      	ldr	r3, [r3, #0]
   2bd5a:	0a1a      	lsrs	r2, r3, #8
   2bd5c:	061b      	lsls	r3, r3, #24
   2bd5e:	199c      	adds	r4, r3, r6
   2bd60:	4b05      	ldr	r3, [pc, #20]	; (2bd78 <sys_clock_timeout_handler+0x44>)
   2bd62:	f142 0500 	adc.w	r5, r2, #0
   2bd66:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL, false);
	}

	sys_clock_announce(dticks);
}
   2bd6a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   2bd6c:	f003 b8b6 	b.w	2eedc <sys_clock_announce>
   2bd70:	200009c0 	.word	0x200009c0
   2bd74:	200016d4 	.word	0x200016d4
   2bd78:	200009c8 	.word	0x200009c8

0002bd7c <compare_int_unlock>:
	if (key) {
   2bd7c:	b311      	cbz	r1, 2bdc4 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bd7e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   2bd82:	2301      	movs	r3, #1
   2bd84:	4a10      	ldr	r2, [pc, #64]	; (2bdc8 <compare_int_unlock+0x4c>)
   2bd86:	4083      	lsls	r3, r0
   2bd88:	e852 cf00 	ldrex	ip, [r2]
   2bd8c:	ea4c 0c03 	orr.w	ip, ip, r3
   2bd90:	e842 c100 	strex	r1, ip, [r2]
   2bd94:	2900      	cmp	r1, #0
   2bd96:	d1f7      	bne.n	2bd88 <compare_int_unlock+0xc>
   2bd98:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   2bd9c:	4a0b      	ldr	r2, [pc, #44]	; (2bdcc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
   2bd9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2bda2:	4083      	lsls	r3, r0
   2bda4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bda8:	4b09      	ldr	r3, [pc, #36]	; (2bdd0 <compare_int_unlock+0x54>)
   2bdaa:	f3bf 8f5b 	dmb	ish
   2bdae:	681b      	ldr	r3, [r3, #0]
   2bdb0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2bdb4:	40c3      	lsrs	r3, r0
   2bdb6:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2bdb8:	bf42      	ittt	mi
   2bdba:	4b06      	ldrmi	r3, [pc, #24]	; (2bdd4 <compare_int_unlock+0x58>)
   2bdbc:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   2bdc0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   2bdc4:	4770      	bx	lr
   2bdc6:	bf00      	nop
   2bdc8:	200016d0 	.word	0x200016d0
   2bdcc:	40011000 	.word	0x40011000
   2bdd0:	200016cc 	.word	0x200016cc
   2bdd4:	e000e100 	.word	0xe000e100

0002bdd8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   2bdd8:	4b0d      	ldr	r3, [pc, #52]	; (2be10 <z_nrf_rtc_timer_read+0x38>)
   2bdda:	6818      	ldr	r0, [r3, #0]
   2bddc:	0a01      	lsrs	r1, r0, #8
   2bdde:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2bde0:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   2bde4:	4b0b      	ldr	r3, [pc, #44]	; (2be14 <z_nrf_rtc_timer_read+0x3c>)
   2bde6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   2bdea:	1818      	adds	r0, r3, r0
   2bdec:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2bdf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2bdf4:	d20a      	bcs.n	2be0c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   2bdf6:	4b08      	ldr	r3, [pc, #32]	; (2be18 <z_nrf_rtc_timer_read+0x40>)
   2bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   2bdfc:	4290      	cmp	r0, r2
   2bdfe:	eb71 0303 	sbcs.w	r3, r1, r3
   2be02:	d203      	bcs.n	2be0c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   2be04:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   2be08:	f141 0100 	adc.w	r1, r1, #0
}
   2be0c:	4770      	bx	lr
   2be0e:	bf00      	nop
   2be10:	200016d4 	.word	0x200016d4
   2be14:	40011000 	.word	0x40011000
   2be18:	200009c8 	.word	0x200009c8

0002be1c <compare_set>:
{
   2be1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be20:	b085      	sub	sp, #20
   2be22:	4616      	mov	r6, r2
   2be24:	461f      	mov	r7, r3
   2be26:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
   2be2a:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   2be2c:	f7ff ff5e 	bl	2bcec <compare_int_lock>
   2be30:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   2be32:	f7ff ffd1 	bl	2bdd8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2be36:	42b0      	cmp	r0, r6
   2be38:	eb71 0307 	sbcs.w	r3, r1, r7
   2be3c:	d254      	bcs.n	2bee8 <compare_set+0xcc>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   2be3e:	4b3e      	ldr	r3, [pc, #248]	; (2bf38 <compare_set+0x11c>)
   2be40:	1a30      	subs	r0, r6, r0
   2be42:	eb67 0101 	sbc.w	r1, r7, r1
   2be46:	4298      	cmp	r0, r3
   2be48:	f171 0100 	sbcs.w	r1, r1, #0
   2be4c:	d24f      	bcs.n	2beee <compare_set+0xd2>
		if (target_time != cc_data[chan].target_time) {
   2be4e:	4b3b      	ldr	r3, [pc, #236]	; (2bf3c <compare_set+0x120>)
   2be50:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   2be54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   2be58:	429f      	cmp	r7, r3
   2be5a:	bf08      	it	eq
   2be5c:	4296      	cmpeq	r6, r2
   2be5e:	d05e      	beq.n	2bf1e <compare_set+0x102>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   2be60:	4937      	ldr	r1, [pc, #220]	; (2bf40 <compare_set+0x124>)
	nrf_rtc_event_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
   2be62:	f44f 3880 	mov.w	r8, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
   2be66:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
   2be6a:	fa08 f804 	lsl.w	r8, r8, r4
	return nrf_rtc_event_check(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
   2be6e:	00ad      	lsls	r5, r5, #2
   2be70:	f8c1 8348 	str.w	r8, [r1, #840]	; 0x348
	event_clear(chan);
   2be74:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2be76:	b2ad      	uxth	r5, r5
   2be78:	f004 fbf2 	bl	30660 <event_clear>
	return absolute_time & COUNTER_MAX;
   2be7c:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   2be80:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   2be84:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2be88:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   2be8c:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   2be8e:	f04f 0903 	mov.w	r9, #3
    p_reg->CC[ch] = cc_val;
   2be92:	9302      	str	r3, [sp, #8]
   2be94:	9a02      	ldr	r2, [sp, #8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2be96:	f02c 437f 	bic.w	r3, ip, #4278190080	; 0xff000000
   2be9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    p_reg->EVTENSET = mask;
   2be9e:	f8c1 8344 	str.w	r8, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   2bea2:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   2bea6:	4a27      	ldr	r2, [pc, #156]	; (2bf44 <compare_set+0x128>)
	return (a - b) & COUNTER_MAX;
   2bea8:	f06f 0002 	mvn.w	r0, #2
   2beac:	1ac0      	subs	r0, r0, r3
   2beae:	4460      	add	r0, ip
   2beb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   2beb4:	4290      	cmp	r0, r2
   2beb6:	d932      	bls.n	2bf1e <compare_set+0x102>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2beb8:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   2beba:	b168      	cbz	r0, 2bed8 <compare_set+0xbc>
     return p_reg->COUNTER;
   2bebc:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   2bec0:	9303      	str	r3, [sp, #12]
   2bec2:	eba3 000b 	sub.w	r0, r3, fp
   2bec6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   2beca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2bece:	d926      	bls.n	2bf1e <compare_set+0x102>
					event_clear(chan);
   2bed0:	4620      	mov	r0, r4
   2bed2:	f004 fbc5 	bl	30660 <event_clear>
					if (exact) {
   2bed6:	9b03      	ldr	r3, [sp, #12]
			} else if (exact) {
   2bed8:	f1ba 0f00 	cmp.w	sl, #0
   2bedc:	d107      	bne.n	2beee <compare_set+0xd2>
			cc_val = now + cc_inc;
   2bede:	eb09 0c03 	add.w	ip, r9, r3
			cc_inc++;
   2bee2:	f109 0901 	add.w	r9, r9, #1
	for (;;) {
   2bee6:	e7d5      	b.n	2be94 <compare_set+0x78>
	} else if (!exact) {
   2bee8:	f1ba 0f00 	cmp.w	sl, #0
   2beec:	d009      	beq.n	2bf02 <compare_set+0xe6>
			return -EINVAL;
   2beee:	f06f 0515 	mvn.w	r5, #21
	compare_int_unlock(chan, key);
   2bef2:	4620      	mov	r0, r4
   2bef4:	9901      	ldr	r1, [sp, #4]
   2bef6:	f7ff ff41 	bl	2bd7c <compare_int_unlock>
}
   2befa:	4628      	mov	r0, r5
   2befc:	b005      	add	sp, #20
   2befe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		atomic_or(&force_isr_mask, BIT(chan));
   2bf02:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bf04:	4a10      	ldr	r2, [pc, #64]	; (2bf48 <compare_set+0x12c>)
   2bf06:	f3bf 8f5b 	dmb	ish
   2bf0a:	40a3      	lsls	r3, r4
   2bf0c:	e852 0f00 	ldrex	r0, [r2]
   2bf10:	4318      	orrs	r0, r3
   2bf12:	e842 0100 	strex	r1, r0, [r2]
   2bf16:	2900      	cmp	r1, #0
   2bf18:	d1f8      	bne.n	2bf0c <compare_set+0xf0>
   2bf1a:	f3bf 8f5b 	dmb	ish
		cc_data[chan].target_time = target_time;
   2bf1e:	4907      	ldr	r1, [pc, #28]	; (2bf3c <compare_set+0x120>)
		cc_data[chan].callback = handler;
   2bf20:	980e      	ldr	r0, [sp, #56]	; 0x38
		cc_data[chan].target_time = target_time;
   2bf22:	0123      	lsls	r3, r4, #4
   2bf24:	eb01 1204 	add.w	r2, r1, r4, lsl #4
		cc_data[chan].callback = handler;
   2bf28:	50c8      	str	r0, [r1, r3]
		cc_data[chan].user_context = user_data;
   2bf2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2bf2c:	6053      	str	r3, [r2, #4]
		cc_data[chan].target_time = target_time;
   2bf2e:	e9c2 6702 	strd	r6, r7, [r2, #8]
		cc_data[chan].user_context = user_data;
   2bf32:	2500      	movs	r5, #0
   2bf34:	e7dd      	b.n	2bef2 <compare_set+0xd6>
   2bf36:	bf00      	nop
   2bf38:	00800001 	.word	0x00800001
   2bf3c:	200009b0 	.word	0x200009b0
   2bf40:	40011000 	.word	0x40011000
   2bf44:	007ffffd 	.word	0x007ffffd
   2bf48:	200016cc 	.word	0x200016cc

0002bf4c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   2bf4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   2bf4e:	4c1c      	ldr	r4, [pc, #112]	; (2bfc0 <sys_clock_driver_init+0x74>)
   2bf50:	4b1c      	ldr	r3, [pc, #112]	; (2bfc4 <sys_clock_driver_init+0x78>)
   2bf52:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   2bf56:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2bf5a:	4b1b      	ldr	r3, [pc, #108]	; (2bfc8 <sys_clock_driver_init+0x7c>)
    p_reg->PRESCALER = val;
   2bf5c:	2500      	movs	r5, #0
   2bf5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bf62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2bf66:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   2bf6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   2bf6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2bf72:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2bf76:	4b15      	ldr	r3, [pc, #84]	; (2bfcc <sys_clock_driver_init+0x80>)
   2bf78:	2602      	movs	r6, #2
   2bf7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2bf7e:	2101      	movs	r1, #1
   2bf80:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   2bf84:	2011      	movs	r0, #17
   2bf86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   2bf8a:	462a      	mov	r2, r5
   2bf8c:	f7fd fd6a 	bl	29a64 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2bf90:	2011      	movs	r0, #17
   2bf92:	f7fd fd37 	bl	29a04 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   2bf96:	4a0e      	ldr	r2, [pc, #56]	; (2bfd0 <sys_clock_driver_init+0x84>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2bf98:	2301      	movs	r3, #1
   2bf9a:	60a3      	str	r3, [r4, #8]
   2bf9c:	6023      	str	r3, [r4, #0]
   2bf9e:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL, false);
   2bfa0:	4b0c      	ldr	r3, [pc, #48]	; (2bfd4 <sys_clock_driver_init+0x88>)
   2bfa2:	4a0d      	ldr	r2, [pc, #52]	; (2bfd8 <sys_clock_driver_init+0x8c>)
   2bfa4:	9300      	str	r3, [sp, #0]
   2bfa6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   2bfaa:	2300      	movs	r3, #0
   2bfac:	4628      	mov	r0, r5
   2bfae:	f7ff ff35 	bl	2be1c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2bfb2:	4630      	mov	r0, r6
   2bfb4:	f7ff fcac 	bl	2b910 <z_nrf_clock_control_lf_on>

	return 0;
}
   2bfb8:	4628      	mov	r0, r5
   2bfba:	b004      	add	sp, #16
   2bfbc:	bd70      	pop	{r4, r5, r6, pc}
   2bfbe:	bf00      	nop
   2bfc0:	40011000 	.word	0x40011000
   2bfc4:	000f0003 	.word	0x000f0003
   2bfc8:	200009b0 	.word	0x200009b0
   2bfcc:	e000e100 	.word	0xe000e100
   2bfd0:	200016d0 	.word	0x200016d0
   2bfd4:	0002bd35 	.word	0x0002bd35
   2bfd8:	007fffff 	.word	0x007fffff

0002bfdc <rtc_nrf_isr>:
{
   2bfdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   2bfe0:	4c2f      	ldr	r4, [pc, #188]	; (2c0a0 <rtc_nrf_isr+0xc4>)
   2bfe2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2bfe6:	0799      	lsls	r1, r3, #30
   2bfe8:	d50b      	bpl.n	2c002 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2bfea:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2bfee:	b143      	cbz	r3, 2c002 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   2bff0:	4a2c      	ldr	r2, [pc, #176]	; (2c0a4 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2bff2:	2300      	movs	r3, #0
   2bff4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   2bff8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2bffc:	6813      	ldr	r3, [r2, #0]
   2bffe:	3301      	adds	r3, #1
   2c000:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2c002:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_CHANNEL_INT_MASK(chan))) {
   2c006:	03da      	lsls	r2, r3, #15
   2c008:	d52a      	bpl.n	2c060 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c00a:	f3bf 8f5b 	dmb	ish
   2c00e:	4b26      	ldr	r3, [pc, #152]	; (2c0a8 <rtc_nrf_isr+0xcc>)
   2c010:	e853 2f00 	ldrex	r2, [r3]
   2c014:	f022 0101 	bic.w	r1, r2, #1
   2c018:	e843 1000 	strex	r0, r1, [r3]
   2c01c:	2800      	cmp	r0, #0
   2c01e:	d1f7      	bne.n	2c010 <rtc_nrf_isr+0x34>
   2c020:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   2c024:	07d3      	lsls	r3, r2, #31
   2c026:	d402      	bmi.n	2c02e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c028:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   2c02c:	b1c3      	cbz	r3, 2c060 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2c02e:	2500      	movs	r5, #0
   2c030:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2c034:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   2c038:	f7ff fece 	bl	2bdd8 <z_nrf_rtc_timer_read>
   2c03c:	f04f 0320 	mov.w	r3, #32
   2c040:	f3ef 8211 	mrs	r2, BASEPRI
   2c044:	f383 8812 	msr	BASEPRI_MAX, r3
   2c048:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   2c04c:	4b17      	ldr	r3, [pc, #92]	; (2c0ac <rtc_nrf_isr+0xd0>)
   2c04e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   2c052:	42b0      	cmp	r0, r6
   2c054:	41b9      	sbcs	r1, r7
   2c056:	d206      	bcs.n	2c066 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
   2c058:	f382 8811 	msr	BASEPRI, r2
   2c05c:	f3bf 8f6f 	isb	sy
}
   2c060:	b003      	add	sp, #12
   2c062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2c066:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2c06a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2c06e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   2c072:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   2c076:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   2c078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2c07c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2c080:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2c084:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   2c088:	f382 8811 	msr	BASEPRI, r2
   2c08c:	f3bf 8f6f 	isb	sy
		if (handler) {
   2c090:	2900      	cmp	r1, #0
   2c092:	d0e5      	beq.n	2c060 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
   2c094:	9000      	str	r0, [sp, #0]
   2c096:	4632      	mov	r2, r6
   2c098:	463b      	mov	r3, r7
   2c09a:	4628      	mov	r0, r5
   2c09c:	4788      	blx	r1
   2c09e:	e7df      	b.n	2c060 <rtc_nrf_isr+0x84>
   2c0a0:	40011000 	.word	0x40011000
   2c0a4:	200016d4 	.word	0x200016d4
   2c0a8:	200016cc 	.word	0x200016cc
   2c0ac:	200009b0 	.word	0x200009b0

0002c0b0 <sys_clock_set_timeout>:
{
   2c0b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   2c0b2:	1c43      	adds	r3, r0, #1
   2c0b4:	d023      	beq.n	2c0fe <sys_clock_set_timeout+0x4e>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2c0b6:	2801      	cmp	r0, #1
   2c0b8:	dd23      	ble.n	2c102 <sys_clock_set_timeout+0x52>
   2c0ba:	4a13      	ldr	r2, [pc, #76]	; (2c108 <sys_clock_set_timeout+0x58>)
   2c0bc:	4b13      	ldr	r3, [pc, #76]	; (2c10c <sys_clock_set_timeout+0x5c>)
   2c0be:	4290      	cmp	r0, r2
   2c0c0:	bfd4      	ite	le
   2c0c2:	4604      	movle	r4, r0
   2c0c4:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2c0c6:	f7ff fe87 	bl	2bdd8 <z_nrf_rtc_timer_read>
   2c0ca:	4b11      	ldr	r3, [pc, #68]	; (2c110 <sys_clock_set_timeout+0x60>)
	if (cyc > MAX_CYCLES) {
   2c0cc:	490f      	ldr	r1, [pc, #60]	; (2c10c <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2c0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   2c0d2:	1a80      	subs	r0, r0, r2
		cyc = 0;
   2c0d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2c0d8:	bf28      	it	cs
   2c0da:	2400      	movcs	r4, #0
	cyc += unannounced;
   2c0dc:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   2c0de:	428c      	cmp	r4, r1
   2c0e0:	bf28      	it	cs
   2c0e2:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   2c0e4:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
   2c0e6:	490b      	ldr	r1, [pc, #44]	; (2c114 <sys_clock_set_timeout+0x64>)
   2c0e8:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   2c0ea:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
   2c0ee:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2c0f2:	f143 0300 	adc.w	r3, r3, #0
   2c0f6:	f7ff fe91 	bl	2be1c <compare_set>
}
   2c0fa:	b004      	add	sp, #16
   2c0fc:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   2c0fe:	4c03      	ldr	r4, [pc, #12]	; (2c10c <sys_clock_set_timeout+0x5c>)
   2c100:	e7e1      	b.n	2c0c6 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2c102:	2401      	movs	r4, #1
   2c104:	e7df      	b.n	2c0c6 <sys_clock_set_timeout+0x16>
   2c106:	bf00      	nop
   2c108:	007ffffe 	.word	0x007ffffe
   2c10c:	007fffff 	.word	0x007fffff
   2c110:	200009c0 	.word	0x200009c0
   2c114:	0002bd35 	.word	0x0002bd35

0002c118 <sys_clock_elapsed>:
{
   2c118:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2c11a:	f7ff fe5d 	bl	2bdd8 <z_nrf_rtc_timer_read>
   2c11e:	4b02      	ldr	r3, [pc, #8]	; (2c128 <sys_clock_elapsed+0x10>)
   2c120:	681b      	ldr	r3, [r3, #0]
}
   2c122:	1ac0      	subs	r0, r0, r3
   2c124:	bd08      	pop	{r3, pc}
   2c126:	bf00      	nop
   2c128:	200009c0 	.word	0x200009c0

0002c12c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c12c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2c130:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2c134:	2a08      	cmp	r2, #8
   2c136:	d106      	bne.n	2c146 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2c138:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   2c13c:	2b05      	cmp	r3, #5
   2c13e:	d802      	bhi.n	2c146 <nrf52_errata_103+0x1a>
   2c140:	4a02      	ldr	r2, [pc, #8]	; (2c14c <nrf52_errata_103+0x20>)
   2c142:	5cd0      	ldrb	r0, [r2, r3]
   2c144:	4770      	bx	lr
                {
                    case 0x00ul:
                        return true;
                    case 0x01ul:
                        return false;
   2c146:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   2c148:	4770      	bx	lr
   2c14a:	bf00      	nop
   2c14c:	00032369 	.word	0x00032369

0002c150 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   2c150:	4a02      	ldr	r2, [pc, #8]	; (2c15c <nvmc_wait+0xc>)
   2c152:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2c156:	2b00      	cmp	r3, #0
   2c158:	d0fb      	beq.n	2c152 <nvmc_wait+0x2>
}
   2c15a:	4770      	bx	lr
   2c15c:	4001e000 	.word	0x4001e000

0002c160 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   2c160:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c162:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2c166:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2c16a:	2a08      	cmp	r2, #8
   2c16c:	d14e      	bne.n	2c20c <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   2c16e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2c172:	2100      	movs	r1, #0
   2c174:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   2c178:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2c17c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   2c180:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   2c184:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   2c188:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   2c18c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   2c190:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   2c194:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   2c198:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   2c19c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   2c1a0:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   2c1a4:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   2c1a8:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   2c1ac:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2c1b0:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   2c1b4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   2c1b8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   2c1bc:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   2c1c0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2c1c4:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   2c1c8:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   2c1cc:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   2c1d0:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2c1d4:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   2c1d8:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   2c1dc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   2c1e0:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   2c1e4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   2c1e8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   2c1ec:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   2c1f0:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   2c1f4:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   2c1f8:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   2c1fc:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   2c200:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2c204:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   2c208:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   2c20c:	f7ff ff8e 	bl	2c12c <nrf52_errata_103>
   2c210:	b118      	cbz	r0, 2c21a <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   2c212:	4b3a      	ldr	r3, [pc, #232]	; (2c2fc <SystemInit+0x19c>)
   2c214:	4a3a      	ldr	r2, [pc, #232]	; (2c300 <SystemInit+0x1a0>)
   2c216:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   2c21a:	f7ff ff87 	bl	2c12c <nrf52_errata_103>
   2c21e:	b118      	cbz	r0, 2c228 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   2c220:	4b38      	ldr	r3, [pc, #224]	; (2c304 <SystemInit+0x1a4>)
   2c222:	22fb      	movs	r2, #251	; 0xfb
   2c224:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   2c228:	f7ff ff80 	bl	2c12c <nrf52_errata_103>
   2c22c:	b170      	cbz	r0, 2c24c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   2c22e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2c232:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2c236:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   2c23a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   2c23e:	f022 020f 	bic.w	r2, r2, #15
   2c242:	f003 030f 	and.w	r3, r3, #15
   2c246:	4313      	orrs	r3, r2
   2c248:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   2c24c:	f7ff ff6e 	bl	2c12c <nrf52_errata_103>
   2c250:	b120      	cbz	r0, 2c25c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   2c252:	4b2d      	ldr	r3, [pc, #180]	; (2c308 <SystemInit+0x1a8>)
   2c254:	f44f 7200 	mov.w	r2, #512	; 0x200
   2c258:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2c25c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2c260:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2c264:	2b08      	cmp	r3, #8
   2c266:	d11a      	bne.n	2c29e <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2c268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c26c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   2c270:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   2c272:	bf44      	itt	mi
   2c274:	f06f 0201 	mvnmi.w	r2, #1
   2c278:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2c27c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2c280:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   2c284:	2b05      	cmp	r3, #5
   2c286:	d802      	bhi.n	2c28e <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2c288:	4a20      	ldr	r2, [pc, #128]	; (2c30c <SystemInit+0x1ac>)
   2c28a:	5cd3      	ldrb	r3, [r2, r3]
   2c28c:	b13b      	cbz	r3, 2c29e <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2c28e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2c292:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2c296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c29a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2c29e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2c2a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2c2a6:	2a00      	cmp	r2, #0
   2c2a8:	db03      	blt.n	2c2b2 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   2c2aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2c2ae:	2b00      	cmp	r3, #0
   2c2b0:	da22      	bge.n	2c2f8 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2c2b2:	4917      	ldr	r1, [pc, #92]	; (2c310 <SystemInit+0x1b0>)
   2c2b4:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2c2b6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2c2ba:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2c2be:	2412      	movs	r4, #18
    nvmc_wait();
   2c2c0:	f7ff ff46 	bl	2c150 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2c2c4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2c2c8:	f7ff ff42 	bl	2c150 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2c2cc:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   2c2d0:	f7ff ff3e 	bl	2c150 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2c2d4:	2300      	movs	r3, #0
   2c2d6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2c2da:	f7ff ff39 	bl	2c150 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   2c2de:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2c2e2:	490c      	ldr	r1, [pc, #48]	; (2c314 <SystemInit+0x1b4>)
   2c2e4:	4b0c      	ldr	r3, [pc, #48]	; (2c318 <SystemInit+0x1b8>)
   2c2e6:	68ca      	ldr	r2, [r1, #12]
   2c2e8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2c2ec:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2c2ee:	60cb      	str	r3, [r1, #12]
   2c2f0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2c2f4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2c2f6:	e7fd      	b.n	2c2f4 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   2c2f8:	bd10      	pop	{r4, pc}
   2c2fa:	bf00      	nop
   2c2fc:	40005000 	.word	0x40005000
   2c300:	00038148 	.word	0x00038148
   2c304:	4000f000 	.word	0x4000f000
   2c308:	40029000 	.word	0x40029000
   2c30c:	00032363 	.word	0x00032363
   2c310:	4001e000 	.word	0x4001e000
   2c314:	e000ed00 	.word	0xe000ed00
   2c318:	05fa0004 	.word	0x05fa0004

0002c31c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2c31c:	b530      	push	{r4, r5, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   2c31e:	6804      	ldr	r4, [r0, #0]
        if (prev_mask == 0)
   2c320:	b1cc      	cbz	r4, 2c356 <nrfx_flag32_alloc+0x3a>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2c322:	f3bf 8f5b 	dmb	ish
        {
            return NRFX_ERROR_NO_MEM;
        }

        idx = 31 - NRF_CLZ(prev_mask);
   2c326:	fab4 f384 	clz	r3, r4
   2c32a:	f1c3 031f 	rsb	r3, r3, #31
   2c32e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2c330:	2201      	movs	r2, #1
   2c332:	409a      	lsls	r2, r3
   2c334:	ea24 0202 	bic.w	r2, r4, r2
   2c338:	e850 5f00 	ldrex	r5, [r0]
   2c33c:	42a5      	cmp	r5, r4
   2c33e:	d104      	bne.n	2c34a <nrfx_flag32_alloc+0x2e>
   2c340:	e840 2c00 	strex	ip, r2, [r0]
   2c344:	f1bc 0f00 	cmp.w	ip, #0
   2c348:	d1f6      	bne.n	2c338 <nrfx_flag32_alloc+0x1c>
   2c34a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2c34e:	d1e6      	bne.n	2c31e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;

    return NRFX_SUCCESS;
   2c350:	4802      	ldr	r0, [pc, #8]	; (2c35c <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   2c352:	700b      	strb	r3, [r1, #0]
}
   2c354:	bd30      	pop	{r4, r5, pc}
            return NRFX_ERROR_NO_MEM;
   2c356:	4802      	ldr	r0, [pc, #8]	; (2c360 <nrfx_flag32_alloc+0x44>)
   2c358:	e7fc      	b.n	2c354 <nrfx_flag32_alloc+0x38>
   2c35a:	bf00      	nop
   2c35c:	0bad0000 	.word	0x0bad0000
   2c360:	0bad0002 	.word	0x0bad0002

0002c364 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   2c364:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   2c366:	6803      	ldr	r3, [r0, #0]
   2c368:	40cb      	lsrs	r3, r1
   2c36a:	07db      	lsls	r3, r3, #31
   2c36c:	d414      	bmi.n	2c398 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2c36e:	2301      	movs	r3, #1
   2c370:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   2c372:	6802      	ldr	r2, [r0, #0]
   2c374:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   2c378:	ea43 0102 	orr.w	r1, r3, r2
   2c37c:	e850 4f00 	ldrex	r4, [r0]
   2c380:	4294      	cmp	r4, r2
   2c382:	d104      	bne.n	2c38e <nrfx_flag32_free+0x2a>
   2c384:	e840 1c00 	strex	ip, r1, [r0]
   2c388:	f1bc 0f00 	cmp.w	ip, #0
   2c38c:	d1f6      	bne.n	2c37c <nrfx_flag32_free+0x18>
   2c38e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2c392:	d1ee      	bne.n	2c372 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   2c394:	4801      	ldr	r0, [pc, #4]	; (2c39c <nrfx_flag32_free+0x38>)
}
   2c396:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2c398:	4801      	ldr	r0, [pc, #4]	; (2c3a0 <nrfx_flag32_free+0x3c>)
   2c39a:	e7fc      	b.n	2c396 <nrfx_flag32_free+0x32>
   2c39c:	0bad0000 	.word	0x0bad0000
   2c3a0:	0bad0004 	.word	0x0bad0004

0002c3a4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   2c3a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   2c3a6:	4604      	mov	r4, r0
   2c3a8:	b118      	cbz	r0, 2c3b2 <clock_stop+0xe>
   2c3aa:	2801      	cmp	r0, #1
   2c3ac:	d023      	beq.n	2c3f6 <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   2c3ae:	b003      	add	sp, #12
   2c3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   2c3b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c3b6:	2202      	movs	r2, #2
   2c3b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c3bc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   2c3c0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c3c4:	2201      	movs	r2, #1
   2c3c6:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2c3c8:	4606      	mov	r6, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   2c3ca:	2301      	movs	r3, #1
   2c3cc:	f88d 3007 	strb.w	r3, [sp, #7]
   2c3d0:	f242 7510 	movw	r5, #10000	; 0x2710
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
   2c3d4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    switch (domain)
   2c3d8:	b1d4      	cbz	r4, 2c410 <clock_stop+0x6c>
   2c3da:	2c01      	cmp	r4, #1
   2c3dc:	d1e7      	bne.n	2c3ae <clock_stop+0xa>
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
   2c3de:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
   2c3e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
   2c3e6:	bbae      	cbnz	r6, 2c454 <clock_stop+0xb0>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2c3e8:	b383      	cbz	r3, 2c44c <clock_stop+0xa8>
   2c3ea:	2001      	movs	r0, #1
   2c3ec:	f004 f949 	bl	30682 <nrfx_busy_wait>
   2c3f0:	3d01      	subs	r5, #1
   2c3f2:	d1f4      	bne.n	2c3de <clock_stop+0x3a>
   2c3f4:	e02a      	b.n	2c44c <clock_stop+0xa8>
    p_reg->INTENCLR = mask;
   2c3f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c3fa:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   2c3fc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c400:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2c404:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c408:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2c40a:	f10d 0607 	add.w	r6, sp, #7
   2c40e:	e7dc      	b.n	2c3ca <clock_stop+0x26>
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   2c410:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
   2c414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
   2c418:	b93e      	cbnz	r6, 2c42a <clock_stop+0x86>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2c41a:	2b00      	cmp	r3, #0
   2c41c:	d0c7      	beq.n	2c3ae <clock_stop+0xa>
   2c41e:	2001      	movs	r0, #1
   2c420:	f004 f92f 	bl	30682 <nrfx_busy_wait>
   2c424:	3d01      	subs	r5, #1
   2c426:	d1f3      	bne.n	2c410 <clock_stop+0x6c>
   2c428:	e7c1      	b.n	2c3ae <clock_stop+0xa>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   2c42a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
   2c42e:	f002 0203 	and.w	r2, r2, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   2c432:	6032      	str	r2, [r6, #0]
   2c434:	2b00      	cmp	r3, #0
   2c436:	d0ba      	beq.n	2c3ae <clock_stop+0xa>
   2c438:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2c43c:	2801      	cmp	r0, #1
   2c43e:	d103      	bne.n	2c448 <clock_stop+0xa4>
   2c440:	f004 f91f 	bl	30682 <nrfx_busy_wait>
   2c444:	3d01      	subs	r5, #1
   2c446:	d1c7      	bne.n	2c3d8 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   2c448:	2c01      	cmp	r4, #1
   2c44a:	d1b0      	bne.n	2c3ae <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
   2c44c:	4b05      	ldr	r3, [pc, #20]	; (2c464 <clock_stop+0xc0>)
   2c44e:	2200      	movs	r2, #0
   2c450:	715a      	strb	r2, [r3, #5]
   2c452:	e7ac      	b.n	2c3ae <clock_stop+0xa>
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_SRC_Msk)
   2c454:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
   2c458:	f002 0201 	and.w	r2, r2, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2c45c:	7032      	strb	r2, [r6, #0]
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2c45e:	2b00      	cmp	r3, #0
   2c460:	d1ea      	bne.n	2c438 <clock_stop+0x94>
   2c462:	e7f3      	b.n	2c44c <clock_stop+0xa8>
   2c464:	200016d8 	.word	0x200016d8

0002c468 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2c468:	4b04      	ldr	r3, [pc, #16]	; (2c47c <nrfx_clock_init+0x14>)
   2c46a:	791a      	ldrb	r2, [r3, #4]
   2c46c:	b922      	cbnz	r2, 2c478 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2c46e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   2c470:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   2c472:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   2c474:	4802      	ldr	r0, [pc, #8]	; (2c480 <nrfx_clock_init+0x18>)
   2c476:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2c478:	4802      	ldr	r0, [pc, #8]	; (2c484 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2c47a:	4770      	bx	lr
   2c47c:	200016d8 	.word	0x200016d8
   2c480:	0bad0000 	.word	0x0bad0000
   2c484:	0bad000c 	.word	0x0bad000c

0002c488 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   2c488:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2c48a:	2000      	movs	r0, #0
   2c48c:	f7fd fadc 	bl	29a48 <arch_irq_is_enabled>
   2c490:	b908      	cbnz	r0, 2c496 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2c492:	f7fd fab7 	bl	29a04 <arch_irq_enable>
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   2c496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c49a:	2200      	movs	r2, #0
   2c49c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   2c4a0:	4b01      	ldr	r3, [pc, #4]	; (2c4a8 <nrfx_clock_enable+0x20>)
   2c4a2:	2201      	movs	r2, #1
   2c4a4:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   2c4a6:	bd08      	pop	{r3, pc}
   2c4a8:	20001987 	.word	0x20001987

0002c4ac <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   2c4ac:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2c4ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c4b2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2c4b6:	b16a      	cbz	r2, 2c4d4 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c4b8:	2200      	movs	r2, #0
   2c4ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2c4be:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   2c4c2:	2201      	movs	r2, #1
   2c4c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   2c4c8:	4b11      	ldr	r3, [pc, #68]	; (2c510 <nrfx_clock_irq_handler+0x64>)
   2c4ca:	7958      	ldrb	r0, [r3, #5]
   2c4cc:	b910      	cbnz	r0, 2c4d4 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   2c4ce:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2c4d0:	681b      	ldr	r3, [r3, #0]
   2c4d2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2c4d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2c4d8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2c4dc:	b172      	cbz	r2, 2c4fc <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c4de:	2200      	movs	r2, #0
   2c4e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2c4e4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   2c4e8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   2c4ec:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   2c4f0:	0792      	lsls	r2, r2, #30
   2c4f2:	d104      	bne.n	2c4fe <nrfx_clock_irq_handler+0x52>
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   2c4f4:	2201      	movs	r2, #1
   2c4f6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c4fa:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   2c4fc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   2c4fe:	2202      	movs	r2, #2
   2c500:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2c504:	4b02      	ldr	r3, [pc, #8]	; (2c510 <nrfx_clock_irq_handler+0x64>)
}
   2c506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2c50a:	681b      	ldr	r3, [r3, #0]
   2c50c:	2001      	movs	r0, #1
   2c50e:	4718      	bx	r3
   2c510:	200016d8 	.word	0x200016d8

0002c514 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   2c514:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   2c516:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2c51a:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   2c51c:	6002      	str	r2, [r0, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2c51e:	d004      	beq.n	2c52a <nrf_gpio_pin_port_decode+0x16>
    NRF_GPIO_Type * p_port = NULL;
   2c520:	2b01      	cmp	r3, #1
   2c522:	4803      	ldr	r0, [pc, #12]	; (2c530 <nrf_gpio_pin_port_decode+0x1c>)
   2c524:	bf18      	it	ne
   2c526:	2000      	movne	r0, #0
   2c528:	4770      	bx	lr
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2c52a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   2c52e:	4770      	bx	lr
   2c530:	50000300 	.word	0x50000300

0002c534 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrfy_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   2c534:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2c536:	f100 0308 	add.w	r3, r0, #8
   2c53a:	4c0c      	ldr	r4, [pc, #48]	; (2c56c <call_handler+0x38>)
   2c53c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   2c540:	05da      	lsls	r2, r3, #23
{
   2c542:	4605      	mov	r5, r0
   2c544:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2c546:	d507      	bpl.n	2c558 <call_handler+0x24>
   2c548:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   2c54c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   2c550:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   2c554:	6852      	ldr	r2, [r2, #4]
   2c556:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   2c558:	68a3      	ldr	r3, [r4, #8]
   2c55a:	b12b      	cbz	r3, 2c568 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2c55c:	68e2      	ldr	r2, [r4, #12]
   2c55e:	4631      	mov	r1, r6
   2c560:	4628      	mov	r0, r5
    }
}
   2c562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2c566:	4718      	bx	r3
}
   2c568:	bd70      	pop	{r4, r5, r6, pc}
   2c56a:	bf00      	nop
   2c56c:	200001b8 	.word	0x200001b8

0002c570 <release_handler>:
{
   2c570:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2c572:	4a12      	ldr	r2, [pc, #72]	; (2c5bc <release_handler+0x4c>)
   2c574:	3008      	adds	r0, #8
   2c576:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   2c57a:	05d9      	lsls	r1, r3, #23
   2c57c:	d51b      	bpl.n	2c5b6 <release_handler+0x46>
   2c57e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   2c582:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2c586:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2c58a:	f102 040e 	add.w	r4, r2, #14
   2c58e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2c590:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   2c594:	f413 7f80 	tst.w	r3, #256	; 0x100
   2c598:	d003      	beq.n	2c5a2 <release_handler+0x32>
   2c59a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2c59e:	4299      	cmp	r1, r3
   2c5a0:	d009      	beq.n	2c5b6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2c5a2:	3001      	adds	r0, #1
   2c5a4:	2830      	cmp	r0, #48	; 0x30
   2c5a6:	d1f3      	bne.n	2c590 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   2c5a8:	2300      	movs	r3, #0
   2c5aa:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2c5ae:	4804      	ldr	r0, [pc, #16]	; (2c5c0 <release_handler+0x50>)
}
   2c5b0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2c5b2:	f7ff bed7 	b.w	2c364 <nrfx_flag32_free>
}
   2c5b6:	bc10      	pop	{r4}
   2c5b8:	4770      	bx	lr
   2c5ba:	bf00      	nop
   2c5bc:	200001b8 	.word	0x200001b8
   2c5c0:	2000022c 	.word	0x2000022c

0002c5c4 <__nrfy_internal_gpiote_events_process.constprop.0>:
        return true;
    }
    return false;
}

NRFY_STATIC_INLINE uint32_t __nrfy_internal_gpiote_events_process(NRF_GPIOTE_Type * p_reg,
   2c5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c5c6:	4601      	mov	r1, r0
   2c5c8:	4a10      	ldr	r2, [pc, #64]	; (2c60c <__nrfy_internal_gpiote_events_process.constprop.0+0x48>)
                                                                  uint32_t          mask)
{
    uint32_t event_mask = 0;

    nrf_barrier_r();
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
   2c5ca:	4c11      	ldr	r4, [pc, #68]	; (2c610 <__nrfy_internal_gpiote_events_process.constprop.0+0x4c>)
    uint32_t event_mask = 0;
   2c5cc:	2000      	movs	r0, #0
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
   2c5ce:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2c5d0:	4606      	mov	r6, r0
   2c5d2:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
   2c5d6:	f5a3 43c2 	sub.w	r3, r3, #24832	; 0x6100
   2c5da:	089b      	lsrs	r3, r3, #2
   2c5dc:	fa05 f303 	lsl.w	r3, r5, r3
   2c5e0:	4219      	tst	r1, r3
   2c5e2:	d004      	beq.n	2c5ee <__nrfy_internal_gpiote_events_process.constprop.0+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c5e4:	6817      	ldr	r7, [r2, #0]
   2c5e6:	b117      	cbz	r7, 2c5ee <__nrfy_internal_gpiote_events_process.constprop.0+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2c5e8:	6016      	str	r6, [r2, #0]
   2c5ea:	6817      	ldr	r7, [r2, #0]
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
   2c5ec:	4318      	orrs	r0, r3
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
   2c5ee:	3204      	adds	r2, #4
   2c5f0:	42a2      	cmp	r2, r4
   2c5f2:	d1ee      	bne.n	2c5d2 <__nrfy_internal_gpiote_events_process.constprop.0+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c5f4:	4b07      	ldr	r3, [pc, #28]	; (2c614 <__nrfy_internal_gpiote_events_process.constprop.0+0x50>)
   2c5f6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
   2c5fa:	b132      	cbz	r2, 2c60a <__nrfy_internal_gpiote_events_process.constprop.0+0x46>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2c5fc:	2200      	movs	r2, #0
   2c5fe:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   2c602:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
   2c606:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    }

    (void)__nrfy_internal_gpiote_event_handle(p_reg, mask, NRF_GPIOTE_EVENT_PORT, &event_mask);

    return event_mask;
}
   2c60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c60c:	40006100 	.word	0x40006100
   2c610:	40006120 	.word	0x40006120
   2c614:	40006000 	.word	0x40006000

0002c618 <nrfx_gpiote_input_configure>:
{
   2c618:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2c61c:	461d      	mov	r5, r3
   2c61e:	4604      	mov	r4, r0
   2c620:	4616      	mov	r6, r2
    if (p_input_config)
   2c622:	460b      	mov	r3, r1
   2c624:	b1e9      	cbz	r1, 2c662 <nrfx_gpiote_input_configure+0x4a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2c626:	4f4d      	ldr	r7, [pc, #308]	; (2c75c <nrfx_gpiote_input_configure+0x144>)
   2c628:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2c62c:	f837 2018 	ldrh.w	r2, [r7, r8, lsl #1]
   2c630:	f002 0222 	and.w	r2, r2, #34	; 0x22
   2c634:	2a22      	cmp	r2, #34	; 0x22
   2c636:	d020      	beq.n	2c67a <nrfx_gpiote_input_configure+0x62>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2c638:	2200      	movs	r2, #0
                                              const nrf_gpio_pin_input_t * p_input,
                                              const nrf_gpio_pin_pull_t *  p_pull,
                                              const nrf_gpio_pin_drive_t * p_drive,
                                              const nrf_gpio_pin_sense_t * p_sense)
{
    nrf_gpio_reconfigure(pin_number, p_dir, p_input, p_pull, p_drive, p_sense);
   2c63a:	e9cd 2200 	strd	r2, r2, [sp]
   2c63e:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2c642:	f88d 200f 	strb.w	r2, [sp, #15]
   2c646:	f10d 010e 	add.w	r1, sp, #14
   2c64a:	f10d 020f 	add.w	r2, sp, #15
   2c64e:	f004 f858 	bl	30702 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2c652:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   2c656:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2c65a:	f043 0301 	orr.w	r3, r3, #1
   2c65e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   2c662:	b346      	cbz	r6, 2c6b6 <nrfx_gpiote_input_configure+0x9e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2c664:	4b3d      	ldr	r3, [pc, #244]	; (2c75c <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2c666:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2c66a:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2c66c:	f104 0708 	add.w	r7, r4, #8
   2c670:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   2c674:	0788      	lsls	r0, r1, #30
   2c676:	d502      	bpl.n	2c67e <nrfx_gpiote_input_configure+0x66>
            if (use_evt)
   2c678:	b1aa      	cbz	r2, 2c6a6 <nrfx_gpiote_input_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
   2c67a:	4839      	ldr	r0, [pc, #228]	; (2c760 <nrfx_gpiote_input_configure+0x148>)
   2c67c:	e01d      	b.n	2c6ba <nrfx_gpiote_input_configure+0xa2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2c67e:	f021 0120 	bic.w	r1, r1, #32
   2c682:	04c9      	lsls	r1, r1, #19
   2c684:	0cc9      	lsrs	r1, r1, #19
   2c686:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   2c68a:	b162      	cbz	r2, 2c6a6 <nrfx_gpiote_input_configure+0x8e>
                if (!edge)
   2c68c:	f1bc 0f03 	cmp.w	ip, #3
   2c690:	d8f3      	bhi.n	2c67a <nrfx_gpiote_input_configure+0x62>
                uint8_t ch = *p_trigger_config->p_in_channel;
   2c692:	6872      	ldr	r2, [r6, #4]
   2c694:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2c696:	f1bc 0f00 	cmp.w	ip, #0
   2c69a:	d111      	bne.n	2c6c0 <nrfx_gpiote_input_configure+0xa8>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   2c69c:	4a31      	ldr	r2, [pc, #196]	; (2c764 <nrfx_gpiote_input_configure+0x14c>)
   2c69e:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   2c6a2:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2c6a6:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   2c6aa:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2c6ae:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   2c6b2:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   2c6b6:	bb45      	cbnz	r5, 2c70a <nrfx_gpiote_input_configure+0xf2>
        err = NRFX_SUCCESS;
   2c6b8:	482b      	ldr	r0, [pc, #172]	; (2c768 <nrfx_gpiote_input_configure+0x150>)
}
   2c6ba:	b004      	add	sp, #16
   2c6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2c6c0:	00b2      	lsls	r2, r6, #2
   2c6c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2c6c6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2c6ca:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   2c6ce:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2c6d2:	f020 0003 	bic.w	r0, r0, #3
   2c6d6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2c6da:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2c6de:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   2c6e2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   2c6e6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2c6ea:	0220      	lsls	r0, r4, #8
   2c6ec:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   2c6f0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   2c6f4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   2c6f8:	ea40 000e 	orr.w	r0, r0, lr
   2c6fc:	f041 0120 	orr.w	r1, r1, #32
   2c700:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   2c704:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   2c708:	e7cd      	b.n	2c6a6 <nrfx_gpiote_input_configure+0x8e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   2c70a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   2c70e:	4620      	mov	r0, r4
   2c710:	f7ff ff2e 	bl	2c570 <release_handler>
    if (!handler)
   2c714:	2e00      	cmp	r6, #0
   2c716:	d0cf      	beq.n	2c6b8 <nrfx_gpiote_input_configure+0xa0>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2c718:	4d10      	ldr	r5, [pc, #64]	; (2c75c <nrfx_gpiote_input_configure+0x144>)
   2c71a:	e9d5 2300 	ldrd	r2, r3, [r5]
   2c71e:	4296      	cmp	r6, r2
   2c720:	d101      	bne.n	2c726 <nrfx_gpiote_input_configure+0x10e>
   2c722:	429f      	cmp	r7, r3
   2c724:	d018      	beq.n	2c758 <nrfx_gpiote_input_configure+0x140>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   2c726:	4811      	ldr	r0, [pc, #68]	; (2c76c <nrfx_gpiote_input_configure+0x154>)
   2c728:	f10d 010f 	add.w	r1, sp, #15
   2c72c:	f7ff fdf6 	bl	2c31c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2c730:	4b0d      	ldr	r3, [pc, #52]	; (2c768 <nrfx_gpiote_input_configure+0x150>)
   2c732:	4298      	cmp	r0, r3
   2c734:	d1c1      	bne.n	2c6ba <nrfx_gpiote_input_configure+0xa2>
        handler_id = (int32_t)id;
   2c736:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   2c73a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   2c73e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2c742:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   2c744:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2c746:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   2c74a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   2c74e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2c752:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   2c756:	e7af      	b.n	2c6b8 <nrfx_gpiote_input_configure+0xa0>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2c758:	2200      	movs	r2, #0
   2c75a:	e7ee      	b.n	2c73a <nrfx_gpiote_input_configure+0x122>
   2c75c:	200001b8 	.word	0x200001b8
   2c760:	0bad0004 	.word	0x0bad0004
   2c764:	40006000 	.word	0x40006000
   2c768:	0bad0000 	.word	0x0bad0000
   2c76c:	2000022c 	.word	0x2000022c

0002c770 <nrfx_gpiote_output_configure>:
{
   2c770:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c772:	4604      	mov	r4, r0
   2c774:	b085      	sub	sp, #20
   2c776:	4615      	mov	r5, r2
    if (p_config)
   2c778:	b309      	cbz	r1, 2c7be <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2c77a:	f100 0708 	add.w	r7, r0, #8
   2c77e:	4e31      	ldr	r6, [pc, #196]	; (2c844 <nrfx_gpiote_output_configure+0xd4>)
   2c780:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   2c784:	0798      	lsls	r0, r3, #30
   2c786:	d401      	bmi.n	2c78c <nrfx_gpiote_output_configure+0x1c>
   2c788:	069a      	lsls	r2, r3, #26
   2c78a:	d458      	bmi.n	2c83e <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2c78c:	f013 0f1c 	tst.w	r3, #28
   2c790:	d002      	beq.n	2c798 <nrfx_gpiote_output_configure+0x28>
   2c792:	784b      	ldrb	r3, [r1, #1]
   2c794:	2b01      	cmp	r3, #1
   2c796:	d052      	beq.n	2c83e <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2c798:	2301      	movs	r3, #1
   2c79a:	f88d 300f 	strb.w	r3, [sp, #15]
   2c79e:	2300      	movs	r3, #0
   2c7a0:	e9cd 1300 	strd	r1, r3, [sp]
   2c7a4:	1c4a      	adds	r2, r1, #1
   2c7a6:	1c8b      	adds	r3, r1, #2
   2c7a8:	4620      	mov	r0, r4
   2c7aa:	f10d 010f 	add.w	r1, sp, #15
   2c7ae:	f003 ffa8 	bl	30702 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2c7b2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   2c7b6:	f043 0303 	orr.w	r3, r3, #3
   2c7ba:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   2c7be:	b915      	cbnz	r5, 2c7c6 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   2c7c0:	4821      	ldr	r0, [pc, #132]	; (2c848 <nrfx_gpiote_output_configure+0xd8>)
}
   2c7c2:	b005      	add	sp, #20
   2c7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2c7c6:	4e1f      	ldr	r6, [pc, #124]	; (2c844 <nrfx_gpiote_output_configure+0xd4>)
   2c7c8:	f104 0708 	add.w	r7, r4, #8
   2c7cc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   2c7d0:	0783      	lsls	r3, r0, #30
   2c7d2:	d534      	bpl.n	2c83e <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
   2c7d4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   2c7d8:	4661      	mov	r1, ip
   2c7da:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2c7dc:	f020 0020 	bic.w	r0, r0, #32
   2c7e0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   2c7e4:	04c0      	lsls	r0, r0, #19
   2c7e6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2c7ea:	0cc0      	lsrs	r0, r0, #19
   2c7ec:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2c7f0:	2300      	movs	r3, #0
   2c7f2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   2c7f6:	786a      	ldrb	r2, [r5, #1]
   2c7f8:	2a00      	cmp	r2, #0
   2c7fa:	d0e1      	beq.n	2c7c0 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2c7fc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                       p_task_config->init_val);
   2c800:	78ad      	ldrb	r5, [r5, #2]
   2c802:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   2c806:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2c80a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2c80e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   2c812:	0223      	lsls	r3, r4, #8
   2c814:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2c818:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2c81a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2c81e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2c822:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2c824:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2c826:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2c82a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2c82e:	432b      	orrs	r3, r5
   2c830:	f040 0020 	orr.w	r0, r0, #32
   2c834:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2c838:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2c83c:	e7c0      	b.n	2c7c0 <nrfx_gpiote_output_configure+0x50>
{
   2c83e:	4803      	ldr	r0, [pc, #12]	; (2c84c <nrfx_gpiote_output_configure+0xdc>)
   2c840:	e7bf      	b.n	2c7c2 <nrfx_gpiote_output_configure+0x52>
   2c842:	bf00      	nop
   2c844:	200001b8 	.word	0x200001b8
   2c848:	0bad0000 	.word	0x0bad0000
   2c84c:	0bad0004 	.word	0x0bad0004

0002c850 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2c850:	4b01      	ldr	r3, [pc, #4]	; (2c858 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   2c852:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   2c856:	4770      	bx	lr
   2c858:	200001b8 	.word	0x200001b8

0002c85c <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2c85c:	3008      	adds	r0, #8
   2c85e:	4b05      	ldr	r3, [pc, #20]	; (2c874 <nrfx_gpiote_channel_get+0x18>)
   2c860:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
   2c864:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2c866:	bf43      	ittte	mi
   2c868:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
   2c86a:	4803      	ldrmi	r0, [pc, #12]	; (2c878 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2c86c:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
   2c86e:	4803      	ldrpl	r0, [pc, #12]	; (2c87c <nrfx_gpiote_channel_get+0x20>)
}
   2c870:	4770      	bx	lr
   2c872:	bf00      	nop
   2c874:	200001b8 	.word	0x200001b8
   2c878:	0bad0000 	.word	0x0bad0000
   2c87c:	0bad0004 	.word	0x0bad0004

0002c880 <nrfx_gpiote_init>:
{
   2c880:	b570      	push	{r4, r5, r6, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2c882:	4c0f      	ldr	r4, [pc, #60]	; (2c8c0 <nrfx_gpiote_init+0x40>)
   2c884:	f894 6078 	ldrb.w	r6, [r4, #120]	; 0x78
   2c888:	b9be      	cbnz	r6, 2c8ba <nrfx_gpiote_init+0x3a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2c88a:	4d0e      	ldr	r5, [pc, #56]	; (2c8c4 <nrfx_gpiote_init+0x44>)
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2c88c:	2260      	movs	r2, #96	; 0x60
   2c88e:	4631      	mov	r1, r6
   2c890:	f104 0010 	add.w	r0, r4, #16
   2c894:	f003 fd6b 	bl	3036e <memset>
   2c898:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
    NRFX_IRQ_ENABLE(irqn);
   2c89c:	2006      	movs	r0, #6
   2c89e:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
   2c8a2:	f7fd f8af 	bl	29a04 <arch_irq_enable>
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
   2c8a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   2c8aa:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return err_code;
   2c8ae:	4806      	ldr	r0, [pc, #24]	; (2c8c8 <nrfx_gpiote_init+0x48>)
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2c8b0:	2301      	movs	r3, #1
   2c8b2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2c8b6:	6763      	str	r3, [r4, #116]	; 0x74
}
   2c8b8:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   2c8ba:	4804      	ldr	r0, [pc, #16]	; (2c8cc <nrfx_gpiote_init+0x4c>)
   2c8bc:	e7fc      	b.n	2c8b8 <nrfx_gpiote_init+0x38>
   2c8be:	bf00      	nop
   2c8c0:	200001b8 	.word	0x200001b8
   2c8c4:	40006000 	.word	0x40006000
   2c8c8:	0bad0000 	.word	0x0bad0000
   2c8cc:	0bad0005 	.word	0x0bad0005

0002c8d0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   2c8d0:	4b03      	ldr	r3, [pc, #12]	; (2c8e0 <nrfx_gpiote_is_init+0x10>)
   2c8d2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2c8d6:	3800      	subs	r0, #0
   2c8d8:	bf18      	it	ne
   2c8da:	2001      	movne	r0, #1
   2c8dc:	4770      	bx	lr
   2c8de:	bf00      	nop
   2c8e0:	200001b8 	.word	0x200001b8

0002c8e4 <nrfx_gpiote_channel_free>:
{
   2c8e4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2c8e6:	4801      	ldr	r0, [pc, #4]	; (2c8ec <nrfx_gpiote_channel_free+0x8>)
   2c8e8:	f7ff bd3c 	b.w	2c364 <nrfx_flag32_free>
   2c8ec:	20000228 	.word	0x20000228

0002c8f0 <nrfx_gpiote_channel_alloc>:
{
   2c8f0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2c8f2:	4801      	ldr	r0, [pc, #4]	; (2c8f8 <nrfx_gpiote_channel_alloc+0x8>)
   2c8f4:	f7ff bd12 	b.w	2c31c <nrfx_flag32_alloc>
   2c8f8:	20000228 	.word	0x20000228

0002c8fc <nrfx_gpiote_trigger_enable>:
{
   2c8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2c8fe:	4b20      	ldr	r3, [pc, #128]	; (2c980 <nrfx_gpiote_trigger_enable+0x84>)
   2c900:	f100 0208 	add.w	r2, r0, #8
{
   2c904:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2c906:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2c90a:	069a      	lsls	r2, r3, #26
   2c90c:	d51d      	bpl.n	2c94a <nrfx_gpiote_trigger_enable+0x4e>
   2c90e:	f013 0502 	ands.w	r5, r3, #2
   2c912:	d11a      	bne.n	2c94a <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2c914:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2c916:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   2c918:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   2c91c:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   2c920:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2c924:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2c928:	6005      	str	r5, [r0, #0]
   2c92a:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2c92c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   2c930:	f040 0001 	orr.w	r0, r0, #1
   2c934:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   2c938:	b129      	cbz	r1, 2c946 <nrfx_gpiote_trigger_enable+0x4a>
            nrfy_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   2c93a:	2201      	movs	r2, #1
   2c93c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
   2c940:	4a10      	ldr	r2, [pc, #64]	; (2c984 <nrfx_gpiote_trigger_enable+0x88>)
   2c942:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2c946:	b003      	add	sp, #12
   2c948:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2c94a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2c94e:	2b04      	cmp	r3, #4
   2c950:	d012      	beq.n	2c978 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   2c952:	2b05      	cmp	r3, #5
   2c954:	d012      	beq.n	2c97c <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c956:	a801      	add	r0, sp, #4
   2c958:	9401      	str	r4, [sp, #4]
   2c95a:	f7ff fddb 	bl	2c514 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2c95e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   2c960:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2c964:	40d9      	lsrs	r1, r3
   2c966:	f001 0101 	and.w	r1, r1, #1
NRFY_STATIC_INLINE uint32_t nrfy_gpio_pin_read(uint32_t pin_number)
{
    nrf_barrier_r();
    uint32_t pin = nrf_gpio_pin_read(pin_number);
    nrf_barrier_r();
    return pin;
   2c96a:	3102      	adds	r1, #2
    nrf_gpio_cfg_sense_set(pin_number, sense_config);
   2c96c:	4620      	mov	r0, r4
}
   2c96e:	b003      	add	sp, #12
   2c970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2c974:	f003 bf0e 	b.w	30794 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2c978:	2103      	movs	r1, #3
   2c97a:	e7f7      	b.n	2c96c <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2c97c:	2102      	movs	r1, #2
   2c97e:	e7f5      	b.n	2c96c <nrfx_gpiote_trigger_enable+0x70>
   2c980:	200001b8 	.word	0x200001b8
   2c984:	40006000 	.word	0x40006000

0002c988 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2c988:	4b0e      	ldr	r3, [pc, #56]	; (2c9c4 <nrfx_gpiote_trigger_disable+0x3c>)
   2c98a:	f100 0208 	add.w	r2, r0, #8
   2c98e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2c992:	0699      	lsls	r1, r3, #26
   2c994:	d513      	bpl.n	2c9be <nrfx_gpiote_trigger_disable+0x36>
   2c996:	079a      	lsls	r2, r3, #30
   2c998:	d411      	bmi.n	2c9be <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2c99a:	0b5b      	lsrs	r3, r3, #13
        nrfy_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2c99c:	2201      	movs	r2, #1
   2c99e:	409a      	lsls	r2, r3
    p_reg->NRFX_CONCAT_2(INTENCLR, NRF_GPIOTE_IRQ_GROUP) = mask;
   2c9a0:	009b      	lsls	r3, r3, #2
   2c9a2:	4909      	ldr	r1, [pc, #36]	; (2c9c8 <nrfx_gpiote_trigger_disable+0x40>)
   2c9a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2c9a8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2c9ac:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2c9b0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2c9b4:	f022 0203 	bic.w	r2, r2, #3
   2c9b8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2c9bc:	4770      	bx	lr
   2c9be:	2100      	movs	r1, #0
   2c9c0:	f003 bee8 	b.w	30794 <nrf_gpio_cfg_sense_set>
   2c9c4:	200001b8 	.word	0x200001b8
   2c9c8:	40006000 	.word	0x40006000

0002c9cc <nrfx_gpiote_pin_uninit>:
{
   2c9cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2c9ce:	4d17      	ldr	r5, [pc, #92]	; (2ca2c <nrfx_gpiote_pin_uninit+0x60>)
   2c9d0:	f100 0608 	add.w	r6, r0, #8
{
   2c9d4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2c9d6:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
    if (!pin_in_use(pin))
   2c9da:	07d9      	lsls	r1, r3, #31
   2c9dc:	d524      	bpl.n	2ca28 <nrfx_gpiote_pin_uninit+0x5c>
    nrfx_gpiote_trigger_disable(pin);
   2c9de:	f7ff ffd3 	bl	2c988 <nrfx_gpiote_trigger_disable>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2c9e2:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
    if (pin_in_use_by_te(pin))
   2c9e6:	069a      	lsls	r2, r3, #26
   2c9e8:	d506      	bpl.n	2c9f8 <nrfx_gpiote_pin_uninit+0x2c>
        nrfy_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2c9ea:	0b5b      	lsrs	r3, r3, #13
    p_reg->CONFIG[idx] = 0;
   2c9ec:	4a10      	ldr	r2, [pc, #64]	; (2ca30 <nrfx_gpiote_pin_uninit+0x64>)
   2c9ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   2c9f2:	2100      	movs	r1, #0
   2c9f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   2c9f8:	4620      	mov	r0, r4
   2c9fa:	f7ff fdb9 	bl	2c570 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   2c9fe:	2300      	movs	r3, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ca00:	a801      	add	r0, sp, #4
   2ca02:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
    nrf_gpio_cfg(
   2ca06:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ca08:	f7ff fd84 	bl	2c514 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ca0c:	9b01      	ldr	r3, [sp, #4]
   2ca0e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cnf &= ~to_update;
   2ca12:	4b08      	ldr	r3, [pc, #32]	; (2ca34 <nrfx_gpiote_pin_uninit+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2ca14:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   2ca18:	4013      	ands	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   2ca1a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   2ca1e:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    nrf_gpio_cfg(
   2ca22:	4805      	ldr	r0, [pc, #20]	; (2ca38 <nrfx_gpiote_pin_uninit+0x6c>)
}
   2ca24:	b002      	add	sp, #8
   2ca26:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2ca28:	4804      	ldr	r0, [pc, #16]	; (2ca3c <nrfx_gpiote_pin_uninit+0x70>)
   2ca2a:	e7fb      	b.n	2ca24 <nrfx_gpiote_pin_uninit+0x58>
   2ca2c:	200001b8 	.word	0x200001b8
   2ca30:	40006000 	.word	0x40006000
   2ca34:	fffcf8f0 	.word	0xfffcf8f0
   2ca38:	0bad0000 	.word	0x0bad0000
   2ca3c:	0bad0004 	.word	0x0bad0004

0002ca40 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   2ca40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) & mask;
   2ca44:	4b62      	ldr	r3, [pc, #392]	; (2cbd0 <nrfx_gpiote_irq_handler+0x190>)
   2ca46:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   2ca4a:	b2c0      	uxtb	r0, r0
   2ca4c:	b087      	sub	sp, #28
    uint32_t evt_mask = __nrfy_internal_gpiote_events_process(p_reg, mask);
   2ca4e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   2ca52:	f7ff fdb7 	bl	2c5c4 <__nrfy_internal_gpiote_events_process.constprop.0>
    uint32_t evt_mask = nrfy_gpiote_events_process(NRF_GPIOTE,
                                                   enabled_in_events |
                                                   (uint32_t)NRF_GPIOTE_INT_PORT_MASK);

    /* Handle PORT event. */
    if (evt_mask & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
   2ca56:	1e05      	subs	r5, r0, #0
   2ca58:	f280 809c 	bge.w	2cb94 <nrfx_gpiote_irq_handler+0x154>
        *p_masks = gpio_regs[i]->LATCH;
   2ca5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2ca60:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2cbd4 <nrfx_gpiote_irq_handler+0x194>
   2ca64:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   2ca68:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   2ca6a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2ca6e:	f8d8 3520 	ldr.w	r3, [r8, #1312]	; 0x520
   2ca72:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   2ca74:	f8c8 3520 	str.w	r3, [r8, #1312]	; 0x520
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2ca78:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   2ca7c:	f10d 0a10 	add.w	sl, sp, #16
   2ca80:	ea4f 1349 	mov.w	r3, r9, lsl #5
   2ca84:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   2ca86:	f04f 0b01 	mov.w	fp, #1
   2ca8a:	e049      	b.n	2cb20 <nrfx_gpiote_irq_handler+0xe0>
                pin += 32 * i;
   2ca8c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2ca8e:	4a52      	ldr	r2, [pc, #328]	; (2cbd8 <nrfx_gpiote_irq_handler+0x198>)
                uint32_t pin = NRF_CTZ(latch[i]);
   2ca90:	fa94 f4a4 	rbit	r4, r4
   2ca94:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   2ca98:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2ca9a:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2ca9c:	f104 0308 	add.w	r3, r4, #8
   2caa0:	9403      	str	r4, [sp, #12]
   2caa2:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   2caa6:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   2caaa:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2caae:	fa0b f202 	lsl.w	r2, fp, r2
   2cab2:	ea23 0302 	bic.w	r3, r3, r2
   2cab6:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2caba:	a803      	add	r0, sp, #12
   2cabc:	f7ff fd2a 	bl	2c514 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2cac0:	9b03      	ldr	r3, [sp, #12]
   2cac2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2cac6:	08b9      	lsrs	r1, r7, #2
   2cac8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2cacc:	f3c7 0682 	ubfx	r6, r7, #2, #3
    if (is_level(trigger))
   2cad0:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2cad2:	4637      	mov	r7, r6
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2cad4:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   2cad8:	d52c      	bpl.n	2cb34 <nrfx_gpiote_irq_handler+0xf4>
        call_handler(pin, trigger);
   2cada:	4620      	mov	r0, r4
   2cadc:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2cade:	b2de      	uxtb	r6, r3
   2cae0:	f7ff fd28 	bl	2c534 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2cae4:	a803      	add	r0, sp, #12
   2cae6:	9403      	str	r4, [sp, #12]
   2cae8:	f7ff fd14 	bl	2c514 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2caec:	9b03      	ldr	r3, [sp, #12]
   2caee:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2caf2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrfy_gpio_pin_sense_get(pin) == sense)
   2caf6:	f3c3 4301 	ubfx	r3, r3, #16, #2
   2cafa:	429e      	cmp	r6, r3
   2cafc:	d107      	bne.n	2cb0e <nrfx_gpiote_irq_handler+0xce>
   2cafe:	2100      	movs	r1, #0
   2cb00:	4620      	mov	r0, r4
   2cb02:	f003 fe47 	bl	30794 <nrf_gpio_cfg_sense_set>
   2cb06:	4631      	mov	r1, r6
   2cb08:	4620      	mov	r0, r4
   2cb0a:	f003 fe43 	bl	30794 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2cb0e:	a803      	add	r0, sp, #12
   2cb10:	9403      	str	r4, [sp, #12]
   2cb12:	f7ff fcff 	bl	2c514 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2cb16:	9b03      	ldr	r3, [sp, #12]
   2cb18:	fa0b f303 	lsl.w	r3, fp, r3
   2cb1c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   2cb20:	f85a 4029 	ldr.w	r4, [sl, r9, lsl #2]
   2cb24:	2c00      	cmp	r4, #0
   2cb26:	d1b1      	bne.n	2ca8c <nrfx_gpiote_irq_handler+0x4c>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2cb28:	f1b9 0f00 	cmp.w	r9, #0
   2cb2c:	d11d      	bne.n	2cb6a <nrfx_gpiote_irq_handler+0x12a>
   2cb2e:	f04f 0901 	mov.w	r9, #1
   2cb32:	e7a5      	b.n	2ca80 <nrfx_gpiote_irq_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2cb34:	2b02      	cmp	r3, #2
   2cb36:	d10c      	bne.n	2cb52 <nrfx_gpiote_irq_handler+0x112>
   2cb38:	2103      	movs	r1, #3
   2cb3a:	4620      	mov	r0, r4
   2cb3c:	f003 fe2a 	bl	30794 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2cb40:	f006 0305 	and.w	r3, r6, #5
   2cb44:	2b01      	cmp	r3, #1
   2cb46:	d1e2      	bne.n	2cb0e <nrfx_gpiote_irq_handler+0xce>
            call_handler(pin, trigger);
   2cb48:	4639      	mov	r1, r7
   2cb4a:	4620      	mov	r0, r4
   2cb4c:	f7ff fcf2 	bl	2c534 <call_handler>
   2cb50:	e7dd      	b.n	2cb0e <nrfx_gpiote_irq_handler+0xce>
   2cb52:	2102      	movs	r1, #2
   2cb54:	4620      	mov	r0, r4
   2cb56:	9301      	str	r3, [sp, #4]
   2cb58:	f003 fe1c 	bl	30794 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2cb5c:	2e03      	cmp	r6, #3
   2cb5e:	d0f3      	beq.n	2cb48 <nrfx_gpiote_irq_handler+0x108>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   2cb60:	9b01      	ldr	r3, [sp, #4]
   2cb62:	2b03      	cmp	r3, #3
   2cb64:	d1d3      	bne.n	2cb0e <nrfx_gpiote_irq_handler+0xce>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2cb66:	2e02      	cmp	r6, #2
   2cb68:	e7ed      	b.n	2cb46 <nrfx_gpiote_irq_handler+0x106>
   2cb6a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2cb6e:	f7ff fd29 	bl	2c5c4 <__nrfy_internal_gpiote_events_process.constprop.0>
        *p_masks = gpio_regs[i]->LATCH;
   2cb72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   2cb76:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   2cb7a:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   2cb7c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2cb80:	f8d8 2520 	ldr.w	r2, [r8, #1312]	; 0x520
   2cb84:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   2cb86:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   2cb88:	f8c8 2520 	str.w	r2, [r8, #1312]	; 0x520
   2cb8c:	f47f af74 	bne.w	2ca78 <nrfx_gpiote_irq_handler+0x38>
    {
        port_event_handle();
        evt_mask &= ~(uint32_t)NRF_GPIOTE_INT_PORT_MASK;
   2cb90:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
        mask &= ~NRFX_BIT(ch);
   2cb94:	2401      	movs	r4, #1
    while (mask)
   2cb96:	b915      	cbnz	r5, 2cb9e <nrfx_gpiote_irq_handler+0x15e>
    }

    /* Process pin events. */
    gpiote_evt_handle(evt_mask);
}
   2cb98:	b007      	add	sp, #28
   2cb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   2cb9e:	fa95 f3a5 	rbit	r3, r5
   2cba2:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   2cba6:	fa04 f203 	lsl.w	r2, r4, r3
   2cbaa:	009b      	lsls	r3, r3, #2
   2cbac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2cbb0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2cbb4:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2cbb8:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   2cbbc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2cbc0:	f3c0 2005 	ubfx	r0, r0, #8, #6
   2cbc4:	f3c1 4101 	ubfx	r1, r1, #16, #2
   2cbc8:	f7ff fcb4 	bl	2c534 <call_handler>
   2cbcc:	e7e3      	b.n	2cb96 <nrfx_gpiote_irq_handler+0x156>
   2cbce:	bf00      	nop
   2cbd0:	40006000 	.word	0x40006000
   2cbd4:	50000300 	.word	0x50000300
   2cbd8:	200001b8 	.word	0x200001b8

0002cbdc <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   2cbdc:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   2cbde:	4c18      	ldr	r4, [pc, #96]	; (2cc40 <nrfx_power_init+0x64>)
   2cbe0:	7823      	ldrb	r3, [r4, #0]
   2cbe2:	bb53      	cbnz	r3, 2cc3a <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   2cbe4:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   2cbe6:	f3c2 0340 	ubfx	r3, r2, #1, #1
   2cbea:	0792      	lsls	r2, r2, #30
   2cbec:	d512      	bpl.n	2cc14 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2cbee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2cbf2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2cbf6:	2a08      	cmp	r2, #8
   2cbf8:	d10b      	bne.n	2cc12 <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2cbfa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2cbfe:	2b05      	cmp	r3, #5
   2cc00:	d807      	bhi.n	2cc12 <nrfx_power_init+0x36>
   2cc02:	4a10      	ldr	r2, [pc, #64]	; (2cc44 <nrfx_power_init+0x68>)
   2cc04:	5cd3      	ldrb	r3, [r2, r3]
   2cc06:	b123      	cbz	r3, 2cc12 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   2cc08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cc0c:	2201      	movs	r2, #1
   2cc0e:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   2cc12:	2301      	movs	r3, #1
   2cc14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2cc18:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
   2cc1c:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2cc1e:	f003 0301 	and.w	r3, r3, #1
   2cc22:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2cc26:	2000      	movs	r0, #0
   2cc28:	f7fc ff0e 	bl	29a48 <arch_irq_is_enabled>
   2cc2c:	b908      	cbnz	r0, 2cc32 <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2cc2e:	f7fc fee9 	bl	29a04 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   2cc32:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   2cc34:	4804      	ldr	r0, [pc, #16]	; (2cc48 <nrfx_power_init+0x6c>)
    m_initialized = true;
   2cc36:	7023      	strb	r3, [r4, #0]
}
   2cc38:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   2cc3a:	4804      	ldr	r0, [pc, #16]	; (2cc4c <nrfx_power_init+0x70>)
   2cc3c:	e7fc      	b.n	2cc38 <nrfx_power_init+0x5c>
   2cc3e:	bf00      	nop
   2cc40:	20001988 	.word	0x20001988
   2cc44:	00032386 	.word	0x00032386
   2cc48:	0bad0000 	.word	0x0bad0000
   2cc4c:	0bad000c 	.word	0x0bad000c

0002cc50 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   2cc50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cc54:	f44f 7260 	mov.w	r2, #896	; 0x380
   2cc58:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   2cc5c:	4b01      	ldr	r3, [pc, #4]	; (2cc64 <nrfx_power_usbevt_uninit+0x14>)
   2cc5e:	2200      	movs	r2, #0
   2cc60:	601a      	str	r2, [r3, #0]
}
   2cc62:	4770      	bx	lr
   2cc64:	200016e0 	.word	0x200016e0

0002cc68 <nrfx_power_usbevt_init>:
{
   2cc68:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   2cc6a:	f7ff fff1 	bl	2cc50 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   2cc6e:	6803      	ldr	r3, [r0, #0]
   2cc70:	b10b      	cbz	r3, 2cc76 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   2cc72:	4a01      	ldr	r2, [pc, #4]	; (2cc78 <nrfx_power_usbevt_init+0x10>)
   2cc74:	6013      	str	r3, [r2, #0]
}
   2cc76:	bd08      	pop	{r3, pc}
   2cc78:	200016e0 	.word	0x200016e0

0002cc7c <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   2cc7c:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
   2cc7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cc82:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   2cc86:	0762      	lsls	r2, r4, #29
   2cc88:	d507      	bpl.n	2cc9a <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   2cc8a:	f44f 7084 	mov.w	r0, #264	; 0x108
   2cc8e:	f003 fd90 	bl	307b2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   2cc92:	b110      	cbz	r0, 2cc9a <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   2cc94:	4b1e      	ldr	r3, [pc, #120]	; (2cd10 <nrfx_power_irq_handler+0x94>)
   2cc96:	681b      	ldr	r3, [r3, #0]
   2cc98:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   2cc9a:	06a3      	lsls	r3, r4, #26
   2cc9c:	d508      	bpl.n	2ccb0 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   2cc9e:	f44f 708a 	mov.w	r0, #276	; 0x114
   2cca2:	f003 fd86 	bl	307b2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   2cca6:	b118      	cbz	r0, 2ccb0 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   2cca8:	4b1a      	ldr	r3, [pc, #104]	; (2cd14 <nrfx_power_irq_handler+0x98>)
   2ccaa:	2000      	movs	r0, #0
   2ccac:	681b      	ldr	r3, [r3, #0]
   2ccae:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   2ccb0:	0660      	lsls	r0, r4, #25
   2ccb2:	d508      	bpl.n	2ccc6 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   2ccb4:	f44f 708c 	mov.w	r0, #280	; 0x118
   2ccb8:	f003 fd7b 	bl	307b2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   2ccbc:	b118      	cbz	r0, 2ccc6 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   2ccbe:	4b15      	ldr	r3, [pc, #84]	; (2cd14 <nrfx_power_irq_handler+0x98>)
   2ccc0:	2001      	movs	r0, #1
   2ccc2:	681b      	ldr	r3, [r3, #0]
   2ccc4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   2ccc6:	0621      	lsls	r1, r4, #24
   2ccc8:	d508      	bpl.n	2ccdc <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   2ccca:	f44f 708e 	mov.w	r0, #284	; 0x11c
   2ccce:	f003 fd70 	bl	307b2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   2ccd2:	b118      	cbz	r0, 2ccdc <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   2ccd4:	4b10      	ldr	r3, [pc, #64]	; (2cd18 <nrfx_power_irq_handler+0x9c>)
   2ccd6:	2000      	movs	r0, #0
   2ccd8:	681b      	ldr	r3, [r3, #0]
   2ccda:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   2ccdc:	05e2      	lsls	r2, r4, #23
   2ccde:	d508      	bpl.n	2ccf2 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   2cce0:	f44f 7090 	mov.w	r0, #288	; 0x120
   2cce4:	f003 fd65 	bl	307b2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   2cce8:	b118      	cbz	r0, 2ccf2 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   2ccea:	4b0b      	ldr	r3, [pc, #44]	; (2cd18 <nrfx_power_irq_handler+0x9c>)
   2ccec:	2001      	movs	r0, #1
   2ccee:	681b      	ldr	r3, [r3, #0]
   2ccf0:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   2ccf2:	05a3      	lsls	r3, r4, #22
   2ccf4:	d50a      	bpl.n	2cd0c <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   2ccf6:	f44f 7092 	mov.w	r0, #292	; 0x124
   2ccfa:	f003 fd5a 	bl	307b2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   2ccfe:	b128      	cbz	r0, 2cd0c <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   2cd00:	4b05      	ldr	r3, [pc, #20]	; (2cd18 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   2cd02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   2cd06:	681b      	ldr	r3, [r3, #0]
   2cd08:	2002      	movs	r0, #2
   2cd0a:	4718      	bx	r3
}
   2cd0c:	bd10      	pop	{r4, pc}
   2cd0e:	bf00      	nop
   2cd10:	200016e8 	.word	0x200016e8
   2cd14:	200016e4 	.word	0x200016e4
   2cd18:	200016e0 	.word	0x200016e0

0002cd1c <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2cd1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2cd20:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2cd24:	2a08      	cmp	r2, #8
   2cd26:	d106      	bne.n	2cd36 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2cd28:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2cd2c:	2b05      	cmp	r3, #5
   2cd2e:	d804      	bhi.n	2cd3a <nrf52_errata_187+0x1e>
   2cd30:	4a03      	ldr	r2, [pc, #12]	; (2cd40 <nrf52_errata_187+0x24>)
   2cd32:	5cd0      	ldrb	r0, [r2, r3]
   2cd34:	4770      	bx	lr
                        return false;
   2cd36:	2000      	movs	r0, #0
   2cd38:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2cd3a:	2001      	movs	r0, #1
}
   2cd3c:	4770      	bx	lr
   2cd3e:	bf00      	nop
   2cd40:	0003238c 	.word	0x0003238c

0002cd44 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   2cd44:	4b05      	ldr	r3, [pc, #20]	; (2cd5c <ep_state_access+0x18>)
   2cd46:	f010 0f80 	tst.w	r0, #128	; 0x80
   2cd4a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   2cd4e:	bf08      	it	eq
   2cd50:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   2cd52:	f000 000f 	and.w	r0, r0, #15
}
   2cd56:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2cd5a:	4770      	bx	lr
   2cd5c:	20001894 	.word	0x20001894

0002cd60 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   2cd60:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   2cd62:	4a07      	ldr	r2, [pc, #28]	; (2cd80 <ev_usbreset_handler+0x20>)
   2cd64:	2300      	movs	r3, #0
   2cd66:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   2cd68:	4a06      	ldr	r2, [pc, #24]	; (2cd84 <ev_usbreset_handler+0x24>)
   2cd6a:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   2cd6c:	2301      	movs	r3, #1
   2cd6e:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   2cd70:	4b05      	ldr	r3, [pc, #20]	; (2cd88 <ev_usbreset_handler+0x28>)
   2cd72:	a801      	add	r0, sp, #4
   2cd74:	681b      	ldr	r3, [r3, #0]
   2cd76:	4798      	blx	r3
}
   2cd78:	b003      	add	sp, #12
   2cd7a:	f85d fb04 	ldr.w	pc, [sp], #4
   2cd7e:	bf00      	nop
   2cd80:	2000198b 	.word	0x2000198b
   2cd84:	2000198a 	.word	0x2000198a
   2cd88:	2000192c 	.word	0x2000192c

0002cd8c <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   2cd8c:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
   2cd8e:	4b19      	ldr	r3, [pc, #100]	; (2cdf4 <ev_usbevent_handler+0x68>)
   2cd90:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   2cd94:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   2cd98:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   2cd9a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2cd9e:	d508      	bpl.n	2cdb2 <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   2cda0:	4b15      	ldr	r3, [pc, #84]	; (2cdf8 <ev_usbevent_handler+0x6c>)
   2cda2:	2201      	movs	r2, #1
   2cda4:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   2cda6:	2302      	movs	r3, #2
   2cda8:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   2cdaa:	4b14      	ldr	r3, [pc, #80]	; (2cdfc <ev_usbevent_handler+0x70>)
   2cdac:	a801      	add	r0, sp, #4
   2cdae:	681b      	ldr	r3, [r3, #0]
   2cdb0:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   2cdb2:	05a2      	lsls	r2, r4, #22
   2cdb4:	d508      	bpl.n	2cdc8 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   2cdb6:	4b10      	ldr	r3, [pc, #64]	; (2cdf8 <ev_usbevent_handler+0x6c>)
   2cdb8:	2200      	movs	r2, #0
   2cdba:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   2cdbc:	2303      	movs	r3, #3
   2cdbe:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   2cdc0:	4b0e      	ldr	r3, [pc, #56]	; (2cdfc <ev_usbevent_handler+0x70>)
   2cdc2:	a801      	add	r0, sp, #4
   2cdc4:	681b      	ldr	r3, [r3, #0]
   2cdc6:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   2cdc8:	0563      	lsls	r3, r4, #21
   2cdca:	d510      	bpl.n	2cdee <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   2cdcc:	4b0a      	ldr	r3, [pc, #40]	; (2cdf8 <ev_usbevent_handler+0x6c>)
   2cdce:	781a      	ldrb	r2, [r3, #0]
   2cdd0:	b16a      	cbz	r2, 2cdee <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   2cdd2:	2200      	movs	r2, #0
   2cdd4:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   2cdd6:	4b07      	ldr	r3, [pc, #28]	; (2cdf4 <ev_usbevent_handler+0x68>)
   2cdd8:	2201      	movs	r2, #1
   2cdda:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2cdde:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2cde0:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   2cde2:	2304      	movs	r3, #4
   2cde4:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   2cde6:	4b05      	ldr	r3, [pc, #20]	; (2cdfc <ev_usbevent_handler+0x70>)
   2cde8:	a801      	add	r0, sp, #4
   2cdea:	681b      	ldr	r3, [r3, #0]
   2cdec:	4798      	blx	r3
        }
    }
}
   2cdee:	b002      	add	sp, #8
   2cdf0:	bd10      	pop	{r4, pc}
   2cdf2:	bf00      	nop
   2cdf4:	40027000 	.word	0x40027000
   2cdf8:	2000198b 	.word	0x2000198b
   2cdfc:	2000192c 	.word	0x2000192c

0002ce00 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   2ce00:	f04f 0320 	mov.w	r3, #32
   2ce04:	f3ef 8011 	mrs	r0, BASEPRI
   2ce08:	f383 8812 	msr	BASEPRI_MAX, r3
   2ce0c:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2ce10:	4b0a      	ldr	r3, [pc, #40]	; (2ce3c <usbd_errata_187_211_begin+0x3c>)
   2ce12:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2ce16:	2203      	movs	r2, #3
   2ce18:	b961      	cbnz	r1, 2ce34 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2ce1a:	f249 3175 	movw	r1, #37749	; 0x9375
   2ce1e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   2ce22:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2ce26:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2ce2a:	f380 8811 	msr	BASEPRI, r0
   2ce2e:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   2ce32:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   2ce34:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   2ce38:	e7f7      	b.n	2ce2a <usbd_errata_187_211_begin+0x2a>
   2ce3a:	bf00      	nop
   2ce3c:	4006e000 	.word	0x4006e000

0002ce40 <usbd_errata_187_211_end>:
	__asm__ volatile(
   2ce40:	f04f 0320 	mov.w	r3, #32
   2ce44:	f3ef 8011 	mrs	r0, BASEPRI
   2ce48:	f383 8812 	msr	BASEPRI_MAX, r3
   2ce4c:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2ce50:	4b0a      	ldr	r3, [pc, #40]	; (2ce7c <usbd_errata_187_211_end+0x3c>)
   2ce52:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2ce56:	b961      	cbnz	r1, 2ce72 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2ce58:	f249 3275 	movw	r2, #37749	; 0x9375
   2ce5c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   2ce60:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2ce64:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2ce68:	f380 8811 	msr	BASEPRI, r0
   2ce6c:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   2ce70:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   2ce72:	2200      	movs	r2, #0
   2ce74:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   2ce78:	e7f6      	b.n	2ce68 <usbd_errata_187_211_end+0x28>
   2ce7a:	bf00      	nop
   2ce7c:	4006e000 	.word	0x4006e000

0002ce80 <nrfx_usbd_feeder_flash>:
{
   2ce80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ce82:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   2ce84:	4f0b      	ldr	r7, [pc, #44]	; (2ceb4 <nrfx_usbd_feeder_flash+0x34>)
   2ce86:	429a      	cmp	r2, r3
   2ce88:	bf28      	it	cs
   2ce8a:	461a      	movcs	r2, r3
{
   2ce8c:	460c      	mov	r4, r1
   2ce8e:	4615      	mov	r5, r2
   2ce90:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   2ce92:	6809      	ldr	r1, [r1, #0]
   2ce94:	4638      	mov	r0, r7
   2ce96:	f003 fa5f 	bl	30358 <memcpy>
    p_next->size = tx_size;
   2ce9a:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
   2ce9e:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   2cea0:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
   2cea2:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
   2cea4:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
   2cea6:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   2cea8:	6023      	str	r3, [r4, #0]
}
   2ceaa:	3800      	subs	r0, #0
   2ceac:	bf18      	it	ne
   2ceae:	2001      	movne	r0, #1
   2ceb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ceb2:	bf00      	nop
   2ceb4:	200016ec 	.word	0x200016ec

0002ceb8 <nrfx_usbd_feeder_flash_zlp>:
{
   2ceb8:	b570      	push	{r4, r5, r6, lr}
   2ceba:	684b      	ldr	r3, [r1, #4]
   2cebc:	429a      	cmp	r2, r3
   2cebe:	bf28      	it	cs
   2cec0:	461a      	movcs	r2, r3
   2cec2:	4606      	mov	r6, r0
   2cec4:	460d      	mov	r5, r1
   2cec6:	4614      	mov	r4, r2
    if (tx_size != 0)
   2cec8:	b182      	cbz	r2, 2ceec <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   2ceca:	6809      	ldr	r1, [r1, #0]
   2cecc:	4808      	ldr	r0, [pc, #32]	; (2cef0 <nrfx_usbd_feeder_flash_zlp+0x38>)
   2cece:	f003 fa43 	bl	30358 <memcpy>
        p_next->p_data.tx = p_buffer;
   2ced2:	4b07      	ldr	r3, [pc, #28]	; (2cef0 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
   2ced4:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
   2ced8:	686b      	ldr	r3, [r5, #4]
   2ceda:	1b1b      	subs	r3, r3, r4
   2cedc:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   2cede:	682b      	ldr	r3, [r5, #0]
   2cee0:	4423      	add	r3, r4
}
   2cee2:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   2cee4:	602b      	str	r3, [r5, #0]
}
   2cee6:	bf18      	it	ne
   2cee8:	2001      	movne	r0, #1
   2ceea:	bd70      	pop	{r4, r5, r6, pc}
   2ceec:	4613      	mov	r3, r2
   2ceee:	e7f1      	b.n	2ced4 <nrfx_usbd_feeder_flash_zlp+0x1c>
   2cef0:	200016ec 	.word	0x200016ec

0002cef4 <ev_sof_handler>:
{
   2cef4:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   2cef6:	2300      	movs	r3, #0
   2cef8:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   2cefc:	4b0b      	ldr	r3, [pc, #44]	; (2cf2c <ev_sof_handler+0x38>)
   2cefe:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   2cf02:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   2cf06:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   2cf0a:	4a09      	ldr	r2, [pc, #36]	; (2cf30 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   2cf0c:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   2cf0e:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   2cf10:	bf14      	ite	ne
   2cf12:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
   2cf16:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
   2cf1a:	430b      	orrs	r3, r1
   2cf1c:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   2cf1e:	4b05      	ldr	r3, [pc, #20]	; (2cf34 <ev_sof_handler+0x40>)
   2cf20:	a801      	add	r0, sp, #4
   2cf22:	681b      	ldr	r3, [r3, #0]
   2cf24:	4798      	blx	r3
}
   2cf26:	b003      	add	sp, #12
   2cf28:	f85d fb04 	ldr.w	pc, [sp], #4
   2cf2c:	40027000 	.word	0x40027000
   2cf30:	20001928 	.word	0x20001928
   2cf34:	2000192c 	.word	0x2000192c

0002cf38 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cf38:	4b06      	ldr	r3, [pc, #24]	; (2cf54 <atomic_and.constprop.0.isra.0+0x1c>)
   2cf3a:	f3bf 8f5b 	dmb	ish
   2cf3e:	e853 1f00 	ldrex	r1, [r3]
   2cf42:	4001      	ands	r1, r0
   2cf44:	e843 1200 	strex	r2, r1, [r3]
   2cf48:	2a00      	cmp	r2, #0
   2cf4a:	d1f8      	bne.n	2cf3e <atomic_and.constprop.0.isra.0+0x6>
   2cf4c:	f3bf 8f5b 	dmb	ish
}
   2cf50:	4770      	bx	lr
   2cf52:	bf00      	nop
   2cf54:	20001924 	.word	0x20001924

0002cf58 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2cf58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2cf5c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2cf60:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   2cf62:	bf02      	ittt	eq
   2cf64:	4b03      	ldreq	r3, [pc, #12]	; (2cf74 <usbd_dma_pending_clear+0x1c>)
   2cf66:	2200      	moveq	r2, #0
   2cf68:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
   2cf6c:	4b02      	ldr	r3, [pc, #8]	; (2cf78 <usbd_dma_pending_clear+0x20>)
   2cf6e:	2200      	movs	r2, #0
   2cf70:	701a      	strb	r2, [r3, #0]
}
   2cf72:	4770      	bx	lr
   2cf74:	40027000 	.word	0x40027000
   2cf78:	20001989 	.word	0x20001989

0002cf7c <nrf_usbd_ep0in_dma_handler>:
{
   2cf7c:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   2cf7e:	f7ff ffeb 	bl	2cf58 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2cf82:	4b08      	ldr	r3, [pc, #32]	; (2cfa4 <nrf_usbd_ep0in_dma_handler+0x28>)
   2cf84:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   2cf88:	2a03      	cmp	r2, #3
   2cf8a:	d105      	bne.n	2cf98 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   2cf8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2cf90:	f06f 0001 	mvn.w	r0, #1
   2cf94:	f7ff bfd0 	b.w	2cf38 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2cf98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   2cf9c:	2b00      	cmp	r3, #0
   2cf9e:	d0f5      	beq.n	2cf8c <nrf_usbd_ep0in_dma_handler+0x10>
}
   2cfa0:	bd08      	pop	{r3, pc}
   2cfa2:	bf00      	nop
   2cfa4:	20001804 	.word	0x20001804

0002cfa8 <usbd_ep_data_handler>:
{
   2cfa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   2cfaa:	2201      	movs	r2, #1
   2cfac:	fa02 f501 	lsl.w	r5, r2, r1
   2cfb0:	491c      	ldr	r1, [pc, #112]	; (2d024 <usbd_ep_data_handler+0x7c>)
   2cfb2:	4e1d      	ldr	r6, [pc, #116]	; (2d028 <usbd_ep_data_handler+0x80>)
   2cfb4:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   2cfb6:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   2cfba:	ea43 0305 	orr.w	r3, r3, r5
{
   2cfbe:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   2cfc0:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   2cfc2:	d024      	beq.n	2d00e <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   2cfc4:	f000 020f 	and.w	r2, r0, #15
   2cfc8:	4b18      	ldr	r3, [pc, #96]	; (2d02c <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2cfca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2cfce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2cfd2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2cfd6:	681a      	ldr	r2, [r3, #0]
    if (ret)
   2cfd8:	b132      	cbz	r2, 2cfe8 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2cfda:	2200      	movs	r2, #0
   2cfdc:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   2cfde:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   2cfe0:	681b      	ldr	r3, [r3, #0]
   2cfe2:	d011      	beq.n	2d008 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   2cfe4:	f003 fc4d 	bl	30882 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   2cfe8:	6833      	ldr	r3, [r6, #0]
   2cfea:	402b      	ands	r3, r5
   2cfec:	d10a      	bne.n	2d004 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2cfee:	2206      	movs	r2, #6
   2cff0:	f88d 2004 	strb.w	r2, [sp, #4]
   2cff4:	f88d 4006 	strb.w	r4, [sp, #6]
   2cff8:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   2cffc:	4b0c      	ldr	r3, [pc, #48]	; (2d030 <usbd_ep_data_handler+0x88>)
   2cffe:	a801      	add	r0, sp, #4
   2d000:	681b      	ldr	r3, [r3, #0]
   2d002:	4798      	blx	r3
}
   2d004:	b002      	add	sp, #8
   2d006:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   2d008:	f7ff ffb8 	bl	2cf7c <nrf_usbd_ep0in_dma_handler>
   2d00c:	e7ec      	b.n	2cfe8 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   2d00e:	6833      	ldr	r3, [r6, #0]
   2d010:	421d      	tst	r5, r3
   2d012:	d1f7      	bne.n	2d004 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   2d014:	2306      	movs	r3, #6
   2d016:	f88d 3004 	strb.w	r3, [sp, #4]
   2d01a:	f88d 0006 	strb.w	r0, [sp, #6]
   2d01e:	f88d 2007 	strb.w	r2, [sp, #7]
   2d022:	e7eb      	b.n	2cffc <usbd_ep_data_handler+0x54>
   2d024:	20001928 	.word	0x20001928
   2d028:	20001924 	.word	0x20001924
   2d02c:	000315f6 	.word	0x000315f6
   2d030:	2000192c 	.word	0x2000192c

0002d034 <ev_setup_data_handler>:
{
   2d034:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   2d036:	4b05      	ldr	r3, [pc, #20]	; (2d04c <ev_setup_data_handler+0x18>)
   2d038:	781a      	ldrb	r2, [r3, #0]
   2d03a:	4610      	mov	r0, r2
   2d03c:	f003 fc18 	bl	30870 <ep2bit>
}
   2d040:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   2d044:	4601      	mov	r1, r0
   2d046:	4610      	mov	r0, r2
   2d048:	f7ff bfae 	b.w	2cfa8 <usbd_ep_data_handler>
   2d04c:	2000198a 	.word	0x2000198a

0002d050 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   2d050:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   2d052:	f7ff ff81 	bl	2cf58 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2d056:	4b0c      	ldr	r3, [pc, #48]	; (2d088 <ev_dma_epout8_handler+0x38>)
   2d058:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   2d05c:	2a03      	cmp	r2, #3
   2d05e:	d010      	beq.n	2d082 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   2d060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   2d064:	b96b      	cbnz	r3, 2d082 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2d066:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   2d06a:	f7ff ff65 	bl	2cf38 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2d06e:	2306      	movs	r3, #6
   2d070:	f88d 3004 	strb.w	r3, [sp, #4]
   2d074:	2308      	movs	r3, #8
   2d076:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   2d07a:	4b04      	ldr	r3, [pc, #16]	; (2d08c <ev_dma_epout8_handler+0x3c>)
   2d07c:	a801      	add	r0, sp, #4
   2d07e:	681b      	ldr	r3, [r3, #0]
   2d080:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   2d082:	b003      	add	sp, #12
   2d084:	f85d fb04 	ldr.w	pc, [sp], #4
   2d088:	20001804 	.word	0x20001804
   2d08c:	2000192c 	.word	0x2000192c

0002d090 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   2d090:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   2d092:	f7ff ff61 	bl	2cf58 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2d096:	4b10      	ldr	r3, [pc, #64]	; (2d0d8 <ev_dma_epin8_handler+0x48>)
   2d098:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   2d09c:	2a03      	cmp	r2, #3
   2d09e:	d106      	bne.n	2d0ae <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2d0a0:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   2d0a4:	b003      	add	sp, #12
   2d0a6:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2d0aa:	f7ff bf45 	b.w	2cf38 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   2d0ae:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   2d0b2:	b96b      	cbnz	r3, 2d0d0 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2d0b4:	f46f 7080 	mvn.w	r0, #256	; 0x100
   2d0b8:	f7ff ff3e 	bl	2cf38 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2d0bc:	2306      	movs	r3, #6
   2d0be:	f88d 3004 	strb.w	r3, [sp, #4]
   2d0c2:	2388      	movs	r3, #136	; 0x88
   2d0c4:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   2d0c8:	4b04      	ldr	r3, [pc, #16]	; (2d0dc <ev_dma_epin8_handler+0x4c>)
   2d0ca:	a801      	add	r0, sp, #4
   2d0cc:	681b      	ldr	r3, [r3, #0]
   2d0ce:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   2d0d0:	b003      	add	sp, #12
   2d0d2:	f85d fb04 	ldr.w	pc, [sp], #4
   2d0d6:	bf00      	nop
   2d0d8:	20001804 	.word	0x20001804
   2d0dc:	2000192c 	.word	0x2000192c

0002d0e0 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   2d0e0:	4a02      	ldr	r2, [pc, #8]	; (2d0ec <nrfx_usbd_uninit+0xc>)
   2d0e2:	2300      	movs	r3, #0
   2d0e4:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   2d0e6:	4a02      	ldr	r2, [pc, #8]	; (2d0f0 <nrfx_usbd_uninit+0x10>)
   2d0e8:	7013      	strb	r3, [r2, #0]
    return;
}
   2d0ea:	4770      	bx	lr
   2d0ec:	2000192c 	.word	0x2000192c
   2d0f0:	2000198c 	.word	0x2000198c

0002d0f4 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   2d0f4:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   2d0f6:	4b4c      	ldr	r3, [pc, #304]	; (2d228 <nrfx_usbd_enable+0x134>)
   2d0f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2d0fc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   2d100:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   2d104:	f7ff fe0a 	bl	2cd1c <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   2d108:	b108      	cbz	r0, 2d10e <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   2d10a:	f7ff fe79 	bl	2ce00 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d10e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2d112:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2d116:	2b08      	cmp	r3, #8
   2d118:	d119      	bne.n	2d14e <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
   2d11a:	f04f 0320 	mov.w	r3, #32
   2d11e:	f3ef 8011 	mrs	r0, BASEPRI
   2d122:	f383 8812 	msr	BASEPRI_MAX, r3
   2d126:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2d12a:	4b40      	ldr	r3, [pc, #256]	; (2d22c <nrfx_usbd_enable+0x138>)
   2d12c:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2d130:	22c0      	movs	r2, #192	; 0xc0
   2d132:	2900      	cmp	r1, #0
   2d134:	d170      	bne.n	2d218 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2d136:	f249 3175 	movw	r1, #37749	; 0x9375
   2d13a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   2d13e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2d142:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2d146:	f380 8811 	msr	BASEPRI, r0
   2d14a:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   2d14e:	4b36      	ldr	r3, [pc, #216]	; (2d228 <nrfx_usbd_enable+0x134>)
   2d150:	2201      	movs	r2, #1
   2d152:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   2d156:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   2d15a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   2d15e:	0512      	lsls	r2, r2, #20
   2d160:	d5fb      	bpl.n	2d15a <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
   2d162:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2d166:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   2d16a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d16e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2d172:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2d176:	2b08      	cmp	r3, #8
   2d178:	d118      	bne.n	2d1ac <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
   2d17a:	f04f 0320 	mov.w	r3, #32
   2d17e:	f3ef 8011 	mrs	r0, BASEPRI
   2d182:	f383 8812 	msr	BASEPRI_MAX, r3
   2d186:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2d18a:	4b28      	ldr	r3, [pc, #160]	; (2d22c <nrfx_usbd_enable+0x138>)
   2d18c:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   2d190:	2900      	cmp	r1, #0
   2d192:	d144      	bne.n	2d21e <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2d194:	f249 3275 	movw	r2, #37749	; 0x9375
   2d198:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   2d19c:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2d1a0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   2d1a4:	f380 8811 	msr	BASEPRI, r0
   2d1a8:	f3bf 8f6f 	isb	sy
   2d1ac:	f7ff fdb6 	bl	2cd1c <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   2d1b0:	b130      	cbz	r0, 2d1c0 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
   2d1b2:	f7ff fe45 	bl	2ce40 <usbd_errata_187_211_end>
   2d1b6:	f7ff fdb1 	bl	2cd1c <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   2d1ba:	b108      	cbz	r0, 2d1c0 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
   2d1bc:	f7ff fe20 	bl	2ce00 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d1c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2d1c4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2d1c8:	2b08      	cmp	r3, #8
   2d1ca:	4b17      	ldr	r3, [pc, #92]	; (2d228 <nrfx_usbd_enable+0x134>)
   2d1cc:	d10a      	bne.n	2d1e4 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   2d1ce:	f240 72e3 	movw	r2, #2019	; 0x7e3
   2d1d2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   2d1d6:	2240      	movs	r2, #64	; 0x40
   2d1d8:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   2d1dc:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   2d1e0:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   2d1e4:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   2d1e6:	2280      	movs	r2, #128	; 0x80
   2d1e8:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   2d1ec:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   2d1f0:	4b0f      	ldr	r3, [pc, #60]	; (2d230 <nrfx_usbd_enable+0x13c>)
   2d1f2:	f240 12ff 	movw	r2, #511	; 0x1ff
   2d1f6:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   2d1f8:	4b0e      	ldr	r3, [pc, #56]	; (2d234 <nrfx_usbd_enable+0x140>)
   2d1fa:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   2d1fc:	f7ff feac 	bl	2cf58 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   2d200:	4b0d      	ldr	r3, [pc, #52]	; (2d238 <nrfx_usbd_enable+0x144>)
   2d202:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   2d204:	4b0d      	ldr	r3, [pc, #52]	; (2d23c <nrfx_usbd_enable+0x148>)
   2d206:	2202      	movs	r2, #2
   2d208:	701a      	strb	r2, [r3, #0]
   2d20a:	f7ff fd87 	bl	2cd1c <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   2d20e:	b150      	cbz	r0, 2d226 <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   2d210:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   2d214:	f7ff be14 	b.w	2ce40 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   2d218:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   2d21c:	e793      	b.n	2d146 <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   2d21e:	2200      	movs	r2, #0
   2d220:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   2d224:	e7be      	b.n	2d1a4 <nrfx_usbd_enable+0xb0>
}
   2d226:	bd08      	pop	{r3, pc}
   2d228:	40027000 	.word	0x40027000
   2d22c:	4006e000 	.word	0x4006e000
   2d230:	20001928 	.word	0x20001928
   2d234:	20001924 	.word	0x20001924
   2d238:	2000198a 	.word	0x2000198a
   2d23c:	2000198c 	.word	0x2000198c

0002d240 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   2d240:	4b0a      	ldr	r3, [pc, #40]	; (2d26c <nrfx_usbd_start+0x2c>)
   2d242:	2200      	movs	r2, #0
{
   2d244:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   2d246:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
   2d248:	4a09      	ldr	r2, [pc, #36]	; (2d270 <nrfx_usbd_start+0x30>)
   2d24a:	4b0a      	ldr	r3, [pc, #40]	; (2d274 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   2d24c:	4c0a      	ldr	r4, [pc, #40]	; (2d278 <nrfx_usbd_start+0x38>)
   2d24e:	2800      	cmp	r0, #0
   2d250:	bf08      	it	eq
   2d252:	4613      	moveq	r3, r2
   2d254:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   2d258:	2027      	movs	r0, #39	; 0x27
   2d25a:	f7fc fbd3 	bl	29a04 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   2d25e:	2301      	movs	r3, #1
   2d260:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   2d264:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   2d268:	bd10      	pop	{r4, pc}
   2d26a:	bf00      	nop
   2d26c:	2000198b 	.word	0x2000198b
   2d270:	01c01407 	.word	0x01c01407
   2d274:	01e01407 	.word	0x01e01407
   2d278:	40027000 	.word	0x40027000

0002d27c <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   2d27c:	4b03      	ldr	r3, [pc, #12]	; (2d28c <nrfx_usbd_is_enabled+0x10>)
   2d27e:	7818      	ldrb	r0, [r3, #0]
}
   2d280:	2801      	cmp	r0, #1
   2d282:	bf94      	ite	ls
   2d284:	2000      	movls	r0, #0
   2d286:	2001      	movhi	r0, #1
   2d288:	4770      	bx	lr
   2d28a:	bf00      	nop
   2d28c:	2000198c 	.word	0x2000198c

0002d290 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
   2d290:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d292:	f04f 0320 	mov.w	r3, #32
   2d296:	f3ef 8111 	mrs	r1, BASEPRI
   2d29a:	f383 8812 	msr	BASEPRI_MAX, r3
   2d29e:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
   2d2a2:	4b0f      	ldr	r3, [pc, #60]	; (2d2e0 <nrfx_usbd_suspend+0x50>)
   2d2a4:	781b      	ldrb	r3, [r3, #0]
   2d2a6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   2d2aa:	b193      	cbz	r3, 2d2d2 <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
   2d2ac:	4b0d      	ldr	r3, [pc, #52]	; (2d2e4 <nrfx_usbd_suspend+0x54>)
   2d2ae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   2d2b2:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   2d2b6:	d10c      	bne.n	2d2d2 <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   2d2b8:	2401      	movs	r4, #1
   2d2ba:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   2d2be:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   2d2c2:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   2d2c6:	05a4      	lsls	r4, r4, #22
   2d2c8:	d504      	bpl.n	2d2d4 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   2d2ca:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   2d2ce:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   2d2d2:	2000      	movs	r0, #0
	__asm__ volatile(
   2d2d4:	f381 8811 	msr	BASEPRI, r1
   2d2d8:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
   2d2dc:	bd10      	pop	{r4, pc}
   2d2de:	bf00      	nop
   2d2e0:	2000198b 	.word	0x2000198b
   2d2e4:	40027000 	.word	0x40027000

0002d2e8 <nrfx_usbd_init>:
{
   2d2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   2d2ea:	4b1c      	ldr	r3, [pc, #112]	; (2d35c <nrfx_usbd_init+0x74>)
   2d2ec:	781c      	ldrb	r4, [r3, #0]
   2d2ee:	bb94      	cbnz	r4, 2d356 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
   2d2f0:	4a1b      	ldr	r2, [pc, #108]	; (2d360 <nrfx_usbd_init+0x78>)
   2d2f2:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   2d2f4:	2201      	movs	r2, #1
   2d2f6:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2d2f8:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   2d2fc:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   2d2fe:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2d302:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   2d306:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2d308:	bf14      	ite	ne
   2d30a:	4639      	movne	r1, r7
   2d30c:	2140      	moveq	r1, #64	; 0x40
   2d30e:	4628      	mov	r0, r5
   2d310:	f003 fae6 	bl	308e0 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   2d314:	4628      	mov	r0, r5
   2d316:	f7ff fd15 	bl	2cd44 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   2d31a:	3401      	adds	r4, #1
   2d31c:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   2d31e:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
   2d320:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
   2d322:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   2d324:	d1eb      	bne.n	2d2fe <nrfx_usbd_init+0x16>
   2d326:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2d328:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   2d32c:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2d32e:	f014 0f08 	tst.w	r4, #8
   2d332:	b2e6      	uxtb	r6, r4
   2d334:	bf14      	ite	ne
   2d336:	4639      	movne	r1, r7
   2d338:	2140      	moveq	r1, #64	; 0x40
   2d33a:	4630      	mov	r0, r6
   2d33c:	f003 fad0 	bl	308e0 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   2d340:	4630      	mov	r0, r6
   2d342:	f7ff fcff 	bl	2cd44 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   2d346:	3401      	adds	r4, #1
   2d348:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   2d34a:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   2d34c:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   2d34e:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   2d350:	d1ed      	bne.n	2d32e <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
   2d352:	4804      	ldr	r0, [pc, #16]	; (2d364 <nrfx_usbd_init+0x7c>)
}
   2d354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
   2d356:	4804      	ldr	r0, [pc, #16]	; (2d368 <nrfx_usbd_init+0x80>)
   2d358:	e7fc      	b.n	2d354 <nrfx_usbd_init+0x6c>
   2d35a:	bf00      	nop
   2d35c:	2000198c 	.word	0x2000198c
   2d360:	2000192c 	.word	0x2000192c
   2d364:	0bad0000 	.word	0x0bad0000
   2d368:	0bad0005 	.word	0x0bad0005

0002d36c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   2d36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d370:	4604      	mov	r4, r0
	__asm__ volatile(
   2d372:	f04f 0320 	mov.w	r3, #32
   2d376:	f3ef 8611 	mrs	r6, BASEPRI
   2d37a:	f383 8812 	msr	BASEPRI_MAX, r3
   2d37e:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   2d382:	f010 090f 	ands.w	r9, r0, #15
   2d386:	d103      	bne.n	2d390 <nrfx_usbd_ep_transfer+0x24>
   2d388:	4b27      	ldr	r3, [pc, #156]	; (2d428 <nrfx_usbd_ep_transfer+0xbc>)
   2d38a:	781b      	ldrb	r3, [r3, #0]
   2d38c:	4283      	cmp	r3, r0
   2d38e:	d147      	bne.n	2d420 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2d390:	4b26      	ldr	r3, [pc, #152]	; (2d42c <nrfx_usbd_ep_transfer+0xc0>)
   2d392:	4f27      	ldr	r7, [pc, #156]	; (2d430 <nrfx_usbd_ep_transfer+0xc4>)
   2d394:	681a      	ldr	r2, [r3, #0]
   2d396:	683b      	ldr	r3, [r7, #0]
   2d398:	43d2      	mvns	r2, r2
   2d39a:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
   2d39c:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2d39e:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
   2d3a0:	f003 fa66 	bl	30870 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2d3a4:	f04f 0801 	mov.w	r8, #1
   2d3a8:	fa08 f800 	lsl.w	r8, r8, r0
   2d3ac:	ea12 0f08 	tst.w	r2, r8
   2d3b0:	d138      	bne.n	2d424 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   2d3b2:	4620      	mov	r0, r4
   2d3b4:	f7ff fcc6 	bl	2cd44 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2d3b8:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
   2d3ba:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   2d3bc:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2d3be:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
   2d3c2:	d529      	bpl.n	2d418 <nrfx_usbd_ep_transfer+0xac>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2d3c4:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2d3c6:	6888      	ldr	r0, [r1, #8]
   2d3c8:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   2d3cc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2d3d0:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   2d3d4:	d11d      	bne.n	2d412 <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2d3d6:	4a17      	ldr	r2, [pc, #92]	; (2d434 <nrfx_usbd_ep_transfer+0xc8>)
   2d3d8:	4c17      	ldr	r4, [pc, #92]	; (2d438 <nrfx_usbd_ep_transfer+0xcc>)
   2d3da:	2800      	cmp	r0, #0
   2d3dc:	bf08      	it	eq
   2d3de:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2d3e0:	4816      	ldr	r0, [pc, #88]	; (2d43c <nrfx_usbd_ep_transfer+0xd0>)
   2d3e2:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   2d3e4:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
   2d3e6:	c907      	ldmia	r1, {r0, r1, r2}
   2d3e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   2d3ec:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
   2d3ee:	2300      	movs	r3, #0
   2d3f0:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   2d3f2:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   2d3f4:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
   2d3f6:	4812      	ldr	r0, [pc, #72]	; (2d440 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   2d3f8:	ea43 0308 	orr.w	r3, r3, r8
   2d3fc:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2d3fe:	4b11      	ldr	r3, [pc, #68]	; (2d444 <nrfx_usbd_ep_transfer+0xd8>)
   2d400:	2280      	movs	r2, #128	; 0x80
   2d402:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   2d406:	f386 8811 	msr	BASEPRI, r6
   2d40a:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   2d40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   2d412:	4a0d      	ldr	r2, [pc, #52]	; (2d448 <nrfx_usbd_ep_transfer+0xdc>)
   2d414:	4c0d      	ldr	r4, [pc, #52]	; (2d44c <nrfx_usbd_ep_transfer+0xe0>)
   2d416:	e7e0      	b.n	2d3da <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   2d418:	4a0d      	ldr	r2, [pc, #52]	; (2d450 <nrfx_usbd_ep_transfer+0xe4>)
   2d41a:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   2d41c:	4a0d      	ldr	r2, [pc, #52]	; (2d454 <nrfx_usbd_ep_transfer+0xe8>)
   2d41e:	e7e1      	b.n	2d3e4 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
   2d420:	480d      	ldr	r0, [pc, #52]	; (2d458 <nrfx_usbd_ep_transfer+0xec>)
   2d422:	e7f0      	b.n	2d406 <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
   2d424:	480d      	ldr	r0, [pc, #52]	; (2d45c <nrfx_usbd_ep_transfer+0xf0>)
   2d426:	e7ee      	b.n	2d406 <nrfx_usbd_ep_transfer+0x9a>
   2d428:	2000198a 	.word	0x2000198a
   2d42c:	20001928 	.word	0x20001928
   2d430:	20001924 	.word	0x20001924
   2d434:	00030849 	.word	0x00030849
   2d438:	00030827 	.word	0x00030827
   2d43c:	20001798 	.word	0x20001798
   2d440:	0bad0000 	.word	0x0bad0000
   2d444:	e000e100 	.word	0xe000e100
   2d448:	0002ceb9 	.word	0x0002ceb9
   2d44c:	0002ce81 	.word	0x0002ce81
   2d450:	2000172c 	.word	0x2000172c
   2d454:	000307f5 	.word	0x000307f5
   2d458:	0bad000a 	.word	0x0bad000a
   2d45c:	0bad000b 	.word	0x0bad000b

0002d460 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   2d460:	f010 0f08 	tst.w	r0, #8
   2d464:	4b07      	ldr	r3, [pc, #28]	; (2d484 <nrfx_usbd_epout_size_get+0x24>)
   2d466:	d006      	beq.n	2d476 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   2d468:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   2d46c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   2d470:	bf18      	it	ne
   2d472:	2000      	movne	r0, #0
   2d474:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   2d476:	f000 000f 	and.w	r0, r0, #15
   2d47a:	f500 7094 	add.w	r0, r0, #296	; 0x128
   2d47e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   2d482:	4770      	bx	lr
   2d484:	40027000 	.word	0x40027000

0002d488 <usbd_dmareq_process>:
{
   2d488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   2d48c:	4e59      	ldr	r6, [pc, #356]	; (2d5f4 <usbd_dmareq_process+0x16c>)
   2d48e:	7833      	ldrb	r3, [r6, #0]
{
   2d490:	b085      	sub	sp, #20
    if (!m_dma_pending)
   2d492:	2b00      	cmp	r3, #0
   2d494:	d173      	bne.n	2d57e <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   2d496:	f8df 8160 	ldr.w	r8, [pc, #352]	; 2d5f8 <usbd_dmareq_process+0x170>
   2d49a:	4d58      	ldr	r5, [pc, #352]	; (2d5fc <usbd_dmareq_process+0x174>)
   2d49c:	f8d8 4000 	ldr.w	r4, [r8]
   2d4a0:	682b      	ldr	r3, [r5, #0]
   2d4a2:	401c      	ands	r4, r3
   2d4a4:	d06b      	beq.n	2d57e <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   2d4a6:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
   2d4aa:	bf14      	ite	ne
   2d4ac:	fa93 f4a3 	rbitne	r4, r3
   2d4b0:	fa94 f4a4 	rbiteq	r4, r4
   2d4b4:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2d4b8:	f04f 0901 	mov.w	r9, #1
   2d4bc:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2d4c0:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2d4c2:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2d4c6:	d95d      	bls.n	2d584 <usbd_dmareq_process+0xfc>
   2d4c8:	3c10      	subs	r4, #16
   2d4ca:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2d4cc:	4620      	mov	r0, r4
   2d4ce:	f7ff fc39 	bl	2cd44 <ep_state_access>
   2d4d2:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   2d4d4:	4620      	mov	r0, r4
   2d4d6:	f7ff ffc3 	bl	2d460 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   2d4da:	f8da 7000 	ldr.w	r7, [sl]
   2d4de:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   2d4e2:	f8da 1004 	ldr.w	r1, [sl, #4]
   2d4e6:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   2d4e8:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
   2d4ea:	a802      	add	r0, sp, #8
   2d4ec:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
   2d4ee:	9b02      	ldr	r3, [sp, #8]
   2d4f0:	2b00      	cmp	r3, #0
   2d4f2:	d153      	bne.n	2d59c <usbd_dmareq_process+0x114>
                if (!continue_transfer)
   2d4f4:	b908      	cbnz	r0, 2d4fa <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
   2d4f6:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2d4fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
   2d4fe:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
   2d500:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   2d504:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   2d506:	bf02      	ittt	eq
   2d508:	4b3d      	ldreq	r3, [pc, #244]	; (2d600 <usbd_dmareq_process+0x178>)
   2d50a:	2282      	moveq	r2, #130	; 0x82
   2d50c:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   2d510:	2301      	movs	r3, #1
   2d512:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
   2d514:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   2d516:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   2d518:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
   2d51a:	ea03 0309 	and.w	r3, r3, r9
   2d51e:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   2d520:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
   2d524:	2900      	cmp	r1, #0
   2d526:	4413      	add	r3, r2
   2d528:	f8ca 3008 	str.w	r3, [sl, #8]
   2d52c:	f004 0508 	and.w	r5, r4, #8
   2d530:	4b33      	ldr	r3, [pc, #204]	; (2d600 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   2d532:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   2d536:	da4e      	bge.n	2d5d6 <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
   2d538:	2d00      	cmp	r5, #0
   2d53a:	d044      	beq.n	2d5c6 <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
   2d53c:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   2d540:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   2d544:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2d546:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2d54a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2d54e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2d552:	2201      	movs	r2, #1
   2d554:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2d556:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   2d558:	4a2a      	ldr	r2, [pc, #168]	; (2d604 <usbd_dmareq_process+0x17c>)
   2d55a:	4b2b      	ldr	r3, [pc, #172]	; (2d608 <usbd_dmareq_process+0x180>)
   2d55c:	ea13 0321 	ands.w	r3, r3, r1, asr #32
   2d560:	bf38      	it	cc
   2d562:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2d564:	4926      	ldr	r1, [pc, #152]	; (2d600 <usbd_dmareq_process+0x178>)
   2d566:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2d56a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2d56e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2d572:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   2d574:	b91a      	cbnz	r2, 2d57e <usbd_dmareq_process+0xf6>
   2d576:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   2d57a:	2a00      	cmp	r2, #0
   2d57c:	d0f9      	beq.n	2d572 <usbd_dmareq_process+0xea>
}
   2d57e:	b005      	add	sp, #20
   2d580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2d584:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2d588:	4620      	mov	r0, r4
   2d58a:	f7ff fbdb 	bl	2cd44 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
   2d58e:	6803      	ldr	r3, [r0, #0]
   2d590:	8982      	ldrh	r2, [r0, #12]
   2d592:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
   2d594:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
   2d596:	a802      	add	r0, sp, #8
   2d598:	4798      	blx	r3
   2d59a:	e7ab      	b.n	2d4f4 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
   2d59c:	9b03      	ldr	r3, [sp, #12]
   2d59e:	459b      	cmp	fp, r3
   2d5a0:	d9a8      	bls.n	2d4f4 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   2d5a2:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2d5a4:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   2d5a6:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   2d5aa:	f7ff fcc5 	bl	2cf38 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   2d5ae:	2306      	movs	r3, #6
   2d5b0:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   2d5b4:	4b15      	ldr	r3, [pc, #84]	; (2d60c <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   2d5b6:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   2d5ba:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   2d5bc:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   2d5c0:	a801      	add	r0, sp, #4
   2d5c2:	4798      	blx	r3
                    continue;
   2d5c4:	e76a      	b.n	2d49c <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
   2d5c6:	2514      	movs	r5, #20
   2d5c8:	fb05 3304 	mla	r3, r5, r4, r3
   2d5cc:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   2d5d0:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
   2d5d4:	e7b6      	b.n	2d544 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
   2d5d6:	b12d      	cbz	r5, 2d5e4 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
   2d5d8:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   2d5dc:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
   2d5e0:	2328      	movs	r3, #40	; 0x28
   2d5e2:	e7b0      	b.n	2d546 <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
   2d5e4:	2514      	movs	r5, #20
   2d5e6:	fb05 3304 	mla	r3, r5, r4, r3
   2d5ea:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   2d5ee:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   2d5f2:	e7f5      	b.n	2d5e0 <usbd_dmareq_process+0x158>
   2d5f4:	20001989 	.word	0x20001989
   2d5f8:	20001924 	.word	0x20001924
   2d5fc:	20001928 	.word	0x20001928
   2d600:	40027000 	.word	0x40027000
   2d604:	000315e4 	.word	0x000315e4
   2d608:	000315f6 	.word	0x000315f6
   2d60c:	2000192c 	.word	0x2000192c

0002d610 <ev_epdata_handler>:
{
   2d610:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   2d612:	4b0f      	ldr	r3, [pc, #60]	; (2d650 <ev_epdata_handler+0x40>)
   2d614:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   2d618:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   2d61c:	2501      	movs	r5, #1
    while (dataepstatus)
   2d61e:	b91c      	cbnz	r4, 2d628 <ev_epdata_handler+0x18>
}
   2d620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   2d624:	f7ff bf30 	b.w	2d488 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   2d628:	fa94 f3a4 	rbit	r3, r4
   2d62c:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2d630:	2b0f      	cmp	r3, #15
   2d632:	bfc8      	it	gt
   2d634:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   2d638:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2d63a:	bfd4      	ite	le
   2d63c:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   2d640:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   2d642:	fa05 f303 	lsl.w	r3, r5, r3
   2d646:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   2d64a:	f7ff fcad 	bl	2cfa8 <usbd_ep_data_handler>
   2d64e:	e7e6      	b.n	2d61e <ev_epdata_handler+0xe>
   2d650:	40027000 	.word	0x40027000

0002d654 <nrf_usbd_epout_dma_handler>:
{
   2d654:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
   2d656:	f7ff fc7f 	bl	2cf58 <usbd_dma_pending_clear>
{
   2d65a:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2d65c:	f7ff fb72 	bl	2cd44 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2d660:	7b83      	ldrb	r3, [r0, #14]
   2d662:	2b03      	cmp	r3, #3
   2d664:	d10d      	bne.n	2d682 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2d666:	4620      	mov	r0, r4
   2d668:	f003 f902 	bl	30870 <ep2bit>
   2d66c:	2301      	movs	r3, #1
   2d66e:	fa03 f000 	lsl.w	r0, r3, r0
   2d672:	43c0      	mvns	r0, r0
   2d674:	f7ff fc60 	bl	2cf38 <atomic_and.constprop.0.isra.0>
}
   2d678:	b003      	add	sp, #12
   2d67a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   2d67e:	f7ff bf03 	b.w	2d488 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   2d682:	6805      	ldr	r5, [r0, #0]
   2d684:	2d00      	cmp	r5, #0
   2d686:	d1f7      	bne.n	2d678 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2d688:	4620      	mov	r0, r4
   2d68a:	f003 f8f1 	bl	30870 <ep2bit>
   2d68e:	2301      	movs	r3, #1
   2d690:	fa03 f000 	lsl.w	r0, r3, r0
   2d694:	43c0      	mvns	r0, r0
   2d696:	f7ff fc4f 	bl	2cf38 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2d69a:	2306      	movs	r3, #6
   2d69c:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   2d6a0:	4b04      	ldr	r3, [pc, #16]	; (2d6b4 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2d6a2:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   2d6a6:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2d6a8:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   2d6ac:	a801      	add	r0, sp, #4
   2d6ae:	4798      	blx	r3
   2d6b0:	e7e2      	b.n	2d678 <nrf_usbd_epout_dma_handler+0x24>
   2d6b2:	bf00      	nop
   2d6b4:	2000192c 	.word	0x2000192c

0002d6b8 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   2d6b8:	4b02      	ldr	r3, [pc, #8]	; (2d6c4 <nrfx_usbd_ep_stall+0xc>)
   2d6ba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   2d6be:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   2d6c2:	4770      	bx	lr
   2d6c4:	40027000 	.word	0x40027000

0002d6c8 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   2d6c8:	0702      	lsls	r2, r0, #28
   2d6ca:	d413      	bmi.n	2d6f4 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   2d6cc:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   2d6d0:	f010 0f80 	tst.w	r0, #128	; 0x80
   2d6d4:	4a08      	ldr	r2, [pc, #32]	; (2d6f8 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   2d6d6:	bf0b      	itete	eq
   2d6d8:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   2d6dc:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   2d6e0:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   2d6e4:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   2d6e8:	bf08      	it	eq
   2d6ea:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   2d6ec:	1e43      	subs	r3, r0, #1
   2d6ee:	4258      	negs	r0, r3
   2d6f0:	4158      	adcs	r0, r3
   2d6f2:	4770      	bx	lr
        return false;
   2d6f4:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   2d6f6:	4770      	bx	lr
   2d6f8:	40027000 	.word	0x40027000

0002d6fc <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   2d6fc:	4b04      	ldr	r3, [pc, #16]	; (2d710 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   2d6fe:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   2d702:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   2d706:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   2d70a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   2d70e:	4770      	bx	lr
   2d710:	40027000 	.word	0x40027000

0002d714 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   2d714:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   2d716:	2208      	movs	r2, #8
   2d718:	2100      	movs	r1, #0
{
   2d71a:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   2d71c:	f002 fe27 	bl	3036e <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   2d720:	4b0e      	ldr	r3, [pc, #56]	; (2d75c <nrfx_usbd_setup_get+0x48>)
   2d722:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   2d726:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   2d728:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   2d72c:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   2d72e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   2d732:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   2d736:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   2d73a:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   2d73c:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   2d740:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   2d744:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   2d748:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   2d74a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   2d74e:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   2d752:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   2d756:	80e3      	strh	r3, [r4, #6]
}
   2d758:	bd10      	pop	{r4, pc}
   2d75a:	bf00      	nop
   2d75c:	40027000 	.word	0x40027000

0002d760 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2d760:	4b02      	ldr	r3, [pc, #8]	; (2d76c <nrfx_usbd_setup_data_clear+0xc>)
   2d762:	2201      	movs	r2, #1
   2d764:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2d766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   2d768:	4770      	bx	lr
   2d76a:	bf00      	nop
   2d76c:	40027000 	.word	0x40027000

0002d770 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   2d770:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   2d772:	f7ff fbf1 	bl	2cf58 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2d776:	4b10      	ldr	r3, [pc, #64]	; (2d7b8 <ev_dma_epout0_handler+0x48>)
   2d778:	7b9a      	ldrb	r2, [r3, #14]
   2d77a:	2a03      	cmp	r2, #3
   2d77c:	d106      	bne.n	2d78c <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2d77e:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   2d782:	b002      	add	sp, #8
   2d784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2d788:	f7ff bbd6 	b.w	2cf38 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   2d78c:	681c      	ldr	r4, [r3, #0]
   2d78e:	b974      	cbnz	r4, 2d7ae <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   2d790:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   2d794:	f7ff fbd0 	bl	2cf38 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2d798:	2306      	movs	r3, #6
   2d79a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   2d79e:	4b07      	ldr	r3, [pc, #28]	; (2d7bc <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2d7a0:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   2d7a4:	681b      	ldr	r3, [r3, #0]
   2d7a6:	a801      	add	r0, sp, #4
   2d7a8:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   2d7aa:	b002      	add	sp, #8
   2d7ac:	bd10      	pop	{r4, pc}
   2d7ae:	b002      	add	sp, #8
   2d7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   2d7b4:	f7ff bfd4 	b.w	2d760 <nrfx_usbd_setup_data_clear>
   2d7b8:	20001804 	.word	0x20001804
   2d7bc:	2000192c 	.word	0x2000192c

0002d7c0 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2d7c0:	4b02      	ldr	r3, [pc, #8]	; (2d7cc <nrfx_usbd_setup_clear+0xc>)
   2d7c2:	2201      	movs	r2, #1
   2d7c4:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2d7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   2d7c8:	4770      	bx	lr
   2d7ca:	bf00      	nop
   2d7cc:	40027000 	.word	0x40027000

0002d7d0 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2d7d0:	4b02      	ldr	r3, [pc, #8]	; (2d7dc <nrfx_usbd_setup_stall+0xc>)
   2d7d2:	2201      	movs	r2, #1
   2d7d4:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   2d7d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   2d7d8:	4770      	bx	lr
   2d7da:	bf00      	nop
   2d7dc:	40027000 	.word	0x40027000

0002d7e0 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   2d7e0:	4b01      	ldr	r3, [pc, #4]	; (2d7e8 <nrfx_usbd_last_setup_dir_get+0x8>)
   2d7e2:	7818      	ldrb	r0, [r3, #0]
   2d7e4:	4770      	bx	lr
   2d7e6:	bf00      	nop
   2d7e8:	2000198a 	.word	0x2000198a

0002d7ec <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   2d7ec:	b510      	push	{r4, lr}
   2d7ee:	4602      	mov	r2, r0
	__asm__ volatile(
   2d7f0:	f04f 0320 	mov.w	r3, #32
   2d7f4:	f3ef 8411 	mrs	r4, BASEPRI
   2d7f8:	f383 8812 	msr	BASEPRI_MAX, r3
   2d7fc:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   2d800:	f003 f836 	bl	30870 <ep2bit>
   2d804:	490d      	ldr	r1, [pc, #52]	; (2d83c <nrfx_usbd_transfer_out_drop+0x50>)
   2d806:	2301      	movs	r3, #1
   2d808:	fa03 f000 	lsl.w	r0, r3, r0
   2d80c:	680b      	ldr	r3, [r1, #0]
   2d80e:	ea23 0300 	bic.w	r3, r3, r0
   2d812:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   2d814:	f012 0108 	ands.w	r1, r2, #8
   2d818:	d10a      	bne.n	2d830 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   2d81a:	f002 030f 	and.w	r3, r2, #15
   2d81e:	009b      	lsls	r3, r3, #2
   2d820:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2d824:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   2d828:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   2d82c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   2d830:	f384 8811 	msr	BASEPRI, r4
   2d834:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   2d838:	bd10      	pop	{r4, pc}
   2d83a:	bf00      	nop
   2d83c:	20001928 	.word	0x20001928

0002d840 <usbd_ep_abort>:
{
   2d840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d842:	4601      	mov	r1, r0
	__asm__ volatile(
   2d844:	f04f 0320 	mov.w	r3, #32
   2d848:	f3ef 8511 	mrs	r5, BASEPRI
   2d84c:	f383 8812 	msr	BASEPRI_MAX, r3
   2d850:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   2d854:	f7ff fa76 	bl	2cd44 <ep_state_access>
   2d858:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2d85a:	4608      	mov	r0, r1
   2d85c:	f003 f808 	bl	30870 <ep2bit>
   2d860:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   2d862:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2d866:	fa02 f200 	lsl.w	r2, r2, r0
   2d86a:	482e      	ldr	r0, [pc, #184]	; (2d924 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   2d86c:	d119      	bne.n	2d8a2 <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2d86e:	6803      	ldr	r3, [r0, #0]
   2d870:	ea32 0303 	bics.w	r3, r2, r3
   2d874:	d00a      	beq.n	2d88c <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   2d876:	4608      	mov	r0, r1
   2d878:	f7ff ffb8 	bl	2d7ec <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   2d87c:	2303      	movs	r3, #3
   2d87e:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   2d880:	f385 8811 	msr	BASEPRI, r5
   2d884:	f3bf 8f6f 	isb	sy
}
   2d888:	b003      	add	sp, #12
   2d88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
   2d88c:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2d88e:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   2d890:	4925      	ldr	r1, [pc, #148]	; (2d928 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2d892:	ea23 0302 	bic.w	r3, r3, r2
   2d896:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   2d898:	680b      	ldr	r3, [r1, #0]
   2d89a:	ea23 0302 	bic.w	r3, r3, r2
   2d89e:	600b      	str	r3, [r1, #0]
   2d8a0:	e7ec      	b.n	2d87c <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   2d8a2:	070b      	lsls	r3, r1, #28
   2d8a4:	d415      	bmi.n	2d8d2 <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
   2d8a6:	2980      	cmp	r1, #128	; 0x80
   2d8a8:	4b20      	ldr	r3, [pc, #128]	; (2d92c <usbd_ep_abort+0xec>)
   2d8aa:	d02f      	beq.n	2d90c <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   2d8ac:	f001 040f 	and.w	r4, r1, #15
   2d8b0:	f204 34da 	addw	r4, r4, #986	; 0x3da
   2d8b4:	0064      	lsls	r4, r4, #1
   2d8b6:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2d8ba:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2d8be:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2d8c2:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2d8c4:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2d8c8:	433c      	orrs	r4, r7
   2d8ca:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   2d8ce:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   2d8d2:	4f15      	ldr	r7, [pc, #84]	; (2d928 <usbd_ep_abort+0xe8>)
   2d8d4:	6804      	ldr	r4, [r0, #0]
   2d8d6:	683b      	ldr	r3, [r7, #0]
   2d8d8:	ea64 0c03 	orn	ip, r4, r3
   2d8dc:	ea1c 0f02 	tst.w	ip, r2
   2d8e0:	d0ce      	beq.n	2d880 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   2d8e2:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2d8e4:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   2d8e8:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   2d8ea:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2d8ec:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   2d8ee:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   2d8f0:	2303      	movs	r3, #3
   2d8f2:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   2d8f4:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   2d8f8:	4b0d      	ldr	r3, [pc, #52]	; (2d930 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   2d8fa:	f88d 1006 	strb.w	r1, [sp, #6]
   2d8fe:	2206      	movs	r2, #6
            m_event_handler(&evt);
   2d900:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   2d902:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   2d906:	a801      	add	r0, sp, #4
   2d908:	4798      	blx	r3
   2d90a:	e7b9      	b.n	2d880 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   2d90c:	f240 74b4 	movw	r4, #1972	; 0x7b4
   2d910:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2d914:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2d918:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   2d91c:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2d91e:	f044 0404 	orr.w	r4, r4, #4
   2d922:	e7d1      	b.n	2d8c8 <usbd_ep_abort+0x88>
   2d924:	20001924 	.word	0x20001924
   2d928:	20001928 	.word	0x20001928
   2d92c:	40027000 	.word	0x40027000
   2d930:	2000192c 	.word	0x2000192c

0002d934 <ev_setup_handler>:
{
   2d934:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   2d936:	4b14      	ldr	r3, [pc, #80]	; (2d988 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2d938:	4c14      	ldr	r4, [pc, #80]	; (2d98c <ev_setup_handler+0x58>)
   2d93a:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   2d93e:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   2d940:	4e13      	ldr	r6, [pc, #76]	; (2d990 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2d942:	43da      	mvns	r2, r3
   2d944:	4b13      	ldr	r3, [pc, #76]	; (2d994 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
   2d946:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2d948:	681b      	ldr	r3, [r3, #0]
   2d94a:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   2d94c:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2d94e:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   2d950:	f002 ff8e 	bl	30870 <ep2bit>
   2d954:	2301      	movs	r3, #1
   2d956:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   2d958:	4213      	tst	r3, r2
   2d95a:	d002      	beq.n	2d962 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   2d95c:	4608      	mov	r0, r1
   2d95e:	f7ff ff6f 	bl	2d840 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   2d962:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
   2d966:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   2d96a:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   2d96c:	f7ff fae4 	bl	2cf38 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   2d970:	6823      	ldr	r3, [r4, #0]
   2d972:	f043 0301 	orr.w	r3, r3, #1
   2d976:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   2d978:	2305      	movs	r3, #5
   2d97a:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
   2d97c:	4b06      	ldr	r3, [pc, #24]	; (2d998 <ev_setup_handler+0x64>)
   2d97e:	a801      	add	r0, sp, #4
   2d980:	681b      	ldr	r3, [r3, #0]
   2d982:	4798      	blx	r3
}
   2d984:	b002      	add	sp, #8
   2d986:	bd70      	pop	{r4, r5, r6, pc}
   2d988:	40027000 	.word	0x40027000
   2d98c:	20001928 	.word	0x20001928
   2d990:	2000198a 	.word	0x2000198a
   2d994:	20001924 	.word	0x20001924
   2d998:	2000192c 	.word	0x2000192c

0002d99c <nrfx_usbd_irq_handler>:
{
   2d99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
   2d9a0:	4b1a      	ldr	r3, [pc, #104]	; (2da0c <nrfx_usbd_irq_handler+0x70>)
   2d9a2:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   2d9a6:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
   2d9a8:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2d9aa:	461d      	mov	r5, r3
    while (to_process)
   2d9ac:	b970      	cbnz	r0, 2d9cc <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   2d9ae:	4f18      	ldr	r7, [pc, #96]	; (2da10 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   2d9b0:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   2d9b4:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   2d9b8:	f04f 0801 	mov.w	r8, #1
    while (active)
   2d9bc:	b9bc      	cbnz	r4, 2d9ee <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   2d9be:	f7ff fd63 	bl	2d488 <usbd_dmareq_process>
    if (setup_active)
   2d9c2:	b306      	cbz	r6, 2da06 <nrfx_usbd_irq_handler+0x6a>
}
   2d9c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   2d9c8:	f7ff bfb4 	b.w	2d934 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   2d9cc:	fa90 f2a0 	rbit	r2, r0
   2d9d0:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   2d9d4:	490f      	ldr	r1, [pc, #60]	; (2da14 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   2d9d6:	0096      	lsls	r6, r2, #2
   2d9d8:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   2d9da:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   2d9de:	680e      	ldr	r6, [r1, #0]
    if (ret)
   2d9e0:	b116      	cbz	r6, 2d9e8 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   2d9e2:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   2d9e4:	6809      	ldr	r1, [r1, #0]
   2d9e6:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   2d9e8:	ea20 0002 	bic.w	r0, r0, r2
   2d9ec:	e7de      	b.n	2d9ac <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   2d9ee:	fa94 f5a4 	rbit	r5, r4
   2d9f2:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   2d9f6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   2d9fa:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   2d9fe:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   2da00:	ea24 0405 	bic.w	r4, r4, r5
   2da04:	e7da      	b.n	2d9bc <nrfx_usbd_irq_handler+0x20>
}
   2da06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2da0a:	bf00      	nop
   2da0c:	40027000 	.word	0x40027000
   2da10:	00031550 	.word	0x00031550
   2da14:	40027100 	.word	0x40027100

0002da18 <nrfx_usbd_stop>:
{
   2da18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2da1a:	4b1b      	ldr	r3, [pc, #108]	; (2da88 <nrfx_usbd_stop+0x70>)
   2da1c:	2280      	movs	r2, #128	; 0x80
   2da1e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   2da22:	2027      	movs	r0, #39	; 0x27
   2da24:	f7fc f810 	bl	29a48 <arch_irq_is_enabled>
   2da28:	b1b8      	cbz	r0, 2da5a <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   2da2a:	4e18      	ldr	r6, [pc, #96]	; (2da8c <nrfx_usbd_stop+0x74>)
   2da2c:	4b18      	ldr	r3, [pc, #96]	; (2da90 <nrfx_usbd_stop+0x78>)
   2da2e:	6834      	ldr	r4, [r6, #0]
   2da30:	681b      	ldr	r3, [r3, #0]
   2da32:	0c24      	lsrs	r4, r4, #16
   2da34:	0424      	lsls	r4, r4, #16
   2da36:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   2da38:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   2da3a:	b97c      	cbnz	r4, 2da5c <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   2da3c:	4d15      	ldr	r5, [pc, #84]	; (2da94 <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   2da3e:	f240 13ff 	movw	r3, #511	; 0x1ff
   2da42:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
   2da44:	2027      	movs	r0, #39	; 0x27
   2da46:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   2da4a:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   2da4e:	f7fb ffe7 	bl	29a20 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   2da52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2da56:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
   2da5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   2da5c:	fa94 f5a4 	rbit	r5, r4
   2da60:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2da64:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   2da66:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   2da68:	bfc6      	itte	gt
   2da6a:	f1a5 0010 	subgt.w	r0, r5, #16
   2da6e:	b2c0      	uxtbgt	r0, r0
   2da70:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   2da74:	0703      	lsls	r3, r0, #28
   2da76:	d401      	bmi.n	2da7c <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
   2da78:	f7ff fee2 	bl	2d840 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   2da7c:	fa07 f505 	lsl.w	r5, r7, r5
   2da80:	ea24 0405 	bic.w	r4, r4, r5
   2da84:	e7d9      	b.n	2da3a <nrfx_usbd_stop+0x22>
   2da86:	bf00      	nop
   2da88:	e000e100 	.word	0xe000e100
   2da8c:	20001928 	.word	0x20001928
   2da90:	20001924 	.word	0x20001924
   2da94:	40027000 	.word	0x40027000

0002da98 <nrfx_usbd_disable>:
{
   2da98:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   2da9a:	f7ff ffbd 	bl	2da18 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   2da9e:	4b08      	ldr	r3, [pc, #32]	; (2dac0 <nrfx_usbd_disable+0x28>)
   2daa0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   2daa4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   2daa8:	2200      	movs	r2, #0
   2daaa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   2daae:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   2dab2:	f7ff fa51 	bl	2cf58 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   2dab6:	4b03      	ldr	r3, [pc, #12]	; (2dac4 <nrfx_usbd_disable+0x2c>)
   2dab8:	2201      	movs	r2, #1
   2daba:	701a      	strb	r2, [r3, #0]
}
   2dabc:	bd08      	pop	{r3, pc}
   2dabe:	bf00      	nop
   2dac0:	40027000 	.word	0x40027000
   2dac4:	2000198c 	.word	0x2000198c

0002dac8 <nrfx_usbd_ep_disable>:
{
   2dac8:	b510      	push	{r4, lr}
   2daca:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   2dacc:	f7ff feb8 	bl	2d840 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   2dad0:	4a10      	ldr	r2, [pc, #64]	; (2db14 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   2dad2:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   2dad6:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   2dada:	f04f 0301 	mov.w	r3, #1
   2dade:	bf14      	ite	ne
   2dae0:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   2dae4:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   2dae8:	fa03 f300 	lsl.w	r3, r3, r0
   2daec:	ea6f 0303 	mvn.w	r3, r3
   2daf0:	bf15      	itete	ne
   2daf2:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   2daf4:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   2daf6:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   2dafa:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2dafe:	bf14      	ite	ne
   2db00:	4b05      	ldrne	r3, [pc, #20]	; (2db18 <nrfx_usbd_ep_disable+0x50>)
   2db02:	4b06      	ldreq	r3, [pc, #24]	; (2db1c <nrfx_usbd_ep_disable+0x54>)
   2db04:	5c1a      	ldrb	r2, [r3, r0]
   2db06:	2301      	movs	r3, #1
   2db08:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   2db0a:	4a02      	ldr	r2, [pc, #8]	; (2db14 <nrfx_usbd_ep_disable+0x4c>)
   2db0c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   2db10:	bd10      	pop	{r4, pc}
   2db12:	bf00      	nop
   2db14:	40027000 	.word	0x40027000
   2db18:	0003239b 	.word	0x0003239b
   2db1c:	00032392 	.word	0x00032392

0002db20 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2db20:	f010 0f80 	tst.w	r0, #128	; 0x80
{
   2db24:	b570      	push	{r4, r5, r6, lr}
   2db26:	4924      	ldr	r1, [pc, #144]	; (2dbb8 <nrfx_usbd_ep_enable+0x98>)
   2db28:	4604      	mov	r4, r0
   2db2a:	f000 030f 	and.w	r3, r0, #15
   2db2e:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2db32:	d012      	beq.n	2db5a <nrfx_usbd_ep_enable+0x3a>
   2db34:	4a21      	ldr	r2, [pc, #132]	; (2dbbc <nrfx_usbd_ep_enable+0x9c>)
   2db36:	5cd2      	ldrb	r2, [r2, r3]
   2db38:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   2db3c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   2db40:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   2db44:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   2db46:	07d0      	lsls	r0, r2, #31
   2db48:	d406      	bmi.n	2db58 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
   2db4a:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   2db4e:	fa05 f303 	lsl.w	r3, r5, r3
   2db52:	4313      	orrs	r3, r2
   2db54:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
   2db58:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2db5a:	4a19      	ldr	r2, [pc, #100]	; (2dbc0 <nrfx_usbd_ep_enable+0xa0>)
   2db5c:	5cd2      	ldrb	r2, [r2, r3]
   2db5e:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   2db62:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   2db66:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
   2db6a:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   2db6c:	07d2      	lsls	r2, r2, #31
   2db6e:	d4f3      	bmi.n	2db58 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
   2db70:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
   2db74:	fa05 f203 	lsl.w	r2, r5, r3
   2db78:	4332      	orrs	r2, r6
   2db7a:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   2db7e:	2b00      	cmp	r3, #0
   2db80:	d0ea      	beq.n	2db58 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
   2db82:	0703      	lsls	r3, r0, #28
   2db84:	d4e8      	bmi.n	2db58 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
   2db86:	f04f 0320 	mov.w	r3, #32
   2db8a:	f3ef 8611 	mrs	r6, BASEPRI
   2db8e:	f383 8812 	msr	BASEPRI_MAX, r3
   2db92:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   2db96:	f7ff fe29 	bl	2d7ec <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2db9a:	4620      	mov	r0, r4
   2db9c:	f002 fe68 	bl	30870 <ep2bit>
   2dba0:	4a08      	ldr	r2, [pc, #32]	; (2dbc4 <nrfx_usbd_ep_enable+0xa4>)
   2dba2:	6813      	ldr	r3, [r2, #0]
   2dba4:	fa05 f000 	lsl.w	r0, r5, r0
   2dba8:	ea23 0300 	bic.w	r3, r3, r0
   2dbac:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   2dbae:	f386 8811 	msr	BASEPRI, r6
   2dbb2:	f3bf 8f6f 	isb	sy
}
   2dbb6:	e7cf      	b.n	2db58 <nrfx_usbd_ep_enable+0x38>
   2dbb8:	40027000 	.word	0x40027000
   2dbbc:	0003239b 	.word	0x0003239b
   2dbc0:	00032392 	.word	0x00032392
   2dbc4:	20001924 	.word	0x20001924

0002dbc8 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   2dbc8:	0603      	lsls	r3, r0, #24
{
   2dbca:	b510      	push	{r4, lr}
   2dbcc:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   2dbce:	d405      	bmi.n	2dbdc <nrfx_usbd_ep_stall_clear+0x14>
   2dbd0:	f7ff fd7a 	bl	2d6c8 <nrfx_usbd_ep_stall_check>
   2dbd4:	b110      	cbz	r0, 2dbdc <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   2dbd6:	4620      	mov	r0, r4
   2dbd8:	f7ff fe08 	bl	2d7ec <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   2dbdc:	4b01      	ldr	r3, [pc, #4]	; (2dbe4 <nrfx_usbd_ep_stall_clear+0x1c>)
   2dbde:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   2dbe2:	bd10      	pop	{r4, pc}
   2dbe4:	40027000 	.word	0x40027000

0002dbe8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   2dbe8:	b510      	push	{r4, lr}
   2dbea:	4604      	mov	r4, r0
   2dbec:	b086      	sub	sp, #24
	z_impl_log_panic();
   2dbee:	f7f9 ff25 	bl	27a3c <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   2dbf2:	4b07      	ldr	r3, [pc, #28]	; (2dc10 <k_sys_fatal_error_handler+0x28>)
   2dbf4:	9305      	str	r3, [sp, #20]
   2dbf6:	2302      	movs	r3, #2
   2dbf8:	9304      	str	r3, [sp, #16]
   2dbfa:	4806      	ldr	r0, [pc, #24]	; (2dc14 <k_sys_fatal_error_handler+0x2c>)
   2dbfc:	2300      	movs	r3, #0
   2dbfe:	aa04      	add	r2, sp, #16
   2dc00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2dc04:	f7f9 fffa 	bl	27bfc <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
   2dc08:	4620      	mov	r0, r4
   2dc0a:	f002 fea8 	bl	3095e <arch_system_halt>
   2dc0e:	bf00      	nop
   2dc10:	000323ae 	.word	0x000323ae
   2dc14:	0003130c 	.word	0x0003130c

0002dc18 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2dc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2dc1c:	b086      	sub	sp, #24
   2dc1e:	4605      	mov	r5, r0
   2dc20:	af00      	add	r7, sp, #0
   2dc22:	460e      	mov	r6, r1
	__asm__ volatile(
   2dc24:	f04f 0320 	mov.w	r3, #32
   2dc28:	f3ef 8811 	mrs	r8, BASEPRI
   2dc2c:	f383 8812 	msr	BASEPRI_MAX, r3
   2dc30:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2dc34:	f001 f804 	bl	2ec40 <z_impl_z_current_get>
   2dc38:	2d04      	cmp	r5, #4
   2dc3a:	bf96      	itet	ls
   2dc3c:	4b2c      	ldrls	r3, [pc, #176]	; (2dcf0 <z_fatal_error+0xd8>)
   2dc3e:	4b2d      	ldrhi	r3, [pc, #180]	; (2dcf4 <z_fatal_error+0xdc>)
   2dc40:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2dc44:	46e9      	mov	r9, sp
   2dc46:	b08a      	sub	sp, #40	; 0x28
   2dc48:	4604      	mov	r4, r0
   2dc4a:	466a      	mov	r2, sp
   2dc4c:	492a      	ldr	r1, [pc, #168]	; (2dcf8 <z_fatal_error+0xe0>)
   2dc4e:	61d3      	str	r3, [r2, #28]
   2dc50:	f240 3301 	movw	r3, #769	; 0x301
   2dc54:	8493      	strh	r3, [r2, #36]	; 0x24
   2dc56:	f04f 0a00 	mov.w	sl, #0
   2dc5a:	4b28      	ldr	r3, [pc, #160]	; (2dcfc <z_fatal_error+0xe4>)
   2dc5c:	f8c2 a020 	str.w	sl, [r2, #32]
   2dc60:	e9c2 1505 	strd	r1, r5, [r2, #20]
   2dc64:	f842 3f10 	str.w	r3, [r2, #16]!
   2dc68:	4825      	ldr	r0, [pc, #148]	; (2dd00 <z_fatal_error+0xe8>)
   2dc6a:	4653      	mov	r3, sl
   2dc6c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   2dc70:	f7f9 ffc4 	bl	27bfc <z_impl_z_log_msg_static_create>
   2dc74:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2dc76:	b17e      	cbz	r6, 2dc98 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2dc78:	69f3      	ldr	r3, [r6, #28]
   2dc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2dc7e:	b15b      	cbz	r3, 2dc98 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   2dc80:	4b20      	ldr	r3, [pc, #128]	; (2dd04 <z_fatal_error+0xec>)
   2dc82:	617b      	str	r3, [r7, #20]
   2dc84:	2302      	movs	r3, #2
   2dc86:	613b      	str	r3, [r7, #16]
   2dc88:	481d      	ldr	r0, [pc, #116]	; (2dd00 <z_fatal_error+0xe8>)
   2dc8a:	4653      	mov	r3, sl
   2dc8c:	f107 0210 	add.w	r2, r7, #16
   2dc90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2dc94:	f7f9 ffb2 	bl	27bfc <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2dc98:	b12c      	cbz	r4, 2dca6 <z_fatal_error+0x8e>
   2dc9a:	4620      	mov	r0, r4
   2dc9c:	f002 feb4 	bl	30a08 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2dca0:	b108      	cbz	r0, 2dca6 <z_fatal_error+0x8e>
   2dca2:	7803      	ldrb	r3, [r0, #0]
   2dca4:	b903      	cbnz	r3, 2dca8 <z_fatal_error+0x90>
		thread_name = "unknown";
   2dca6:	4818      	ldr	r0, [pc, #96]	; (2dd08 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2dca8:	46e9      	mov	r9, sp
   2dcaa:	b08a      	sub	sp, #40	; 0x28
   2dcac:	466a      	mov	r2, sp
   2dcae:	4b17      	ldr	r3, [pc, #92]	; (2dd0c <z_fatal_error+0xf4>)
   2dcb0:	61d0      	str	r0, [r2, #28]
   2dcb2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   2dcb6:	f240 3301 	movw	r3, #769	; 0x301
   2dcba:	8413      	strh	r3, [r2, #32]
   2dcbc:	4b14      	ldr	r3, [pc, #80]	; (2dd10 <z_fatal_error+0xf8>)
   2dcbe:	f842 3f10 	str.w	r3, [r2, #16]!
   2dcc2:	2300      	movs	r3, #0
   2dcc4:	480e      	ldr	r0, [pc, #56]	; (2dd00 <z_fatal_error+0xe8>)
   2dcc6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   2dcca:	f7f9 ff97 	bl	27bfc <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   2dcce:	4631      	mov	r1, r6
   2dcd0:	46cd      	mov	sp, r9
   2dcd2:	4628      	mov	r0, r5
   2dcd4:	f7ff ff88 	bl	2dbe8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   2dcd8:	f388 8811 	msr	BASEPRI, r8
   2dcdc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2dce0:	4620      	mov	r0, r4
   2dce2:	f7fc fab7 	bl	2a254 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2dce6:	3718      	adds	r7, #24
   2dce8:	46bd      	mov	sp, r7
   2dcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2dcee:	bf00      	nop
   2dcf0:	000315b8 	.word	0x000315b8
   2dcf4:	000323bd 	.word	0x000323bd
   2dcf8:	000323d3 	.word	0x000323d3
   2dcfc:	01000005 	.word	0x01000005
   2dd00:	0003130c 	.word	0x0003130c
   2dd04:	000323fb 	.word	0x000323fb
   2dd08:	000323cb 	.word	0x000323cb
   2dd0c:	0003241c 	.word	0x0003241c
   2dd10:	01000004 	.word	0x01000004

0002dd14 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2dd14:	4b10      	ldr	r3, [pc, #64]	; (2dd58 <z_sys_init_run_level+0x44>)
{
   2dd16:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2dd18:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2dd1c:	3001      	adds	r0, #1
   2dd1e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2dd22:	42a6      	cmp	r6, r4
   2dd24:	d800      	bhi.n	2dd28 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   2dd26:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
   2dd28:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   2dd2c:	b195      	cbz	r5, 2dd54 <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
   2dd2e:	b153      	cbz	r3, 2dd46 <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
   2dd30:	4628      	mov	r0, r5
   2dd32:	4798      	blx	r3
				if (rc != 0) {
   2dd34:	b138      	cbz	r0, 2dd46 <z_sys_init_run_level+0x32>
					if (rc < 0) {
   2dd36:	2800      	cmp	r0, #0
   2dd38:	bfb8      	it	lt
   2dd3a:	4240      	neglt	r0, r0
					dev->state->init_res = rc;
   2dd3c:	68eb      	ldr	r3, [r5, #12]
					if (rc > UINT8_MAX) {
   2dd3e:	28ff      	cmp	r0, #255	; 0xff
   2dd40:	bfa8      	it	ge
   2dd42:	20ff      	movge	r0, #255	; 0xff
					dev->state->init_res = rc;
   2dd44:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2dd46:	68ea      	ldr	r2, [r5, #12]
   2dd48:	7853      	ldrb	r3, [r2, #1]
   2dd4a:	f043 0301 	orr.w	r3, r3, #1
   2dd4e:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2dd50:	3408      	adds	r4, #8
   2dd52:	e7e6      	b.n	2dd22 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   2dd54:	4798      	blx	r3
   2dd56:	e7fb      	b.n	2dd50 <z_sys_init_run_level+0x3c>
   2dd58:	000315cc 	.word	0x000315cc

0002dd5c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   2dd5c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   2dd5e:	4b0a      	ldr	r3, [pc, #40]	; (2dd88 <bg_thread_main+0x2c>)
   2dd60:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2dd62:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   2dd64:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2dd66:	f7ff ffd5 	bl	2dd14 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2dd6a:	f001 f9fb 	bl	2f164 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   2dd6e:	2004      	movs	r0, #4
   2dd70:	f7ff ffd0 	bl	2dd14 <z_sys_init_run_level>

	z_init_static_threads();
   2dd74:	f000 f968 	bl	2e048 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   2dd78:	f7f8 fb2c 	bl	263d4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2dd7c:	4a03      	ldr	r2, [pc, #12]	; (2dd8c <bg_thread_main+0x30>)
   2dd7e:	7b13      	ldrb	r3, [r2, #12]
   2dd80:	f023 0301 	bic.w	r3, r3, #1
   2dd84:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2dd86:	bd08      	pop	{r3, pc}
   2dd88:	2000198d 	.word	0x2000198d
   2dd8c:	20000a50 	.word	0x20000a50

0002dd90 <z_bss_zero>:
{
   2dd90:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2dd92:	4803      	ldr	r0, [pc, #12]	; (2dda0 <z_bss_zero+0x10>)
   2dd94:	4a03      	ldr	r2, [pc, #12]	; (2dda4 <z_bss_zero+0x14>)
   2dd96:	2100      	movs	r1, #0
   2dd98:	1a12      	subs	r2, r2, r0
   2dd9a:	f002 fde9 	bl	30970 <z_early_memset>
}
   2dd9e:	bd08      	pop	{r3, pc}
   2dda0:	200003b0 	.word	0x200003b0
   2dda4:	20001990 	.word	0x20001990

0002dda8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   2dda8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   2ddaa:	2300      	movs	r3, #0
{
   2ddac:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   2ddae:	2201      	movs	r2, #1
   2ddb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   2ddb4:	4e17      	ldr	r6, [pc, #92]	; (2de14 <z_init_cpu+0x6c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2ddb6:	4d18      	ldr	r5, [pc, #96]	; (2de18 <z_init_cpu+0x70>)
	z_setup_new_thread(thread, stack,
   2ddb8:	9301      	str	r3, [sp, #4]
   2ddba:	220f      	movs	r2, #15
   2ddbc:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2ddc0:	4916      	ldr	r1, [pc, #88]	; (2de1c <z_init_cpu+0x74>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2ddc2:	2314      	movs	r3, #20
   2ddc4:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   2ddc8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
   2ddcc:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
   2ddd0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   2ddd2:	4b13      	ldr	r3, [pc, #76]	; (2de20 <z_init_cpu+0x78>)
   2ddd4:	9500      	str	r5, [sp, #0]
   2ddd6:	fb02 1100 	mla	r1, r2, r0, r1
   2ddda:	4630      	mov	r0, r6
   2dddc:	f000 f8d8 	bl	2df90 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2dde0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   2dde2:	742c      	strb	r4, [r5, #16]
   2dde4:	f023 0304 	bic.w	r3, r3, #4
   2dde8:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2ddea:	4b0e      	ldr	r3, [pc, #56]	; (2de24 <z_init_cpu+0x7c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   2ddec:	60ee      	str	r6, [r5, #12]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2ddee:	3401      	adds	r4, #1
   2ddf0:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].irq_stack =
   2ddf4:	606b      	str	r3, [r5, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2ddf6:	4b0c      	ldr	r3, [pc, #48]	; (2de28 <z_init_cpu+0x80>)
   2ddf8:	f3bf 8f5b 	dmb	ish
   2ddfc:	e853 1f00 	ldrex	r1, [r3]
   2de00:	3101      	adds	r1, #1
   2de02:	e843 1200 	strex	r2, r1, [r3]
   2de06:	2a00      	cmp	r2, #0
   2de08:	d1f8      	bne.n	2ddfc <z_init_cpu+0x54>
   2de0a:	f3bf 8f5b 	dmb	ish
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
   2de0e:	b006      	add	sp, #24
   2de10:	bd70      	pop	{r4, r5, r6, pc}
   2de12:	bf00      	nop
   2de14:	200009d0 	.word	0x200009d0
   2de18:	20001934 	.word	0x20001934
   2de1c:	20002c90 	.word	0x20002c90
   2de20:	0002e101 	.word	0x0002e101
   2de24:	20002490 	.word	0x20002490
   2de28:	20001930 	.word	0x20001930

0002de2c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   2de2c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2de2e:	2000      	movs	r0, #0
{
   2de30:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2de32:	f7ff ff6f 	bl	2dd14 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2de36:	4b2f      	ldr	r3, [pc, #188]	; (2def4 <z_cstart+0xc8>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2de38:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   2de3c:	4d2e      	ldr	r5, [pc, #184]	; (2def8 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   2de3e:	4e2f      	ldr	r6, [pc, #188]	; (2defc <z_cstart+0xd0>)
   2de40:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2de42:	4f2f      	ldr	r7, [pc, #188]	; (2df00 <z_cstart+0xd4>)
   2de44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2de48:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2de4a:	2400      	movs	r4, #0
   2de4c:	23e0      	movs	r3, #224	; 0xe0
   2de4e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2de52:	77ec      	strb	r4, [r5, #31]
   2de54:	762c      	strb	r4, [r5, #24]
   2de56:	766c      	strb	r4, [r5, #25]
   2de58:	76ac      	strb	r4, [r5, #26]
   2de5a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2de5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2de60:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2de64:	626b      	str	r3, [r5, #36]	; 0x24
   2de66:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2de6a:	f7fc f9bd 	bl	2a1e8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2de6e:	f7fb fd43 	bl	298f8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2de72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2de76:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2de78:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   2de7a:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2de7c:	f7fc fa92 	bl	2a3a4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2de80:	f7fc f9fe 	bl	2a280 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   2de84:	f7f9 fd46 	bl	27914 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2de88:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   2de8c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   2de8e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   2de92:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
   2de96:	f001 f947 	bl	2f128 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   2de9a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2de9c:	f002 fd53 	bl	30946 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   2dea0:	2001      	movs	r0, #1
   2dea2:	f7ff ff37 	bl	2dd14 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2dea6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   2dea8:	4d16      	ldr	r5, [pc, #88]	; (2df04 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2deaa:	f7ff ff33 	bl	2dd14 <z_sys_init_run_level>
	z_sched_init();
   2deae:	f000 fe09 	bl	2eac4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2deb2:	4b15      	ldr	r3, [pc, #84]	; (2df08 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   2deb4:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2deb6:	9305      	str	r3, [sp, #20]
   2deb8:	2301      	movs	r3, #1
   2deba:	4914      	ldr	r1, [pc, #80]	; (2df0c <z_cstart+0xe0>)
   2debc:	9400      	str	r4, [sp, #0]
   2debe:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2dec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2dec6:	463b      	mov	r3, r7
   2dec8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2decc:	4628      	mov	r0, r5
   2dece:	f000 f85f 	bl	2df90 <z_setup_new_thread>
   2ded2:	7b6a      	ldrb	r2, [r5, #13]
   2ded4:	4606      	mov	r6, r0
   2ded6:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   2deda:	4628      	mov	r0, r5
   2dedc:	736a      	strb	r2, [r5, #13]
   2dede:	f002 fed7 	bl	30c90 <z_ready_thread>
	z_init_cpu(0);
   2dee2:	4620      	mov	r0, r4
   2dee4:	f7ff ff60 	bl	2dda8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2dee8:	463a      	mov	r2, r7
   2deea:	4631      	mov	r1, r6
   2deec:	4628      	mov	r0, r5
   2deee:	f7fb fe63 	bl	29bb8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2def2:	bf00      	nop
   2def4:	20002c90 	.word	0x20002c90
   2def8:	e000ed00 	.word	0xe000ed00
   2defc:	20001934 	.word	0x20001934
   2df00:	0002dd5d 	.word	0x0002dd5d
   2df04:	20000a50 	.word	0x20000a50
   2df08:	0003247e 	.word	0x0003247e
   2df0c:	20002dd0 	.word	0x20002dd0

0002df10 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   2df10:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2df12:	4c06      	ldr	r4, [pc, #24]	; (2df2c <init_mem_slab_module+0x1c>)
   2df14:	4d06      	ldr	r5, [pc, #24]	; (2df30 <init_mem_slab_module+0x20>)
	int rc = 0;
   2df16:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2df18:	42ac      	cmp	r4, r5
   2df1a:	d300      	bcc.n	2df1e <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   2df1c:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   2df1e:	4620      	mov	r0, r4
   2df20:	f002 fd2a 	bl	30978 <create_free_list>
		if (rc < 0) {
   2df24:	2800      	cmp	r0, #0
   2df26:	dbf9      	blt.n	2df1c <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2df28:	341c      	adds	r4, #28
   2df2a:	e7f5      	b.n	2df18 <init_mem_slab_module+0x8>
   2df2c:	20000284 	.word	0x20000284
   2df30:	200002a0 	.word	0x200002a0

0002df34 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2df34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2df36:	460c      	mov	r4, r1
	__asm__ volatile(
   2df38:	f04f 0520 	mov.w	r5, #32
   2df3c:	f3ef 8111 	mrs	r1, BASEPRI
   2df40:	f385 8812 	msr	BASEPRI_MAX, r5
   2df44:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2df48:	6945      	ldr	r5, [r0, #20]
   2df4a:	b15d      	cbz	r5, 2df64 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   2df4c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2df4e:	682b      	ldr	r3, [r5, #0]
   2df50:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2df52:	6983      	ldr	r3, [r0, #24]
   2df54:	3301      	adds	r3, #1
   2df56:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2df58:	2000      	movs	r0, #0
	__asm__ volatile(
   2df5a:	f381 8811 	msr	BASEPRI, r1
   2df5e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   2df62:	e011      	b.n	2df88 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   2df64:	ea52 0603 	orrs.w	r6, r2, r3
   2df68:	d103      	bne.n	2df72 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   2df6a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   2df6c:	f06f 000b 	mvn.w	r0, #11
   2df70:	e7f3      	b.n	2df5a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2df72:	e9cd 2300 	strd	r2, r3, [sp]
   2df76:	4602      	mov	r2, r0
   2df78:	3008      	adds	r0, #8
   2df7a:	f000 fcad 	bl	2e8d8 <z_pend_curr>
		if (result == 0) {
   2df7e:	b918      	cbnz	r0, 2df88 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   2df80:	4b02      	ldr	r3, [pc, #8]	; (2df8c <k_mem_slab_alloc+0x58>)
   2df82:	689b      	ldr	r3, [r3, #8]
   2df84:	695b      	ldr	r3, [r3, #20]
   2df86:	6023      	str	r3, [r4, #0]
}
   2df88:	b002      	add	sp, #8
   2df8a:	bd70      	pop	{r4, r5, r6, pc}
   2df8c:	20001934 	.word	0x20001934

0002df90 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2df90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2df94:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2df96:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2df98:	2604      	movs	r6, #4
   2df9a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   2df9c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2df9e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2dfa0:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2dfa4:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   2dfa6:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2dfaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   2dfac:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2dfae:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2dfb2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   2dfb6:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
   2dfba:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   2dfbc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   2dfbe:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2dfc0:	9202      	str	r2, [sp, #8]
   2dfc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2dfc4:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   2dfc6:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2dfca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2dfcc:	9200      	str	r2, [sp, #0]
   2dfce:	4642      	mov	r2, r8
{
   2dfd0:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2dfd2:	f7fb fdd5 	bl	29b80 <arch_new_thread>
	if (!_current) {
   2dfd6:	4b05      	ldr	r3, [pc, #20]	; (2dfec <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   2dfd8:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   2dfda:	689b      	ldr	r3, [r3, #8]
   2dfdc:	b103      	cbz	r3, 2dfe0 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   2dfde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
   2dfe0:	6723      	str	r3, [r4, #112]	; 0x70
}
   2dfe2:	4640      	mov	r0, r8
   2dfe4:	b004      	add	sp, #16
   2dfe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dfea:	bf00      	nop
   2dfec:	20001934 	.word	0x20001934

0002dff0 <z_impl_k_thread_create>:
{
   2dff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dff2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2dff4:	2500      	movs	r5, #0
   2dff6:	9505      	str	r5, [sp, #20]
   2dff8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   2dffa:	9504      	str	r5, [sp, #16]
   2dffc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2dffe:	9503      	str	r5, [sp, #12]
   2e000:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2e002:	9502      	str	r5, [sp, #8]
{
   2e004:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e008:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2e00a:	9501      	str	r5, [sp, #4]
   2e00c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2e00e:	9500      	str	r5, [sp, #0]
{
   2e010:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2e012:	f7ff ffbd 	bl	2df90 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2e016:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   2e01a:	bf08      	it	eq
   2e01c:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   2e020:	d005      	beq.n	2e02e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2e022:	ea56 0307 	orrs.w	r3, r6, r7
   2e026:	d105      	bne.n	2e034 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   2e028:	4620      	mov	r0, r4
   2e02a:	f000 fccb 	bl	2e9c4 <z_sched_start>
}
   2e02e:	4620      	mov	r0, r4
   2e030:	b007      	add	sp, #28
   2e032:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2e034:	4903      	ldr	r1, [pc, #12]	; (2e044 <z_impl_k_thread_create+0x54>)
   2e036:	463a      	mov	r2, r7
   2e038:	4633      	mov	r3, r6
   2e03a:	f104 0018 	add.w	r0, r4, #24
   2e03e:	f000 fed7 	bl	2edf0 <z_add_timeout>
   2e042:	e7f4      	b.n	2e02e <z_impl_k_thread_create+0x3e>
   2e044:	00030d19 	.word	0x00030d19

0002e048 <z_init_static_threads>:
{
   2e048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e04c:	4c29      	ldr	r4, [pc, #164]	; (2e0f4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2e04e:	4d2a      	ldr	r5, [pc, #168]	; (2e0f8 <z_init_static_threads+0xb0>)
{
   2e050:	b087      	sub	sp, #28
   2e052:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   2e054:	42ae      	cmp	r6, r5
   2e056:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   2e05a:	d30f      	bcc.n	2e07c <z_init_static_threads+0x34>
	k_sched_lock();
   2e05c:	f000 fd02 	bl	2ea64 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2e060:	4c24      	ldr	r4, [pc, #144]	; (2e0f4 <z_init_static_threads+0xac>)
   2e062:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2e0fc <z_init_static_threads+0xb4>
   2e066:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2e06a:	f240 37e7 	movw	r7, #999	; 0x3e7
   2e06e:	42ac      	cmp	r4, r5
   2e070:	d320      	bcc.n	2e0b4 <z_init_static_threads+0x6c>
}
   2e072:	b007      	add	sp, #28
   2e074:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2e078:	f000 bd08 	b.w	2ea8c <k_sched_unlock>
		z_setup_new_thread(
   2e07c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2e080:	9305      	str	r3, [sp, #20]
   2e082:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   2e086:	9304      	str	r3, [sp, #16]
   2e088:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2e08c:	9303      	str	r3, [sp, #12]
   2e08e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2e092:	9302      	str	r3, [sp, #8]
   2e094:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2e098:	9301      	str	r3, [sp, #4]
   2e09a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2e09e:	9300      	str	r3, [sp, #0]
   2e0a0:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   2e0a4:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   2e0a8:	f7ff ff72 	bl	2df90 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2e0ac:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2e0b0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2e0b2:	e7ce      	b.n	2e052 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2e0b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e0b6:	1c5a      	adds	r2, r3, #1
   2e0b8:	d00d      	beq.n	2e0d6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   2e0ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2e0be:	2100      	movs	r1, #0
   2e0c0:	4638      	mov	r0, r7
   2e0c2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2e0c6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2e0ca:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2e0ce:	d104      	bne.n	2e0da <z_init_static_threads+0x92>
	z_sched_start(thread);
   2e0d0:	4640      	mov	r0, r8
   2e0d2:	f000 fc77 	bl	2e9c4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2e0d6:	342c      	adds	r4, #44	; 0x2c
   2e0d8:	e7c9      	b.n	2e06e <z_init_static_threads+0x26>
   2e0da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e0de:	2300      	movs	r3, #0
   2e0e0:	f7f8 f80e 	bl	26100 <__aeabi_uldivmod>
   2e0e4:	4602      	mov	r2, r0
   2e0e6:	460b      	mov	r3, r1
   2e0e8:	f108 0018 	add.w	r0, r8, #24
   2e0ec:	4649      	mov	r1, r9
   2e0ee:	f000 fe7f 	bl	2edf0 <z_add_timeout>
   2e0f2:	e7f0      	b.n	2e0d6 <z_init_static_threads+0x8e>
   2e0f4:	000312bc 	.word	0x000312bc
   2e0f8:	000312bc 	.word	0x000312bc
   2e0fc:	00030d19 	.word	0x00030d19

0002e100 <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
   2e100:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2e102:	4c0b      	ldr	r4, [pc, #44]	; (2e130 <idle+0x30>)
	return !z_sys_post_kernel;
   2e104:	4d0b      	ldr	r5, [pc, #44]	; (2e134 <idle+0x34>)
	__asm__ volatile(
   2e106:	f04f 0220 	mov.w	r2, #32
   2e10a:	f3ef 8311 	mrs	r3, BASEPRI
   2e10e:	f382 8812 	msr	BASEPRI_MAX, r2
   2e112:	f3bf 8f6f 	isb	sy
   2e116:	f002 fead 	bl	30e74 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2e11a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   2e11c:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2e11e:	b913      	cbnz	r3, 2e126 <idle+0x26>
	arch_cpu_idle();
   2e120:	f7fb fbf0 	bl	29904 <arch_cpu_idle>
}
   2e124:	e7ef      	b.n	2e106 <idle+0x6>
   2e126:	f7fa f8c1 	bl	282ac <pm_system_suspend>
   2e12a:	2800      	cmp	r0, #0
   2e12c:	d1eb      	bne.n	2e106 <idle+0x6>
   2e12e:	e7f7      	b.n	2e120 <idle+0x20>
   2e130:	20001934 	.word	0x20001934
   2e134:	2000198d 	.word	0x2000198d

0002e138 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2e138:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2e13c:	4604      	mov	r4, r0
   2e13e:	4617      	mov	r7, r2
   2e140:	461e      	mov	r6, r3
   2e142:	f04f 0320 	mov.w	r3, #32
   2e146:	f3ef 8811 	mrs	r8, BASEPRI
   2e14a:	f383 8812 	msr	BASEPRI_MAX, r3
   2e14e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2e152:	68c3      	ldr	r3, [r0, #12]
   2e154:	4a33      	ldr	r2, [pc, #204]	; (2e224 <z_impl_k_mutex_lock+0xec>)
   2e156:	b17b      	cbz	r3, 2e178 <z_impl_k_mutex_lock+0x40>
   2e158:	6880      	ldr	r0, [r0, #8]
   2e15a:	6891      	ldr	r1, [r2, #8]
   2e15c:	4288      	cmp	r0, r1
   2e15e:	d019      	beq.n	2e194 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2e160:	ea57 0306 	orrs.w	r3, r7, r6
   2e164:	d118      	bne.n	2e198 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2e166:	f388 8811 	msr	BASEPRI, r8
   2e16a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2e16e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2e172:	b002      	add	sp, #8
   2e174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2e178:	6891      	ldr	r1, [r2, #8]
   2e17a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2e17e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   2e180:	3301      	adds	r3, #1
   2e182:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2e184:	6893      	ldr	r3, [r2, #8]
   2e186:	60a3      	str	r3, [r4, #8]
   2e188:	f388 8811 	msr	BASEPRI, r8
   2e18c:	f3bf 8f6f 	isb	sy
		return 0;
   2e190:	2000      	movs	r0, #0
   2e192:	e7ee      	b.n	2e172 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   2e194:	6921      	ldr	r1, [r4, #16]
   2e196:	e7f2      	b.n	2e17e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2e198:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2e19c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2e1a0:	4299      	cmp	r1, r3
   2e1a2:	bfa8      	it	ge
   2e1a4:	4619      	movge	r1, r3
   2e1a6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2e1aa:	4291      	cmp	r1, r2
   2e1ac:	bfb8      	it	lt
   2e1ae:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2e1b0:	428b      	cmp	r3, r1
   2e1b2:	dd2e      	ble.n	2e212 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   2e1b4:	f002 fc33 	bl	30a1e <adjust_owner_prio.isra.0>
   2e1b8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2e1ba:	e9cd 7600 	strd	r7, r6, [sp]
   2e1be:	481a      	ldr	r0, [pc, #104]	; (2e228 <z_impl_k_mutex_lock+0xf0>)
   2e1c0:	4622      	mov	r2, r4
   2e1c2:	4641      	mov	r1, r8
   2e1c4:	f000 fb88 	bl	2e8d8 <z_pend_curr>
	if (got_mutex == 0) {
   2e1c8:	2800      	cmp	r0, #0
   2e1ca:	d0e1      	beq.n	2e190 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   2e1cc:	f04f 0320 	mov.w	r3, #32
   2e1d0:	f3ef 8611 	mrs	r6, BASEPRI
   2e1d4:	f383 8812 	msr	BASEPRI_MAX, r3
   2e1d8:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   2e1dc:	68a0      	ldr	r0, [r4, #8]
   2e1de:	b1d0      	cbz	r0, 2e216 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2e1e0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2e1e2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e1e4:	429c      	cmp	r4, r3
   2e1e6:	d00a      	beq.n	2e1fe <z_impl_k_mutex_lock+0xc6>
   2e1e8:	b14b      	cbz	r3, 2e1fe <z_impl_k_mutex_lock+0xc6>
   2e1ea:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2e1ee:	4299      	cmp	r1, r3
   2e1f0:	bfa8      	it	ge
   2e1f2:	4619      	movge	r1, r3
   2e1f4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   2e1f8:	4299      	cmp	r1, r3
   2e1fa:	bfb8      	it	lt
   2e1fc:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   2e1fe:	f002 fc0e 	bl	30a1e <adjust_owner_prio.isra.0>
   2e202:	b140      	cbz	r0, 2e216 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   2e204:	4808      	ldr	r0, [pc, #32]	; (2e228 <z_impl_k_mutex_lock+0xf0>)
   2e206:	4631      	mov	r1, r6
   2e208:	f000 fbca 	bl	2e9a0 <z_reschedule>
	return -EAGAIN;
   2e20c:	f06f 000a 	mvn.w	r0, #10
   2e210:	e7af      	b.n	2e172 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   2e212:	2500      	movs	r5, #0
   2e214:	e7d1      	b.n	2e1ba <z_impl_k_mutex_lock+0x82>
	if (resched) {
   2e216:	2d00      	cmp	r5, #0
   2e218:	d1f4      	bne.n	2e204 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   2e21a:	f386 8811 	msr	BASEPRI, r6
   2e21e:	f3bf 8f6f 	isb	sy
   2e222:	e7f3      	b.n	2e20c <z_impl_k_mutex_lock+0xd4>
   2e224:	20001934 	.word	0x20001934
   2e228:	2000198e 	.word	0x2000198e

0002e22c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2e22c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2e22e:	6883      	ldr	r3, [r0, #8]
{
   2e230:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2e232:	b36b      	cbz	r3, 2e290 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2e234:	4a19      	ldr	r2, [pc, #100]	; (2e29c <z_impl_k_mutex_unlock+0x70>)
   2e236:	6892      	ldr	r2, [r2, #8]
   2e238:	4293      	cmp	r3, r2
   2e23a:	d12c      	bne.n	2e296 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2e23c:	68c3      	ldr	r3, [r0, #12]
   2e23e:	2b01      	cmp	r3, #1
   2e240:	d903      	bls.n	2e24a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   2e242:	3b01      	subs	r3, #1
   2e244:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2e246:	2000      	movs	r0, #0
}
   2e248:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2e24a:	f04f 0320 	mov.w	r3, #32
   2e24e:	f3ef 8511 	mrs	r5, BASEPRI
   2e252:	f383 8812 	msr	BASEPRI_MAX, r3
   2e256:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2e25a:	6901      	ldr	r1, [r0, #16]
   2e25c:	6880      	ldr	r0, [r0, #8]
   2e25e:	f002 fbde 	bl	30a1e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2e262:	4620      	mov	r0, r4
   2e264:	f002 fd73 	bl	30d4e <z_unpend_first_thread>
	mutex->owner = new_owner;
   2e268:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2e26a:	b158      	cbz	r0, 2e284 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   2e26c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2e270:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2e272:	2200      	movs	r2, #0
   2e274:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   2e276:	f002 fd0b 	bl	30c90 <z_ready_thread>
		z_reschedule(&lock, key);
   2e27a:	4809      	ldr	r0, [pc, #36]	; (2e2a0 <z_impl_k_mutex_unlock+0x74>)
   2e27c:	4629      	mov	r1, r5
   2e27e:	f000 fb8f 	bl	2e9a0 <z_reschedule>
   2e282:	e7e0      	b.n	2e246 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   2e284:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2e286:	f385 8811 	msr	BASEPRI, r5
   2e28a:	f3bf 8f6f 	isb	sy
   2e28e:	e7da      	b.n	2e246 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   2e290:	f06f 0015 	mvn.w	r0, #21
   2e294:	e7d8      	b.n	2e248 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   2e296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e29a:	e7d5      	b.n	2e248 <z_impl_k_mutex_unlock+0x1c>
   2e29c:	20001934 	.word	0x20001934
   2e2a0:	2000198e 	.word	0x2000198e

0002e2a4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2e2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e2a6:	4611      	mov	r1, r2
	__asm__ volatile(
   2e2a8:	f04f 0220 	mov.w	r2, #32
   2e2ac:	f3ef 8511 	mrs	r5, BASEPRI
   2e2b0:	f382 8812 	msr	BASEPRI_MAX, r2
   2e2b4:	f3bf 8f6f 	isb	sy
   2e2b8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2e2ba:	b19c      	cbz	r4, 2e2e4 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2e2bc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2e2be:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2e2c0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2e2c4:	4294      	cmp	r4, r2
	list->head = node;
   2e2c6:	6003      	str	r3, [r0, #0]
	list->tail = node;
   2e2c8:	bf08      	it	eq
   2e2ca:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2e2cc:	2101      	movs	r1, #1
   2e2ce:	4620      	mov	r0, r4
   2e2d0:	f002 fc16 	bl	30b00 <z_queue_node_peek>
   2e2d4:	4604      	mov	r4, r0
	__asm__ volatile(
   2e2d6:	f385 8811 	msr	BASEPRI, r5
   2e2da:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2e2de:	4620      	mov	r0, r4
   2e2e0:	b003      	add	sp, #12
   2e2e2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2e2e4:	ea51 0203 	orrs.w	r2, r1, r3
   2e2e8:	d0f5      	beq.n	2e2d6 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2e2ea:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2e2ee:	e9cd 1300 	strd	r1, r3, [sp]
   2e2f2:	4610      	mov	r0, r2
   2e2f4:	4629      	mov	r1, r5
   2e2f6:	f000 faef 	bl	2e8d8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2e2fa:	2800      	cmp	r0, #0
   2e2fc:	d1ef      	bne.n	2e2de <z_impl_k_queue_get+0x3a>
   2e2fe:	4b02      	ldr	r3, [pc, #8]	; (2e308 <z_impl_k_queue_get+0x64>)
   2e300:	689b      	ldr	r3, [r3, #8]
   2e302:	695c      	ldr	r4, [r3, #20]
   2e304:	e7eb      	b.n	2e2de <z_impl_k_queue_get+0x3a>
   2e306:	bf00      	nop
   2e308:	20001934 	.word	0x20001934

0002e30c <z_impl_k_sem_give>:
	return false;
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2e30c:	b538      	push	{r3, r4, r5, lr}
   2e30e:	4604      	mov	r4, r0
	__asm__ volatile(
   2e310:	f04f 0320 	mov.w	r3, #32
   2e314:	f3ef 8511 	mrs	r5, BASEPRI
   2e318:	f383 8812 	msr	BASEPRI_MAX, r3
   2e31c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	bool resched = true;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2e320:	f002 fd15 	bl	30d4e <z_unpend_first_thread>

	if (thread != NULL) {
   2e324:	b148      	cbz	r0, 2e33a <z_impl_k_sem_give+0x2e>
   2e326:	2200      	movs	r2, #0
   2e328:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2e32a:	f002 fcb1 	bl	30c90 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		resched = handle_poll_events(sem);
	}

	if (resched) {
		z_reschedule(&lock, key);
   2e32e:	4629      	mov	r1, r5
   2e330:	4807      	ldr	r0, [pc, #28]	; (2e350 <z_impl_k_sem_give+0x44>)
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2e332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   2e336:	f000 bb33 	b.w	2e9a0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2e33a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2e33e:	429a      	cmp	r2, r3
   2e340:	bf18      	it	ne
   2e342:	3301      	addne	r3, #1
   2e344:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2e346:	f385 8811 	msr	BASEPRI, r5
   2e34a:	f3bf 8f6f 	isb	sy
}
   2e34e:	bd38      	pop	{r3, r4, r5, pc}
   2e350:	2000198e 	.word	0x2000198e

0002e354 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2e354:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
   2e356:	f04f 0420 	mov.w	r4, #32
   2e35a:	f3ef 8111 	mrs	r1, BASEPRI
   2e35e:	f384 8812 	msr	BASEPRI_MAX, r4
   2e362:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2e366:	6884      	ldr	r4, [r0, #8]
   2e368:	b144      	cbz	r4, 2e37c <z_impl_k_sem_take+0x28>
		sem->count--;
   2e36a:	3c01      	subs	r4, #1
   2e36c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2e36e:	f381 8811 	msr	BASEPRI, r1
   2e372:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2e376:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2e378:	b002      	add	sp, #8
   2e37a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2e37c:	ea52 0403 	orrs.w	r4, r2, r3
   2e380:	d106      	bne.n	2e390 <z_impl_k_sem_take+0x3c>
   2e382:	f381 8811 	msr	BASEPRI, r1
   2e386:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2e38a:	f06f 000f 	mvn.w	r0, #15
   2e38e:	e7f3      	b.n	2e378 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2e390:	e9cd 2300 	strd	r2, r3, [sp]
   2e394:	4602      	mov	r2, r0
   2e396:	4802      	ldr	r0, [pc, #8]	; (2e3a0 <z_impl_k_sem_take+0x4c>)
   2e398:	f000 fa9e 	bl	2e8d8 <z_pend_curr>
	return ret;
   2e39c:	e7ec      	b.n	2e378 <z_impl_k_sem_take+0x24>
   2e39e:	bf00      	nop
   2e3a0:	2000198e 	.word	0x2000198e

0002e3a4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   2e3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   2e3a8:	4e4a      	ldr	r6, [pc, #296]	; (2e4d4 <work_queue_main+0x130>)
   2e3aa:	b085      	sub	sp, #20
   2e3ac:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   2e3ae:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2e3b2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   2e3b6:	f04f 0320 	mov.w	r3, #32
   2e3ba:	f3ef 8711 	mrs	r7, BASEPRI
   2e3be:	f383 8812 	msr	BASEPRI_MAX, r3
   2e3c2:	f3bf 8f6f 	isb	sy
   2e3c6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   2e3ca:	b98d      	cbnz	r5, 2e3f0 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   2e3cc:	2102      	movs	r1, #2
   2e3ce:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2e3d2:	f002 fbb8 	bl	30b46 <flag_test_and_clear>
   2e3d6:	2800      	cmp	r0, #0
   2e3d8:	d143      	bne.n	2e462 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2e3da:	2300      	movs	r3, #0
   2e3dc:	e9cd 8900 	strd	r8, r9, [sp]
   2e3e0:	9302      	str	r3, [sp, #8]
   2e3e2:	f104 0288 	add.w	r2, r4, #136	; 0x88
   2e3e6:	4639      	mov	r1, r7
   2e3e8:	483b      	ldr	r0, [pc, #236]	; (2e4d8 <work_queue_main+0x134>)
   2e3ea:	f000 fc8f 	bl	2ed0c <z_sched_wait>
			continue;
   2e3ee:	e7e2      	b.n	2e3b6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e3f0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   2e3f4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2e3f6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e3fa:	4295      	cmp	r5, r2
	list->tail = node;
   2e3fc:	bf08      	it	eq
   2e3fe:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   2e402:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2e406:	f043 0302 	orr.w	r3, r3, #2
   2e40a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   2e40e:	68eb      	ldr	r3, [r5, #12]
   2e410:	f023 0304 	bic.w	r3, r3, #4
   2e414:	f043 0301 	orr.w	r3, r3, #1
   2e418:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2e41a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   2e41c:	f387 8811 	msr	BASEPRI, r7
   2e420:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   2e424:	4628      	mov	r0, r5
   2e426:	4798      	blx	r3
	__asm__ volatile(
   2e428:	f04f 0320 	mov.w	r3, #32
   2e42c:	f3ef 8b11 	mrs	fp, BASEPRI
   2e430:	f383 8812 	msr	BASEPRI_MAX, r3
   2e434:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   2e438:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2e43a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2e43c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2e440:	d419      	bmi.n	2e476 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   2e442:	60ea      	str	r2, [r5, #12]
   2e444:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2e448:	f023 0302 	bic.w	r3, r3, #2
   2e44c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   2e450:	f38b 8811 	msr	BASEPRI, fp
   2e454:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   2e458:	05db      	lsls	r3, r3, #23
   2e45a:	d4ac      	bmi.n	2e3b6 <work_queue_main+0x12>
	z_impl_k_yield();
   2e45c:	f000 fb3a 	bl	2ead4 <z_impl_k_yield>
}
   2e460:	e7a9      	b.n	2e3b6 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2e462:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2e466:	2200      	movs	r2, #0
   2e468:	2101      	movs	r1, #1
   2e46a:	4628      	mov	r0, r5
   2e46c:	f002 fcc9 	bl	30e02 <z_sched_wake>
   2e470:	2800      	cmp	r0, #0
   2e472:	d1f8      	bne.n	2e466 <work_queue_main+0xc2>
   2e474:	e7b1      	b.n	2e3da <work_queue_main+0x36>
	return list->head;
   2e476:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   2e478:	f023 0303 	bic.w	r3, r3, #3
   2e47c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2e47e:	2800      	cmp	r0, #0
   2e480:	d0e0      	beq.n	2e444 <work_queue_main+0xa0>
	return node->next;
   2e482:	2700      	movs	r7, #0
   2e484:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   2e488:	463b      	mov	r3, r7
   2e48a:	2800      	cmp	r0, #0
   2e48c:	d0da      	beq.n	2e444 <work_queue_main+0xa0>
		if (wc->work == work) {
   2e48e:	6842      	ldr	r2, [r0, #4]
   2e490:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   2e492:	4601      	mov	r1, r0
		if (wc->work == work) {
   2e494:	d10c      	bne.n	2e4b0 <work_queue_main+0x10c>
	return node->next;
   2e496:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   2e498:	b99f      	cbnz	r7, 2e4c2 <work_queue_main+0x11e>
   2e49a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   2e49c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e49e:	4282      	cmp	r2, r0
   2e4a0:	d100      	bne.n	2e4a4 <work_queue_main+0x100>
	list->tail = node;
   2e4a2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   2e4a4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   2e4a8:	f7ff ff30 	bl	2e30c <z_impl_k_sem_give>
}
   2e4ac:	4639      	mov	r1, r7
   2e4ae:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2e4b0:	f1ba 0f00 	cmp.w	sl, #0
   2e4b4:	d00b      	beq.n	2e4ce <work_queue_main+0x12a>
	return node->next;
   2e4b6:	f8da 2000 	ldr.w	r2, [sl]
   2e4ba:	4650      	mov	r0, sl
   2e4bc:	460f      	mov	r7, r1
   2e4be:	4692      	mov	sl, r2
   2e4c0:	e7e3      	b.n	2e48a <work_queue_main+0xe6>
	parent->next = child;
   2e4c2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e4c4:	6872      	ldr	r2, [r6, #4]
   2e4c6:	4282      	cmp	r2, r0
	list->tail = node;
   2e4c8:	bf08      	it	eq
   2e4ca:	6077      	streq	r7, [r6, #4]
}
   2e4cc:	e7ea      	b.n	2e4a4 <work_queue_main+0x100>
   2e4ce:	4652      	mov	r2, sl
   2e4d0:	e7f3      	b.n	2e4ba <work_queue_main+0x116>
   2e4d2:	bf00      	nop
   2e4d4:	20001958 	.word	0x20001958
   2e4d8:	2000198e 	.word	0x2000198e

0002e4dc <submit_to_queue_locked>:
{
   2e4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2e4de:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2e4e0:	079a      	lsls	r2, r3, #30
{
   2e4e2:	4604      	mov	r4, r0
   2e4e4:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2e4e6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2e4ea:	d42c      	bmi.n	2e546 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2e4ec:	075b      	lsls	r3, r3, #29
   2e4ee:	d41a      	bmi.n	2e526 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   2e4f0:	680b      	ldr	r3, [r1, #0]
   2e4f2:	b90b      	cbnz	r3, 2e4f8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   2e4f4:	6883      	ldr	r3, [r0, #8]
   2e4f6:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   2e4f8:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2e4fa:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   2e4fc:	bf44      	itt	mi
   2e4fe:	68a3      	ldrmi	r3, [r4, #8]
   2e500:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   2e502:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   2e504:	bf4c      	ite	mi
   2e506:	2602      	movmi	r6, #2
		ret = 1;
   2e508:	2601      	movpl	r6, #1
	if (queue == NULL) {
   2e50a:	2d00      	cmp	r5, #0
   2e50c:	d03a      	beq.n	2e584 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2e50e:	4b1f      	ldr	r3, [pc, #124]	; (2e58c <submit_to_queue_locked+0xb0>)
   2e510:	689b      	ldr	r3, [r3, #8]
   2e512:	42ab      	cmp	r3, r5
   2e514:	d00a      	beq.n	2e52c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   2e516:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2e51a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2e51c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2e520:	d414      	bmi.n	2e54c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   2e522:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   2e526:	2300      	movs	r3, #0
   2e528:	603b      	str	r3, [r7, #0]
	return ret;
   2e52a:	e025      	b.n	2e578 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2e52c:	f002 fa63 	bl	309f6 <k_is_in_isr>
   2e530:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2e534:	2800      	cmp	r0, #0
   2e536:	d1f0      	bne.n	2e51a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2e538:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2e53a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2e53e:	d5f0      	bpl.n	2e522 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   2e540:	b152      	cbz	r2, 2e558 <submit_to_queue_locked+0x7c>
   2e542:	075b      	lsls	r3, r3, #29
   2e544:	d408      	bmi.n	2e558 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   2e546:	f06f 060f 	mvn.w	r6, #15
   2e54a:	e7ec      	b.n	2e526 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   2e54c:	2a00      	cmp	r2, #0
   2e54e:	d1fa      	bne.n	2e546 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   2e550:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   2e554:	2b00      	cmp	r3, #0
   2e556:	d1f6      	bne.n	2e546 <submit_to_queue_locked+0x6a>
	parent->next = child;
   2e558:	2300      	movs	r3, #0
   2e55a:	6023      	str	r3, [r4, #0]
	return list->tail;
   2e55c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   2e560:	b963      	cbnz	r3, 2e57c <submit_to_queue_locked+0xa0>
	list->head = node;
   2e562:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   2e566:	4628      	mov	r0, r5
   2e568:	f002 faf8 	bl	30b5c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   2e56c:	68e3      	ldr	r3, [r4, #12]
   2e56e:	f043 0304 	orr.w	r3, r3, #4
   2e572:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2e574:	683b      	ldr	r3, [r7, #0]
   2e576:	60a3      	str	r3, [r4, #8]
}
   2e578:	4630      	mov	r0, r6
   2e57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   2e57c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2e57e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   2e582:	e7f0      	b.n	2e566 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   2e584:	f06f 0615 	mvn.w	r6, #21
   2e588:	e7cd      	b.n	2e526 <submit_to_queue_locked+0x4a>
   2e58a:	bf00      	nop
   2e58c:	20001934 	.word	0x20001934

0002e590 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   2e590:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e592:	b089      	sub	sp, #36	; 0x24
   2e594:	4604      	mov	r4, r0
	list->head = NULL;
   2e596:	2000      	movs	r0, #0
	list->tail = NULL;
   2e598:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   2e59c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2e59e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2e5a2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   2e5a6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2e5aa:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   2e5ae:	b31d      	cbz	r5, 2e5f8 <k_work_queue_start+0x68>
   2e5b0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2e5b2:	2800      	cmp	r0, #0
   2e5b4:	f240 1001 	movw	r0, #257	; 0x101
   2e5b8:	bf08      	it	eq
   2e5ba:	2001      	moveq	r0, #1
	*flagp = flags;
   2e5bc:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2e5c0:	2000      	movs	r0, #0
   2e5c2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2e5c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2e5ca:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2e5ce:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2e5d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2e5d6:	4b09      	ldr	r3, [pc, #36]	; (2e5fc <k_work_queue_start+0x6c>)
   2e5d8:	9400      	str	r4, [sp, #0]
   2e5da:	4620      	mov	r0, r4
   2e5dc:	f7ff fd08 	bl	2dff0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   2e5e0:	b125      	cbz	r5, 2e5ec <k_work_queue_start+0x5c>
   2e5e2:	6829      	ldr	r1, [r5, #0]
   2e5e4:	b111      	cbz	r1, 2e5ec <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   2e5e6:	4620      	mov	r0, r4
   2e5e8:	f002 fa0b 	bl	30a02 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2e5ec:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2e5ee:	b009      	add	sp, #36	; 0x24
   2e5f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2e5f4:	f002 ba0a 	b.w	30a0c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2e5f8:	2001      	movs	r0, #1
   2e5fa:	e7df      	b.n	2e5bc <k_work_queue_start+0x2c>
   2e5fc:	0002e3a5 	.word	0x0002e3a5

0002e600 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2e600:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e602:	9001      	str	r0, [sp, #4]
   2e604:	4608      	mov	r0, r1
	__asm__ volatile(
   2e606:	f04f 0120 	mov.w	r1, #32
   2e60a:	f3ef 8411 	mrs	r4, BASEPRI
   2e60e:	f381 8812 	msr	BASEPRI_MAX, r1
   2e612:	f3bf 8f6f 	isb	sy
	return *flagp;
   2e616:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2e618:	f011 0f0e 	tst.w	r1, #14
   2e61c:	d116      	bne.n	2e64c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2e61e:	ea53 0502 	orrs.w	r5, r3, r2
   2e622:	d108      	bne.n	2e636 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   2e624:	a901      	add	r1, sp, #4
   2e626:	f7ff ff59 	bl	2e4dc <submit_to_queue_locked>
	__asm__ volatile(
   2e62a:	f384 8811 	msr	BASEPRI, r4
   2e62e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2e632:	b003      	add	sp, #12
   2e634:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   2e636:	f041 0108 	orr.w	r1, r1, #8
   2e63a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   2e63c:	9901      	ldr	r1, [sp, #4]
   2e63e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2e640:	3010      	adds	r0, #16
   2e642:	4903      	ldr	r1, [pc, #12]	; (2e650 <k_work_schedule_for_queue+0x50>)
   2e644:	f000 fbd4 	bl	2edf0 <z_add_timeout>
	return ret;
   2e648:	2001      	movs	r0, #1
   2e64a:	e7ee      	b.n	2e62a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   2e64c:	2000      	movs	r0, #0
   2e64e:	e7ec      	b.n	2e62a <k_work_schedule_for_queue+0x2a>
   2e650:	00030b6b 	.word	0x00030b6b

0002e654 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   2e654:	89c3      	ldrh	r3, [r0, #14]
   2e656:	2b7f      	cmp	r3, #127	; 0x7f
   2e658:	d812      	bhi.n	2e680 <sliceable+0x2c>
	int ret = slice_ticks;
   2e65a:	4b0a      	ldr	r3, [pc, #40]	; (2e684 <sliceable+0x30>)
   2e65c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   2e65e:	b163      	cbz	r3, 2e67a <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2e660:	4b09      	ldr	r3, [pc, #36]	; (2e688 <sliceable+0x34>)
   2e662:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2e666:	681b      	ldr	r3, [r3, #0]
   2e668:	429a      	cmp	r2, r3
   2e66a:	db09      	blt.n	2e680 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   2e66c:	7b43      	ldrb	r3, [r0, #13]
   2e66e:	06db      	lsls	r3, r3, #27
   2e670:	d106      	bne.n	2e680 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   2e672:	4b06      	ldr	r3, [pc, #24]	; (2e68c <sliceable+0x38>)
   2e674:	1ac3      	subs	r3, r0, r3
   2e676:	bf18      	it	ne
   2e678:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   2e67a:	f003 0001 	and.w	r0, r3, #1
   2e67e:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   2e680:	2300      	movs	r3, #0
   2e682:	e7fa      	b.n	2e67a <sliceable+0x26>
   2e684:	20001968 	.word	0x20001968
   2e688:	20001964 	.word	0x20001964
   2e68c:	200009d0 	.word	0x200009d0

0002e690 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   2e690:	4b04      	ldr	r3, [pc, #16]	; (2e6a4 <slice_timeout+0x14>)
   2e692:	1ac0      	subs	r0, r0, r3
   2e694:	4b04      	ldr	r3, [pc, #16]	; (2e6a8 <slice_timeout+0x18>)
   2e696:	10c0      	asrs	r0, r0, #3
   2e698:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   2e69a:	4b04      	ldr	r3, [pc, #16]	; (2e6ac <slice_timeout+0x1c>)
   2e69c:	2201      	movs	r2, #1
   2e69e:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   2e6a0:	4770      	bx	lr
   2e6a2:	bf00      	nop
   2e6a4:	20000ad0 	.word	0x20000ad0
   2e6a8:	aaaaaaab 	.word	0xaaaaaaab
   2e6ac:	2000198e 	.word	0x2000198e

0002e6b0 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   2e6b0:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   2e6b2:	4b0e      	ldr	r3, [pc, #56]	; (2e6ec <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   2e6b4:	4c0e      	ldr	r4, [pc, #56]	; (2e6f0 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   2e6b6:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   2e6b8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   2e6bc:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   2e6c0:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   2e6c2:	4620      	mov	r0, r4
   2e6c4:	f002 fbc0 	bl	30e48 <z_abort_timeout>
	slice_expired[cpu] = false;
   2e6c8:	4b0a      	ldr	r3, [pc, #40]	; (2e6f4 <z_reset_time_slice+0x44>)
   2e6ca:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   2e6cc:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   2e6ce:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   2e6d0:	f7ff ffc0 	bl	2e654 <sliceable>
   2e6d4:	b148      	cbz	r0, 2e6ea <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   2e6d6:	4b08      	ldr	r3, [pc, #32]	; (2e6f8 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2e6d8:	4908      	ldr	r1, [pc, #32]	; (2e6fc <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   2e6da:	681a      	ldr	r2, [r3, #0]
   2e6dc:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2e6de:	4620      	mov	r0, r4
   2e6e0:	17d3      	asrs	r3, r2, #31
	}
}
   2e6e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2e6e6:	f000 bb83 	b.w	2edf0 <z_add_timeout>
}
   2e6ea:	bd70      	pop	{r4, r5, r6, pc}
   2e6ec:	20001934 	.word	0x20001934
   2e6f0:	20000ad0 	.word	0x20000ad0
   2e6f4:	2000198e 	.word	0x2000198e
   2e6f8:	20001968 	.word	0x20001968
   2e6fc:	0002e691 	.word	0x0002e691

0002e700 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   2e700:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2e702:	4d0d      	ldr	r5, [pc, #52]	; (2e738 <update_cache+0x38>)
   2e704:	462b      	mov	r3, r5
   2e706:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e70a:	429c      	cmp	r4, r3
   2e70c:	d000      	beq.n	2e710 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2e70e:	b904      	cbnz	r4, 2e712 <update_cache+0x12>
   2e710:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   2e712:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   2e714:	b938      	cbnz	r0, 2e726 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   2e716:	7b5a      	ldrb	r2, [r3, #13]
   2e718:	06d2      	lsls	r2, r2, #27
   2e71a:	d104      	bne.n	2e726 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2e71c:	69a2      	ldr	r2, [r4, #24]
   2e71e:	b912      	cbnz	r2, 2e726 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   2e720:	89da      	ldrh	r2, [r3, #14]
   2e722:	2a7f      	cmp	r2, #127	; 0x7f
   2e724:	d805      	bhi.n	2e732 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   2e726:	429c      	cmp	r4, r3
   2e728:	d002      	beq.n	2e730 <update_cache+0x30>
			z_reset_time_slice(thread);
   2e72a:	4620      	mov	r0, r4
   2e72c:	f7ff ffc0 	bl	2e6b0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   2e730:	4623      	mov	r3, r4
   2e732:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   2e734:	bd38      	pop	{r3, r4, r5, pc}
   2e736:	bf00      	nop
   2e738:	20001934 	.word	0x20001934

0002e73c <move_thread_to_end_of_prio_q>:
{
   2e73c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2e73e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2e742:	7b43      	ldrb	r3, [r0, #13]
   2e744:	2a00      	cmp	r2, #0
{
   2e746:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2e748:	da04      	bge.n	2e754 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2e74a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2e74e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   2e750:	f002 fa64 	bl	30c1c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2e754:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2e756:	4a15      	ldr	r2, [pc, #84]	; (2e7ac <move_thread_to_end_of_prio_q+0x70>)
   2e758:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2e75c:	4610      	mov	r0, r2
   2e75e:	734b      	strb	r3, [r1, #13]
   2e760:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2e764:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e766:	4283      	cmp	r3, r0
   2e768:	bf08      	it	eq
   2e76a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2e76c:	b923      	cbnz	r3, 2e778 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   2e76e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   2e772:	6021      	str	r1, [r4, #0]
	list->tail = node;
   2e774:	6211      	str	r1, [r2, #32]
}
   2e776:	e00c      	b.n	2e792 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   2e778:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   2e77c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2e780:	42b5      	cmp	r5, r6
   2e782:	d00e      	beq.n	2e7a2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2e784:	42ae      	cmp	r6, r5
   2e786:	dd0c      	ble.n	2e7a2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2e788:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2e78a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   2e78e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   2e790:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   2e792:	6890      	ldr	r0, [r2, #8]
   2e794:	1a43      	subs	r3, r0, r1
   2e796:	4258      	negs	r0, r3
}
   2e798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2e79c:	4158      	adcs	r0, r3
   2e79e:	f7ff bfaf 	b.w	2e700 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2e7a2:	429c      	cmp	r4, r3
   2e7a4:	d0e3      	beq.n	2e76e <move_thread_to_end_of_prio_q+0x32>
   2e7a6:	681b      	ldr	r3, [r3, #0]
   2e7a8:	e7e0      	b.n	2e76c <move_thread_to_end_of_prio_q+0x30>
   2e7aa:	bf00      	nop
   2e7ac:	20001934 	.word	0x20001934

0002e7b0 <ready_thread>:
{
   2e7b0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2e7b2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2e7b6:	7b42      	ldrb	r2, [r0, #13]
   2e7b8:	2b00      	cmp	r3, #0
   2e7ba:	db29      	blt.n	2e810 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2e7bc:	06d3      	lsls	r3, r2, #27
   2e7be:	d127      	bne.n	2e810 <ready_thread+0x60>
	return node->next != NULL;
   2e7c0:	6983      	ldr	r3, [r0, #24]
   2e7c2:	bb2b      	cbnz	r3, 2e810 <ready_thread+0x60>
	return list->head == list;
   2e7c4:	4913      	ldr	r1, [pc, #76]	; (2e814 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2e7c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2e7ca:	7342      	strb	r2, [r0, #13]
   2e7cc:	460a      	mov	r2, r1
   2e7ce:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e7d2:	4294      	cmp	r4, r2
   2e7d4:	bf18      	it	ne
   2e7d6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   2e7d8:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2e7da:	b923      	cbnz	r3, 2e7e6 <ready_thread+0x36>
	node->prev = tail;
   2e7dc:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   2e7e0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2e7e2:	6208      	str	r0, [r1, #32]
}
   2e7e4:	e00c      	b.n	2e800 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   2e7e6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2e7ea:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2e7ee:	42b5      	cmp	r5, r6
   2e7f0:	d00a      	beq.n	2e808 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2e7f2:	42ae      	cmp	r6, r5
   2e7f4:	dd08      	ble.n	2e808 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   2e7f6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2e7f8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2e7fc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2e7fe:	6058      	str	r0, [r3, #4]
}
   2e800:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   2e802:	2000      	movs	r0, #0
   2e804:	f7ff bf7c 	b.w	2e700 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2e808:	42a3      	cmp	r3, r4
   2e80a:	d0e7      	beq.n	2e7dc <ready_thread+0x2c>
   2e80c:	681b      	ldr	r3, [r3, #0]
   2e80e:	e7e4      	b.n	2e7da <ready_thread+0x2a>
}
   2e810:	bc70      	pop	{r4, r5, r6}
   2e812:	4770      	bx	lr
   2e814:	20001934 	.word	0x20001934

0002e818 <unready_thread>:
{
   2e818:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2e81a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2e81e:	7b43      	ldrb	r3, [r0, #13]
   2e820:	2a00      	cmp	r2, #0
{
   2e822:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2e824:	da04      	bge.n	2e830 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2e826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2e82a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2e82c:	f002 f9f6 	bl	30c1c <sys_dlist_remove>
	update_cache(thread == _current);
   2e830:	4b04      	ldr	r3, [pc, #16]	; (2e844 <unready_thread+0x2c>)
   2e832:	6898      	ldr	r0, [r3, #8]
   2e834:	1a43      	subs	r3, r0, r1
   2e836:	4258      	negs	r0, r3
   2e838:	4158      	adcs	r0, r3
}
   2e83a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   2e83e:	f7ff bf5f 	b.w	2e700 <update_cache>
   2e842:	bf00      	nop
   2e844:	20001934 	.word	0x20001934

0002e848 <pend_locked>:
{
   2e848:	b570      	push	{r4, r5, r6, lr}
   2e84a:	4615      	mov	r5, r2
   2e84c:	461c      	mov	r4, r3
   2e84e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   2e850:	f002 f9f6 	bl	30c40 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e854:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2e858:	bf08      	it	eq
   2e85a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   2e85e:	d008      	beq.n	2e872 <pend_locked+0x2a>
   2e860:	462a      	mov	r2, r5
   2e862:	4623      	mov	r3, r4
   2e864:	f106 0018 	add.w	r0, r6, #24
   2e868:	4902      	ldr	r1, [pc, #8]	; (2e874 <pend_locked+0x2c>)
}
   2e86a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e86e:	f000 babf 	b.w	2edf0 <z_add_timeout>
   2e872:	bd70      	pop	{r4, r5, r6, pc}
   2e874:	00030d19 	.word	0x00030d19

0002e878 <z_time_slice>:
{
   2e878:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2e87a:	f04f 0320 	mov.w	r3, #32
   2e87e:	f3ef 8511 	mrs	r5, BASEPRI
   2e882:	f383 8812 	msr	BASEPRI_MAX, r3
   2e886:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   2e88a:	4b10      	ldr	r3, [pc, #64]	; (2e8cc <z_time_slice+0x54>)
	if (pending_current == curr) {
   2e88c:	4a10      	ldr	r2, [pc, #64]	; (2e8d0 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   2e88e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   2e890:	6810      	ldr	r0, [r2, #0]
   2e892:	42a0      	cmp	r0, r4
   2e894:	d106      	bne.n	2e8a4 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   2e896:	f7ff ff0b 	bl	2e6b0 <z_reset_time_slice>
	__asm__ volatile(
   2e89a:	f385 8811 	msr	BASEPRI, r5
   2e89e:	f3bf 8f6f 	isb	sy
}
   2e8a2:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   2e8a4:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   2e8a6:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   2e8a8:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   2e8aa:	4a0a      	ldr	r2, [pc, #40]	; (2e8d4 <z_time_slice+0x5c>)
   2e8ac:	5cd3      	ldrb	r3, [r2, r3]
   2e8ae:	2b00      	cmp	r3, #0
   2e8b0:	d0f3      	beq.n	2e89a <z_time_slice+0x22>
   2e8b2:	4620      	mov	r0, r4
   2e8b4:	f7ff fece 	bl	2e654 <sliceable>
   2e8b8:	2800      	cmp	r0, #0
   2e8ba:	d0ee      	beq.n	2e89a <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   2e8bc:	7b63      	ldrb	r3, [r4, #13]
   2e8be:	06db      	lsls	r3, r3, #27
   2e8c0:	d102      	bne.n	2e8c8 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   2e8c2:	4620      	mov	r0, r4
   2e8c4:	f7ff ff3a 	bl	2e73c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   2e8c8:	4620      	mov	r0, r4
   2e8ca:	e7e4      	b.n	2e896 <z_time_slice+0x1e>
   2e8cc:	20001934 	.word	0x20001934
   2e8d0:	20001960 	.word	0x20001960
   2e8d4:	2000198e 	.word	0x2000198e

0002e8d8 <z_pend_curr>:
{
   2e8d8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   2e8da:	480c      	ldr	r0, [pc, #48]	; (2e90c <z_pend_curr+0x34>)
   2e8dc:	4d0c      	ldr	r5, [pc, #48]	; (2e910 <z_pend_curr+0x38>)
   2e8de:	6886      	ldr	r6, [r0, #8]
   2e8e0:	602e      	str	r6, [r5, #0]
{
   2e8e2:	460c      	mov	r4, r1
   2e8e4:	4611      	mov	r1, r2
   2e8e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   2e8ea:	f04f 0620 	mov.w	r6, #32
   2e8ee:	f3ef 8511 	mrs	r5, BASEPRI
   2e8f2:	f386 8812 	msr	BASEPRI_MAX, r6
   2e8f6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   2e8fa:	6880      	ldr	r0, [r0, #8]
   2e8fc:	f7ff ffa4 	bl	2e848 <pend_locked>
	ret = arch_swap(key);
   2e900:	4620      	mov	r0, r4
}
   2e902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e906:	f7fb b8ed 	b.w	29ae4 <arch_swap>
   2e90a:	bf00      	nop
   2e90c:	20001934 	.word	0x20001934
   2e910:	20001960 	.word	0x20001960

0002e914 <z_set_prio>:
{
   2e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e916:	4604      	mov	r4, r0
   2e918:	f04f 0320 	mov.w	r3, #32
   2e91c:	f3ef 8611 	mrs	r6, BASEPRI
   2e920:	f383 8812 	msr	BASEPRI_MAX, r3
   2e924:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   2e928:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2e92a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   2e92c:	b249      	sxtb	r1, r1
   2e92e:	d119      	bne.n	2e964 <z_set_prio+0x50>
	return node->next != NULL;
   2e930:	6985      	ldr	r5, [r0, #24]
   2e932:	b9bd      	cbnz	r5, 2e964 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2e934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2e938:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2e93a:	f002 f96f 	bl	30c1c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2e93e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   2e940:	4a16      	ldr	r2, [pc, #88]	; (2e99c <z_set_prio+0x88>)
				thread->base.prio = prio;
   2e942:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2e944:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2e948:	7343      	strb	r3, [r0, #13]
   2e94a:	4613      	mov	r3, r2
   2e94c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e950:	4298      	cmp	r0, r3
   2e952:	bf18      	it	ne
   2e954:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   2e956:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2e958:	b95d      	cbnz	r5, 2e972 <z_set_prio+0x5e>
	node->prev = tail;
   2e95a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   2e95e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   2e960:	6214      	str	r4, [r2, #32]
}
   2e962:	e011      	b.n	2e988 <z_set_prio+0x74>
			thread->base.prio = prio;
   2e964:	73a1      	strb	r1, [r4, #14]
   2e966:	2000      	movs	r0, #0
	__asm__ volatile(
   2e968:	f386 8811 	msr	BASEPRI, r6
   2e96c:	f3bf 8f6f 	isb	sy
}
   2e970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   2e972:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   2e976:	42b9      	cmp	r1, r7
   2e978:	d00b      	beq.n	2e992 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2e97a:	428f      	cmp	r7, r1
   2e97c:	dd09      	ble.n	2e992 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   2e97e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   2e980:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   2e984:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2e986:	606c      	str	r4, [r5, #4]
			update_cache(1);
   2e988:	2001      	movs	r0, #1
   2e98a:	f7ff feb9 	bl	2e700 <update_cache>
   2e98e:	2001      	movs	r0, #1
   2e990:	e7ea      	b.n	2e968 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   2e992:	42a8      	cmp	r0, r5
   2e994:	d0e1      	beq.n	2e95a <z_set_prio+0x46>
   2e996:	682d      	ldr	r5, [r5, #0]
   2e998:	e7de      	b.n	2e958 <z_set_prio+0x44>
   2e99a:	bf00      	nop
   2e99c:	20001934 	.word	0x20001934

0002e9a0 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2e9a0:	b949      	cbnz	r1, 2e9b6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2e9a2:	f3ef 8005 	mrs	r0, IPSR
   2e9a6:	b930      	cbnz	r0, 2e9b6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   2e9a8:	4b05      	ldr	r3, [pc, #20]	; (2e9c0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   2e9aa:	699a      	ldr	r2, [r3, #24]
   2e9ac:	689b      	ldr	r3, [r3, #8]
   2e9ae:	429a      	cmp	r2, r3
   2e9b0:	d001      	beq.n	2e9b6 <z_reschedule+0x16>
   2e9b2:	f7fb b897 	b.w	29ae4 <arch_swap>
   2e9b6:	f381 8811 	msr	BASEPRI, r1
   2e9ba:	f3bf 8f6f 	isb	sy
}
   2e9be:	4770      	bx	lr
   2e9c0:	20001934 	.word	0x20001934

0002e9c4 <z_sched_start>:
{
   2e9c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   2e9c6:	f04f 0220 	mov.w	r2, #32
   2e9ca:	f3ef 8411 	mrs	r4, BASEPRI
   2e9ce:	f382 8812 	msr	BASEPRI_MAX, r2
   2e9d2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2e9d6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   2e9d8:	0751      	lsls	r1, r2, #29
   2e9da:	d404      	bmi.n	2e9e6 <z_sched_start+0x22>
	__asm__ volatile(
   2e9dc:	f384 8811 	msr	BASEPRI, r4
   2e9e0:	f3bf 8f6f 	isb	sy
}
   2e9e4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2e9e6:	f022 0204 	bic.w	r2, r2, #4
   2e9ea:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   2e9ec:	f7ff fee0 	bl	2e7b0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2e9f0:	4621      	mov	r1, r4
   2e9f2:	4802      	ldr	r0, [pc, #8]	; (2e9fc <z_sched_start+0x38>)
}
   2e9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   2e9f8:	f7ff bfd2 	b.w	2e9a0 <z_reschedule>
   2e9fc:	2000198f 	.word	0x2000198f

0002ea00 <z_impl_k_thread_suspend>:
{
   2ea00:	b570      	push	{r4, r5, r6, lr}
   2ea02:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2ea04:	3018      	adds	r0, #24
   2ea06:	f002 fa1f 	bl	30e48 <z_abort_timeout>
	__asm__ volatile(
   2ea0a:	f04f 0320 	mov.w	r3, #32
   2ea0e:	f3ef 8611 	mrs	r6, BASEPRI
   2ea12:	f383 8812 	msr	BASEPRI_MAX, r3
   2ea16:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2ea1a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2ea1e:	7b63      	ldrb	r3, [r4, #13]
   2ea20:	2a00      	cmp	r2, #0
   2ea22:	da05      	bge.n	2ea30 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ea24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2ea28:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2ea2a:	4620      	mov	r0, r4
   2ea2c:	f002 f8f6 	bl	30c1c <sys_dlist_remove>
		update_cache(thread == _current);
   2ea30:	4d0b      	ldr	r5, [pc, #44]	; (2ea60 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2ea32:	7b63      	ldrb	r3, [r4, #13]
   2ea34:	68a8      	ldr	r0, [r5, #8]
   2ea36:	f043 0310 	orr.w	r3, r3, #16
   2ea3a:	7363      	strb	r3, [r4, #13]
   2ea3c:	1b03      	subs	r3, r0, r4
   2ea3e:	4258      	negs	r0, r3
   2ea40:	4158      	adcs	r0, r3
   2ea42:	f7ff fe5d 	bl	2e700 <update_cache>
	__asm__ volatile(
   2ea46:	f386 8811 	msr	BASEPRI, r6
   2ea4a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2ea4e:	68ab      	ldr	r3, [r5, #8]
   2ea50:	42a3      	cmp	r3, r4
   2ea52:	d103      	bne.n	2ea5c <z_impl_k_thread_suspend+0x5c>
}
   2ea54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2ea58:	f002 b9b9 	b.w	30dce <z_reschedule_unlocked>
}
   2ea5c:	bd70      	pop	{r4, r5, r6, pc}
   2ea5e:	bf00      	nop
   2ea60:	20001934 	.word	0x20001934

0002ea64 <k_sched_lock>:
	__asm__ volatile(
   2ea64:	f04f 0320 	mov.w	r3, #32
   2ea68:	f3ef 8111 	mrs	r1, BASEPRI
   2ea6c:	f383 8812 	msr	BASEPRI_MAX, r3
   2ea70:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   2ea74:	4b04      	ldr	r3, [pc, #16]	; (2ea88 <k_sched_lock+0x24>)
   2ea76:	689a      	ldr	r2, [r3, #8]
   2ea78:	7bd3      	ldrb	r3, [r2, #15]
   2ea7a:	3b01      	subs	r3, #1
   2ea7c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2ea7e:	f381 8811 	msr	BASEPRI, r1
   2ea82:	f3bf 8f6f 	isb	sy
}
   2ea86:	4770      	bx	lr
   2ea88:	20001934 	.word	0x20001934

0002ea8c <k_sched_unlock>:
{
   2ea8c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ea8e:	f04f 0320 	mov.w	r3, #32
   2ea92:	f3ef 8411 	mrs	r4, BASEPRI
   2ea96:	f383 8812 	msr	BASEPRI_MAX, r3
   2ea9a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2ea9e:	4b08      	ldr	r3, [pc, #32]	; (2eac0 <k_sched_unlock+0x34>)
   2eaa0:	689a      	ldr	r2, [r3, #8]
   2eaa2:	7bd3      	ldrb	r3, [r2, #15]
   2eaa4:	3301      	adds	r3, #1
   2eaa6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2eaa8:	2000      	movs	r0, #0
   2eaaa:	f7ff fe29 	bl	2e700 <update_cache>
	__asm__ volatile(
   2eaae:	f384 8811 	msr	BASEPRI, r4
   2eab2:	f3bf 8f6f 	isb	sy
}
   2eab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2eaba:	f002 b988 	b.w	30dce <z_reschedule_unlocked>
   2eabe:	bf00      	nop
   2eac0:	20001934 	.word	0x20001934

0002eac4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   2eac4:	4b02      	ldr	r3, [pc, #8]	; (2ead0 <z_sched_init+0xc>)
   2eac6:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   2eaca:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   2eace:	4770      	bx	lr
   2ead0:	20001934 	.word	0x20001934

0002ead4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2ead4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2ead6:	f04f 0320 	mov.w	r3, #32
   2eada:	f3ef 8511 	mrs	r5, BASEPRI
   2eade:	f383 8812 	msr	BASEPRI_MAX, r3
   2eae2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2eae6:	4919      	ldr	r1, [pc, #100]	; (2eb4c <z_impl_k_yield+0x78>)
   2eae8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2eaea:	7b43      	ldrb	r3, [r0, #13]
   2eaec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2eaf0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2eaf2:	f002 f893 	bl	30c1c <sys_dlist_remove>
	}
	queue_thread(_current);
   2eaf6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2eaf8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   2eafa:	4608      	mov	r0, r1
   2eafc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2eb00:	735a      	strb	r2, [r3, #13]
   2eb02:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   2eb06:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2eb08:	4282      	cmp	r2, r0
   2eb0a:	bf08      	it	eq
   2eb0c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2eb0e:	b922      	cbnz	r2, 2eb1a <z_impl_k_yield+0x46>
	node->prev = tail;
   2eb10:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   2eb14:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2eb16:	620b      	str	r3, [r1, #32]
}
   2eb18:	e00c      	b.n	2eb34 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   2eb1a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2eb1e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2eb22:	42be      	cmp	r6, r7
   2eb24:	d00e      	beq.n	2eb44 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2eb26:	42b7      	cmp	r7, r6
   2eb28:	dd0c      	ble.n	2eb44 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   2eb2a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2eb2c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2eb30:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2eb32:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2eb34:	2001      	movs	r0, #1
   2eb36:	f7ff fde3 	bl	2e700 <update_cache>
   2eb3a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   2eb3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2eb40:	f7fa bfd0 	b.w	29ae4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2eb44:	42a2      	cmp	r2, r4
   2eb46:	d0e3      	beq.n	2eb10 <z_impl_k_yield+0x3c>
   2eb48:	6812      	ldr	r2, [r2, #0]
   2eb4a:	e7e0      	b.n	2eb0e <z_impl_k_yield+0x3a>
   2eb4c:	20001934 	.word	0x20001934

0002eb50 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2eb50:	ea50 0301 	orrs.w	r3, r0, r1
{
   2eb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2eb58:	4605      	mov	r5, r0
   2eb5a:	460e      	mov	r6, r1
	if (ticks == 0) {
   2eb5c:	d103      	bne.n	2eb66 <z_tick_sleep+0x16>
	z_impl_k_yield();
   2eb5e:	f7ff ffb9 	bl	2ead4 <z_impl_k_yield>
		k_yield();
		return 0;
   2eb62:	2000      	movs	r0, #0
   2eb64:	e02c      	b.n	2ebc0 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   2eb66:	1c83      	adds	r3, r0, #2
   2eb68:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   2eb6c:	db2a      	blt.n	2ebc4 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2eb6e:	f002 f991 	bl	30e94 <sys_clock_tick_get_32>
   2eb72:	182c      	adds	r4, r5, r0
   2eb74:	f04f 0320 	mov.w	r3, #32
   2eb78:	f3ef 8811 	mrs	r8, BASEPRI
   2eb7c:	f383 8812 	msr	BASEPRI_MAX, r3
   2eb80:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   2eb84:	4f11      	ldr	r7, [pc, #68]	; (2ebcc <z_tick_sleep+0x7c>)
   2eb86:	4b12      	ldr	r3, [pc, #72]	; (2ebd0 <z_tick_sleep+0x80>)
   2eb88:	68b8      	ldr	r0, [r7, #8]
   2eb8a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   2eb8c:	f7ff fe44 	bl	2e818 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2eb90:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2eb92:	4910      	ldr	r1, [pc, #64]	; (2ebd4 <z_tick_sleep+0x84>)
   2eb94:	462a      	mov	r2, r5
   2eb96:	4633      	mov	r3, r6
   2eb98:	3018      	adds	r0, #24
   2eb9a:	f000 f929 	bl	2edf0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2eb9e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2eba0:	7b53      	ldrb	r3, [r2, #13]
   2eba2:	f043 0310 	orr.w	r3, r3, #16
   2eba6:	7353      	strb	r3, [r2, #13]
   2eba8:	4640      	mov	r0, r8
   2ebaa:	f7fa ff9b 	bl	29ae4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2ebae:	f002 f971 	bl	30e94 <sys_clock_tick_get_32>
   2ebb2:	1a20      	subs	r0, r4, r0
   2ebb4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2ebb8:	2801      	cmp	r0, #1
   2ebba:	f173 0300 	sbcs.w	r3, r3, #0
   2ebbe:	dbd0      	blt.n	2eb62 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   2ebc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   2ebc4:	f06f 0401 	mvn.w	r4, #1
   2ebc8:	1a24      	subs	r4, r4, r0
   2ebca:	e7d3      	b.n	2eb74 <z_tick_sleep+0x24>
   2ebcc:	20001934 	.word	0x20001934
   2ebd0:	20001960 	.word	0x20001960
   2ebd4:	00030d19 	.word	0x00030d19

0002ebd8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ebd8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2ebdc:	bf08      	it	eq
   2ebde:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2ebe2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ebe4:	d106      	bne.n	2ebf4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   2ebe6:	4b08      	ldr	r3, [pc, #32]	; (2ec08 <z_impl_k_sleep+0x30>)
   2ebe8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2ebea:	f7ff ff09 	bl	2ea00 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2ebee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2ebf2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   2ebf4:	f7ff ffac 	bl	2eb50 <z_tick_sleep>
   2ebf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2ebfc:	fb80 0303 	smull	r0, r3, r0, r3
   2ec00:	0bc0      	lsrs	r0, r0, #15
   2ec02:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2ec06:	e7f4      	b.n	2ebf2 <z_impl_k_sleep+0x1a>
   2ec08:	20001934 	.word	0x20001934

0002ec0c <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   2ec0c:	b538      	push	{r3, r4, r5, lr}
   2ec0e:	4c0a      	ldr	r4, [pc, #40]	; (2ec38 <z_impl_k_usleep+0x2c>)
   2ec10:	4a0a      	ldr	r2, [pc, #40]	; (2ec3c <z_impl_k_usleep+0x30>)
   2ec12:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2ec16:	2100      	movs	r1, #0
   2ec18:	fbc0 4105 	smlal	r4, r1, r0, r5
   2ec1c:	2300      	movs	r3, #0
   2ec1e:	4620      	mov	r0, r4
   2ec20:	f7f7 fa6e 	bl	26100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   2ec24:	17c1      	asrs	r1, r0, #31
   2ec26:	f7ff ff93 	bl	2eb50 <z_tick_sleep>
   2ec2a:	4b04      	ldr	r3, [pc, #16]	; (2ec3c <z_impl_k_usleep+0x30>)
   2ec2c:	fb80 0303 	smull	r0, r3, r0, r3
   2ec30:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
   2ec32:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2ec36:	bd38      	pop	{r3, r4, r5, pc}
   2ec38:	000f423f 	.word	0x000f423f
   2ec3c:	000f4240 	.word	0x000f4240

0002ec40 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2ec40:	4b01      	ldr	r3, [pc, #4]	; (2ec48 <z_impl_z_current_get+0x8>)
   2ec42:	6898      	ldr	r0, [r3, #8]
   2ec44:	4770      	bx	lr
   2ec46:	bf00      	nop
   2ec48:	20001934 	.word	0x20001934

0002ec4c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2ec4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ec50:	4604      	mov	r4, r0
   2ec52:	f04f 0320 	mov.w	r3, #32
   2ec56:	f3ef 8611 	mrs	r6, BASEPRI
   2ec5a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ec5e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2ec62:	7b03      	ldrb	r3, [r0, #12]
   2ec64:	07d9      	lsls	r1, r3, #31
   2ec66:	d50b      	bpl.n	2ec80 <z_thread_abort+0x34>
	__asm__ volatile(
   2ec68:	f386 8811 	msr	BASEPRI, r6
   2ec6c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   2ec70:	4040      	eors	r0, r0
   2ec72:	f380 8811 	msr	BASEPRI, r0
   2ec76:	f04f 0004 	mov.w	r0, #4
   2ec7a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2ec7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2ec80:	7b43      	ldrb	r3, [r0, #13]
   2ec82:	071a      	lsls	r2, r3, #28
   2ec84:	d504      	bpl.n	2ec90 <z_thread_abort+0x44>
   2ec86:	f386 8811 	msr	BASEPRI, r6
   2ec8a:	f3bf 8f6f 	isb	sy
   2ec8e:	e7f5      	b.n	2ec7c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2ec90:	f023 0220 	bic.w	r2, r3, #32
   2ec94:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2ec98:	09d2      	lsrs	r2, r2, #7
   2ec9a:	d120      	bne.n	2ecde <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2ec9c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2ec9e:	68a3      	ldr	r3, [r4, #8]
   2eca0:	b113      	cbz	r3, 2eca8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   2eca2:	4620      	mov	r0, r4
   2eca4:	f001 ffc2 	bl	30c2c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2eca8:	f104 0018 	add.w	r0, r4, #24
   2ecac:	f002 f8cc 	bl	30e48 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2ecb0:	f104 0758 	add.w	r7, r4, #88	; 0x58
   2ecb4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   2ecb8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ecba:	42bd      	cmp	r5, r7
   2ecbc:	d000      	beq.n	2ecc0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2ecbe:	b9b5      	cbnz	r5, 2ecee <z_thread_abort+0xa2>
		update_cache(1);
   2ecc0:	2001      	movs	r0, #1
   2ecc2:	f7ff fd1d 	bl	2e700 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2ecc6:	4b10      	ldr	r3, [pc, #64]	; (2ed08 <z_thread_abort+0xbc>)
   2ecc8:	689b      	ldr	r3, [r3, #8]
   2ecca:	42a3      	cmp	r3, r4
   2eccc:	d1db      	bne.n	2ec86 <z_thread_abort+0x3a>
   2ecce:	f3ef 8305 	mrs	r3, IPSR
   2ecd2:	2b00      	cmp	r3, #0
   2ecd4:	d1d7      	bne.n	2ec86 <z_thread_abort+0x3a>
   2ecd6:	4630      	mov	r0, r6
   2ecd8:	f7fa ff04 	bl	29ae4 <arch_swap>
	return ret;
   2ecdc:	e7d3      	b.n	2ec86 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ecde:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2ece2:	f043 0308 	orr.w	r3, r3, #8
   2ece6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2ece8:	f001 ff98 	bl	30c1c <sys_dlist_remove>
}
   2ecec:	e7d7      	b.n	2ec9e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   2ecee:	4628      	mov	r0, r5
   2ecf0:	f001 ff9c 	bl	30c2c <unpend_thread_no_timeout>
   2ecf4:	f105 0018 	add.w	r0, r5, #24
   2ecf8:	f002 f8a6 	bl	30e48 <z_abort_timeout>
   2ecfc:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
   2ed00:	4628      	mov	r0, r5
   2ed02:	f7ff fd55 	bl	2e7b0 <ready_thread>
   2ed06:	e7d7      	b.n	2ecb8 <z_thread_abort+0x6c>
   2ed08:	20001934 	.word	0x20001934

0002ed0c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2ed0c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2ed0e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2ed12:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2ed14:	e9cd 6700 	strd	r6, r7, [sp]
   2ed18:	f7ff fdde 	bl	2e8d8 <z_pend_curr>

	if (data != NULL) {
   2ed1c:	b11c      	cbz	r4, 2ed26 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2ed1e:	4b03      	ldr	r3, [pc, #12]	; (2ed2c <z_sched_wait+0x20>)
   2ed20:	689b      	ldr	r3, [r3, #8]
   2ed22:	695b      	ldr	r3, [r3, #20]
   2ed24:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2ed26:	b002      	add	sp, #8
   2ed28:	bdd0      	pop	{r4, r6, r7, pc}
   2ed2a:	bf00      	nop
   2ed2c:	20001934 	.word	0x20001934

0002ed30 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2ed30:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2ed32:	4806      	ldr	r0, [pc, #24]	; (2ed4c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   2ed34:	4a06      	ldr	r2, [pc, #24]	; (2ed50 <z_data_copy+0x20>)
   2ed36:	4907      	ldr	r1, [pc, #28]	; (2ed54 <z_data_copy+0x24>)
   2ed38:	1a12      	subs	r2, r2, r0
   2ed3a:	f001 fe1b 	bl	30974 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2ed3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2ed42:	4a05      	ldr	r2, [pc, #20]	; (2ed58 <z_data_copy+0x28>)
   2ed44:	4905      	ldr	r1, [pc, #20]	; (2ed5c <z_data_copy+0x2c>)
   2ed46:	4806      	ldr	r0, [pc, #24]	; (2ed60 <z_data_copy+0x30>)
   2ed48:	f001 be14 	b.w	30974 <z_early_memcpy>
   2ed4c:	20000000 	.word	0x20000000
   2ed50:	200003b0 	.word	0x200003b0
   2ed54:	000324d0 	.word	0x000324d0
   2ed58:	00000000 	.word	0x00000000
   2ed5c:	000324d0 	.word	0x000324d0
   2ed60:	20000000 	.word	0x20000000

0002ed64 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2ed64:	4b03      	ldr	r3, [pc, #12]	; (2ed74 <elapsed+0x10>)
   2ed66:	681b      	ldr	r3, [r3, #0]
   2ed68:	b90b      	cbnz	r3, 2ed6e <elapsed+0xa>
   2ed6a:	f7fd b9d5 	b.w	2c118 <sys_clock_elapsed>
}
   2ed6e:	2000      	movs	r0, #0
   2ed70:	4770      	bx	lr
   2ed72:	bf00      	nop
   2ed74:	2000196c 	.word	0x2000196c

0002ed78 <next_timeout>:

static int32_t next_timeout(void)
{
   2ed78:	b510      	push	{r4, lr}
	return list->head == list;
   2ed7a:	4b0e      	ldr	r3, [pc, #56]	; (2edb4 <next_timeout+0x3c>)
   2ed7c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ed7e:	429c      	cmp	r4, r3
   2ed80:	d104      	bne.n	2ed8c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2ed82:	f7ff ffef 	bl	2ed64 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   2ed86:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   2ed8a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   2ed8c:	f7ff ffea 	bl	2ed64 <elapsed>
	if ((to == NULL) ||
   2ed90:	2c00      	cmp	r4, #0
   2ed92:	d0f8      	beq.n	2ed86 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2ed94:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2ed98:	1a1b      	subs	r3, r3, r0
   2ed9a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2ed9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2eda2:	f172 0100 	sbcs.w	r1, r2, #0
   2eda6:	daee      	bge.n	2ed86 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   2eda8:	2a00      	cmp	r2, #0
   2edaa:	bfac      	ite	ge
   2edac:	4618      	movge	r0, r3
   2edae:	2000      	movlt	r0, #0
	return ret;
   2edb0:	e7eb      	b.n	2ed8a <next_timeout+0x12>
   2edb2:	bf00      	nop
   2edb4:	20000234 	.word	0x20000234

0002edb8 <remove_timeout>:
{
   2edb8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2edba:	b170      	cbz	r0, 2edda <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2edbc:	4b0b      	ldr	r3, [pc, #44]	; (2edec <remove_timeout+0x34>)
   2edbe:	685b      	ldr	r3, [r3, #4]
   2edc0:	4298      	cmp	r0, r3
   2edc2:	d00a      	beq.n	2edda <remove_timeout+0x22>
   2edc4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   2edc6:	b143      	cbz	r3, 2edda <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2edc8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2edcc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2edd0:	1912      	adds	r2, r2, r4
   2edd2:	eb41 0105 	adc.w	r1, r1, r5
   2edd6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2edda:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   2edde:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2ede0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2ede2:	2300      	movs	r3, #0
	node->prev = NULL;
   2ede4:	e9c0 3300 	strd	r3, r3, [r0]
}
   2ede8:	bd30      	pop	{r4, r5, pc}
   2edea:	bf00      	nop
   2edec:	20000234 	.word	0x20000234

0002edf0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2edf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2edf4:	bf08      	it	eq
   2edf6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   2edfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2edfc:	4604      	mov	r4, r0
   2edfe:	461d      	mov	r5, r3
   2ee00:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ee02:	d05c      	beq.n	2eebe <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   2ee04:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2ee06:	f04f 0320 	mov.w	r3, #32
   2ee0a:	f3ef 8711 	mrs	r7, BASEPRI
   2ee0e:	f383 8812 	msr	BASEPRI_MAX, r3
   2ee12:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2ee16:	3201      	adds	r2, #1
   2ee18:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   2ee1c:	da24      	bge.n	2ee68 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2ee1e:	492d      	ldr	r1, [pc, #180]	; (2eed4 <z_add_timeout+0xe4>)
   2ee20:	e9d1 2000 	ldrd	r2, r0, [r1]
   2ee24:	f06f 0301 	mvn.w	r3, #1
   2ee28:	1a9b      	subs	r3, r3, r2
   2ee2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ee2e:	eb62 0000 	sbc.w	r0, r2, r0
   2ee32:	1b9e      	subs	r6, r3, r6
   2ee34:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   2ee38:	2e01      	cmp	r6, #1
   2ee3a:	f170 0300 	sbcs.w	r3, r0, #0
   2ee3e:	da01      	bge.n	2ee44 <z_add_timeout+0x54>
   2ee40:	2601      	movs	r6, #1
   2ee42:	2000      	movs	r0, #0
   2ee44:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   2ee48:	4e23      	ldr	r6, [pc, #140]	; (2eed8 <z_add_timeout+0xe8>)
   2ee4a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   2ee4e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ee50:	45b4      	cmp	ip, r6
   2ee52:	bf08      	it	eq
   2ee54:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   2ee58:	f1bc 0f00 	cmp.w	ip, #0
   2ee5c:	d10d      	bne.n	2ee7a <z_add_timeout+0x8a>
	node->prev = tail;
   2ee5e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   2ee62:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2ee64:	6074      	str	r4, [r6, #4]
}
   2ee66:	e01c      	b.n	2eea2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   2ee68:	f7ff ff7c 	bl	2ed64 <elapsed>
   2ee6c:	3601      	adds	r6, #1
   2ee6e:	f145 0500 	adc.w	r5, r5, #0
   2ee72:	1836      	adds	r6, r6, r0
   2ee74:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   2ee78:	e7e4      	b.n	2ee44 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   2ee7a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   2ee7e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   2ee82:	4293      	cmp	r3, r2
   2ee84:	eb71 0e00 	sbcs.w	lr, r1, r0
   2ee88:	da1a      	bge.n	2eec0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   2ee8a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   2ee8c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2ee90:	eb60 0001 	sbc.w	r0, r0, r1
   2ee94:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   2ee98:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   2ee9c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2ee9e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   2eea2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2eea4:	42b3      	cmp	r3, r6
   2eea6:	d006      	beq.n	2eeb6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2eea8:	429c      	cmp	r4, r3
   2eeaa:	d104      	bne.n	2eeb6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   2eeac:	f7ff ff64 	bl	2ed78 <next_timeout>
   2eeb0:	2100      	movs	r1, #0
   2eeb2:	f7fd f8fd 	bl	2c0b0 <sys_clock_set_timeout>
	__asm__ volatile(
   2eeb6:	f387 8811 	msr	BASEPRI, r7
   2eeba:	f3bf 8f6f 	isb	sy
		}
	}
}
   2eebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   2eec0:	1a9b      	subs	r3, r3, r2
   2eec2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   2eec6:	45ac      	cmp	ip, r5
   2eec8:	e9c4 3104 	strd	r3, r1, [r4, #16]
   2eecc:	d0c7      	beq.n	2ee5e <z_add_timeout+0x6e>
   2eece:	f8dc c000 	ldr.w	ip, [ip]
   2eed2:	e7c1      	b.n	2ee58 <z_add_timeout+0x68>
   2eed4:	20000ae8 	.word	0x20000ae8
   2eed8:	20000234 	.word	0x20000234

0002eedc <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   2eedc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   2eee0:	f04f 0320 	mov.w	r3, #32
   2eee4:	f3ef 8c11 	mrs	ip, BASEPRI
   2eee8:	f383 8812 	msr	BASEPRI_MAX, r3
   2eeec:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2eef0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2efa4 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2eef4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 2efa8 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   2eef8:	4f2c      	ldr	r7, [pc, #176]	; (2efac <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   2eefa:	f8c9 0000 	str.w	r0, [r9]
   2eefe:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   2ef02:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ef04:	4550      	cmp	r0, sl
   2ef06:	bf08      	it	eq
   2ef08:	2000      	moveq	r0, #0
   2ef0a:	2500      	movs	r5, #0
		curr_tick += dt;
   2ef0c:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   2ef10:	f8d9 3000 	ldr.w	r3, [r9]
   2ef14:	46e0      	mov	r8, ip
   2ef16:	b380      	cbz	r0, 2ef7a <sys_clock_announce+0x9e>
   2ef18:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   2ef1c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   2ef20:	42b3      	cmp	r3, r6
   2ef22:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   2ef26:	da05      	bge.n	2ef34 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   2ef28:	1af6      	subs	r6, r6, r3
   2ef2a:	eb6c 040e 	sbc.w	r4, ip, lr
   2ef2e:	e9c0 6404 	strd	r6, r4, [r0, #16]
   2ef32:	e022      	b.n	2ef7a <sys_clock_announce+0x9e>
		curr_tick += dt;
   2ef34:	18b2      	adds	r2, r6, r2
   2ef36:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   2ef3a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   2ef3e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   2ef42:	f7ff ff39 	bl	2edb8 <remove_timeout>
	__asm__ volatile(
   2ef46:	f388 8811 	msr	BASEPRI, r8
   2ef4a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2ef4e:	6883      	ldr	r3, [r0, #8]
   2ef50:	4798      	blx	r3
	__asm__ volatile(
   2ef52:	f04f 0320 	mov.w	r3, #32
   2ef56:	f3ef 8811 	mrs	r8, BASEPRI
   2ef5a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ef5e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   2ef62:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   2ef66:	f8da 0000 	ldr.w	r0, [sl]
   2ef6a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ef6c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   2ef6e:	46c4      	mov	ip, r8
   2ef70:	f8c9 3000 	str.w	r3, [r9]
   2ef74:	d1ca      	bne.n	2ef0c <sys_clock_announce+0x30>
		curr_tick += dt;
   2ef76:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   2ef7a:	189a      	adds	r2, r3, r2
   2ef7c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   2ef80:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2ef82:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   2ef86:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   2ef8a:	f7ff fef5 	bl	2ed78 <next_timeout>
   2ef8e:	4621      	mov	r1, r4
   2ef90:	f7fd f88e 	bl	2c0b0 <sys_clock_set_timeout>
	__asm__ volatile(
   2ef94:	f388 8811 	msr	BASEPRI, r8
   2ef98:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   2ef9c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   2efa0:	f7ff bc6a 	b.w	2e878 <z_time_slice>
   2efa4:	20000234 	.word	0x20000234
   2efa8:	2000196c 	.word	0x2000196c
   2efac:	20000ae8 	.word	0x20000ae8

0002efb0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2efb0:	b510      	push	{r4, lr}
	__asm__ volatile(
   2efb2:	f04f 0320 	mov.w	r3, #32
   2efb6:	f3ef 8411 	mrs	r4, BASEPRI
   2efba:	f383 8812 	msr	BASEPRI_MAX, r3
   2efbe:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   2efc2:	f7ff fecf 	bl	2ed64 <elapsed>
   2efc6:	4a06      	ldr	r2, [pc, #24]	; (2efe0 <sys_clock_tick_get+0x30>)
   2efc8:	4603      	mov	r3, r0
   2efca:	e9d2 0100 	ldrd	r0, r1, [r2]
   2efce:	1818      	adds	r0, r3, r0
   2efd0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   2efd4:	f384 8811 	msr	BASEPRI, r4
   2efd8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2efdc:	bd10      	pop	{r4, pc}
   2efde:	bf00      	nop
   2efe0:	20000ae8 	.word	0x20000ae8

0002efe4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   2efe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2efe6:	4604      	mov	r4, r0
	__asm__ volatile(
   2efe8:	f04f 0320 	mov.w	r3, #32
   2efec:	f3ef 8711 	mrs	r7, BASEPRI
   2eff0:	f383 8812 	msr	BASEPRI_MAX, r3
   2eff4:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   2eff8:	6802      	ldr	r2, [r0, #0]
   2effa:	b122      	cbz	r2, 2f006 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   2effc:	f387 8811 	msr	BASEPRI, r7
   2f000:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   2f004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2f006:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   2f00a:	1c58      	adds	r0, r3, #1
   2f00c:	f146 0100 	adc.w	r1, r6, #0
   2f010:	2802      	cmp	r0, #2
   2f012:	f171 0100 	sbcs.w	r1, r1, #0
   2f016:	d327      	bcc.n	2f068 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   2f018:	2b01      	cmp	r3, #1
   2f01a:	f176 0100 	sbcs.w	r1, r6, #0
   2f01e:	bfbc      	itt	lt
   2f020:	2301      	movlt	r3, #1
   2f022:	4616      	movlt	r6, r2
   2f024:	1e5d      	subs	r5, r3, #1
   2f026:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
   2f02a:	f001 ff37 	bl	30e9c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2f02e:	3001      	adds	r0, #1
   2f030:	f141 0100 	adc.w	r1, r1, #0
   2f034:	1940      	adds	r0, r0, r5
   2f036:	eb46 0101 	adc.w	r1, r6, r1
   2f03a:	2801      	cmp	r0, #1
   2f03c:	f171 0100 	sbcs.w	r1, r1, #0
   2f040:	db3a      	blt.n	2f0b8 <z_timer_expiration_handler+0xd4>
   2f042:	f001 ff2b 	bl	30e9c <z_impl_k_uptime_ticks>
   2f046:	3001      	adds	r0, #1
   2f048:	f141 0100 	adc.w	r1, r1, #0
   2f04c:	f06f 0201 	mvn.w	r2, #1
   2f050:	1940      	adds	r0, r0, r5
   2f052:	eb46 0301 	adc.w	r3, r6, r1
   2f056:	1a12      	subs	r2, r2, r0
   2f058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2f05c:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2f060:	4918      	ldr	r1, [pc, #96]	; (2f0c4 <z_timer_expiration_handler+0xe0>)
   2f062:	4620      	mov	r0, r4
   2f064:	f7ff fec4 	bl	2edf0 <z_add_timeout>
	timer->status += 1U;
   2f068:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f06a:	3301      	adds	r3, #1
   2f06c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   2f06e:	6a23      	ldr	r3, [r4, #32]
   2f070:	b173      	cbz	r3, 2f090 <z_timer_expiration_handler+0xac>
   2f072:	f387 8811 	msr	BASEPRI, r7
   2f076:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   2f07a:	6a23      	ldr	r3, [r4, #32]
   2f07c:	4620      	mov	r0, r4
   2f07e:	4798      	blx	r3
	__asm__ volatile(
   2f080:	f04f 0320 	mov.w	r3, #32
   2f084:	f3ef 8711 	mrs	r7, BASEPRI
   2f088:	f383 8812 	msr	BASEPRI_MAX, r3
   2f08c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2f090:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f094:	42a5      	cmp	r5, r4
   2f096:	d0b1      	beq.n	2effc <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   2f098:	2d00      	cmp	r5, #0
   2f09a:	d0af      	beq.n	2effc <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   2f09c:	4628      	mov	r0, r5
   2f09e:	f001 fe07 	bl	30cb0 <z_unpend_thread_no_timeout>
   2f0a2:	2300      	movs	r3, #0
   2f0a4:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
   2f0a6:	f387 8811 	msr	BASEPRI, r7
   2f0aa:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   2f0ae:	4628      	mov	r0, r5
}
   2f0b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   2f0b4:	f001 bdec 	b.w	30c90 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2f0b8:	f06f 0201 	mvn.w	r2, #1
   2f0bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f0c0:	e7ce      	b.n	2f060 <z_timer_expiration_handler+0x7c>
   2f0c2:	bf00      	nop
   2f0c4:	0002efe5 	.word	0x0002efe5

0002f0c8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   2f0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2f0cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2f0d0:	bf08      	it	eq
   2f0d2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   2f0d6:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   2f0da:	4605      	mov	r5, r0
   2f0dc:	461c      	mov	r4, r3
   2f0de:	4691      	mov	r9, r2
   2f0e0:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2f0e2:	d01c      	beq.n	2f11e <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2f0e4:	1c53      	adds	r3, r2, #1
   2f0e6:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   2f0ea:	db09      	blt.n	2f100 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2f0ec:	2a01      	cmp	r2, #1
   2f0ee:	f174 0300 	sbcs.w	r3, r4, #0
   2f0f2:	bfbc      	itt	lt
   2f0f4:	2201      	movlt	r2, #1
   2f0f6:	2400      	movlt	r4, #0
   2f0f8:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   2f0fc:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   2f100:	4628      	mov	r0, r5
   2f102:	f001 fea1 	bl	30e48 <z_abort_timeout>
	timer->period = period;
   2f106:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   2f10a:	2300      	movs	r3, #0
   2f10c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2f10e:	464a      	mov	r2, r9
   2f110:	4643      	mov	r3, r8
   2f112:	4628      	mov	r0, r5
   2f114:	4903      	ldr	r1, [pc, #12]	; (2f124 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   2f116:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2f11a:	f7ff be69 	b.w	2edf0 <z_add_timeout>
}
   2f11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f122:	bf00      	nop
   2f124:	0002efe5 	.word	0x0002efe5

0002f128 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   2f128:	4b01      	ldr	r3, [pc, #4]	; (2f130 <k_thread_system_pool_assign+0x8>)
   2f12a:	6703      	str	r3, [r0, #112]	; 0x70
}
   2f12c:	4770      	bx	lr
   2f12e:	bf00      	nop
   2f130:	200002a0 	.word	0x200002a0

0002f134 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2f134:	b538      	push	{r3, r4, r5, lr}
   2f136:	4604      	mov	r4, r0
   2f138:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2f13a:	f001 fc5c 	bl	309f6 <k_is_in_isr>
   2f13e:	b920      	cbnz	r0, 2f14a <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2f140:	4b06      	ldr	r3, [pc, #24]	; (2f15c <z_thread_aligned_alloc+0x28>)
   2f142:	689b      	ldr	r3, [r3, #8]
   2f144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
   2f146:	b90b      	cbnz	r3, 2f14c <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   2f148:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   2f14a:	4b05      	ldr	r3, [pc, #20]	; (2f160 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   2f14c:	462a      	mov	r2, r5
   2f14e:	4621      	mov	r1, r4
   2f150:	4618      	mov	r0, r3
}
   2f152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2f156:	f001 bef2 	b.w	30f3e <z_heap_aligned_alloc>
   2f15a:	bf00      	nop
   2f15c:	20001934 	.word	0x20001934
   2f160:	200002a0 	.word	0x200002a0

0002f164 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2f164:	4801      	ldr	r0, [pc, #4]	; (2f16c <boot_banner+0x8>)
   2f166:	f000 b8bd 	b.w	2f2e4 <printk>
   2f16a:	bf00      	nop
   2f16c:	00032486 	.word	0x00032486

0002f170 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   2f170:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2f172:	4c06      	ldr	r4, [pc, #24]	; (2f18c <statics_init+0x1c>)
   2f174:	4d06      	ldr	r5, [pc, #24]	; (2f190 <statics_init+0x20>)
   2f176:	42ac      	cmp	r4, r5
   2f178:	d301      	bcc.n	2f17e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2f17a:	2000      	movs	r0, #0
   2f17c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2f17e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2f182:	4620      	mov	r0, r4
   2f184:	f001 fef5 	bl	30f72 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2f188:	3414      	adds	r4, #20
   2f18a:	e7f4      	b.n	2f176 <statics_init+0x6>
   2f18c:	200002a0 	.word	0x200002a0
   2f190:	200002b4 	.word	0x200002b4

0002f194 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   2f194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   2f196:	4b09      	ldr	r3, [pc, #36]	; (2f1bc <k_sys_work_q_init+0x28>)
   2f198:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2f19a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   2f19c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   2f19e:	9300      	str	r3, [sp, #0]
   2f1a0:	4907      	ldr	r1, [pc, #28]	; (2f1c0 <k_sys_work_q_init+0x2c>)
   2f1a2:	4808      	ldr	r0, [pc, #32]	; (2f1c4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2f1a4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   2f1a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f1ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2f1b0:	f7ff f9ee 	bl	2e590 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2f1b4:	4620      	mov	r0, r4
   2f1b6:	b004      	add	sp, #16
   2f1b8:	bd10      	pop	{r4, pc}
   2f1ba:	bf00      	nop
   2f1bc:	000324c7 	.word	0x000324c7
   2f1c0:	200035d0 	.word	0x200035d0
   2f1c4:	20000af0 	.word	0x20000af0

0002f1c8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2f1c8:	4770      	bx	lr

0002f1ca <gpio_pin_configure_dt.constprop.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   2f1ca:	b4f0      	push	{r4, r5, r6, r7}
   2f1cc:	4603      	mov	r3, r0
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
   2f1ce:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2f1d0:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   2f1d2:	88db      	ldrh	r3, [r3, #6]
	struct gpio_driver_data *data =
   2f1d4:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   2f1d6:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2f1d8:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2f1da:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   2f1dc:	bf54      	ite	pl
   2f1de:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2f1e2:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2f1e6:	2501      	movs	r5, #1
   2f1e8:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2f1ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2f1ee:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2f1f0:	bf4c      	ite	mi
   2f1f2:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2f1f4:	43ac      	bicpl	r4, r5
   2f1f6:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   2f1f8:	683b      	ldr	r3, [r7, #0]
}
   2f1fa:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   2f1fc:	4718      	bx	r3

0002f1fe <gpio_pin_toggle_dt.isra.0>:
 *     gpio_pin_toggle(spec->port, spec->pin);
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
   2f1fe:	4603      	mov	r3, r0
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   2f200:	2101      	movs	r1, #1
   2f202:	791b      	ldrb	r3, [r3, #4]
{
	return gpio_pin_toggle(spec->port, spec->pin);
   2f204:	6800      	ldr	r0, [r0, #0]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   2f206:	4099      	lsls	r1, r3
	return api->port_toggle_bits(port, pins);
   2f208:	6883      	ldr	r3, [r0, #8]
   2f20a:	695b      	ldr	r3, [r3, #20]
   2f20c:	4718      	bx	r3

0002f20e <cbpprintf_external>:
{
   2f20e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f212:	4606      	mov	r6, r0
   2f214:	460d      	mov	r5, r1
   2f216:	4617      	mov	r7, r2
	if (buf == NULL) {
   2f218:	4698      	mov	r8, r3
   2f21a:	b32b      	cbz	r3, 2f268 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   2f21c:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2f220:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2f224:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2f226:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2f228:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2f22c:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2f230:	441c      	add	r4, r3
   2f232:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2f234:	f04f 0a00 	mov.w	sl, #0
   2f238:	45ca      	cmp	sl, r9
   2f23a:	d309      	bcc.n	2f250 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2f23c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2f240:	f108 0308 	add.w	r3, r8, #8
   2f244:	4639      	mov	r1, r7
   2f246:	4630      	mov	r0, r6
   2f248:	46ac      	mov	ip, r5
}
   2f24a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2f24e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2f250:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   2f254:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2f258:	4620      	mov	r0, r4
   2f25a:	f001 f876 	bl	3034a <strlen>
   2f25e:	3001      	adds	r0, #1
   2f260:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2f262:	f10a 0a01 	add.w	sl, sl, #1
   2f266:	e7e7      	b.n	2f238 <cbpprintf_external+0x2a>
}
   2f268:	f06f 0015 	mvn.w	r0, #21
   2f26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002f270 <is_ptr>:
{
   2f270:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2f272:	2500      	movs	r5, #0
{
   2f274:	4602      	mov	r2, r0
	bool mod = false;
   2f276:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   2f278:	4614      	mov	r4, r2
   2f27a:	f814 3b01 	ldrb.w	r3, [r4], #1
   2f27e:	b90b      	cbnz	r3, 2f284 <is_ptr+0x14>
					return false;
   2f280:	4618      	mov	r0, r3
   2f282:	e009      	b.n	2f298 <is_ptr+0x28>
		if (mod) {
   2f284:	b198      	cbz	r0, 2f2ae <is_ptr+0x3e>
			if (cnt == n) {
   2f286:	428d      	cmp	r5, r1
   2f288:	d107      	bne.n	2f29a <is_ptr+0x2a>
				if (c == 'p') {
   2f28a:	2b70      	cmp	r3, #112	; 0x70
   2f28c:	d004      	beq.n	2f298 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   2f28e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   2f292:	2a3a      	cmp	r2, #58	; 0x3a
   2f294:	d80b      	bhi.n	2f2ae <is_ptr+0x3e>
					return false;
   2f296:	2000      	movs	r0, #0
}
   2f298:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   2f29a:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   2f29e:	2e3a      	cmp	r6, #58	; 0x3a
   2f2a0:	d805      	bhi.n	2f2ae <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   2f2a2:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2f2a4:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2f2a6:	1c94      	adds	r4, r2, #2
   2f2a8:	2b00      	cmp	r3, #0
   2f2aa:	d0e9      	beq.n	2f280 <is_ptr+0x10>
   2f2ac:	2000      	movs	r0, #0
		if (c == '%') {
   2f2ae:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   2f2b0:	bf08      	it	eq
   2f2b2:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   2f2b6:	4622      	mov	r2, r4
   2f2b8:	e7de      	b.n	2f278 <is_ptr+0x8>

0002f2ba <arch_printk_char_out>:
}
   2f2ba:	2000      	movs	r0, #0
   2f2bc:	4770      	bx	lr

0002f2be <str_out>:
{
   2f2be:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2f2c0:	688a      	ldr	r2, [r1, #8]
   2f2c2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2f2c4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2f2c6:	b114      	cbz	r4, 2f2ce <str_out+0x10>
   2f2c8:	684b      	ldr	r3, [r1, #4]
   2f2ca:	4293      	cmp	r3, r2
   2f2cc:	dc01      	bgt.n	2f2d2 <str_out+0x14>
		ctx->count++;
   2f2ce:	608d      	str	r5, [r1, #8]
}
   2f2d0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2f2d2:	3b01      	subs	r3, #1
   2f2d4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2f2d6:	bf08      	it	eq
   2f2d8:	2200      	moveq	r2, #0
   2f2da:	608d      	str	r5, [r1, #8]
   2f2dc:	bf0c      	ite	eq
   2f2de:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2f2e0:	54a0      	strbne	r0, [r4, r2]
   2f2e2:	e7f5      	b.n	2f2d0 <str_out+0x12>

0002f2e4 <printk>:
{
   2f2e4:	b40f      	push	{r0, r1, r2, r3}
   2f2e6:	b507      	push	{r0, r1, r2, lr}
   2f2e8:	a904      	add	r1, sp, #16
   2f2ea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2f2ee:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   2f2f0:	f000 fe91 	bl	30016 <z_log_vprintk>
}
   2f2f4:	b003      	add	sp, #12
   2f2f6:	f85d eb04 	ldr.w	lr, [sp], #4
   2f2fa:	b004      	add	sp, #16
   2f2fc:	4770      	bx	lr

0002f2fe <snprintk>:
{
   2f2fe:	b40c      	push	{r2, r3}
   2f300:	b507      	push	{r0, r1, r2, lr}
   2f302:	ab04      	add	r3, sp, #16
   2f304:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2f308:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2f30a:	f7f7 fd09 	bl	26d20 <vsnprintk>
}
   2f30e:	b003      	add	sp, #12
   2f310:	f85d eb04 	ldr.w	lr, [sp], #4
   2f314:	b002      	add	sp, #8
   2f316:	4770      	bx	lr

0002f318 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2f318:	4604      	mov	r4, r0
   2f31a:	b508      	push	{r3, lr}
   2f31c:	4608      	mov	r0, r1
   2f31e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2f320:	461a      	mov	r2, r3
   2f322:	47a0      	blx	r4
	return z_impl_z_current_get();
   2f324:	f7ff fc8c 	bl	2ec40 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2f328:	f7fa ff94 	bl	2a254 <z_impl_k_thread_abort>

0002f32c <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2f32c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2f330:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2f332:	0840      	lsrs	r0, r0, #1
   2f334:	4770      	bx	lr

0002f336 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2f336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f338:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2f33a:	f7ff fff7 	bl	2f32c <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2f33e:	fab0 f080 	clz	r0, r0
   2f342:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2f346:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   2f34a:	00ca      	lsls	r2, r1, #3
   2f34c:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2f350:	1d17      	adds	r7, r2, #4
{
   2f352:	460c      	mov	r4, r1
   2f354:	3206      	adds	r2, #6
   2f356:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2f358:	b956      	cbnz	r6, 2f370 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2f35a:	2101      	movs	r1, #1
   2f35c:	fa01 f000 	lsl.w	r0, r1, r0
   2f360:	68d9      	ldr	r1, [r3, #12]
   2f362:	4301      	orrs	r1, r0
   2f364:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2f366:	f8cc 4010 	str.w	r4, [ip, #16]
   2f36a:	53dd      	strh	r5, [r3, r7]
   2f36c:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2f36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2f370:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2f372:	3104      	adds	r1, #4
   2f374:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2f376:	53d8      	strh	r0, [r3, r7]
   2f378:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2f37c:	529e      	strh	r6, [r3, r2]
   2f37e:	80c5      	strh	r5, [r0, #6]
   2f380:	525d      	strh	r5, [r3, r1]
   2f382:	e7f4      	b.n	2f36e <free_list_add+0x38>

0002f384 <free_list_remove_bidx>:
{
   2f384:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2f386:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2f38a:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2f38c:	4299      	cmp	r1, r3
   2f38e:	f102 0104 	add.w	r1, r2, #4
   2f392:	d10a      	bne.n	2f3aa <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2f394:	2301      	movs	r3, #1
   2f396:	fa03 f202 	lsl.w	r2, r3, r2
   2f39a:	68c3      	ldr	r3, [r0, #12]
   2f39c:	ea23 0302 	bic.w	r3, r3, r2
   2f3a0:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2f3a2:	2300      	movs	r3, #0
   2f3a4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2f3a8:	bd10      	pop	{r4, pc}
   2f3aa:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2f3ac:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2f3b0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2f3b4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2f3b8:	80cb      	strh	r3, [r1, #6]
   2f3ba:	8082      	strh	r2, [r0, #4]
}
   2f3bc:	e7f4      	b.n	2f3a8 <free_list_remove_bidx+0x24>

0002f3be <free_list_remove>:
{
   2f3be:	b508      	push	{r3, lr}
   2f3c0:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2f3c2:	f7ff ffb3 	bl	2f32c <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2f3c6:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2f3ca:	f1c2 021f 	rsb	r2, r2, #31
   2f3ce:	4618      	mov	r0, r3
}
   2f3d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2f3d4:	f7ff bfd6 	b.w	2f384 <free_list_remove_bidx>

0002f3d8 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2f3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f3dc:	fab1 f581 	clz	r5, r1
   2f3e0:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2f3e4:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   2f3e8:	4603      	mov	r3, r0
	if (b->next) {
   2f3ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2f3ee:	460e      	mov	r6, r1
	if (b->next) {
   2f3f0:	b1c2      	cbz	r2, 2f424 <alloc_chunk+0x4c>
   2f3f2:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2f3f4:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2f3f8:	4618      	mov	r0, r3
   2f3fa:	4621      	mov	r1, r4
   2f3fc:	f7ff ff96 	bl	2f32c <chunk_size>
   2f400:	42b0      	cmp	r0, r6
   2f402:	d306      	bcc.n	2f412 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2f404:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2f406:	4618      	mov	r0, r3
   2f408:	f7ff ffbc 	bl	2f384 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2f40c:	4620      	mov	r0, r4
   2f40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2f412:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   2f416:	3f01      	subs	r7, #1
   2f418:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   2f41a:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2f41e:	d001      	beq.n	2f424 <alloc_chunk+0x4c>
   2f420:	4282      	cmp	r2, r0
   2f422:	d1e7      	bne.n	2f3f4 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2f424:	f1c5 0220 	rsb	r2, r5, #32
   2f428:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2f42c:	4094      	lsls	r4, r2
   2f42e:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2f430:	4014      	ands	r4, r2
   2f432:	d0eb      	beq.n	2f40c <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2f434:	fa94 f2a4 	rbit	r2, r4
   2f438:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2f43c:	1d11      	adds	r1, r2, #4
   2f43e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2f442:	4621      	mov	r1, r4
   2f444:	e7df      	b.n	2f406 <alloc_chunk+0x2e>

0002f446 <merge_chunks>:
{
   2f446:	b538      	push	{r3, r4, r5, lr}
   2f448:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2f44a:	f7ff ff6f 	bl	2f32c <chunk_size>
{
   2f44e:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2f450:	4604      	mov	r4, r0
   2f452:	4611      	mov	r1, r2
   2f454:	4618      	mov	r0, r3
   2f456:	f7ff ff69 	bl	2f32c <chunk_size>
		((uint16_t *)cmem)[f] = val;
   2f45a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2f45e:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2f460:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2f462:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2f464:	4618      	mov	r0, r3
   2f466:	f7ff ff61 	bl	2f32c <chunk_size>
	void *cmem = &buf[c];
   2f46a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2f46c:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2f470:	bd38      	pop	{r3, r4, r5, pc}

0002f472 <split_chunks>:
{
   2f472:	b538      	push	{r3, r4, r5, lr}
   2f474:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2f476:	f7ff ff59 	bl	2f32c <chunk_size>
{
   2f47a:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   2f47c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2f47e:	1a51      	subs	r1, r2, r1
   2f480:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   2f484:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2f486:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2f488:	8060      	strh	r0, [r4, #2]
   2f48a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2f48e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2f490:	8044      	strh	r4, [r0, #2]
   2f492:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2f496:	4618      	mov	r0, r3
   2f498:	4611      	mov	r1, r2
   2f49a:	f7ff ff47 	bl	2f32c <chunk_size>
	void *cmem = &buf[c];
   2f49e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2f4a0:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2f4a4:	bd38      	pop	{r3, r4, r5, pc}

0002f4a6 <free_chunk>:
{
   2f4a6:	b538      	push	{r3, r4, r5, lr}
   2f4a8:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2f4aa:	f7ff ff3f 	bl	2f32c <chunk_size>
   2f4ae:	460c      	mov	r4, r1
   2f4b0:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2f4b2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2f4b6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2f4b8:	07da      	lsls	r2, r3, #31
   2f4ba:	d40a      	bmi.n	2f4d2 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2f4bc:	4628      	mov	r0, r5
   2f4be:	f7ff ff7e 	bl	2f3be <free_list_remove>
	return c + chunk_size(h, c);
   2f4c2:	4621      	mov	r1, r4
   2f4c4:	4628      	mov	r0, r5
   2f4c6:	f7ff ff31 	bl	2f32c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2f4ca:	1822      	adds	r2, r4, r0
   2f4cc:	4628      	mov	r0, r5
   2f4ce:	f7ff ffba 	bl	2f446 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2f4d2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2f4d6:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2f4d8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2f4dc:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2f4de:	07db      	lsls	r3, r3, #31
   2f4e0:	d40c      	bmi.n	2f4fc <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2f4e2:	4628      	mov	r0, r5
   2f4e4:	f7ff ff6b 	bl	2f3be <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2f4e8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2f4ec:	4622      	mov	r2, r4
   2f4ee:	1a61      	subs	r1, r4, r1
   2f4f0:	4628      	mov	r0, r5
   2f4f2:	f7ff ffa8 	bl	2f446 <merge_chunks>
   2f4f6:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2f4fa:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2f4fc:	4621      	mov	r1, r4
   2f4fe:	4628      	mov	r0, r5
}
   2f500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2f504:	f7ff bf17 	b.w	2f336 <free_list_add>

0002f508 <sys_heap_free>:
	if (mem == NULL) {
   2f508:	b161      	cbz	r1, 2f524 <sys_heap_free+0x1c>
   2f50a:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2f50c:	3904      	subs	r1, #4
   2f50e:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2f510:	f021 0307 	bic.w	r3, r1, #7
   2f514:	4403      	add	r3, r0
	free_chunk(h, c);
   2f516:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2f518:	885a      	ldrh	r2, [r3, #2]
   2f51a:	f022 0201 	bic.w	r2, r2, #1
   2f51e:	805a      	strh	r2, [r3, #2]
   2f520:	f7ff bfc1 	b.w	2f4a6 <free_chunk>
}
   2f524:	4770      	bx	lr

0002f526 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2f526:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2f528:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2f52a:	b909      	cbnz	r1, 2f530 <sys_heap_alloc+0xa>
		return NULL;
   2f52c:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2f52e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2f530:	68ab      	ldr	r3, [r5, #8]
   2f532:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2f536:	d9f9      	bls.n	2f52c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2f538:	310b      	adds	r1, #11
   2f53a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2f53c:	4621      	mov	r1, r4
   2f53e:	4628      	mov	r0, r5
   2f540:	f7ff ff4a 	bl	2f3d8 <alloc_chunk>
	if (c == 0U) {
   2f544:	4606      	mov	r6, r0
   2f546:	2800      	cmp	r0, #0
   2f548:	d0f0      	beq.n	2f52c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2f54a:	4601      	mov	r1, r0
   2f54c:	4628      	mov	r0, r5
   2f54e:	f7ff feed 	bl	2f32c <chunk_size>
   2f552:	42a0      	cmp	r0, r4
   2f554:	d907      	bls.n	2f566 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2f556:	1932      	adds	r2, r6, r4
   2f558:	4628      	mov	r0, r5
   2f55a:	f7ff ff8a 	bl	2f472 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2f55e:	4611      	mov	r1, r2
   2f560:	4628      	mov	r0, r5
   2f562:	f7ff fee8 	bl	2f336 <free_list_add>
	void *cmem = &buf[c];
   2f566:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2f56a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2f56c:	8853      	ldrh	r3, [r2, #2]
   2f56e:	f043 0301 	orr.w	r3, r3, #1
   2f572:	8053      	strh	r3, [r2, #2]
   2f574:	3004      	adds	r0, #4
	return mem;
   2f576:	e7da      	b.n	2f52e <sys_heap_alloc+0x8>

0002f578 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2f578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f57c:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   2f580:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   2f584:	6806      	ldr	r6, [r0, #0]
{
   2f586:	460f      	mov	r7, r1
   2f588:	4614      	mov	r4, r2
	if (align != rew) {
   2f58a:	d00c      	beq.n	2f5a6 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   2f58c:	424b      	negs	r3, r1
   2f58e:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   2f590:	2b04      	cmp	r3, #4
   2f592:	461a      	mov	r2, r3
   2f594:	464f      	mov	r7, r9
   2f596:	bf28      	it	cs
   2f598:	2204      	movcs	r2, #4
	rew = align & -align;
   2f59a:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2f59c:	b964      	cbnz	r4, 2f5b8 <sys_heap_aligned_alloc+0x40>
		return NULL;
   2f59e:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2f5a0:	4628      	mov	r0, r5
   2f5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2f5a6:	2904      	cmp	r1, #4
   2f5a8:	d804      	bhi.n	2f5b4 <sys_heap_aligned_alloc+0x3c>
}
   2f5aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2f5ae:	4611      	mov	r1, r2
   2f5b0:	f7ff bfb9 	b.w	2f526 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   2f5b4:	2204      	movs	r2, #4
   2f5b6:	e7f1      	b.n	2f59c <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   2f5b8:	68b3      	ldr	r3, [r6, #8]
   2f5ba:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2f5be:	d9ee      	bls.n	2f59e <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2f5c0:	f104 010b 	add.w	r1, r4, #11
   2f5c4:	4439      	add	r1, r7
   2f5c6:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2f5c8:	08c9      	lsrs	r1, r1, #3
   2f5ca:	4630      	mov	r0, r6
   2f5cc:	f7ff ff04 	bl	2f3d8 <alloc_chunk>
	if (c0 == 0) {
   2f5d0:	4680      	mov	r8, r0
   2f5d2:	2800      	cmp	r0, #0
   2f5d4:	d0e3      	beq.n	2f59e <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2f5d6:	f109 0504 	add.w	r5, r9, #4
   2f5da:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2f5de:	1e7b      	subs	r3, r7, #1
   2f5e0:	4435      	add	r5, r6
   2f5e2:	441d      	add	r5, r3
   2f5e4:	427f      	negs	r7, r7
   2f5e6:	403d      	ands	r5, r7
   2f5e8:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2f5ec:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2f5ee:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2f5f0:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2f5f2:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2f5f4:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2f5f8:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2f5fa:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2f5fe:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2f602:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2f606:	d208      	bcs.n	2f61a <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   2f608:	4601      	mov	r1, r0
   2f60a:	463a      	mov	r2, r7
   2f60c:	4630      	mov	r0, r6
   2f60e:	f7ff ff30 	bl	2f472 <split_chunks>
		free_list_add(h, c0);
   2f612:	4641      	mov	r1, r8
   2f614:	4630      	mov	r0, r6
   2f616:	f7ff fe8e 	bl	2f336 <free_list_add>
	return c + chunk_size(h, c);
   2f61a:	4639      	mov	r1, r7
   2f61c:	4630      	mov	r0, r6
   2f61e:	f7ff fe85 	bl	2f32c <chunk_size>
   2f622:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2f624:	4284      	cmp	r4, r0
   2f626:	d207      	bcs.n	2f638 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   2f628:	4630      	mov	r0, r6
   2f62a:	4622      	mov	r2, r4
   2f62c:	f7ff ff21 	bl	2f472 <split_chunks>
		free_list_add(h, c_end);
   2f630:	4621      	mov	r1, r4
   2f632:	4630      	mov	r0, r6
   2f634:	f7ff fe7f 	bl	2f336 <free_list_add>
	void *cmem = &buf[c];
   2f638:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2f63c:	8873      	ldrh	r3, [r6, #2]
   2f63e:	f043 0301 	orr.w	r3, r3, #1
   2f642:	8073      	strh	r3, [r6, #2]
   2f644:	e7ac      	b.n	2f5a0 <sys_heap_aligned_alloc+0x28>

0002f646 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2f646:	3a04      	subs	r2, #4
{
   2f648:	b4f0      	push	{r4, r5, r6, r7}
   2f64a:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2f64c:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2f64e:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2f650:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2f654:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2f658:	1a0e      	subs	r6, r1, r0
   2f65a:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2f65c:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   2f65e:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   2f662:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2f664:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   2f668:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   2f66a:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2f66c:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   2f66e:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2f672:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2f674:	f1c2 0220 	rsb	r2, r2, #32
   2f678:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2f67a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   2f67e:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   2f682:	4294      	cmp	r4, r2
   2f684:	d1fb      	bne.n	2f67e <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2f686:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2f688:	f042 0201 	orr.w	r2, r2, #1
   2f68c:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   2f68e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2f692:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2f694:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   2f696:	8007      	strh	r7, [r0, #0]
   2f698:	8065      	strh	r5, [r4, #2]
   2f69a:	1984      	adds	r4, r0, r6
   2f69c:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   2f6a0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   2f6a4:	8067      	strh	r7, [r4, #2]
   2f6a6:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2f6a8:	885a      	ldrh	r2, [r3, #2]
   2f6aa:	f042 0201 	orr.w	r2, r2, #1
   2f6ae:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   2f6b0:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   2f6b2:	f7ff be40 	b.w	2f336 <free_list_add>

0002f6b6 <sys_slist_find_and_remove>:
	return list->head;
   2f6b6:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f6b8:	2200      	movs	r2, #0
   2f6ba:	b90b      	cbnz	r3, 2f6c0 <sys_slist_find_and_remove+0xa>
   2f6bc:	4618      	mov	r0, r3
   2f6be:	4770      	bx	lr
   2f6c0:	428b      	cmp	r3, r1
   2f6c2:	d110      	bne.n	2f6e6 <sys_slist_find_and_remove+0x30>
	return node->next;
   2f6c4:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f6c6:	b942      	cbnz	r2, 2f6da <sys_slist_find_and_remove+0x24>
   2f6c8:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2f6ca:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f6cc:	4291      	cmp	r1, r2
   2f6ce:	d100      	bne.n	2f6d2 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2f6d0:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2f6d2:	2300      	movs	r3, #0
   2f6d4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f6d6:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2f6d8:	4770      	bx	lr
	parent->next = child;
   2f6da:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f6dc:	6843      	ldr	r3, [r0, #4]
   2f6de:	4299      	cmp	r1, r3
	list->tail = node;
   2f6e0:	bf08      	it	eq
   2f6e2:	6042      	streq	r2, [r0, #4]
}
   2f6e4:	e7f5      	b.n	2f6d2 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2f6e6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f6e8:	681b      	ldr	r3, [r3, #0]
   2f6ea:	e7e6      	b.n	2f6ba <sys_slist_find_and_remove+0x4>

0002f6ec <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2f6ec:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2f6ee:	f013 0307 	ands.w	r3, r3, #7
   2f6f2:	d105      	bne.n	2f700 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2f6f4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2f6f6:	2b00      	cmp	r3, #0
   2f6f8:	bf0c      	ite	eq
   2f6fa:	2000      	moveq	r0, #0
   2f6fc:	2003      	movne	r0, #3
   2f6fe:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2f700:	2b02      	cmp	r3, #2
   2f702:	d105      	bne.n	2f710 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2f704:	8b40      	ldrh	r0, [r0, #26]
   2f706:	fab0 f080 	clz	r0, r0
   2f70a:	0940      	lsrs	r0, r0, #5
   2f70c:	0080      	lsls	r0, r0, #2
   2f70e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2f710:	2b01      	cmp	r3, #1
   2f712:	d105      	bne.n	2f720 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2f714:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2f716:	2b00      	cmp	r3, #0
   2f718:	bf0c      	ite	eq
   2f71a:	2000      	moveq	r0, #0
   2f71c:	2005      	movne	r0, #5
   2f71e:	4770      	bx	lr
	int evt = EVT_NOP;
   2f720:	2000      	movs	r0, #0
}
   2f722:	4770      	bx	lr

0002f724 <validate_args>:
{
   2f724:	b510      	push	{r4, lr}
   2f726:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2f728:	b100      	cbz	r0, 2f72c <validate_args+0x8>
   2f72a:	b911      	cbnz	r1, 2f732 <validate_args+0xe>
		return -EINVAL;
   2f72c:	f06f 0015 	mvn.w	r0, #21
}
   2f730:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2f732:	1d08      	adds	r0, r1, #4
   2f734:	f000 f8d6 	bl	2f8e4 <sys_notify_validate>
	if ((rv == 0)
   2f738:	2800      	cmp	r0, #0
   2f73a:	d1f9      	bne.n	2f730 <validate_args+0xc>
	    && ((cli->notify.flags
   2f73c:	68a3      	ldr	r3, [r4, #8]
   2f73e:	2b03      	cmp	r3, #3
   2f740:	d9f6      	bls.n	2f730 <validate_args+0xc>
   2f742:	e7f3      	b.n	2f72c <validate_args+0x8>

0002f744 <notify_one>:
{
   2f744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f748:	460d      	mov	r5, r1
   2f74a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2f74c:	4619      	mov	r1, r3
   2f74e:	1d28      	adds	r0, r5, #4
{
   2f750:	4690      	mov	r8, r2
   2f752:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2f754:	f000 f8d7 	bl	2f906 <sys_notify_finalize>
	if (cb) {
   2f758:	4604      	mov	r4, r0
   2f75a:	b138      	cbz	r0, 2f76c <notify_one+0x28>
		cb(mgr, cli, state, res);
   2f75c:	4633      	mov	r3, r6
   2f75e:	4642      	mov	r2, r8
   2f760:	4629      	mov	r1, r5
   2f762:	4638      	mov	r0, r7
   2f764:	46a4      	mov	ip, r4
}
   2f766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2f76a:	4760      	bx	ip
}
   2f76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f770 <transition_complete>:
{
   2f770:	b410      	push	{r4}
	__asm__ volatile(
   2f772:	f04f 0420 	mov.w	r4, #32
   2f776:	f3ef 8211 	mrs	r2, BASEPRI
   2f77a:	f384 8812 	msr	BASEPRI_MAX, r4
   2f77e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2f782:	6141      	str	r1, [r0, #20]
}
   2f784:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   2f786:	2101      	movs	r1, #1
   2f788:	f7f7 bae0 	b.w	26d4c <process_event>

0002f78c <onoff_manager_init>:
{
   2f78c:	b538      	push	{r3, r4, r5, lr}
   2f78e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2f790:	4605      	mov	r5, r0
   2f792:	b158      	cbz	r0, 2f7ac <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2f794:	b151      	cbz	r1, 2f7ac <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2f796:	680b      	ldr	r3, [r1, #0]
   2f798:	b143      	cbz	r3, 2f7ac <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2f79a:	684b      	ldr	r3, [r1, #4]
   2f79c:	b133      	cbz	r3, 2f7ac <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2f79e:	221c      	movs	r2, #28
   2f7a0:	2100      	movs	r1, #0
   2f7a2:	f000 fde4 	bl	3036e <memset>
   2f7a6:	612c      	str	r4, [r5, #16]
	return 0;
   2f7a8:	2000      	movs	r0, #0
}
   2f7aa:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2f7ac:	f06f 0015 	mvn.w	r0, #21
   2f7b0:	e7fb      	b.n	2f7aa <onoff_manager_init+0x1e>

0002f7b2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2f7b2:	b570      	push	{r4, r5, r6, lr}
   2f7b4:	4605      	mov	r5, r0
   2f7b6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2f7b8:	f7ff ffb4 	bl	2f724 <validate_args>

	if (rv < 0) {
   2f7bc:	1e04      	subs	r4, r0, #0
   2f7be:	db15      	blt.n	2f7ec <onoff_request+0x3a>
   2f7c0:	f04f 0320 	mov.w	r3, #32
   2f7c4:	f3ef 8211 	mrs	r2, BASEPRI
   2f7c8:	f383 8812 	msr	BASEPRI_MAX, r3
   2f7cc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2f7d0:	8b6b      	ldrh	r3, [r5, #26]
   2f7d2:	8b2c      	ldrh	r4, [r5, #24]
   2f7d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2f7d8:	428b      	cmp	r3, r1
   2f7da:	f004 0407 	and.w	r4, r4, #7
   2f7de:	d107      	bne.n	2f7f0 <onoff_request+0x3e>
	__asm__ volatile(
   2f7e0:	f382 8811 	msr	BASEPRI, r2
   2f7e4:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   2f7e8:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2f7ec:	4620      	mov	r0, r4
   2f7ee:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   2f7f0:	2c02      	cmp	r4, #2
   2f7f2:	d10c      	bne.n	2f80e <onoff_request+0x5c>
		mgr->refs += 1U;
   2f7f4:	3301      	adds	r3, #1
   2f7f6:	836b      	strh	r3, [r5, #26]
   2f7f8:	f382 8811 	msr	BASEPRI, r2
   2f7fc:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   2f800:	2300      	movs	r3, #0
   2f802:	4622      	mov	r2, r4
   2f804:	4631      	mov	r1, r6
   2f806:	4628      	mov	r0, r5
   2f808:	f7ff ff9c 	bl	2f744 <notify_one>
   2f80c:	e7ee      	b.n	2f7ec <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   2f80e:	2c06      	cmp	r4, #6
   2f810:	d814      	bhi.n	2f83c <onoff_request+0x8a>
   2f812:	e8df f004 	tbb	[pc, r4]
   2f816:	1304      	.short	0x1304
   2f818:	1a041313 	.word	0x1a041313
   2f81c:	04          	.byte	0x04
   2f81d:	00          	.byte	0x00
	parent->next = child;
   2f81e:	2300      	movs	r3, #0
   2f820:	6033      	str	r3, [r6, #0]
	return list->tail;
   2f822:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   2f824:	b93b      	cbnz	r3, 2f836 <onoff_request+0x84>
	list->head = node;
   2f826:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   2f82a:	b9ac      	cbnz	r4, 2f858 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   2f82c:	2102      	movs	r1, #2
   2f82e:	4628      	mov	r0, r5
   2f830:	f7f7 fa8c 	bl	26d4c <process_event>
   2f834:	e7da      	b.n	2f7ec <onoff_request+0x3a>
	parent->next = child;
   2f836:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2f838:	606e      	str	r6, [r5, #4]
}
   2f83a:	e7f6      	b.n	2f82a <onoff_request+0x78>
   2f83c:	f382 8811 	msr	BASEPRI, r2
   2f840:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   2f844:	f06f 0404 	mvn.w	r4, #4
   2f848:	e7d0      	b.n	2f7ec <onoff_request+0x3a>
   2f84a:	f382 8811 	msr	BASEPRI, r2
   2f84e:	f3bf 8f6f 	isb	sy
   2f852:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2f856:	e7c9      	b.n	2f7ec <onoff_request+0x3a>
   2f858:	f382 8811 	msr	BASEPRI, r2
   2f85c:	f3bf 8f6f 	isb	sy
		if (notify) {
   2f860:	e7c4      	b.n	2f7ec <onoff_request+0x3a>

0002f862 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   2f862:	b510      	push	{r4, lr}
	__asm__ volatile(
   2f864:	f04f 0320 	mov.w	r3, #32
   2f868:	f3ef 8211 	mrs	r2, BASEPRI
   2f86c:	f383 8812 	msr	BASEPRI_MAX, r3
   2f870:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2f874:	8b04      	ldrh	r4, [r0, #24]
   2f876:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   2f87a:	2c02      	cmp	r4, #2
   2f87c:	d00a      	beq.n	2f894 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   2f87e:	2c01      	cmp	r4, #1
   2f880:	bf0c      	ite	eq
   2f882:	f06f 0004 	mvneq.w	r0, #4
   2f886:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   2f88a:	f382 8811 	msr	BASEPRI, r2
   2f88e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   2f892:	e008      	b.n	2f8a6 <onoff_release+0x44>
	mgr->refs -= 1U;
   2f894:	8b43      	ldrh	r3, [r0, #26]
   2f896:	3b01      	subs	r3, #1
   2f898:	b29b      	uxth	r3, r3
   2f89a:	8343      	strh	r3, [r0, #26]
	if (stop) {
   2f89c:	b923      	cbnz	r3, 2f8a8 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   2f89e:	4621      	mov	r1, r4
   2f8a0:	f7f7 fa54 	bl	26d4c <process_event>
	int rv = state;
   2f8a4:	4620      	mov	r0, r4
}
   2f8a6:	bd10      	pop	{r4, pc}
	int rv = state;
   2f8a8:	4620      	mov	r0, r4
   2f8aa:	e7ee      	b.n	2f88a <onoff_release+0x28>

0002f8ac <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   2f8ac:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   2f8ae:	b1b0      	cbz	r0, 2f8de <onoff_cancel+0x32>
   2f8b0:	b1a9      	cbz	r1, 2f8de <onoff_cancel+0x32>
	__asm__ volatile(
   2f8b2:	f04f 0220 	mov.w	r2, #32
   2f8b6:	f3ef 8511 	mrs	r5, BASEPRI
   2f8ba:	f382 8812 	msr	BASEPRI_MAX, r2
   2f8be:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2f8c2:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   2f8c4:	f7ff fef7 	bl	2f6b6 <sys_slist_find_and_remove>
   2f8c8:	b130      	cbz	r0, 2f8d8 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   2f8ca:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   2f8ce:	f385 8811 	msr	BASEPRI, r5
   2f8d2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   2f8d6:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   2f8d8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f8dc:	e7f7      	b.n	2f8ce <onoff_cancel+0x22>
		return -EINVAL;
   2f8de:	f06f 0015 	mvn.w	r0, #21
   2f8e2:	e7f8      	b.n	2f8d6 <onoff_cancel+0x2a>

0002f8e4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2f8e4:	4603      	mov	r3, r0
   2f8e6:	b158      	cbz	r0, 2f900 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2f8e8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2f8ea:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2f8ee:	2a01      	cmp	r2, #1
   2f8f0:	d003      	beq.n	2f8fa <sys_notify_validate+0x16>
   2f8f2:	2a03      	cmp	r2, #3
   2f8f4:	d104      	bne.n	2f900 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   2f8f6:	6802      	ldr	r2, [r0, #0]
   2f8f8:	b112      	cbz	r2, 2f900 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   2f8fa:	2000      	movs	r0, #0
   2f8fc:	6098      	str	r0, [r3, #8]
   2f8fe:	4770      	bx	lr
   2f900:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   2f904:	4770      	bx	lr

0002f906 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2f906:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   2f908:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   2f90a:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   2f90e:	2a03      	cmp	r2, #3
   2f910:	f04f 0200 	mov.w	r2, #0
{
   2f914:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2f916:	bf0c      	ite	eq
   2f918:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   2f91a:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2f91c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2f91e:	4770      	bx	lr

0002f920 <encode_uint>:
{
   2f920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f924:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   2f926:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   2f928:	2b6f      	cmp	r3, #111	; 0x6f
{
   2f92a:	4680      	mov	r8, r0
   2f92c:	460f      	mov	r7, r1
   2f92e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2f930:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   2f934:	d029      	beq.n	2f98a <encode_uint+0x6a>
   2f936:	d824      	bhi.n	2f982 <encode_uint+0x62>
		return 10;
   2f938:	2b58      	cmp	r3, #88	; 0x58
   2f93a:	bf0c      	ite	eq
   2f93c:	2610      	moveq	r6, #16
   2f93e:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   2f940:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   2f944:	4632      	mov	r2, r6
   2f946:	2300      	movs	r3, #0
   2f948:	4640      	mov	r0, r8
   2f94a:	4639      	mov	r1, r7
   2f94c:	f7f6 fbd8 	bl	26100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2f950:	2a09      	cmp	r2, #9
   2f952:	b2d4      	uxtb	r4, r2
   2f954:	d81e      	bhi.n	2f994 <encode_uint+0x74>
   2f956:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2f958:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2f95a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   2f95c:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2f960:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   2f964:	d301      	bcc.n	2f96a <encode_uint+0x4a>
   2f966:	45d1      	cmp	r9, sl
   2f968:	d811      	bhi.n	2f98e <encode_uint+0x6e>
	if (conv->flag_hash) {
   2f96a:	782b      	ldrb	r3, [r5, #0]
   2f96c:	069b      	lsls	r3, r3, #26
   2f96e:	d505      	bpl.n	2f97c <encode_uint+0x5c>
		if (radix == 8) {
   2f970:	2e08      	cmp	r6, #8
   2f972:	d115      	bne.n	2f9a0 <encode_uint+0x80>
			conv->altform_0 = true;
   2f974:	78ab      	ldrb	r3, [r5, #2]
   2f976:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2f97a:	70ab      	strb	r3, [r5, #2]
}
   2f97c:	4648      	mov	r0, r9
   2f97e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2f982:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   2f986:	2b70      	cmp	r3, #112	; 0x70
   2f988:	e7d7      	b.n	2f93a <encode_uint+0x1a>
	switch (specifier) {
   2f98a:	2608      	movs	r6, #8
   2f98c:	e7d8      	b.n	2f940 <encode_uint+0x20>
		value /= radix;
   2f98e:	4680      	mov	r8, r0
   2f990:	460f      	mov	r7, r1
   2f992:	e7d7      	b.n	2f944 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2f994:	f1bb 0f19 	cmp.w	fp, #25
   2f998:	bf94      	ite	ls
   2f99a:	3437      	addls	r4, #55	; 0x37
   2f99c:	3457      	addhi	r4, #87	; 0x57
   2f99e:	e7db      	b.n	2f958 <encode_uint+0x38>
		} else if (radix == 16) {
   2f9a0:	2e10      	cmp	r6, #16
   2f9a2:	d1eb      	bne.n	2f97c <encode_uint+0x5c>
			conv->altform_0c = true;
   2f9a4:	78ab      	ldrb	r3, [r5, #2]
   2f9a6:	f043 0310 	orr.w	r3, r3, #16
   2f9aa:	e7e6      	b.n	2f97a <encode_uint+0x5a>

0002f9ac <outs>:
{
   2f9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f9b0:	4607      	mov	r7, r0
   2f9b2:	4688      	mov	r8, r1
   2f9b4:	4615      	mov	r5, r2
   2f9b6:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2f9b8:	4614      	mov	r4, r2
   2f9ba:	42b4      	cmp	r4, r6
   2f9bc:	d305      	bcc.n	2f9ca <outs+0x1e>
   2f9be:	b10e      	cbz	r6, 2f9c4 <outs+0x18>
	return (int)count;
   2f9c0:	1b60      	subs	r0, r4, r5
   2f9c2:	e008      	b.n	2f9d6 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2f9c4:	7823      	ldrb	r3, [r4, #0]
   2f9c6:	2b00      	cmp	r3, #0
   2f9c8:	d0fa      	beq.n	2f9c0 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2f9ca:	f814 0b01 	ldrb.w	r0, [r4], #1
   2f9ce:	4641      	mov	r1, r8
   2f9d0:	47b8      	blx	r7
		if (rc < 0) {
   2f9d2:	2800      	cmp	r0, #0
   2f9d4:	daf1      	bge.n	2f9ba <outs+0xe>
}
   2f9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f9da <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2f9da:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
   2f9dc:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
   2f9de:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
   2f9e0:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
   2f9e2:	1baf      	subs	r7, r5, r6
{
   2f9e4:	4604      	mov	r4, r0
   2f9e6:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
   2f9e8:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
   2f9ea:	bf98      	it	ls
   2f9ec:	1aff      	subls	r7, r7, r3
   2f9ee:	eba5 0000 	sub.w	r0, r5, r0
{
   2f9f2:	4694      	mov	ip, r2
		base += buf->size;
   2f9f4:	bf98      	it	ls
   2f9f6:	18f6      	addls	r6, r6, r3
   2f9f8:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
   2f9fa:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
   2f9fc:	6823      	ldr	r3, [r4, #0]
   2f9fe:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
   2fa00:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
   2fa02:	442b      	add	r3, r5
	size = MIN(size, free_space);
   2fa04:	bf28      	it	cs
   2fa06:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
   2fa08:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
   2fa0a:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
   2fa0c:	4290      	cmp	r0, r2
   2fa0e:	bf28      	it	cs
   2fa10:	4610      	movcs	r0, r2
	buf->put_head += size;
   2fa12:	4403      	add	r3, r0
   2fa14:	6063      	str	r3, [r4, #4]

	return size;
}
   2fa16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fa18 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
   2fa18:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2fa1c:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
   2fa1e:	428a      	cmp	r2, r1
   2fa20:	d30c      	bcc.n	2fa3c <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
   2fa22:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
   2fa24:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
   2fa26:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
   2fa28:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
   2fa2c:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
   2fa2e:	428a      	cmp	r2, r1
   2fa30:	d901      	bls.n	2fa36 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
   2fa32:	2000      	movs	r0, #0
   2fa34:	4770      	bx	lr
		buf->put_base += buf->size;
   2fa36:	4413      	add	r3, r2
   2fa38:	60c3      	str	r3, [r0, #12]
   2fa3a:	e7fa      	b.n	2fa32 <ring_buf_put_finish+0x1a>
		return -EINVAL;
   2fa3c:	f06f 0015 	mvn.w	r0, #21
}
   2fa40:	4770      	bx	lr

0002fa42 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   2fa42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2fa46:	4680      	mov	r8, r0
   2fa48:	460e      	mov	r6, r1
   2fa4a:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2fa4c:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   2fa4e:	462a      	mov	r2, r5
   2fa50:	a901      	add	r1, sp, #4
   2fa52:	4640      	mov	r0, r8
   2fa54:	f7ff ffc1 	bl	2f9da <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   2fa58:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   2fa5a:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   2fa5c:	4602      	mov	r2, r0
   2fa5e:	9801      	ldr	r0, [sp, #4]
   2fa60:	f000 fc7a 	bl	30358 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   2fa64:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   2fa66:	4427      	add	r7, r4
		data += partial_size;
   2fa68:	4426      	add	r6, r4
	} while (size && partial_size);
   2fa6a:	d001      	beq.n	2fa70 <ring_buf_put+0x2e>
   2fa6c:	2c00      	cmp	r4, #0
   2fa6e:	d1ee      	bne.n	2fa4e <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   2fa70:	4639      	mov	r1, r7
   2fa72:	4640      	mov	r0, r8
   2fa74:	f7ff ffd0 	bl	2fa18 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   2fa78:	4638      	mov	r0, r7
   2fa7a:	b002      	add	sp, #8
   2fa7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002fa80 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2fa80:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fa82:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
   2fa84:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
   2fa86:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
   2fa88:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
   2fa8a:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
   2fa8c:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
   2fa8e:	42b8      	cmp	r0, r7
{
   2fa90:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
   2fa92:	bf98      	it	ls
   2fa94:	1836      	addls	r6, r6, r0
   2fa96:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
   2fa9a:	6823      	ldr	r3, [r4, #0]
   2fa9c:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
   2faa0:	bf98      	it	ls
   2faa2:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
   2faa4:	442b      	add	r3, r5
	size = MIN(size, available_size);
   2faa6:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
   2faa8:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
   2faac:	bf28      	it	cs
   2faae:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
   2fab0:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
   2fab2:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
   2fab4:	4290      	cmp	r0, r2
   2fab6:	bf28      	it	cs
   2fab8:	4610      	movcs	r0, r2
	buf->get_head += size;
   2faba:	4403      	add	r3, r0
   2fabc:	6123      	str	r3, [r4, #16]

	return size;
}
   2fabe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fac0 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
   2fac0:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   2fac4:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
   2fac6:	428a      	cmp	r2, r1
   2fac8:	d30c      	bcc.n	2fae4 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
   2faca:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
   2facc:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
   2fad0:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
   2fad4:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
   2fad6:	428a      	cmp	r2, r1
   2fad8:	d901      	bls.n	2fade <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
   2fada:	2000      	movs	r0, #0
   2fadc:	4770      	bx	lr
		buf->get_base += buf->size;
   2fade:	4413      	add	r3, r2
   2fae0:	6183      	str	r3, [r0, #24]
   2fae2:	e7fa      	b.n	2fada <ring_buf_get_finish+0x1a>
		return -EINVAL;
   2fae4:	f06f 0015 	mvn.w	r0, #21
}
   2fae8:	4770      	bx	lr

0002faea <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   2faea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2faee:	4680      	mov	r8, r0
   2faf0:	460d      	mov	r5, r1
   2faf2:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2faf4:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   2faf6:	4632      	mov	r2, r6
   2faf8:	a901      	add	r1, sp, #4
   2fafa:	4640      	mov	r0, r8
   2fafc:	f7ff ffc0 	bl	2fa80 <ring_buf_get_claim>
   2fb00:	4604      	mov	r4, r0
		if (data) {
   2fb02:	b12d      	cbz	r5, 2fb10 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   2fb04:	4602      	mov	r2, r0
   2fb06:	9901      	ldr	r1, [sp, #4]
   2fb08:	4628      	mov	r0, r5
   2fb0a:	f000 fc25 	bl	30358 <memcpy>
			data += partial_size;
   2fb0e:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   2fb10:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   2fb12:	4427      	add	r7, r4
	} while (size && partial_size);
   2fb14:	d001      	beq.n	2fb1a <ring_buf_get+0x30>
   2fb16:	2c00      	cmp	r4, #0
   2fb18:	d1ed      	bne.n	2faf6 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   2fb1a:	4639      	mov	r1, r7
   2fb1c:	4640      	mov	r0, r8
   2fb1e:	f7ff ffcf 	bl	2fac0 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
   2fb22:	4638      	mov	r0, r7
   2fb24:	b002      	add	sp, #8
   2fb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002fb2a <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   2fb2a:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   2fb2c:	6903      	ldr	r3, [r0, #16]
{
   2fb2e:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   2fb30:	f013 0008 	ands.w	r0, r3, #8
   2fb34:	d109      	bne.n	2fb4a <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2fb36:	6813      	ldr	r3, [r2, #0]
   2fb38:	68d4      	ldr	r4, [r2, #12]
   2fb3a:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
   2fb3c:	bf97      	itett	ls
   2fb3e:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2fb40:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   2fb42:	1ad3      	subls	r3, r2, r3

	return true;
   2fb44:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2fb46:	600b      	str	r3, [r1, #0]
}
   2fb48:	bd10      	pop	{r4, pc}
   2fb4a:	2300      	movs	r3, #0
		return false;
   2fb4c:	4618      	mov	r0, r3
   2fb4e:	e7fa      	b.n	2fb46 <free_space+0x1c>

0002fb50 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   2fb50:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   2fb52:	a901      	add	r1, sp, #4
{
   2fb54:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   2fb56:	f7ff ffe8 	bl	2fb2a <free_space>
   2fb5a:	b120      	cbz	r0, 2fb66 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   2fb5c:	9b01      	ldr	r3, [sp, #4]
   2fb5e:	68e2      	ldr	r2, [r4, #12]
   2fb60:	3b01      	subs	r3, #1
   2fb62:	4413      	add	r3, r2
   2fb64:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   2fb66:	6a20      	ldr	r0, [r4, #32]
   2fb68:	9b01      	ldr	r3, [sp, #4]
   2fb6a:	1ac0      	subs	r0, r0, r3
}
   2fb6c:	3801      	subs	r0, #1
   2fb6e:	b002      	add	sp, #8
   2fb70:	bd10      	pop	{r4, pc}

0002fb72 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   2fb72:	b510      	push	{r4, lr}
   2fb74:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   2fb76:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2fb78:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   2fb7a:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2fb7c:	07d2      	lsls	r2, r2, #31
   2fb7e:	d502      	bpl.n	2fb86 <idx_inc+0x14>
		return i & (buffer->size - 1);
   2fb80:	3b01      	subs	r3, #1
   2fb82:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   2fb84:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   2fb86:	4298      	cmp	r0, r3
   2fb88:	bf28      	it	cs
   2fb8a:	1ac0      	subcs	r0, r0, r3
   2fb8c:	e7fa      	b.n	2fb84 <idx_inc+0x12>

0002fb8e <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   2fb8e:	b510      	push	{r4, lr}
   2fb90:	4604      	mov	r4, r0
   2fb92:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2fb94:	68c1      	ldr	r1, [r0, #12]
   2fb96:	f7ff ffec 	bl	2fb72 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   2fb9a:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2fb9c:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   2fb9e:	f023 0308 	bic.w	r3, r3, #8
   2fba2:	6123      	str	r3, [r4, #16]
}
   2fba4:	bd10      	pop	{r4, pc}

0002fba6 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   2fba6:	b538      	push	{r3, r4, r5, lr}
   2fba8:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2fbaa:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   2fbac:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2fbae:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2fbb0:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2fbb4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   2fbb8:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2fbba:	6801      	ldr	r1, [r0, #0]
   2fbbc:	462a      	mov	r2, r5
   2fbbe:	f7ff ffd8 	bl	2fb72 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2fbc2:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2fbc4:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2fbc6:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2fbc8:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   2fbca:	bf02      	ittt	eq
   2fbcc:	6923      	ldreq	r3, [r4, #16]
   2fbce:	f043 0308 	orreq.w	r3, r3, #8
   2fbd2:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2fbd4:	462a      	mov	r2, r5
   2fbd6:	4620      	mov	r0, r4
   2fbd8:	f7ff ffcb 	bl	2fb72 <idx_inc>
   2fbdc:	6060      	str	r0, [r4, #4]
}
   2fbde:	bd38      	pop	{r3, r4, r5, pc}

0002fbe0 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   2fbe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2fbe4:	68c7      	ldr	r7, [r0, #12]
   2fbe6:	69c6      	ldr	r6, [r0, #28]
{
   2fbe8:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   2fbea:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   2fbee:	f003 0303 	and.w	r3, r3, #3
   2fbf2:	2b02      	cmp	r3, #2
{
   2fbf4:	4604      	mov	r4, r0
   2fbf6:	4688      	mov	r8, r1
   2fbf8:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2fbfa:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2fbfe:	f04f 0300 	mov.w	r3, #0
   2fc02:	d009      	beq.n	2fc18 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   2fc04:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   2fc06:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   2fc0a:	6923      	ldr	r3, [r4, #16]
   2fc0c:	0799      	lsls	r1, r3, #30
   2fc0e:	d410      	bmi.n	2fc32 <drop_item_locked+0x52>
		return false;
   2fc10:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   2fc12:	b003      	add	sp, #12
   2fc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   2fc18:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   2fc1c:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   2fc1e:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   2fc20:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   2fc24:	d0f1      	beq.n	2fc0a <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   2fc26:	f7ff ffb2 	bl	2fb8e <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2fc2a:	68e3      	ldr	r3, [r4, #12]
   2fc2c:	60a3      	str	r3, [r4, #8]
		return true;
   2fc2e:	2001      	movs	r0, #1
   2fc30:	e7ef      	b.n	2fc12 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   2fc32:	69a3      	ldr	r3, [r4, #24]
   2fc34:	4650      	mov	r0, sl
   2fc36:	4798      	blx	r3
	return item->hdr.valid;
   2fc38:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   2fc3c:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   2fc3e:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   2fc40:	d5e6      	bpl.n	2fc10 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   2fc42:	f013 0302 	ands.w	r3, r3, #2
   2fc46:	d01d      	beq.n	2fc84 <drop_item_locked+0xa4>
		if (free_wlen) {
   2fc48:	f1b8 0f00 	cmp.w	r8, #0
   2fc4c:	d003      	beq.n	2fc56 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   2fc4e:	4641      	mov	r1, r8
   2fc50:	4620      	mov	r0, r4
   2fc52:	f7ff ffa8 	bl	2fba6 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2fc56:	6861      	ldr	r1, [r4, #4]
   2fc58:	462a      	mov	r2, r5
   2fc5a:	4620      	mov	r0, r4
   2fc5c:	f7ff ff89 	bl	2fb72 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2fc60:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   2fc64:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2fc66:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2fc68:	d104      	bne.n	2fc74 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   2fc6a:	462a      	mov	r2, r5
   2fc6c:	4620      	mov	r0, r4
   2fc6e:	f7ff ff80 	bl	2fb72 <idx_inc>
   2fc72:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   2fc74:	68a3      	ldr	r3, [r4, #8]
   2fc76:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   2fc78:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   2fc7a:	6923      	ldr	r3, [r4, #16]
   2fc7c:	f043 0308 	orr.w	r3, r3, #8
   2fc80:	6123      	str	r3, [r4, #16]
   2fc82:	e7d4      	b.n	2fc2e <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   2fc84:	4601      	mov	r1, r0
   2fc86:	4620      	mov	r0, r4
   2fc88:	9301      	str	r3, [sp, #4]
   2fc8a:	f7ff ff80 	bl	2fb8e <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2fc8e:	68e2      	ldr	r2, [r4, #12]
   2fc90:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   2fc92:	f1b8 0f00 	cmp.w	r8, #0
   2fc96:	d004      	beq.n	2fca2 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   2fc98:	6821      	ldr	r1, [r4, #0]
   2fc9a:	69e2      	ldr	r2, [r4, #28]
   2fc9c:	9b01      	ldr	r3, [sp, #4]
   2fc9e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   2fca2:	eb05 0208 	add.w	r2, r5, r8
   2fca6:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2fcaa:	6821      	ldr	r1, [r4, #0]
   2fcac:	4620      	mov	r0, r4
   2fcae:	f7ff ff60 	bl	2fb72 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   2fcb2:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2fcb4:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   2fcb6:	f043 0308 	orr.w	r3, r3, #8
   2fcba:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   2fcbc:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   2fcc0:	f36f 0300 	bfc	r3, #0, #1
   2fcc4:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   2fcc8:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   2fccc:	e7af      	b.n	2fc2e <drop_item_locked+0x4e>

0002fcce <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   2fcce:	b570      	push	{r4, r5, r6, lr}
   2fcd0:	4604      	mov	r4, r0
   2fcd2:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   2fcd4:	f7ff ff4d 	bl	2fb72 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   2fcd8:	6823      	ldr	r3, [r4, #0]
   2fcda:	4283      	cmp	r3, r0
   2fcdc:	d105      	bne.n	2fcea <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   2fcde:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   2fce0:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   2fce2:	f023 0308 	bic.w	r3, r3, #8
   2fce6:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   2fce8:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2fcea:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   2fcec:	00ab      	lsls	r3, r5, #2
   2fcee:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2fcf2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   2fcf6:	4620      	mov	r0, r4
   2fcf8:	6861      	ldr	r1, [r4, #4]
   2fcfa:	462a      	mov	r2, r5
   2fcfc:	f7ff ff39 	bl	2fb72 <idx_inc>
   2fd00:	6060      	str	r0, [r4, #4]
   2fd02:	e7f1      	b.n	2fce8 <post_drop_action+0x1a>

0002fd04 <max_utilization_update>:
{
   2fd04:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2fd06:	6903      	ldr	r3, [r0, #16]
   2fd08:	075b      	lsls	r3, r3, #29
{
   2fd0a:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2fd0c:	d506      	bpl.n	2fd1c <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2fd0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2fd10:	f7ff ff1e 	bl	2fb50 <get_usage>
   2fd14:	4285      	cmp	r5, r0
   2fd16:	bf2c      	ite	cs
   2fd18:	6265      	strcs	r5, [r4, #36]	; 0x24
   2fd1a:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   2fd1c:	bd38      	pop	{r3, r4, r5, pc}

0002fd1e <mpsc_pbuf_init>:
{
   2fd1e:	b538      	push	{r3, r4, r5, lr}
   2fd20:	460d      	mov	r5, r1
   2fd22:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   2fd24:	221c      	movs	r2, #28
   2fd26:	2100      	movs	r1, #0
   2fd28:	f000 fb21 	bl	3036e <memset>
	buffer->get_wlen = cfg->get_wlen;
   2fd2c:	68eb      	ldr	r3, [r5, #12]
   2fd2e:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   2fd30:	68ab      	ldr	r3, [r5, #8]
   2fd32:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   2fd34:	682b      	ldr	r3, [r5, #0]
   2fd36:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   2fd38:	686b      	ldr	r3, [r5, #4]
   2fd3a:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   2fd3c:	2200      	movs	r2, #0
   2fd3e:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   2fd40:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   2fd42:	b123      	cbz	r3, 2fd4e <mpsc_pbuf_init+0x30>
   2fd44:	1e59      	subs	r1, r3, #1
   2fd46:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   2fd48:	bf08      	it	eq
   2fd4a:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   2fd4e:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2fd50:	2201      	movs	r2, #1
   2fd52:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2fd56:	2100      	movs	r1, #0
}
   2fd58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2fd5c:	f000 bee7 	b.w	30b2e <z_impl_k_sem_init>

0002fd60 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   2fd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd64:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   2fd66:	2500      	movs	r5, #0
{
   2fd68:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   2fd6a:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
   2fd6c:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
   2fd6e:	428b      	cmp	r3, r1
{
   2fd70:	4604      	mov	r4, r0
   2fd72:	460e      	mov	r6, r1
   2fd74:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
   2fd76:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   2fd78:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
   2fd7a:	d33a      	bcc.n	2fdf2 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   2fd7c:	f04f 0320 	mov.w	r3, #32
   2fd80:	f3ef 8b11 	mrs	fp, BASEPRI
   2fd84:	f383 8812 	msr	BASEPRI_MAX, r3
   2fd88:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   2fd8c:	9a05      	ldr	r2, [sp, #20]
   2fd8e:	46d8      	mov	r8, fp
   2fd90:	b12a      	cbz	r2, 2fd9e <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   2fd92:	4629      	mov	r1, r5
   2fd94:	4620      	mov	r0, r4
   2fd96:	f7ff ff9a 	bl	2fcce <post_drop_action>
			tmp_wr_idx_shift = 0;
   2fd9a:	2300      	movs	r3, #0
   2fd9c:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   2fd9e:	a904      	add	r1, sp, #16
   2fda0:	4620      	mov	r0, r4
   2fda2:	f7ff fec2 	bl	2fb2a <free_space>

		if (free_wlen >= wlen) {
   2fda6:	9904      	ldr	r1, [sp, #16]
   2fda8:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
   2fdaa:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   2fdac:	d32a      	bcc.n	2fe04 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   2fdae:	6822      	ldr	r2, [r4, #0]
			item =
   2fdb0:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   2fdb2:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   2fdb6:	f021 0103 	bic.w	r1, r1, #3
   2fdba:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   2fdbe:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2fdc2:	6821      	ldr	r1, [r4, #0]
   2fdc4:	4632      	mov	r2, r6
   2fdc6:	4620      	mov	r0, r4
   2fdc8:	f7ff fed3 	bl	2fb72 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2fdcc:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2fdce:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2fdd0:	4298      	cmp	r0, r3
   2fdd2:	d012      	beq.n	2fdfa <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   2fdd4:	2700      	movs	r7, #0
	__asm__ volatile(
   2fdd6:	f388 8811 	msr	BASEPRI, r8
   2fdda:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   2fdde:	9903      	ldr	r1, [sp, #12]
   2fde0:	b129      	cbz	r1, 2fdee <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   2fde2:	6962      	ldr	r2, [r4, #20]
   2fde4:	b10a      	cbz	r2, 2fdea <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   2fde6:	4620      	mov	r0, r4
   2fde8:	4790      	blx	r2
			}
			dropped_item = NULL;
   2fdea:	2300      	movs	r3, #0
   2fdec:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   2fdee:	2f00      	cmp	r7, #0
   2fdf0:	d1c4      	bne.n	2fd7c <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   2fdf2:	4648      	mov	r0, r9
   2fdf4:	b007      	add	sp, #28
   2fdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   2fdfa:	6923      	ldr	r3, [r4, #16]
   2fdfc:	f043 0308 	orr.w	r3, r3, #8
   2fe00:	6123      	str	r3, [r4, #16]
   2fe02:	e7e7      	b.n	2fdd4 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   2fe04:	b118      	cbz	r0, 2fe0e <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   2fe06:	4620      	mov	r0, r4
   2fe08:	f7ff fecd 	bl	2fba6 <add_skip_item>
			cont = true;
   2fe0c:	e7e3      	b.n	2fdd6 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   2fe0e:	9b00      	ldr	r3, [sp, #0]
   2fe10:	ea5a 0303 	orrs.w	r3, sl, r3
   2fe14:	d01a      	beq.n	2fe4c <mpsc_pbuf_alloc+0xec>
   2fe16:	9101      	str	r1, [sp, #4]
   2fe18:	f000 fded 	bl	309f6 <k_is_in_isr>
   2fe1c:	9901      	ldr	r1, [sp, #4]
   2fe1e:	b9a8      	cbnz	r0, 2fe4c <mpsc_pbuf_alloc+0xec>
   2fe20:	f38b 8811 	msr	BASEPRI, fp
   2fe24:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   2fe28:	9b00      	ldr	r3, [sp, #0]
   2fe2a:	4652      	mov	r2, sl
   2fe2c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2fe30:	f7fe fa90 	bl	2e354 <z_impl_k_sem_take>
	__asm__ volatile(
   2fe34:	f04f 0320 	mov.w	r3, #32
   2fe38:	f3ef 8811 	mrs	r8, BASEPRI
   2fe3c:	f383 8812 	msr	BASEPRI_MAX, r3
   2fe40:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   2fe44:	fab0 f780 	clz	r7, r0
   2fe48:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   2fe4a:	e7c4      	b.n	2fdd6 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   2fe4c:	ab05      	add	r3, sp, #20
   2fe4e:	aa03      	add	r2, sp, #12
   2fe50:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   2fe52:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   2fe54:	f7ff fec4 	bl	2fbe0 <drop_item_locked>
   2fe58:	4607      	mov	r7, r0
   2fe5a:	e7bc      	b.n	2fdd6 <mpsc_pbuf_alloc+0x76>

0002fe5c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   2fe5c:	b570      	push	{r4, r5, r6, lr}
   2fe5e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2fe60:	6983      	ldr	r3, [r0, #24]
   2fe62:	4608      	mov	r0, r1
{
   2fe64:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2fe66:	4798      	blx	r3
   2fe68:	4602      	mov	r2, r0
   2fe6a:	f04f 0320 	mov.w	r3, #32
   2fe6e:	f3ef 8611 	mrs	r6, BASEPRI
   2fe72:	f383 8812 	msr	BASEPRI_MAX, r3
   2fe76:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   2fe7a:	782b      	ldrb	r3, [r5, #0]
   2fe7c:	f043 0301 	orr.w	r3, r3, #1
   2fe80:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2fe82:	6861      	ldr	r1, [r4, #4]
   2fe84:	4620      	mov	r0, r4
   2fe86:	f7ff fe74 	bl	2fb72 <idx_inc>
   2fe8a:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   2fe8c:	4620      	mov	r0, r4
   2fe8e:	f7ff ff39 	bl	2fd04 <max_utilization_update>
	__asm__ volatile(
   2fe92:	f386 8811 	msr	BASEPRI, r6
   2fe96:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   2fe9a:	bd70      	pop	{r4, r5, r6, pc}

0002fe9c <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   2fe9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fe9e:	4604      	mov	r4, r0
	__asm__ volatile(
   2fea0:	f04f 0320 	mov.w	r3, #32
   2fea4:	f3ef 8611 	mrs	r6, BASEPRI
   2fea8:	f383 8812 	msr	BASEPRI_MAX, r3
   2feac:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   2feb0:	6923      	ldr	r3, [r4, #16]
   2feb2:	f013 0f08 	tst.w	r3, #8
   2feb6:	68a3      	ldr	r3, [r4, #8]
   2feb8:	d102      	bne.n	2fec0 <mpsc_pbuf_claim+0x24>
   2feba:	6862      	ldr	r2, [r4, #4]
   2febc:	4293      	cmp	r3, r2
   2febe:	d900      	bls.n	2fec2 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   2fec0:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   2fec2:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   2fec4:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   2fec6:	b92a      	cbnz	r2, 2fed4 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   2fec8:	f386 8811 	msr	BASEPRI, r6
   2fecc:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   2fed0:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   2fed2:	e033      	b.n	2ff3c <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   2fed4:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   2fed8:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   2fedc:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   2fee0:	d0f2      	beq.n	2fec8 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   2fee2:	2802      	cmp	r0, #2
   2fee4:	d103      	bne.n	2feee <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   2fee6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   2feea:	08ad      	lsrs	r5, r5, #2
   2feec:	d105      	bne.n	2fefa <mpsc_pbuf_claim+0x5e>
   2feee:	07d0      	lsls	r0, r2, #31
   2fef0:	d412      	bmi.n	2ff18 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   2fef2:	69a3      	ldr	r3, [r4, #24]
   2fef4:	4638      	mov	r0, r7
   2fef6:	4798      	blx	r3
   2fef8:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   2fefa:	68a1      	ldr	r1, [r4, #8]
   2fefc:	462a      	mov	r2, r5
   2fefe:	4620      	mov	r0, r4
   2ff00:	f7ff fe37 	bl	2fb72 <idx_inc>
				rd_idx_inc(buffer, inc);
   2ff04:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   2ff06:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   2ff08:	4620      	mov	r0, r4
   2ff0a:	f7ff fe40 	bl	2fb8e <rd_idx_inc>
   2ff0e:	f386 8811 	msr	BASEPRI, r6
   2ff12:	f3bf 8f6f 	isb	sy
	} while (cont);
   2ff16:	e7c3      	b.n	2fea0 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   2ff18:	f042 0202 	orr.w	r2, r2, #2
   2ff1c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   2ff20:	4638      	mov	r0, r7
   2ff22:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   2ff24:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   2ff26:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   2ff28:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   2ff2a:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   2ff2c:	4620      	mov	r0, r4
   2ff2e:	f7ff fe20 	bl	2fb72 <idx_inc>
				buffer->tmp_rd_idx =
   2ff32:	60a0      	str	r0, [r4, #8]
   2ff34:	f386 8811 	msr	BASEPRI, r6
   2ff38:	f3bf 8f6f 	isb	sy
}
   2ff3c:	4638      	mov	r0, r7
   2ff3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ff40 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   2ff40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ff42:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2ff44:	6983      	ldr	r3, [r0, #24]
   2ff46:	4608      	mov	r0, r1
{
   2ff48:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2ff4a:	4798      	blx	r3
   2ff4c:	4606      	mov	r6, r0
	__asm__ volatile(
   2ff4e:	f04f 0320 	mov.w	r3, #32
   2ff52:	f3ef 8711 	mrs	r7, BASEPRI
   2ff56:	f383 8812 	msr	BASEPRI_MAX, r3
   2ff5a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   2ff5e:	782b      	ldrb	r3, [r5, #0]
   2ff60:	f36f 0300 	bfc	r3, #0, #1
   2ff64:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2ff66:	6923      	ldr	r3, [r4, #16]
   2ff68:	079b      	lsls	r3, r3, #30
   2ff6a:	d505      	bpl.n	2ff78 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   2ff6c:	68e2      	ldr	r2, [r4, #12]
   2ff6e:	69e3      	ldr	r3, [r4, #28]
   2ff70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2ff74:	429d      	cmp	r5, r3
   2ff76:	d11a      	bne.n	2ffae <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   2ff78:	782b      	ldrb	r3, [r5, #0]
   2ff7a:	f36f 0341 	bfc	r3, #1, #1
   2ff7e:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2ff80:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   2ff84:	4299      	cmp	r1, r3
   2ff86:	d104      	bne.n	2ff92 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   2ff88:	4632      	mov	r2, r6
   2ff8a:	4620      	mov	r0, r4
   2ff8c:	f7ff fdf1 	bl	2fb72 <idx_inc>
   2ff90:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   2ff92:	4631      	mov	r1, r6
   2ff94:	4620      	mov	r0, r4
   2ff96:	f7ff fdfa 	bl	2fb8e <rd_idx_inc>
	__asm__ volatile(
   2ff9a:	f387 8811 	msr	BASEPRI, r7
   2ff9e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2ffa2:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   2ffa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2ffaa:	f7fe b9af 	b.w	2e30c <z_impl_k_sem_give>
		witem->skip.len = wlen;
   2ffae:	682b      	ldr	r3, [r5, #0]
   2ffb0:	f360 039f 	bfi	r3, r0, #2, #30
   2ffb4:	602b      	str	r3, [r5, #0]
   2ffb6:	e7f0      	b.n	2ff9a <mpsc_pbuf_free+0x5a>

0002ffb8 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   2ffb8:	6902      	ldr	r2, [r0, #16]
   2ffba:	6883      	ldr	r3, [r0, #8]
   2ffbc:	0712      	lsls	r2, r2, #28
   2ffbe:	d402      	bmi.n	2ffc6 <mpsc_pbuf_is_pending+0xe>
   2ffc0:	6842      	ldr	r2, [r0, #4]
   2ffc2:	429a      	cmp	r2, r3
   2ffc4:	d200      	bcs.n	2ffc8 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   2ffc6:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   2ffc8:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2ffca:	1e18      	subs	r0, r3, #0
   2ffcc:	bf18      	it	ne
   2ffce:	2001      	movne	r0, #1
   2ffd0:	4770      	bx	lr

0002ffd2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2ffd2:	4770      	bx	lr

0002ffd4 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   2ffd4:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2ffd6:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2ffd8:	bf5f      	itttt	pl
   2ffda:	6803      	ldrpl	r3, [r0, #0]
   2ffdc:	8842      	ldrhpl	r2, [r0, #2]
   2ffde:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   2ffe2:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   2ffe6:	bf5d      	ittte	pl
   2ffe8:	3017      	addpl	r0, #23
   2ffea:	f020 0007 	bicpl.w	r0, r0, #7
   2ffee:	0880      	lsrpl	r0, r0, #2
	return 0;
   2fff0:	2000      	movmi	r0, #0
}
   2fff2:	4770      	bx	lr

0002fff4 <dummy_timestamp>:
}
   2fff4:	2000      	movs	r0, #0
   2fff6:	4770      	bx	lr

0002fff8 <default_get_timestamp>:
   2fff8:	f000 bb3e 	b.w	30678 <sys_clock_cycle_get_32>

0002fffc <atomic_inc>:
{
   2fffc:	4603      	mov	r3, r0
}
   2fffe:	f3bf 8f5b 	dmb	ish
   30002:	e853 0f00 	ldrex	r0, [r3]
   30006:	1c42      	adds	r2, r0, #1
   30008:	e843 2100 	strex	r1, r2, [r3]
   3000c:	2900      	cmp	r1, #0
   3000e:	d1f8      	bne.n	30002 <atomic_inc+0x6>
   30010:	f3bf 8f5b 	dmb	ish
   30014:	4770      	bx	lr

00030016 <z_log_vprintk>:
{
   30016:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   30018:	2300      	movs	r3, #0
   3001a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   3001e:	e9cd 3300 	strd	r3, r3, [sp]
   30022:	461a      	mov	r2, r3
   30024:	4619      	mov	r1, r3
   30026:	4618      	mov	r0, r3
   30028:	f7f7 fe6c 	bl	27d04 <z_impl_z_log_msg_runtime_vcreate>
}
   3002c:	b005      	add	sp, #20
   3002e:	f85d fb04 	ldr.w	pc, [sp], #4

00030032 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   30032:	2001      	movs	r0, #1
   30034:	f7f7 bc1e 	b.w	27874 <z_log_dropped>

00030038 <z_log_get_tag>:
}
   30038:	2000      	movs	r0, #0
   3003a:	4770      	bx	lr

0003003c <z_cbprintf_cpy>:
{
   3003c:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   3003e:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   30042:	1b9b      	subs	r3, r3, r6
   30044:	428b      	cmp	r3, r1
{
   30046:	460c      	mov	r4, r1
   30048:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   3004a:	d30a      	bcc.n	30062 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   3004c:	6813      	ldr	r3, [r2, #0]
   3004e:	460a      	mov	r2, r1
   30050:	4601      	mov	r1, r0
   30052:	1998      	adds	r0, r3, r6
   30054:	f000 f980 	bl	30358 <memcpy>
	desc->off += len;
   30058:	68ab      	ldr	r3, [r5, #8]
   3005a:	4423      	add	r3, r4
   3005c:	60ab      	str	r3, [r5, #8]
	return len;
   3005e:	4620      	mov	r0, r4
}
   30060:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   30062:	f06f 001b 	mvn.w	r0, #27
   30066:	e7fb      	b.n	30060 <z_cbprintf_cpy+0x24>

00030068 <z_log_msg_finalize>:
{
   30068:	b570      	push	{r4, r5, r6, lr}
   3006a:	460e      	mov	r6, r1
   3006c:	4615      	mov	r5, r2
   3006e:	4619      	mov	r1, r3
	if (!msg) {
   30070:	4604      	mov	r4, r0
   30072:	b918      	cbnz	r0, 3007c <z_log_msg_finalize+0x14>
}
   30074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   30078:	f7f7 bbfc 	b.w	27874 <z_log_dropped>
	if (data) {
   3007c:	b133      	cbz	r3, 3008c <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   3007e:	f3c2 234a 	ubfx	r3, r2, #9, #11
   30082:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   30084:	0d12      	lsrs	r2, r2, #20
   30086:	4418      	add	r0, r3
   30088:	f000 f966 	bl	30358 <memcpy>
	msg->hdr.source = source;
   3008c:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   30090:	4620      	mov	r0, r4
}
   30092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   30096:	f7f7 bd7d 	b.w	27b94 <z_log_msg_commit>

0003009a <buffer_write>:
{
   3009a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3009c:	4606      	mov	r6, r0
   3009e:	460d      	mov	r5, r1
   300a0:	4614      	mov	r4, r2
   300a2:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   300a4:	4621      	mov	r1, r4
   300a6:	4628      	mov	r0, r5
   300a8:	463a      	mov	r2, r7
   300aa:	47b0      	blx	r6
	} while (len != 0);
   300ac:	1a24      	subs	r4, r4, r0
		buf += processed;
   300ae:	4405      	add	r5, r0
	} while (len != 0);
   300b0:	d1f8      	bne.n	300a4 <buffer_write+0xa>
}
   300b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000300b4 <cbvprintf>:
{
   300b4:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   300b6:	2400      	movs	r4, #0
   300b8:	9400      	str	r4, [sp, #0]
   300ba:	f7f6 ff55 	bl	26f68 <z_cbvprintf_impl>
}
   300be:	b002      	add	sp, #8
   300c0:	bd10      	pop	{r4, pc}

000300c2 <log_output_flush>:
{
   300c2:	b510      	push	{r4, lr}
		     output->control_block->offset,
   300c4:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   300c6:	6881      	ldr	r1, [r0, #8]
{
   300c8:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   300ca:	e9d2 2300 	ldrd	r2, r3, [r2]
   300ce:	6800      	ldr	r0, [r0, #0]
   300d0:	f7ff ffe3 	bl	3009a <buffer_write>
	output->control_block->offset = 0;
   300d4:	6863      	ldr	r3, [r4, #4]
   300d6:	2200      	movs	r2, #0
   300d8:	601a      	str	r2, [r3, #0]
}
   300da:	bd10      	pop	{r4, pc}

000300dc <out_func>:
{
   300dc:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   300de:	684b      	ldr	r3, [r1, #4]
   300e0:	681a      	ldr	r2, [r3, #0]
   300e2:	68cb      	ldr	r3, [r1, #12]
   300e4:	429a      	cmp	r2, r3
{
   300e6:	4605      	mov	r5, r0
   300e8:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   300ea:	d102      	bne.n	300f2 <out_func+0x16>
		log_output_flush(out_ctx);
   300ec:	4608      	mov	r0, r1
   300ee:	f7ff ffe8 	bl	300c2 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   300f2:	6863      	ldr	r3, [r4, #4]
   300f4:	f3bf 8f5b 	dmb	ish
   300f8:	e853 2f00 	ldrex	r2, [r3]
   300fc:	1c51      	adds	r1, r2, #1
   300fe:	e843 1000 	strex	r0, r1, [r3]
   30102:	2800      	cmp	r0, #0
   30104:	d1f8      	bne.n	300f8 <out_func+0x1c>
   30106:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   3010a:	68a3      	ldr	r3, [r4, #8]
   3010c:	549d      	strb	r5, [r3, r2]
}
   3010e:	2000      	movs	r0, #0
   30110:	bd38      	pop	{r3, r4, r5, pc}

00030112 <cr_out_func>:
	if (c == '\n') {
   30112:	280a      	cmp	r0, #10
{
   30114:	b538      	push	{r3, r4, r5, lr}
   30116:	4604      	mov	r4, r0
   30118:	460d      	mov	r5, r1
	if (c == '\n') {
   3011a:	d102      	bne.n	30122 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   3011c:	200d      	movs	r0, #13
   3011e:	f7ff ffdd 	bl	300dc <out_func>
	out_func(c, ctx);
   30122:	4629      	mov	r1, r5
   30124:	4620      	mov	r0, r4
   30126:	f7ff ffd9 	bl	300dc <out_func>
}
   3012a:	2000      	movs	r0, #0
   3012c:	bd38      	pop	{r3, r4, r5, pc}

0003012e <log_backend_uart_init>:
}
   3012e:	4770      	bx	lr

00030130 <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
   30130:	f010 0f70 	tst.w	r0, #112	; 0x70
	ep_idx = ep & (~USB_EP_DIR_IN);
   30134:	f000 027f 	and.w	r2, r0, #127	; 0x7f
	if (ep_idx > 15) {
   30138:	d001      	beq.n	3013e <get_ep_bm_from_addr+0xe>
   3013a:	f7f8 ba9d 	b.w	28678 <get_ep_bm_from_addr.part.0>
	if (ep & USB_EP_DIR_IN) {
   3013e:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
   30142:	bf18      	it	ne
   30144:	3210      	addne	r2, #16
   30146:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
   30148:	4090      	lsls	r0, r2
}
   3014a:	4770      	bx	lr

0003014c <usb_write>:
{
   3014c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30150:	4606      	mov	r6, r0
   30152:	460f      	mov	r7, r1
   30154:	4690      	mov	r8, r2
   30156:	4699      	mov	r9, r3
   30158:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   3015a:	464b      	mov	r3, r9
   3015c:	4642      	mov	r2, r8
   3015e:	4639      	mov	r1, r7
   30160:	4630      	mov	r0, r6
   30162:	f7fa ff05 	bl	2af70 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   30166:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   3016a:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   3016c:	d103      	bne.n	30176 <usb_write+0x2a>
	z_impl_k_yield();
   3016e:	f7fe fcb1 	bl	2ead4 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   30172:	3d01      	subs	r5, #1
   30174:	d1f1      	bne.n	3015a <usb_write+0xe>
}
   30176:	4620      	mov	r0, r4
   30178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003017c <usb_get_dev_data_by_cfg>:
	return list->head;
   3017c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   3017e:	b140      	cbz	r0, 30192 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   30180:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   30184:	685b      	ldr	r3, [r3, #4]
   30186:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   30188:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   3018c:	d001      	beq.n	30192 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   3018e:	6840      	ldr	r0, [r0, #4]
   30190:	e7f5      	b.n	3017e <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   30192:	4770      	bx	lr

00030194 <usb_get_dev_data_by_iface>:
	return list->head;
   30194:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   30196:	b150      	cbz	r0, 301ae <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   30198:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   3019c:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   3019e:	685b      	ldr	r3, [r3, #4]
   301a0:	789b      	ldrb	r3, [r3, #2]
   301a2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   301a4:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   301a8:	d001      	beq.n	301ae <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   301aa:	6840      	ldr	r0, [r0, #4]
   301ac:	e7f3      	b.n	30196 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   301ae:	4770      	bx	lr

000301b0 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   301b0:	b530      	push	{r4, r5, lr}
	return list->head;
   301b2:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   301b4:	b188      	cbz	r0, 301da <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   301b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   301ba:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   301bc:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   301be:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   301c0:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   301c2:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   301c4:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   301c6:	b2dc      	uxtb	r4, r3
   301c8:	42a5      	cmp	r5, r4
   301ca:	d801      	bhi.n	301d0 <usb_get_dev_data_by_ep+0x20>
	return node->next;
   301cc:	6840      	ldr	r0, [r0, #4]
   301ce:	e7f1      	b.n	301b4 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   301d0:	3301      	adds	r3, #1
   301d2:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   301d6:	428c      	cmp	r4, r1
   301d8:	d1f5      	bne.n	301c6 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   301da:	bd30      	pop	{r4, r5, pc}

000301dc <usb_transfer_is_busy>:
{
   301dc:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   301de:	f7f8 ffc1 	bl	29164 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   301e2:	b128      	cbz	r0, 301f0 <usb_transfer_is_busy+0x14>
   301e4:	6840      	ldr	r0, [r0, #4]
   301e6:	f110 0f10 	cmn.w	r0, #16
   301ea:	bf14      	ite	ne
   301ec:	2000      	movne	r0, #0
   301ee:	2001      	moveq	r0, #1
}
   301f0:	bd08      	pop	{r3, pc}

000301f2 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   301f2:	1c4b      	adds	r3, r1, #1
   301f4:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   301f6:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   301f8:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   301fa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   301fe:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   30200:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   30204:	4770      	bx	lr

00030206 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   30206:	e950 3102 	ldrd	r3, r1, [r0, #-8]
   3020a:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   3020e:	4718      	bx	r3

00030210 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   30210:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
   30212:	2200      	movs	r2, #0
   30214:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
   30218:	4770      	bx	lr

0003021a <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   3021a:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   3021c:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   30220:	b108      	cbz	r0, 30226 <cdc_acm_irq_tx_ready+0xc>
   30222:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
   30226:	4770      	bx	lr

00030228 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   30228:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
   3022a:	2200      	movs	r2, #0
   3022c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
   30230:	4770      	bx	lr

00030232 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
   30232:	6903      	ldr	r3, [r0, #16]
}
   30234:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
   30238:	4770      	bx	lr

0003023a <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   3023a:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   3023c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   30240:	b112      	cbz	r2, 30248 <cdc_acm_irq_is_pending+0xe>
   30242:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
   30246:	b92a      	cbnz	r2, 30254 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   30248:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
   3024c:	b118      	cbz	r0, 30256 <cdc_acm_irq_is_pending+0x1c>
   3024e:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
   30252:	4770      	bx	lr
		return 1;
   30254:	2001      	movs	r0, #1
}
   30256:	4770      	bx	lr

00030258 <cdc_acm_irq_update>:
}
   30258:	2001      	movs	r0, #1
   3025a:	4770      	bx	lr

0003025c <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   3025c:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
   3025e:	e9c3 1200 	strd	r1, r2, [r3]
}
   30262:	4770      	bx	lr

00030264 <cdc_acm_configure>:
}
   30264:	2000      	movs	r0, #0
   30266:	4770      	bx	lr

00030268 <cdc_acm_config_get>:
{
   30268:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   3026a:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   3026c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   30270:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
   30272:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   30276:	b16a      	cbz	r2, 30294 <cdc_acm_config_get+0x2c>
   30278:	2a01      	cmp	r2, #1
   3027a:	bf0c      	ite	eq
   3027c:	2202      	moveq	r2, #2
   3027e:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
   30280:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
   30282:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
   30286:	1e50      	subs	r0, r2, #1
   30288:	2803      	cmp	r0, #3
   3028a:	d805      	bhi.n	30298 <cdc_acm_config_get+0x30>
   3028c:	e8df f000 	tbb	[pc, r0]
   30290:	05050505 	.word	0x05050505
	switch (dev_data->line_coding.bCharFormat) {
   30294:	2201      	movs	r2, #1
   30296:	e7f3      	b.n	30280 <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
   30298:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
   3029a:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
   3029c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   302a0:	2b06      	cmp	r3, #6
   302a2:	d009      	beq.n	302b8 <cdc_acm_config_get+0x50>
   302a4:	2b07      	cmp	r3, #7
   302a6:	d009      	beq.n	302bc <cdc_acm_config_get+0x54>
   302a8:	2b05      	cmp	r3, #5
   302aa:	bf0c      	ite	eq
   302ac:	2300      	moveq	r3, #0
   302ae:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
   302b0:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
   302b2:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
   302b4:	71c8      	strb	r0, [r1, #7]
}
   302b6:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
   302b8:	2301      	movs	r3, #1
   302ba:	e7f9      	b.n	302b0 <cdc_acm_config_get+0x48>
   302bc:	2302      	movs	r3, #2
   302be:	e7f7      	b.n	302b0 <cdc_acm_config_get+0x48>

000302c0 <cdc_acm_fifo_read>:
{
   302c0:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   302c2:	6904      	ldr	r4, [r0, #16]
{
   302c4:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   302c6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   302ca:	f7ff fc0e 	bl	2faea <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   302ce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   302d2:	689a      	ldr	r2, [r3, #8]
   302d4:	6919      	ldr	r1, [r3, #16]
   302d6:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
   302d8:	bf04      	itt	eq
   302da:	2200      	moveq	r2, #0
   302dc:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
   302e0:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   302e4:	4606      	mov	r6, r0
	if (dev_data->rx_paused == true) {
   302e6:	b19a      	cbz	r2, 30310 <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
   302e8:	685a      	ldr	r2, [r3, #4]
   302ea:	6959      	ldr	r1, [r3, #20]
   302ec:	69db      	ldr	r3, [r3, #28]
   302ee:	1a52      	subs	r2, r2, r1
   302f0:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
   302f2:	2b3f      	cmp	r3, #63	; 0x3f
   302f4:	d90c      	bls.n	30310 <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
   302f6:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
   302fa:	b133      	cbz	r3, 3030a <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
   302fc:	686b      	ldr	r3, [r5, #4]
   302fe:	6a1b      	ldr	r3, [r3, #32]
   30300:	4622      	mov	r2, r4
   30302:	7b18      	ldrb	r0, [r3, #12]
   30304:	2100      	movs	r1, #0
   30306:	f7f9 fa63 	bl	297d0 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
   3030a:	2300      	movs	r3, #0
   3030c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   30310:	4630      	mov	r0, r6
   30312:	bd70      	pop	{r4, r5, r6, pc}

00030314 <cdc_acm_poll_in>:
{
   30314:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   30316:	2201      	movs	r2, #1
   30318:	f7ff ffd2 	bl	302c0 <cdc_acm_fifo_read>
}
   3031c:	3801      	subs	r0, #1
   3031e:	bf18      	it	ne
   30320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   30324:	bd08      	pop	{r3, pc}

00030326 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   30326:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   30328:	6800      	ldr	r0, [r0, #0]
   3032a:	f7f9 bb05 	b.w	29938 <z_arm_fatal_error>

0003032e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3032e:	2100      	movs	r1, #0
   30330:	2001      	movs	r0, #1
   30332:	f7f9 bb01 	b.w	29938 <z_arm_fatal_error>

00030336 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   30336:	b508      	push	{r3, lr}
	handler();
   30338:	f7f9 fbac 	bl	29a94 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3033c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   30340:	f7f9 bc6c 	b.w	29c1c <z_arm_exc_exit>

00030344 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   30344:	2300      	movs	r3, #0
   30346:	f7f7 bc59 	b.w	27bfc <z_impl_z_log_msg_static_create>

0003034a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   3034a:	4603      	mov	r3, r0
	size_t n = 0;
   3034c:	2000      	movs	r0, #0

	while (*s != '\0') {
   3034e:	5c1a      	ldrb	r2, [r3, r0]
   30350:	b902      	cbnz	r2, 30354 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   30352:	4770      	bx	lr
		n++;
   30354:	3001      	adds	r0, #1
   30356:	e7fa      	b.n	3034e <strlen+0x4>

00030358 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   30358:	b510      	push	{r4, lr}
   3035a:	1e43      	subs	r3, r0, #1
   3035c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   3035e:	4291      	cmp	r1, r2
   30360:	d100      	bne.n	30364 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   30362:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   30364:	f811 4b01 	ldrb.w	r4, [r1], #1
   30368:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   3036c:	e7f7      	b.n	3035e <memcpy+0x6>

0003036e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   3036e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   30370:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   30372:	4603      	mov	r3, r0
	while (n > 0) {
   30374:	4293      	cmp	r3, r2
   30376:	d100      	bne.n	3037a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   30378:	4770      	bx	lr
		*(d_byte++) = c_byte;
   3037a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   3037e:	e7f9      	b.n	30374 <memset+0x6>

00030380 <_stdout_hook_default>:
}
   30380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30384:	4770      	bx	lr

00030386 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   30386:	4603      	mov	r3, r0
	size_t n = 0;
   30388:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   3038a:	5c1a      	ldrb	r2, [r3, r0]
   3038c:	b10a      	cbz	r2, 30392 <strnlen+0xc>
   3038e:	4288      	cmp	r0, r1
   30390:	d100      	bne.n	30394 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   30392:	4770      	bx	lr
		n++;
   30394:	3001      	adds	r0, #1
   30396:	e7f8      	b.n	3038a <strnlen+0x4>

00030398 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   30398:	2806      	cmp	r0, #6
   3039a:	d108      	bne.n	303ae <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   3039c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   303a0:	2201      	movs	r2, #1
   303a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   303a6:	f3bf 8f4f 	dsb	sy
        __WFE();
   303aa:	bf20      	wfe
    while (true)
   303ac:	e7fd      	b.n	303aa <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   303ae:	4770      	bx	lr

000303b0 <pm_state_exit_post_ops>:
   303b0:	2300      	movs	r3, #0
   303b2:	f383 8811 	msr	BASEPRI, r3
   303b6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   303ba:	4770      	bx	lr

000303bc <ep_ctx_reset>:
{
   303bc:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   303be:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   303c0:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   303c4:	2300      	movs	r3, #0
   303c6:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   303c8:	7f83      	ldrb	r3, [r0, #30]
{
   303ca:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   303cc:	b113      	cbz	r3, 303d4 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   303ce:	7a40      	ldrb	r0, [r0, #9]
   303d0:	f000 fab7 	bl	30942 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   303d4:	2301      	movs	r3, #1
   303d6:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   303d8:	2300      	movs	r3, #0
   303da:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   303dc:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   303de:	77a3      	strb	r3, [r4, #30]
}
   303e0:	bd10      	pop	{r4, pc}

000303e2 <z_log_msg_static_create.constprop.0>:
   303e2:	2300      	movs	r3, #0
   303e4:	f7f7 bc0a 	b.w	27bfc <z_impl_z_log_msg_static_create>

000303e8 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   303e8:	f7fd bea6 	b.w	2e138 <z_impl_k_mutex_lock>

000303ec <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   303ec:	f7fd bf1e 	b.w	2e22c <z_impl_k_mutex_unlock>

000303f0 <usb_dc_ep_disable>:
{
   303f0:	b538      	push	{r3, r4, r5, lr}
   303f2:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
   303f4:	f7fa f82e 	bl	2a454 <endpoint_ctx>
	if (!ep_ctx) {
   303f8:	4605      	mov	r5, r0
   303fa:	b160      	cbz	r0, 30416 <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
   303fc:	7a03      	ldrb	r3, [r0, #8]
   303fe:	b16b      	cbz	r3, 3041c <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   30400:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
   30402:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   30404:	f7fd fb60 	bl	2dac8 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   30408:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   3040a:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   3040c:	f7ff ffd6 	bl	303bc <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   30410:	722c      	strb	r4, [r5, #8]
	return 0;
   30412:	4620      	mov	r0, r4
}
   30414:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   30416:	f06f 0015 	mvn.w	r0, #21
   3041a:	e7fb      	b.n	30414 <usb_dc_ep_disable+0x24>
		return -EALREADY;
   3041c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   30420:	e7f8      	b.n	30414 <usb_dc_ep_disable+0x24>

00030422 <usb_dc_ep_read>:
{
   30422:	b570      	push	{r4, r5, r6, lr}
   30424:	4604      	mov	r4, r0
   30426:	460e      	mov	r6, r1
   30428:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   3042a:	f7fa fe43 	bl	2b0b4 <usb_dc_ep_read_wait>
	if (ret) {
   3042e:	b930      	cbnz	r0, 3043e <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   30430:	b906      	cbnz	r6, 30434 <usb_dc_ep_read+0x12>
   30432:	b125      	cbz	r5, 3043e <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   30434:	4620      	mov	r0, r4
}
   30436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   3043a:	f7fa bea1 	b.w	2b180 <usb_dc_ep_read_continue>
}
   3043e:	bd70      	pop	{r4, r5, r6, pc}

00030440 <adc_context_on_timer_expired>:
{
   30440:	b410      	push	{r4}
   30442:	4603      	mov	r3, r0
   30444:	3808      	subs	r0, #8
   30446:	f3bf 8f5b 	dmb	ish
   3044a:	e850 2f00 	ldrex	r2, [r0]
   3044e:	1c51      	adds	r1, r2, #1
   30450:	e840 1400 	strex	r4, r1, [r0]
   30454:	2c00      	cmp	r4, #0
   30456:	d1f8      	bne.n	3044a <adc_context_on_timer_expired+0xa>
   30458:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   3045c:	b912      	cbnz	r2, 30464 <adc_context_on_timer_expired+0x24>
}
   3045e:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   30460:	f7fa bf28 	b.w	2b2b4 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   30464:	f06f 020f 	mvn.w	r2, #15
}
   30468:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   3046a:	659a      	str	r2, [r3, #88]	; 0x58
}
   3046c:	4770      	bx	lr

0003046e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   3046e:	6903      	ldr	r3, [r0, #16]
   30470:	b2c9      	uxtb	r1, r1
   30472:	220c      	movs	r2, #12
   30474:	fb01 3302 	mla	r3, r1, r2, r3
   30478:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   3047a:	f000 0007 	and.w	r0, r0, #7
   3047e:	4770      	bx	lr

00030480 <set_on_state>:
	__asm__ volatile(
   30480:	f04f 0320 	mov.w	r3, #32
   30484:	f3ef 8211 	mrs	r2, BASEPRI
   30488:	f383 8812 	msr	BASEPRI_MAX, r3
   3048c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   30490:	6803      	ldr	r3, [r0, #0]
   30492:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   30496:	f043 0302 	orr.w	r3, r3, #2
   3049a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   3049c:	f382 8811 	msr	BASEPRI, r2
   304a0:	f3bf 8f6f 	isb	sy
}
   304a4:	4770      	bx	lr

000304a6 <stop>:
{
   304a6:	b570      	push	{r4, r5, r6, lr}
   304a8:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   304aa:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   304ac:	f04f 0420 	mov.w	r4, #32
   304b0:	f3ef 8511 	mrs	r5, BASEPRI
   304b4:	f384 8812 	msr	BASEPRI_MAX, r4
   304b8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   304bc:	260c      	movs	r6, #12
   304be:	fb06 3401 	mla	r4, r6, r1, r3
   304c2:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   304c4:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   304c8:	d008      	beq.n	304dc <stop+0x36>
   304ca:	42a2      	cmp	r2, r4
   304cc:	d006      	beq.n	304dc <stop+0x36>
	__asm__ volatile(
   304ce:	f385 8811 	msr	BASEPRI, r5
   304d2:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   304d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   304da:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   304dc:	4371      	muls	r1, r6
   304de:	440b      	add	r3, r1
   304e0:	2201      	movs	r2, #1
   304e2:	641a      	str	r2, [r3, #64]	; 0x40
   304e4:	f385 8811 	msr	BASEPRI, r5
   304e8:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   304ec:	6843      	ldr	r3, [r0, #4]
   304ee:	440b      	add	r3, r1
   304f0:	685b      	ldr	r3, [r3, #4]
   304f2:	4798      	blx	r3
	return 0;
   304f4:	2000      	movs	r0, #0
   304f6:	e7f0      	b.n	304da <stop+0x34>

000304f8 <api_stop>:
	return stop(dev, subsys, CTX_API);
   304f8:	2280      	movs	r2, #128	; 0x80
   304fa:	f7ff bfd4 	b.w	304a6 <stop>

000304fe <async_start>:
{
   304fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30500:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   30502:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   30504:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   30506:	f04f 0520 	mov.w	r5, #32
   3050a:	f3ef 8611 	mrs	r6, BASEPRI
   3050e:	f385 8812 	msr	BASEPRI_MAX, r5
   30512:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   30516:	250c      	movs	r5, #12
   30518:	4369      	muls	r1, r5
   3051a:	440c      	add	r4, r1
   3051c:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3051e:	f005 0c07 	and.w	ip, r5, #7
   30522:	f1bc 0f01 	cmp.w	ip, #1
   30526:	d10b      	bne.n	30540 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   30528:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   3052a:	f386 8811 	msr	BASEPRI, r6
   3052e:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   30532:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   30536:	6843      	ldr	r3, [r0, #4]
   30538:	585b      	ldr	r3, [r3, r1]
   3053a:	4798      	blx	r3
	return 0;
   3053c:	2000      	movs	r0, #0
}
   3053e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   30540:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   30544:	42af      	cmp	r7, r5
   30546:	f386 8811 	msr	BASEPRI, r6
   3054a:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   3054e:	bf0c      	ite	eq
   30550:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   30554:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   30558:	e7f1      	b.n	3053e <async_start+0x40>

0003055a <api_start>:
{
   3055a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   3055c:	2480      	movs	r4, #128	; 0x80
   3055e:	9400      	str	r4, [sp, #0]
   30560:	f7ff ffcd 	bl	304fe <async_start>
}
   30564:	b002      	add	sp, #8
   30566:	bd10      	pop	{r4, pc}

00030568 <onoff_started_callback>:
{
   30568:	b410      	push	{r4}
	return &data->mgr[type];
   3056a:	6900      	ldr	r0, [r0, #16]
   3056c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   3056e:	241c      	movs	r4, #28
   30570:	fb03 0004 	mla	r0, r3, r4, r0
   30574:	2100      	movs	r1, #0
}
   30576:	bc10      	pop	{r4}
	notify(mgr, 0);
   30578:	4710      	bx	r2

0003057a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   3057a:	2000      	movs	r0, #0
   3057c:	f000 b883 	b.w	30686 <nrfx_clock_start>

00030580 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   30580:	2000      	movs	r0, #0
   30582:	f000 b8bc 	b.w	306fe <nrfx_clock_stop>

00030586 <blocking_start_callback>:
{
   30586:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   30588:	f7fd bec0 	b.w	2e30c <z_impl_k_sem_give>

0003058c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3058c:	6843      	ldr	r3, [r0, #4]
   3058e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   30590:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   30594:	600b      	str	r3, [r1, #0]
}
   30596:	2000      	movs	r0, #0
   30598:	4770      	bx	lr

0003059a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3059a:	6843      	ldr	r3, [r0, #4]
   3059c:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   3059e:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   305a2:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   305a6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   305aa:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   305ae:	2000      	movs	r0, #0
   305b0:	4770      	bx	lr

000305b2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   305b2:	6843      	ldr	r3, [r0, #4]
   305b4:	685b      	ldr	r3, [r3, #4]
}
   305b6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   305b8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   305bc:	4770      	bx	lr

000305be <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   305be:	6843      	ldr	r3, [r0, #4]
   305c0:	685b      	ldr	r3, [r3, #4]
}
   305c2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   305c4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   305c8:	4770      	bx	lr

000305ca <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   305ca:	6843      	ldr	r3, [r0, #4]
   305cc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   305ce:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   305d2:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   305d6:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   305d8:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   305dc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   305e0:	2000      	movs	r0, #0
   305e2:	4770      	bx	lr

000305e4 <gpio_nrfx_manage_callback>:
{
   305e4:	b510      	push	{r4, lr}
	return port->data;
   305e6:	6903      	ldr	r3, [r0, #16]
	return list->head;
   305e8:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   305ea:	b1f8      	cbz	r0, 3062c <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   305ec:	4288      	cmp	r0, r1
   305ee:	d119      	bne.n	30624 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   305f0:	689c      	ldr	r4, [r3, #8]
	return node->next;
   305f2:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   305f4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   305f6:	42a1      	cmp	r1, r4
   305f8:	d100      	bne.n	305fc <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   305fa:	6098      	str	r0, [r3, #8]
	parent->next = child;
   305fc:	2000      	movs	r0, #0
   305fe:	6008      	str	r0, [r1, #0]
	if (set) {
   30600:	b12a      	cbz	r2, 3060e <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   30602:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   30604:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   30606:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   30608:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   3060a:	b902      	cbnz	r2, 3060e <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   3060c:	6099      	str	r1, [r3, #8]
	return 0;
   3060e:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   30610:	e010      	b.n	30634 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30612:	4281      	cmp	r1, r0
   30614:	d106      	bne.n	30624 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   30616:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   30618:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   3061a:	6898      	ldr	r0, [r3, #8]
   3061c:	4281      	cmp	r1, r0
   3061e:	d1ed      	bne.n	305fc <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   30620:	609c      	str	r4, [r3, #8]
}
   30622:	e7eb      	b.n	305fc <gpio_nrfx_manage_callback+0x18>
	return node->next;
   30624:	4604      	mov	r4, r0
   30626:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30628:	2800      	cmp	r0, #0
   3062a:	d1f2      	bne.n	30612 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   3062c:	2a00      	cmp	r2, #0
   3062e:	d1e8      	bne.n	30602 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   30630:	f06f 0015 	mvn.w	r0, #21
}
   30634:	bd10      	pop	{r4, pc}

00030636 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   30636:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   30638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
   3063c:	2908      	cmp	r1, #8
   3063e:	6e13      	ldr	r3, [r2, #96]	; 0x60
   30640:	6e52      	ldr	r2, [r2, #100]	; 0x64
   30642:	bf28      	it	cs
   30644:	2108      	movcs	r1, #8
   30646:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
   30648:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   3064a:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
   3064c:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   3064e:	460a      	mov	r2, r1
   30650:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   30652:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   30654:	f7ff fe80 	bl	30358 <memcpy>

	return length;
}
   30658:	4620      	mov	r0, r4
   3065a:	b002      	add	sp, #8
   3065c:	bd10      	pop	{r4, pc}

0003065e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3065e:	4770      	bx	lr

00030660 <event_clear>:
	nrf_rtc_event_clear(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
   30660:	f100 0350 	add.w	r3, r0, #80	; 0x50
   30664:	009b      	lsls	r3, r3, #2
   30666:	b29b      	uxth	r3, r3
   30668:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3066c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   30670:	2200      	movs	r2, #0
   30672:	601a      	str	r2, [r3, #0]
   30674:	681b      	ldr	r3, [r3, #0]
}
   30676:	4770      	bx	lr

00030678 <sys_clock_cycle_get_32>:
{
   30678:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   3067a:	f7fb fbad 	bl	2bdd8 <z_nrf_rtc_timer_read>
}
   3067e:	bd08      	pop	{r3, pc}

00030680 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   30680:	4700      	bx	r0

00030682 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   30682:	f000 bc0d 	b.w	30ea0 <z_impl_k_busy_wait>

00030686 <nrfx_clock_start>:
{
   30686:	b508      	push	{r3, lr}
    switch (domain)
   30688:	b110      	cbz	r0, 30690 <nrfx_clock_start+0xa>
   3068a:	2801      	cmp	r0, #1
   3068c:	d02c      	beq.n	306e8 <nrfx_clock_start+0x62>
}
   3068e:	bd08      	pop	{r3, pc}
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   30690:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   30694:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   30698:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc))
   3069c:	03c8      	lsls	r0, r1, #15
   3069e:	d517      	bpl.n	306d0 <nrfx_clock_start+0x4a>
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
   306a0:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   306a4:	2b01      	cmp	r3, #1
   306a6:	d004      	beq.n	306b2 <nrfx_clock_start+0x2c>
   306a8:	b113      	cbz	r3, 306b0 <nrfx_clock_start+0x2a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   306aa:	2000      	movs	r0, #0
   306ac:	f7fb fe7a 	bl	2c3a4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   306b0:	2300      	movs	r3, #0
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   306b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   306b6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   306ba:	2300      	movs	r3, #0
   306bc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   306c0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   306c4:	2302      	movs	r3, #2
   306c6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   306ca:	2301      	movs	r3, #1
   306cc:	6093      	str	r3, [r2, #8]
}
   306ce:	e7de      	b.n	3068e <nrfx_clock_start+0x8>
            return ((p_reg->NRF_LFCLKRUN & NRF_CLOCK_LFCLKRUN_STATUS_Msk)
   306d0:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   306d4:	07d9      	lsls	r1, r3, #31
   306d6:	d5eb      	bpl.n	306b0 <nrfx_clock_start+0x2a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   306d8:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   306dc:	079b      	lsls	r3, r3, #30
   306de:	d4e4      	bmi.n	306aa <nrfx_clock_start+0x24>
    p_reg->INTENSET = mask;
   306e0:	2302      	movs	r3, #2
   306e2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   306e6:	e7d2      	b.n	3068e <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   306e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   306ec:	2200      	movs	r2, #0
   306ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   306f2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   306f6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   306fa:	6018      	str	r0, [r3, #0]
}
   306fc:	e7c7      	b.n	3068e <nrfx_clock_start+0x8>

000306fe <nrfx_clock_stop>:
    clock_stop(domain);
   306fe:	f7fb be51 	b.w	2c3a4 <clock_stop>

00030702 <nrf_gpio_reconfigure>:
{
   30702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   30704:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30706:	a801      	add	r0, sp, #4
{
   30708:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   3070c:	4616      	mov	r6, r2
   3070e:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30710:	f7fb ff00 	bl	2c514 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   30714:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
   30716:	f1b6 0c00 	subs.w	ip, r6, #0
   3071a:	bf18      	it	ne
   3071c:	f04f 0c01 	movne.w	ip, #1
   30720:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   30724:	1e0b      	subs	r3, r1, #0
   30726:	bf18      	it	ne
   30728:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   3072a:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   3072c:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   30730:	bf14      	ite	ne
   30732:	f04f 0c0c 	movne.w	ip, #12
   30736:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
   3073a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
   3073c:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
   30740:	bf14      	ite	ne
   30742:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   30746:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
   3074a:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   3074c:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   30750:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
   30754:	bf14      	ite	ne
   30756:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   3075a:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   3075e:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   30762:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
   30766:	b101      	cbz	r1, 3076a <nrf_gpio_reconfigure+0x68>
   30768:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos)  |
   3076a:	b10e      	cbz	r6, 30770 <nrf_gpio_reconfigure+0x6e>
   3076c:	7836      	ldrb	r6, [r6, #0]
   3076e:	0076      	lsls	r6, r6, #1
   30770:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)   |
   30772:	b10d      	cbz	r5, 30778 <nrf_gpio_reconfigure+0x76>
   30774:	782d      	ldrb	r5, [r5, #0]
   30776:	00ad      	lsls	r5, r5, #2
   30778:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos)  |
   3077a:	b10c      	cbz	r4, 30780 <nrf_gpio_reconfigure+0x7e>
   3077c:	7824      	ldrb	r4, [r4, #0]
   3077e:	0224      	lsls	r4, r4, #8
   30780:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   30782:	b10f      	cbz	r7, 30788 <nrf_gpio_reconfigure+0x86>
   30784:	783f      	ldrb	r7, [r7, #0]
   30786:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
   30788:	430c      	orrs	r4, r1
   3078a:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   3078c:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   30790:	b003      	add	sp, #12
   30792:	bdf0      	pop	{r4, r5, r6, r7, pc}

00030794 <nrf_gpio_cfg_sense_set>:
{
   30794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   30796:	f10d 030f 	add.w	r3, sp, #15
   3079a:	9301      	str	r3, [sp, #4]
   3079c:	2300      	movs	r3, #0
{
   3079e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   307a2:	9300      	str	r3, [sp, #0]
   307a4:	461a      	mov	r2, r3
   307a6:	4619      	mov	r1, r3
   307a8:	f7ff ffab 	bl	30702 <nrf_gpio_reconfigure>
}
   307ac:	b005      	add	sp, #20
   307ae:	f85d fb04 	ldr.w	pc, [sp], #4

000307b2 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   307b2:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   307b6:	681a      	ldr	r2, [r3, #0]
   307b8:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   307ba:	bf1f      	itttt	ne
   307bc:	2200      	movne	r2, #0
   307be:	601a      	strne	r2, [r3, #0]
   307c0:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   307c2:	2001      	movne	r0, #1
   307c4:	bf08      	it	eq
   307c6:	2000      	moveq	r0, #0
}
   307c8:	4770      	bx	lr

000307ca <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   307ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   307ce:	f44f 7260 	mov.w	r2, #896	; 0x380
   307d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   307d6:	4770      	bx	lr

000307d8 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   307d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   307dc:	f44f 7260 	mov.w	r2, #896	; 0x380
   307e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   307e4:	4770      	bx	lr

000307e6 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   307e6:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   307e8:	f7fc fa48 	bl	2cc7c <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   307ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   307f0:	f7fb be5c 	b.w	2c4ac <nrfx_clock_irq_handler>

000307f4 <nrfx_usbd_consumer>:
{
   307f4:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   307f6:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   307f8:	429c      	cmp	r4, r3
   307fa:	d209      	bcs.n	30810 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
   307fc:	2500      	movs	r5, #0
   307fe:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   30800:	6809      	ldr	r1, [r1, #0]
   30802:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   30804:	429a      	cmp	r2, r3
   30806:	d10c      	bne.n	30822 <nrfx_usbd_consumer+0x2e>
   30808:	1e20      	subs	r0, r4, #0
   3080a:	bf18      	it	ne
   3080c:	2001      	movne	r0, #1
}
   3080e:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
   30810:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   30812:	680d      	ldr	r5, [r1, #0]
   30814:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
   30816:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
   30818:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   3081a:	4418      	add	r0, r3
        p_transfer->size = size;
   3081c:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   3081e:	6008      	str	r0, [r1, #0]
   30820:	e7f0      	b.n	30804 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   30822:	2000      	movs	r0, #0
   30824:	e7f3      	b.n	3080e <nrfx_usbd_consumer+0x1a>

00030826 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
   30826:	684b      	ldr	r3, [r1, #4]
   30828:	429a      	cmp	r2, r3
   3082a:	bf28      	it	cs
   3082c:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
   3082e:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
   30830:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
   30834:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   30836:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   30838:	1a80      	subs	r0, r0, r2
   3083a:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   3083c:	4413      	add	r3, r2
}
   3083e:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   30840:	600b      	str	r3, [r1, #0]
}
   30842:	bf18      	it	ne
   30844:	2001      	movne	r0, #1
   30846:	4770      	bx	lr

00030848 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
   30848:	684b      	ldr	r3, [r1, #4]
   3084a:	429a      	cmp	r2, r3
   3084c:	bf28      	it	cs
   3084e:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   30850:	b162      	cbz	r2, 3086c <nrfx_usbd_feeder_ram_zlp+0x24>
   30852:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
   30854:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
   30858:	684b      	ldr	r3, [r1, #4]
   3085a:	1a9b      	subs	r3, r3, r2
   3085c:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   3085e:	680b      	ldr	r3, [r1, #0]
}
   30860:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
   30862:	4413      	add	r3, r2
   30864:	600b      	str	r3, [r1, #0]
}
   30866:	bf18      	it	ne
   30868:	2001      	movne	r0, #1
   3086a:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   3086c:	4613      	mov	r3, r2
   3086e:	e7f1      	b.n	30854 <nrfx_usbd_feeder_ram_zlp+0xc>

00030870 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   30870:	43c3      	mvns	r3, r0
   30872:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   30876:	f000 000f 	and.w	r0, r0, #15
}
   3087a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   3087e:	4770      	bx	lr

00030880 <ev_started_handler>:
}
   30880:	4770      	bx	lr

00030882 <nrf_usbd_epin_dma_handler>:
{
   30882:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   30884:	f7fc fb68 	bl	2cf58 <usbd_dma_pending_clear>
{
   30888:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   3088a:	f7fc fa5b 	bl	2cd44 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   3088e:	7b83      	ldrb	r3, [r0, #14]
   30890:	2b03      	cmp	r3, #3
   30892:	d10a      	bne.n	308aa <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   30894:	4608      	mov	r0, r1
   30896:	f7ff ffeb 	bl	30870 <ep2bit>
   3089a:	2301      	movs	r3, #1
   3089c:	fa03 f000 	lsl.w	r0, r3, r0
   308a0:	43c0      	mvns	r0, r0
}
   308a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   308a6:	f7fc bb47 	b.w	2cf38 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   308aa:	6803      	ldr	r3, [r0, #0]
   308ac:	2b00      	cmp	r3, #0
   308ae:	d0f1      	beq.n	30894 <nrf_usbd_epin_dma_handler+0x12>
}
   308b0:	bd08      	pop	{r3, pc}

000308b2 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   308b2:	2087      	movs	r0, #135	; 0x87
   308b4:	f7ff bfe5 	b.w	30882 <nrf_usbd_epin_dma_handler>

000308b8 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   308b8:	2086      	movs	r0, #134	; 0x86
   308ba:	f7ff bfe2 	b.w	30882 <nrf_usbd_epin_dma_handler>

000308be <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   308be:	2085      	movs	r0, #133	; 0x85
   308c0:	f7ff bfdf 	b.w	30882 <nrf_usbd_epin_dma_handler>

000308c4 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   308c4:	2084      	movs	r0, #132	; 0x84
   308c6:	f7ff bfdc 	b.w	30882 <nrf_usbd_epin_dma_handler>

000308ca <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   308ca:	2083      	movs	r0, #131	; 0x83
   308cc:	f7ff bfd9 	b.w	30882 <nrf_usbd_epin_dma_handler>

000308d0 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   308d0:	2082      	movs	r0, #130	; 0x82
   308d2:	f7ff bfd6 	b.w	30882 <nrf_usbd_epin_dma_handler>

000308d6 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   308d6:	2081      	movs	r0, #129	; 0x81
   308d8:	f7ff bfd3 	b.w	30882 <nrf_usbd_epin_dma_handler>

000308dc <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   308dc:	f7fc bb4e 	b.w	2cf7c <nrf_usbd_ep0in_dma_handler>

000308e0 <nrfx_usbd_ep_max_packet_size_set>:
{
   308e0:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   308e2:	f7fc fa2f 	bl	2cd44 <ep_state_access>
    p_state->max_packet_size = size;
   308e6:	8181      	strh	r1, [r0, #12]
}
   308e8:	bd08      	pop	{r3, pc}

000308ea <nrfx_usbd_ep_status_get>:
{
   308ea:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   308ec:	f7fc fa2a 	bl	2cd44 <ep_state_access>
	__asm__ volatile(
   308f0:	f04f 0220 	mov.w	r2, #32
   308f4:	f3ef 8311 	mrs	r3, BASEPRI
   308f8:	f382 8812 	msr	BASEPRI_MAX, r2
   308fc:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   30900:	6882      	ldr	r2, [r0, #8]
   30902:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   30904:	6802      	ldr	r2, [r0, #0]
   30906:	b92a      	cbnz	r2, 30914 <nrfx_usbd_ep_status_get+0x2a>
   30908:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   3090a:	f383 8811 	msr	BASEPRI, r3
   3090e:	f3bf 8f6f 	isb	sy
}
   30912:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   30914:	2004      	movs	r0, #4
   30916:	e7f8      	b.n	3090a <nrfx_usbd_ep_status_get+0x20>

00030918 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   30918:	2007      	movs	r0, #7
   3091a:	f7fc be9b 	b.w	2d654 <nrf_usbd_epout_dma_handler>

0003091e <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   3091e:	2006      	movs	r0, #6
   30920:	f7fc be98 	b.w	2d654 <nrf_usbd_epout_dma_handler>

00030924 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   30924:	2005      	movs	r0, #5
   30926:	f7fc be95 	b.w	2d654 <nrf_usbd_epout_dma_handler>

0003092a <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   3092a:	2004      	movs	r0, #4
   3092c:	f7fc be92 	b.w	2d654 <nrf_usbd_epout_dma_handler>

00030930 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   30930:	2003      	movs	r0, #3
   30932:	f7fc be8f 	b.w	2d654 <nrf_usbd_epout_dma_handler>

00030936 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   30936:	2002      	movs	r0, #2
   30938:	f7fc be8c 	b.w	2d654 <nrf_usbd_epout_dma_handler>

0003093c <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   3093c:	2001      	movs	r0, #1
   3093e:	f7fc be89 	b.w	2d654 <nrf_usbd_epout_dma_handler>

00030942 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   30942:	f7fc bf7d 	b.w	2d840 <usbd_ep_abort>

00030946 <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		z_object_init(dev);
	}
}
   30946:	4770      	bx	lr

00030948 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   30948:	b140      	cbz	r0, 3095c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   3094a:	68c3      	ldr	r3, [r0, #12]
   3094c:	7858      	ldrb	r0, [r3, #1]
   3094e:	f010 0001 	ands.w	r0, r0, #1
   30952:	bf1e      	ittt	ne
   30954:	7818      	ldrbne	r0, [r3, #0]
   30956:	fab0 f080 	clzne	r0, r0
   3095a:	0940      	lsrne	r0, r0, #5
}
   3095c:	4770      	bx	lr

0003095e <arch_system_halt>:
	__asm__ volatile(
   3095e:	f04f 0220 	mov.w	r2, #32
   30962:	f3ef 8311 	mrs	r3, BASEPRI
   30966:	f382 8812 	msr	BASEPRI_MAX, r2
   3096a:	f3bf 8f6f 	isb	sy
	for (;;) {
   3096e:	e7fe      	b.n	3096e <arch_system_halt+0x10>

00030970 <z_early_memset>:
	(void) memset(dst, c, n);
   30970:	f7ff bcfd 	b.w	3036e <memset>

00030974 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   30974:	f7ff bcf0 	b.w	30358 <memcpy>

00030978 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   30978:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   3097c:	4313      	orrs	r3, r2
   3097e:	f013 0303 	ands.w	r3, r3, #3
   30982:	d10c      	bne.n	3099e <create_free_list+0x26>
	slab->free_list = NULL;
   30984:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   30986:	6881      	ldr	r1, [r0, #8]
   30988:	4299      	cmp	r1, r3
   3098a:	d801      	bhi.n	30990 <create_free_list+0x18>
	return 0;
   3098c:	2000      	movs	r0, #0
   3098e:	4770      	bx	lr
		*(char **)p = slab->free_list;
   30990:	6941      	ldr	r1, [r0, #20]
   30992:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   30994:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   30996:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   30998:	3301      	adds	r3, #1
		p += slab->block_size;
   3099a:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   3099c:	e7f3      	b.n	30986 <create_free_list+0xe>
		return -EINVAL;
   3099e:	f06f 0015 	mvn.w	r0, #21
}
   309a2:	4770      	bx	lr

000309a4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   309a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   309a6:	4604      	mov	r4, r0
   309a8:	460d      	mov	r5, r1
   309aa:	f04f 0320 	mov.w	r3, #32
   309ae:	f3ef 8611 	mrs	r6, BASEPRI
   309b2:	f383 8812 	msr	BASEPRI_MAX, r3
   309b6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   309ba:	6947      	ldr	r7, [r0, #20]
   309bc:	b977      	cbnz	r7, 309dc <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   309be:	f000 f9c6 	bl	30d4e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   309c2:	b158      	cbz	r0, 309dc <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   309c4:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   309c6:	6142      	str	r2, [r0, #20]
   309c8:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
   309ca:	f000 f961 	bl	30c90 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   309ce:	4631      	mov	r1, r6
   309d0:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   309d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   309d8:	f7fd bfe2 	b.w	2e9a0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   309dc:	682b      	ldr	r3, [r5, #0]
   309de:	6962      	ldr	r2, [r4, #20]
   309e0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   309e2:	682b      	ldr	r3, [r5, #0]
   309e4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   309e6:	69a3      	ldr	r3, [r4, #24]
   309e8:	3b01      	subs	r3, #1
   309ea:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   309ec:	f386 8811 	msr	BASEPRI, r6
   309f0:	f3bf 8f6f 	isb	sy
}
   309f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000309f6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   309f6:	f3ef 8005 	mrs	r0, IPSR
}
   309fa:	3800      	subs	r0, #0
   309fc:	bf18      	it	ne
   309fe:	2001      	movne	r0, #1
   30a00:	4770      	bx	lr

00030a02 <z_impl_k_thread_name_set>:
}
   30a02:	f06f 0057 	mvn.w	r0, #87	; 0x57
   30a06:	4770      	bx	lr

00030a08 <k_thread_name_get>:
}
   30a08:	2000      	movs	r0, #0
   30a0a:	4770      	bx	lr

00030a0c <z_impl_k_thread_start>:
	z_sched_start(thread);
   30a0c:	f7fd bfda 	b.w	2e9c4 <z_sched_start>

00030a10 <z_pm_save_idle_exit>:
{
   30a10:	b508      	push	{r3, lr}
	pm_system_resume();
   30a12:	f7f7 fc0f 	bl	28234 <pm_system_resume>
}
   30a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   30a1a:	f7ff be20 	b.w	3065e <sys_clock_idle_exit>

00030a1e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   30a1e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   30a22:	428b      	cmp	r3, r1
   30a24:	d001      	beq.n	30a2a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   30a26:	f7fd bf75 	b.w	2e914 <z_set_prio>
}
   30a2a:	2000      	movs	r0, #0
   30a2c:	4770      	bx	lr

00030a2e <z_impl_k_mutex_init>:
{
   30a2e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   30a30:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   30a32:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
   30a36:	e9c3 3300 	strd	r3, r3, [r3]
}
   30a3a:	4770      	bx	lr

00030a3c <queue_insert>:
{
   30a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30a40:	4699      	mov	r9, r3
   30a42:	4604      	mov	r4, r0
   30a44:	f89d 3020 	ldrb.w	r3, [sp, #32]
   30a48:	460d      	mov	r5, r1
   30a4a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   30a4c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   30a50:	f04f 0220 	mov.w	r2, #32
   30a54:	f3ef 8711 	mrs	r7, BASEPRI
   30a58:	f382 8812 	msr	BASEPRI_MAX, r2
   30a5c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   30a60:	b103      	cbz	r3, 30a64 <queue_insert+0x28>
	return list->tail;
   30a62:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   30a64:	4630      	mov	r0, r6
   30a66:	f000 f972 	bl	30d4e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   30a6a:	b158      	cbz	r0, 30a84 <queue_insert+0x48>
   30a6c:	2300      	movs	r3, #0
   30a6e:	6783      	str	r3, [r0, #120]	; 0x78
   30a70:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   30a74:	f000 f90c 	bl	30c90 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   30a78:	4630      	mov	r0, r6
   30a7a:	4639      	mov	r1, r7
   30a7c:	f7fd ff90 	bl	2e9a0 <z_reschedule>
		return 0;
   30a80:	2000      	movs	r0, #0
   30a82:	e00c      	b.n	30a9e <queue_insert+0x62>
	if (alloc) {
   30a84:	f1b9 0f00 	cmp.w	r9, #0
   30a88:	d01c      	beq.n	30ac4 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   30a8a:	2108      	movs	r1, #8
   30a8c:	f7fe fb52 	bl	2f134 <z_thread_aligned_alloc>
		if (anode == NULL) {
   30a90:	b938      	cbnz	r0, 30aa2 <queue_insert+0x66>
	__asm__ volatile(
   30a92:	f387 8811 	msr	BASEPRI, r7
   30a96:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   30a9a:	f06f 000b 	mvn.w	r0, #11
}
   30a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   30aa2:	2201      	movs	r2, #1
		anode->data = data;
   30aa4:	f8c0 8004 	str.w	r8, [r0, #4]
   30aa8:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30aaa:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   30aac:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   30ab0:	b965      	cbnz	r5, 30acc <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   30ab2:	6822      	ldr	r2, [r4, #0]
   30ab4:	430a      	orrs	r2, r1
   30ab6:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   30ab8:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   30aba:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   30abc:	2a00      	cmp	r2, #0
   30abe:	d1db      	bne.n	30a78 <queue_insert+0x3c>
	list->tail = node;
   30ac0:	6060      	str	r0, [r4, #4]
}
   30ac2:	e7d9      	b.n	30a78 <queue_insert+0x3c>
	node->next_and_flags = flags;
   30ac4:	f8c8 9000 	str.w	r9, [r8]
}
   30ac8:	4640      	mov	r0, r8
   30aca:	e7ee      	b.n	30aaa <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   30acc:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   30ace:	2a03      	cmp	r2, #3
   30ad0:	d80b      	bhi.n	30aea <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
   30ad2:	6001      	str	r1, [r0, #0]
	return list->tail;
   30ad4:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   30ad6:	b911      	cbnz	r1, 30ade <queue_insert+0xa2>
	list->head = node;
   30ad8:	e9c4 0000 	strd	r0, r0, [r4]
}
   30adc:	e7cc      	b.n	30a78 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30ade:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   30ae0:	f002 0203 	and.w	r2, r2, #3
   30ae4:	4302      	orrs	r2, r0
   30ae6:	600a      	str	r2, [r1, #0]
   30ae8:	e7ea      	b.n	30ac0 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   30aea:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   30aee:	430a      	orrs	r2, r1
   30af0:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30af2:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   30af4:	f002 0203 	and.w	r2, r2, #3
   30af8:	ea40 0302 	orr.w	r3, r0, r2
   30afc:	602b      	str	r3, [r5, #0]
}
   30afe:	e7bb      	b.n	30a78 <queue_insert+0x3c>

00030b00 <z_queue_node_peek>:
{
   30b00:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   30b02:	4604      	mov	r4, r0
   30b04:	b130      	cbz	r0, 30b14 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   30b06:	6802      	ldr	r2, [r0, #0]
   30b08:	0793      	lsls	r3, r2, #30
   30b0a:	d003      	beq.n	30b14 <z_queue_node_peek+0x14>
		ret = anode->data;
   30b0c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   30b0e:	b109      	cbz	r1, 30b14 <z_queue_node_peek+0x14>
			k_free(anode);
   30b10:	f000 fa28 	bl	30f64 <k_free>
}
   30b14:	4620      	mov	r0, r4
   30b16:	bd10      	pop	{r4, pc}

00030b18 <k_queue_append>:
{
   30b18:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   30b1a:	2301      	movs	r3, #1
   30b1c:	9300      	str	r3, [sp, #0]
   30b1e:	2300      	movs	r3, #0
{
   30b20:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   30b22:	4619      	mov	r1, r3
   30b24:	f7ff ff8a 	bl	30a3c <queue_insert>
}
   30b28:	b003      	add	sp, #12
   30b2a:	f85d fb04 	ldr.w	pc, [sp], #4

00030b2e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   30b2e:	b13a      	cbz	r2, 30b40 <z_impl_k_sem_init+0x12>
   30b30:	428a      	cmp	r2, r1
   30b32:	d305      	bcc.n	30b40 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   30b34:	e9c0 1202 	strd	r1, r2, [r0, #8]
   30b38:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   30b3c:	2000      	movs	r0, #0
   30b3e:	4770      	bx	lr
		return -EINVAL;
   30b40:	f06f 0015 	mvn.w	r0, #21
}
   30b44:	4770      	bx	lr

00030b46 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   30b46:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   30b48:	2301      	movs	r3, #1
   30b4a:	408b      	lsls	r3, r1
   30b4c:	ea22 0303 	bic.w	r3, r2, r3
   30b50:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   30b52:	fa22 f001 	lsr.w	r0, r2, r1
}
   30b56:	f000 0001 	and.w	r0, r0, #1
   30b5a:	4770      	bx	lr

00030b5c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   30b5c:	b120      	cbz	r0, 30b68 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   30b5e:	2200      	movs	r2, #0
   30b60:	4611      	mov	r1, r2
   30b62:	3088      	adds	r0, #136	; 0x88
   30b64:	f000 b94d 	b.w	30e02 <z_sched_wake>
}
   30b68:	4770      	bx	lr

00030b6a <work_timeout>:
{
   30b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30b6c:	4604      	mov	r4, r0
	__asm__ volatile(
   30b6e:	f04f 0320 	mov.w	r3, #32
   30b72:	f3ef 8511 	mrs	r5, BASEPRI
   30b76:	f383 8812 	msr	BASEPRI_MAX, r3
   30b7a:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   30b7e:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   30b80:	f1a0 0610 	sub.w	r6, r0, #16
   30b84:	2103      	movs	r1, #3
   30b86:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   30b88:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   30b8a:	f7ff ffdc 	bl	30b46 <flag_test_and_clear>
   30b8e:	b128      	cbz	r0, 30b9c <work_timeout+0x32>
		queue = dw->queue;
   30b90:	69a3      	ldr	r3, [r4, #24]
   30b92:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   30b94:	a901      	add	r1, sp, #4
   30b96:	4630      	mov	r0, r6
   30b98:	f7fd fca0 	bl	2e4dc <submit_to_queue_locked>
	__asm__ volatile(
   30b9c:	f385 8811 	msr	BASEPRI, r5
   30ba0:	f3bf 8f6f 	isb	sy
}
   30ba4:	b002      	add	sp, #8
   30ba6:	bd70      	pop	{r4, r5, r6, pc}

00030ba8 <k_work_init>:
{
   30ba8:	b538      	push	{r3, r4, r5, lr}
   30baa:	4604      	mov	r4, r0
   30bac:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   30bae:	2210      	movs	r2, #16
   30bb0:	2100      	movs	r1, #0
   30bb2:	f7ff fbdc 	bl	3036e <memset>
   30bb6:	6065      	str	r5, [r4, #4]
}
   30bb8:	bd38      	pop	{r3, r4, r5, pc}

00030bba <z_work_submit_to_queue>:
{
   30bba:	b513      	push	{r0, r1, r4, lr}
   30bbc:	9001      	str	r0, [sp, #4]
   30bbe:	4608      	mov	r0, r1
	__asm__ volatile(
   30bc0:	f04f 0320 	mov.w	r3, #32
   30bc4:	f3ef 8411 	mrs	r4, BASEPRI
   30bc8:	f383 8812 	msr	BASEPRI_MAX, r3
   30bcc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   30bd0:	a901      	add	r1, sp, #4
   30bd2:	f7fd fc83 	bl	2e4dc <submit_to_queue_locked>
	__asm__ volatile(
   30bd6:	f384 8811 	msr	BASEPRI, r4
   30bda:	f3bf 8f6f 	isb	sy
}
   30bde:	b002      	add	sp, #8
   30be0:	bd10      	pop	{r4, pc}

00030be2 <k_work_submit_to_queue>:
{
   30be2:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   30be4:	f7ff ffe9 	bl	30bba <z_work_submit_to_queue>
	if (ret > 0) {
   30be8:	1e04      	subs	r4, r0, #0
   30bea:	dd09      	ble.n	30c00 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   30bec:	f04f 0320 	mov.w	r3, #32
   30bf0:	f3ef 8011 	mrs	r0, BASEPRI
   30bf4:	f383 8812 	msr	BASEPRI_MAX, r3
   30bf8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   30bfc:	f000 f8db 	bl	30db6 <z_reschedule_irqlock>
}
   30c00:	4620      	mov	r0, r4
   30c02:	bd10      	pop	{r4, pc}

00030c04 <k_work_init_delayable>:
{
   30c04:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   30c06:	2230      	movs	r2, #48	; 0x30
{
   30c08:	4604      	mov	r4, r0
   30c0a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   30c0c:	2100      	movs	r1, #0
   30c0e:	f7ff fbae 	bl	3036e <memset>
   30c12:	f44f 7380 	mov.w	r3, #256	; 0x100
   30c16:	6065      	str	r5, [r4, #4]
   30c18:	60e3      	str	r3, [r4, #12]
}
   30c1a:	bd38      	pop	{r3, r4, r5, pc}

00030c1c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   30c1c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   30c20:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30c22:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30c24:	2300      	movs	r3, #0
	node->prev = NULL;
   30c26:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   30c2a:	4770      	bx	lr

00030c2c <unpend_thread_no_timeout>:
{
   30c2c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   30c2e:	f7ff fff5 	bl	30c1c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   30c32:	7b43      	ldrb	r3, [r0, #13]
   30c34:	f023 0302 	bic.w	r3, r3, #2
   30c38:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   30c3a:	2300      	movs	r3, #0
   30c3c:	6083      	str	r3, [r0, #8]
}
   30c3e:	bd08      	pop	{r3, pc}

00030c40 <add_to_waitq_locked>:
{
   30c40:	b538      	push	{r3, r4, r5, lr}
   30c42:	4604      	mov	r4, r0
   30c44:	460d      	mov	r5, r1
	unready_thread(thread);
   30c46:	f7fd fde7 	bl	2e818 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   30c4a:	7b63      	ldrb	r3, [r4, #13]
   30c4c:	f043 0302 	orr.w	r3, r3, #2
   30c50:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   30c52:	b1e5      	cbz	r5, 30c8e <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   30c54:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   30c56:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30c58:	429d      	cmp	r5, r3
   30c5a:	d109      	bne.n	30c70 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   30c5c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   30c5e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   30c62:	601c      	str	r4, [r3, #0]
	list->tail = node;
   30c64:	606c      	str	r4, [r5, #4]
}
   30c66:	e012      	b.n	30c8e <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   30c68:	686a      	ldr	r2, [r5, #4]
   30c6a:	4293      	cmp	r3, r2
   30c6c:	d0f6      	beq.n	30c5c <add_to_waitq_locked+0x1c>
   30c6e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   30c70:	2b00      	cmp	r3, #0
   30c72:	d0f3      	beq.n	30c5c <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   30c74:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   30c78:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   30c7c:	428a      	cmp	r2, r1
   30c7e:	d0f3      	beq.n	30c68 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   30c80:	4291      	cmp	r1, r2
   30c82:	ddf1      	ble.n	30c68 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   30c84:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   30c86:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   30c8a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   30c8c:	605c      	str	r4, [r3, #4]
}
   30c8e:	bd38      	pop	{r3, r4, r5, pc}

00030c90 <z_ready_thread>:
{
   30c90:	b510      	push	{r4, lr}
   30c92:	f04f 0320 	mov.w	r3, #32
   30c96:	f3ef 8411 	mrs	r4, BASEPRI
   30c9a:	f383 8812 	msr	BASEPRI_MAX, r3
   30c9e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   30ca2:	f7fd fd85 	bl	2e7b0 <ready_thread>
	__asm__ volatile(
   30ca6:	f384 8811 	msr	BASEPRI, r4
   30caa:	f3bf 8f6f 	isb	sy
}
   30cae:	bd10      	pop	{r4, pc}

00030cb0 <z_unpend_thread_no_timeout>:
{
   30cb0:	b508      	push	{r3, lr}
	__asm__ volatile(
   30cb2:	f04f 0220 	mov.w	r2, #32
   30cb6:	f3ef 8111 	mrs	r1, BASEPRI
   30cba:	f382 8812 	msr	BASEPRI_MAX, r2
   30cbe:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   30cc2:	6883      	ldr	r3, [r0, #8]
   30cc4:	b10b      	cbz	r3, 30cca <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   30cc6:	f7ff ffb1 	bl	30c2c <unpend_thread_no_timeout>
	__asm__ volatile(
   30cca:	f381 8811 	msr	BASEPRI, r1
   30cce:	f3bf 8f6f 	isb	sy
}
   30cd2:	bd08      	pop	{r3, pc}

00030cd4 <z_sched_wake_thread>:
{
   30cd4:	b538      	push	{r3, r4, r5, lr}
   30cd6:	4604      	mov	r4, r0
	__asm__ volatile(
   30cd8:	f04f 0320 	mov.w	r3, #32
   30cdc:	f3ef 8511 	mrs	r5, BASEPRI
   30ce0:	f383 8812 	msr	BASEPRI_MAX, r3
   30ce4:	f3bf 8f6f 	isb	sy
		if (!killed) {
   30ce8:	7b43      	ldrb	r3, [r0, #13]
   30cea:	f013 0f28 	tst.w	r3, #40	; 0x28
   30cee:	d10b      	bne.n	30d08 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   30cf0:	6883      	ldr	r3, [r0, #8]
   30cf2:	b10b      	cbz	r3, 30cf8 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   30cf4:	f7ff ff9a 	bl	30c2c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   30cf8:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   30cfa:	b951      	cbnz	r1, 30d12 <z_sched_wake_thread+0x3e>
   30cfc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   30d00:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   30d02:	4620      	mov	r0, r4
   30d04:	f7fd fd54 	bl	2e7b0 <ready_thread>
	__asm__ volatile(
   30d08:	f385 8811 	msr	BASEPRI, r5
   30d0c:	f3bf 8f6f 	isb	sy
}
   30d10:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   30d12:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   30d16:	e7f3      	b.n	30d00 <z_sched_wake_thread+0x2c>

00030d18 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   30d18:	2101      	movs	r1, #1
   30d1a:	3818      	subs	r0, #24
   30d1c:	f7ff bfda 	b.w	30cd4 <z_sched_wake_thread>

00030d20 <z_unpend1_no_timeout>:
{
   30d20:	b508      	push	{r3, lr}
   30d22:	4603      	mov	r3, r0
	__asm__ volatile(
   30d24:	f04f 0220 	mov.w	r2, #32
   30d28:	f3ef 8111 	mrs	r1, BASEPRI
   30d2c:	f382 8812 	msr	BASEPRI_MAX, r2
   30d30:	f3bf 8f6f 	isb	sy
	return list->head == list;
   30d34:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30d36:	4283      	cmp	r3, r0
   30d38:	d007      	beq.n	30d4a <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   30d3a:	b108      	cbz	r0, 30d40 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   30d3c:	f7ff ff76 	bl	30c2c <unpend_thread_no_timeout>
	__asm__ volatile(
   30d40:	f381 8811 	msr	BASEPRI, r1
   30d44:	f3bf 8f6f 	isb	sy
}
   30d48:	bd08      	pop	{r3, pc}
   30d4a:	2000      	movs	r0, #0
   30d4c:	e7f8      	b.n	30d40 <z_unpend1_no_timeout+0x20>

00030d4e <z_unpend_first_thread>:
{
   30d4e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   30d50:	f04f 0320 	mov.w	r3, #32
   30d54:	f3ef 8511 	mrs	r5, BASEPRI
   30d58:	f383 8812 	msr	BASEPRI_MAX, r3
   30d5c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   30d60:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30d62:	42a0      	cmp	r0, r4
   30d64:	d00d      	beq.n	30d82 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   30d66:	b134      	cbz	r4, 30d76 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   30d68:	4620      	mov	r0, r4
   30d6a:	f7ff ff5f 	bl	30c2c <unpend_thread_no_timeout>
   30d6e:	f104 0018 	add.w	r0, r4, #24
   30d72:	f000 f869 	bl	30e48 <z_abort_timeout>
	__asm__ volatile(
   30d76:	f385 8811 	msr	BASEPRI, r5
   30d7a:	f3bf 8f6f 	isb	sy
}
   30d7e:	4620      	mov	r0, r4
   30d80:	bd38      	pop	{r3, r4, r5, pc}
   30d82:	2400      	movs	r4, #0
   30d84:	e7f7      	b.n	30d76 <z_unpend_first_thread+0x28>

00030d86 <z_unpend_thread>:
{
   30d86:	b510      	push	{r4, lr}
   30d88:	4601      	mov	r1, r0
	__asm__ volatile(
   30d8a:	f04f 0320 	mov.w	r3, #32
   30d8e:	f3ef 8411 	mrs	r4, BASEPRI
   30d92:	f383 8812 	msr	BASEPRI_MAX, r3
   30d96:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   30d9a:	6883      	ldr	r3, [r0, #8]
   30d9c:	b10b      	cbz	r3, 30da2 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   30d9e:	f7ff ff45 	bl	30c2c <unpend_thread_no_timeout>
	__asm__ volatile(
   30da2:	f384 8811 	msr	BASEPRI, r4
   30da6:	f3bf 8f6f 	isb	sy
}
   30daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30dae:	f101 0018 	add.w	r0, r1, #24
   30db2:	f000 b849 	b.w	30e48 <z_abort_timeout>

00030db6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   30db6:	4603      	mov	r3, r0
   30db8:	b920      	cbnz	r0, 30dc4 <z_reschedule_irqlock+0xe>
   30dba:	f3ef 8205 	mrs	r2, IPSR
   30dbe:	b90a      	cbnz	r2, 30dc4 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   30dc0:	f7f8 be90 	b.w	29ae4 <arch_swap>
   30dc4:	f383 8811 	msr	BASEPRI, r3
   30dc8:	f3bf 8f6f 	isb	sy
}
   30dcc:	4770      	bx	lr

00030dce <z_reschedule_unlocked>:
	__asm__ volatile(
   30dce:	f04f 0320 	mov.w	r3, #32
   30dd2:	f3ef 8011 	mrs	r0, BASEPRI
   30dd6:	f383 8812 	msr	BASEPRI_MAX, r3
   30dda:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   30dde:	f7ff bfea 	b.w	30db6 <z_reschedule_irqlock>

00030de2 <z_unpend_all>:
{
   30de2:	b538      	push	{r3, r4, r5, lr}
   30de4:	4605      	mov	r5, r0
	int need_sched = 0;
   30de6:	2000      	movs	r0, #0
	return list->head == list;
   30de8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30dea:	42a5      	cmp	r5, r4
   30dec:	d000      	beq.n	30df0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   30dee:	b904      	cbnz	r4, 30df2 <z_unpend_all+0x10>
}
   30df0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   30df2:	4620      	mov	r0, r4
   30df4:	f7ff ffc7 	bl	30d86 <z_unpend_thread>
		z_ready_thread(thread);
   30df8:	4620      	mov	r0, r4
   30dfa:	f7ff ff49 	bl	30c90 <z_ready_thread>
		need_sched = 1;
   30dfe:	2001      	movs	r0, #1
   30e00:	e7f2      	b.n	30de8 <z_unpend_all+0x6>

00030e02 <z_sched_wake>:
{
   30e02:	b538      	push	{r3, r4, r5, lr}
   30e04:	f04f 0320 	mov.w	r3, #32
   30e08:	f3ef 8511 	mrs	r5, BASEPRI
   30e0c:	f383 8812 	msr	BASEPRI_MAX, r3
   30e10:	f3bf 8f6f 	isb	sy
	return list->head == list;
   30e14:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30e16:	42a0      	cmp	r0, r4
   30e18:	d012      	beq.n	30e40 <z_sched_wake+0x3e>
		if (thread != NULL) {
   30e1a:	b19c      	cbz	r4, 30e44 <z_sched_wake+0x42>
   30e1c:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
   30e1e:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   30e20:	4620      	mov	r0, r4
   30e22:	f7ff ff03 	bl	30c2c <unpend_thread_no_timeout>
   30e26:	f104 0018 	add.w	r0, r4, #24
   30e2a:	f000 f80d 	bl	30e48 <z_abort_timeout>
			ready_thread(thread);
   30e2e:	4620      	mov	r0, r4
   30e30:	f7fd fcbe 	bl	2e7b0 <ready_thread>
			ret = true;
   30e34:	2001      	movs	r0, #1
	__asm__ volatile(
   30e36:	f385 8811 	msr	BASEPRI, r5
   30e3a:	f3bf 8f6f 	isb	sy
}
   30e3e:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   30e40:	2000      	movs	r0, #0
   30e42:	e7f8      	b.n	30e36 <z_sched_wake+0x34>
   30e44:	4620      	mov	r0, r4
   30e46:	e7f6      	b.n	30e36 <z_sched_wake+0x34>

00030e48 <z_abort_timeout>:
{
   30e48:	b510      	push	{r4, lr}
	__asm__ volatile(
   30e4a:	f04f 0220 	mov.w	r2, #32
   30e4e:	f3ef 8411 	mrs	r4, BASEPRI
   30e52:	f382 8812 	msr	BASEPRI_MAX, r2
   30e56:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   30e5a:	6803      	ldr	r3, [r0, #0]
   30e5c:	b13b      	cbz	r3, 30e6e <z_abort_timeout+0x26>
			remove_timeout(to);
   30e5e:	f7fd ffab 	bl	2edb8 <remove_timeout>
			ret = 0;
   30e62:	2000      	movs	r0, #0
	__asm__ volatile(
   30e64:	f384 8811 	msr	BASEPRI, r4
   30e68:	f3bf 8f6f 	isb	sy
}
   30e6c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   30e6e:	f06f 0015 	mvn.w	r0, #21
   30e72:	e7f7      	b.n	30e64 <z_abort_timeout+0x1c>

00030e74 <z_get_next_timeout_expiry>:
{
   30e74:	b510      	push	{r4, lr}
	__asm__ volatile(
   30e76:	f04f 0320 	mov.w	r3, #32
   30e7a:	f3ef 8411 	mrs	r4, BASEPRI
   30e7e:	f383 8812 	msr	BASEPRI_MAX, r3
   30e82:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   30e86:	f7fd ff77 	bl	2ed78 <next_timeout>
	__asm__ volatile(
   30e8a:	f384 8811 	msr	BASEPRI, r4
   30e8e:	f3bf 8f6f 	isb	sy
}
   30e92:	bd10      	pop	{r4, pc}

00030e94 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   30e94:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   30e96:	f7fe f88b 	bl	2efb0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   30e9a:	bd08      	pop	{r3, pc}

00030e9c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   30e9c:	f7fe b888 	b.w	2efb0 <sys_clock_tick_get>

00030ea0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   30ea0:	b108      	cbz	r0, 30ea6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   30ea2:	f7f9 bacd 	b.w	2a440 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   30ea6:	4770      	bx	lr

00030ea8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30ea8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   30eac:	bf08      	it	eq
   30eae:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   30eb2:	b538      	push	{r3, r4, r5, lr}
   30eb4:	460c      	mov	r4, r1
   30eb6:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30eb8:	d014      	beq.n	30ee4 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   30eba:	4308      	orrs	r0, r1
   30ebc:	d103      	bne.n	30ec6 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   30ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   30ec2:	f7fe b875 	b.w	2efb0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   30ec6:	f06f 0001 	mvn.w	r0, #1
   30eca:	1b40      	subs	r0, r0, r5
   30ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30ed0:	eb63 0101 	sbc.w	r1, r3, r1
   30ed4:	2900      	cmp	r1, #0
   30ed6:	da04      	bge.n	30ee2 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   30ed8:	f7fe f86a 	bl	2efb0 <sys_clock_tick_get>
   30edc:	1940      	adds	r0, r0, r5
   30ede:	eb41 0104 	adc.w	r1, r1, r4
}
   30ee2:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   30ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30ee8:	4601      	mov	r1, r0
   30eea:	e7fa      	b.n	30ee2 <sys_clock_timeout_end_calc+0x3a>

00030eec <k_timer_init>:
	timer->status = 0U;
   30eec:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   30eee:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   30ef2:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   30ef6:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   30efa:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   30efe:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   30f00:	6343      	str	r3, [r0, #52]	; 0x34
}
   30f02:	4770      	bx	lr

00030f04 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   30f04:	b510      	push	{r4, lr}
   30f06:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   30f08:	f7ff ff9e 	bl	30e48 <z_abort_timeout>

	if (inactive) {
   30f0c:	b9b0      	cbnz	r0, 30f3c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   30f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30f10:	b10b      	cbz	r3, 30f16 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   30f12:	4620      	mov	r0, r4
   30f14:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   30f16:	f104 0018 	add.w	r0, r4, #24
   30f1a:	f7ff ff01 	bl	30d20 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   30f1e:	b168      	cbz	r0, 30f3c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   30f20:	f7ff feb6 	bl	30c90 <z_ready_thread>
	__asm__ volatile(
   30f24:	f04f 0320 	mov.w	r3, #32
   30f28:	f3ef 8011 	mrs	r0, BASEPRI
   30f2c:	f383 8812 	msr	BASEPRI_MAX, r3
   30f30:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   30f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30f38:	f7ff bf3d 	b.w	30db6 <z_reschedule_irqlock>
   30f3c:	bd10      	pop	{r4, pc}

00030f3e <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   30f3e:	3204      	adds	r2, #4
{
   30f40:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   30f42:	4604      	mov	r4, r0
   30f44:	d208      	bcs.n	30f58 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   30f46:	2600      	movs	r6, #0
   30f48:	2700      	movs	r7, #0
   30f4a:	e9cd 6700 	strd	r6, r7, [sp]
   30f4e:	f041 0104 	orr.w	r1, r1, #4
   30f52:	f000 f816 	bl	30f82 <k_heap_aligned_alloc>
	if (mem == NULL) {
   30f56:	b910      	cbnz	r0, 30f5e <z_heap_aligned_alloc+0x20>
		return NULL;
   30f58:	2000      	movs	r0, #0
}
   30f5a:	b002      	add	sp, #8
   30f5c:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   30f5e:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   30f62:	e7fa      	b.n	30f5a <z_heap_aligned_alloc+0x1c>

00030f64 <k_free>:
	if (ptr != NULL) {
   30f64:	b120      	cbz	r0, 30f70 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   30f66:	1f01      	subs	r1, r0, #4
   30f68:	f850 0c04 	ldr.w	r0, [r0, #-4]
   30f6c:	f000 b856 	b.w	3101c <k_heap_free>
}
   30f70:	4770      	bx	lr

00030f72 <k_heap_init>:
{
   30f72:	b410      	push	{r4}
   30f74:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   30f78:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   30f7c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   30f7e:	f7fe bb62 	b.w	2f646 <sys_heap_init>

00030f82 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   30f82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30f86:	b085      	sub	sp, #20
   30f88:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   30f8c:	4607      	mov	r7, r0
   30f8e:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30f90:	4650      	mov	r0, sl
   30f92:	4621      	mov	r1, r4
{
   30f94:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30f96:	f7ff ff87 	bl	30ea8 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   30f9a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   30f9e:	bf08      	it	eq
   30fa0:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30fa4:	4605      	mov	r5, r0
   30fa6:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   30fa8:	bf04      	itt	eq
   30faa:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   30fae:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   30fb2:	f107 0a14 	add.w	sl, r7, #20
   30fb6:	f04f 0320 	mov.w	r3, #32
   30fba:	f3ef 8411 	mrs	r4, BASEPRI
   30fbe:	f383 8812 	msr	BASEPRI_MAX, r3
   30fc2:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   30fc6:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   30fca:	464a      	mov	r2, r9
   30fcc:	4641      	mov	r1, r8
   30fce:	4638      	mov	r0, r7
   30fd0:	f7fe fad2 	bl	2f578 <sys_heap_aligned_alloc>
   30fd4:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   30fd6:	f7fd ffeb 	bl	2efb0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   30fda:	9b03      	ldr	r3, [sp, #12]
   30fdc:	b13b      	cbz	r3, 30fee <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   30fde:	f384 8811 	msr	BASEPRI, r4
   30fe2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   30fe6:	4618      	mov	r0, r3
   30fe8:	b005      	add	sp, #20
   30fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   30fee:	1a28      	subs	r0, r5, r0
   30ff0:	eb66 0101 	sbc.w	r1, r6, r1
   30ff4:	2801      	cmp	r0, #1
   30ff6:	f171 0200 	sbcs.w	r2, r1, #0
   30ffa:	dbf0      	blt.n	30fde <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   30ffc:	e9cd 0100 	strd	r0, r1, [sp]
   31000:	465a      	mov	r2, fp
   31002:	4621      	mov	r1, r4
   31004:	4650      	mov	r0, sl
   31006:	f7fd fc67 	bl	2e8d8 <z_pend_curr>
	__asm__ volatile(
   3100a:	f04f 0320 	mov.w	r3, #32
   3100e:	f3ef 8411 	mrs	r4, BASEPRI
   31012:	f383 8812 	msr	BASEPRI_MAX, r3
   31016:	f3bf 8f6f 	isb	sy
	return k;
   3101a:	e7d6      	b.n	30fca <k_heap_aligned_alloc+0x48>

0003101c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   3101c:	b538      	push	{r3, r4, r5, lr}
   3101e:	4604      	mov	r4, r0
   31020:	f04f 0320 	mov.w	r3, #32
   31024:	f3ef 8511 	mrs	r5, BASEPRI
   31028:	f383 8812 	msr	BASEPRI_MAX, r3
   3102c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   31030:	f7fe fa6a 	bl	2f508 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   31034:	f104 000c 	add.w	r0, r4, #12
   31038:	f7ff fed3 	bl	30de2 <z_unpend_all>
   3103c:	b130      	cbz	r0, 3104c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   3103e:	4629      	mov	r1, r5
   31040:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   31044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   31048:	f7fd bcaa 	b.w	2e9a0 <z_reschedule>
	__asm__ volatile(
   3104c:	f385 8811 	msr	BASEPRI, r5
   31050:	f3bf 8f6f 	isb	sy
}
   31054:	bd38      	pop	{r3, r4, r5, pc}
	...
